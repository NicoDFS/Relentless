// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: github.com/loomnetwork/gamechain/types/zb/zb_data/zb_data.proto-cs
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Loom.Google.Protobuf;
using pbc = global::Loom.Google.Protobuf.Collections;
using pbr = global::Loom.Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Loom.ZombieBattleground.Protobuf {

  /// <summary>Holder for reflection information generated from github.com/loomnetwork/gamechain/types/zb/zb_data/zb_data.proto-cs</summary>
  public static partial class ZbDataReflection {

    #region Descriptor
    /// <summary>File descriptor for github.com/loomnetwork/gamechain/types/zb/zb_data/zb_data.proto-cs</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ZbDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CkJnaXRodWIuY29tL2xvb21uZXR3b3JrL2dhbWVjaGFpbi90eXBlcy96Yi96",
            "Yl9kYXRhL3piX2RhdGEucHJvdG8tY3MaMGdpdGh1Yi5jb20vbG9vbW5ldHdv",
            "cmsvZ28tbG9vbS90eXBlcy90eXBlcy5wcm90bxpKZ2l0aHViLmNvbS9sb29t",
            "bmV0d29yay9nYW1lY2hhaW4vdHlwZXMvbnVsbGFibGUvbnVsbGFibGVfcGIv",
            "bnVsbGFibGUucHJvdG8aQWdpdGh1Yi5jb20vbG9vbW5ldHdvcmsvZ2FtZWNo",
            "YWluL3R5cGVzL3piL3piX2VudW1zL3piX2VudW1zLnByb3RvGktnaXRodWIu",
            "Y29tL2xvb21uZXR3b3JrL2dhbWVjaGFpbi90eXBlcy96Yi96Yl9jdXN0b21i",
            "YXNlL3piX2N1c3RvbWJhc2UucHJvdG8iigIKCEluaXREYXRhEhsKDGRlZmF1",
            "bHREZWNrcxgBIAMoCzIFLkRlY2sSLgoRZGVmYXVsdENvbGxlY3Rpb24YAiAD",
            "KAsyEy5DYXJkQ29sbGVjdGlvbkNhcmQSFAoFY2FyZHMYAyADKAsyBS5DYXJk",
            "EiUKCW92ZXJsb3JkcxgEIAMoCzISLk92ZXJsb3JkUHJvdG90eXBlEhgKB2Fp",
            "RGVja3MYBSADKAsyBy5BSURlY2sSDwoHdmVyc2lvbhgGIAEoCRIYCgZvcmFj",
            "bGUYByABKAsyCC5BZGRyZXNzEi8KEG92ZXJsb3JkTGV2ZWxpbmcYCCABKAsy",
            "FS5PdmVybG9yZExldmVsaW5nRGF0YSLrAQoHQWNjb3VudBIPCgd1c2VyX2lk",
            "GAEgASgJEh0KFXBob25lX251bWJlcl92ZXJpZmllZBgCIAEoCBIXCg9yZXdh",
            "cmRfcmVkZWVtZWQYAyABKAgSFgoOaXNfa2lja3N0YXJ0ZXIYBCABKAgSDQoF",
            "aW1hZ2UYBSABKAkSGgoSZW1haWxfbm90aWZpY2F0aW9uGAYgASgIEhEKCWVs",
            "b19zY29yZRgHIAEoAxIUCgxjdXJyZW50X3RpZXIYCCABKAUSHAoUZ2FtZV9t",
            "ZW1iZXJzaGlwX3RpZXIYCSABKAUSDQoFb3duZXIYCiABKAwirgEKBERlY2sS",
            "CgoCaWQYASABKAMSDAoEbmFtZRgCIAEoCRISCgpvdmVybG9yZElkGAMgASgD",
            "EhgKBWNhcmRzGAQgAygLMgkuRGVja0NhcmQSLQoMcHJpbWFyeVNraWxsGAUg",
            "ASgOMhcuT3ZlcmxvcmRTa2lsbFR5cGUuRW51bRIvCg5zZWNvbmRhcnlTa2ls",
            "bBgGIAEoDjIXLk92ZXJsb3JkU2tpbGxUeXBlLkVudW0i6AMKBENhcmQSGQoH",
            "Y2FyZEtleRgXIAEoCzIILkNhcmRLZXkSHAoEa2luZBgCIAEoDjIOLkNhcmRL",
            "aW5kLkVudW0SHgoHZmFjdGlvbhgDIAEoDjINLkZhY3Rpb24uRW51bRIMCgRu",
            "YW1lGAQgASgJEhMKC2Rlc2NyaXB0aW9uGAUgASgJEhIKCmZsYXZvclRleHQY",
            "BiABKAkSDwoHcGljdHVyZRgHIAEoCRIgCgRyYW5rGAggASgOMhIuQ3JlYXR1",
            "cmVSYW5rLkVudW0SHAoEdHlwZRgJIAEoDjIOLkNhcmRUeXBlLkVudW0SDQoF",
            "ZnJhbWUYCyABKAkSDgoGZGFtYWdlGAwgASgFEg8KB2RlZmVuc2UYDSABKAUS",
            "DAoEY29zdBgOIAEoBRIrChBwaWN0dXJlVHJhbnNmb3JtGBAgASgLMhEuUGlj",
            "dHVyZVRyYW5zZm9ybRIfCglhYmlsaXRpZXMYESADKAsyDC5BYmlsaXR5RGF0",
            "YRIuCg91bmlxdWVBbmltYXRpb24YEiABKA4yFS5VbmlxdWVBbmltYXRpb24u",
            "RW51bRIOCgZoaWRkZW4YFCABKAgSIQoJb3ZlcnJpZGVzGBYgASgLMg4uQ2Fy",
            "ZE92ZXJyaWRlc0oECAEQAkoECBMQFEoECBUQFiKuBAoNQ2FyZE92ZXJyaWRl",
            "cxIgCgRraW5kGAEgASgLMhIuQ2FyZEtpbmRFbnVtVmFsdWUSIgoHZmFjdGlv",
            "bhgCIAEoCzIRLkZhY3Rpb25FbnVtVmFsdWUSGgoEbmFtZRgDIAEoCzIMLlN0",
            "cmluZ1ZhbHVlEiEKC2Rlc2NyaXB0aW9uGAQgASgLMgwuU3RyaW5nVmFsdWUS",
            "IAoKZmxhdm9yVGV4dBgFIAEoCzIMLlN0cmluZ1ZhbHVlEh0KB3BpY3R1cmUY",
            "BiABKAsyDC5TdHJpbmdWYWx1ZRIkCgRyYW5rGAcgASgLMhYuQ3JlYXR1cmVS",
            "YW5rRW51bVZhbHVlEiAKBHR5cGUYCCABKAsyEi5DYXJkVHlwZUVudW1WYWx1",
            "ZRIbCgVmcmFtZRgJIAEoCzIMLlN0cmluZ1ZhbHVlEhsKBmRhbWFnZRgKIAEo",
            "CzILLkludDMyVmFsdWUSHAoHZGVmZW5zZRgLIAEoCzILLkludDMyVmFsdWUS",
            "GQoEY29zdBgMIAEoCzILLkludDMyVmFsdWUSKwoQcGljdHVyZVRyYW5zZm9y",
            "bRgNIAEoCzIRLlBpY3R1cmVUcmFuc2Zvcm0SHwoJYWJpbGl0aWVzGA4gAygL",
            "MgwuQWJpbGl0eURhdGESMgoPdW5pcXVlQW5pbWF0aW9uGA8gASgLMhkuVW5p",
            "cXVlQW5pbWF0aW9uRW51bVZhbHVlEhoKBmhpZGRlbhgQIAEoCzIKLkJvb2xW",
            "YWx1ZSKoAQoYQ2FyZEluc3RhbmNlU3BlY2lmaWNEYXRhEg4KBmRhbWFnZRgB",
            "IAEoBRIPCgdkZWZlbnNlGAIgASgFEhwKBHR5cGUYAyABKA4yDi5DYXJkVHlw",
            "ZS5FbnVtEh4KB2ZhY3Rpb24YBCABKA4yDS5GYWN0aW9uLkVudW0SDAoEY29z",
            "dBgFIAEoBRIfCglhYmlsaXRpZXMYBiADKAsyDC5BYmlsaXR5RGF0YSJRChBQ",
            "aWN0dXJlVHJhbnNmb3JtEh8KCHBvc2l0aW9uGAEgASgLMg0uVmVjdG9yM0Zs",
            "b2F0EhwKBXNjYWxlGAIgASgLMg0uVmVjdG9yM0Zsb2F0Ii8KDFZlY3RvcjNG",
            "bG9hdBIJCgF4GAEgASgCEgkKAXkYAiABKAISCQoBehgDIAEoAiIiCgpWZWN0",
            "b3IySW50EgkKAXgYASABKAUSCQoBeRgCIAEoBSJACgRSZWN0Eh0KCHBvc2l0",
            "aW9uGAEgASgLMgsuVmVjdG9yMkludBIZCgRzaXplGAIgASgLMgsuVmVjdG9y",
            "MkludCIgCghDYXJkTGlzdBIUCgVjYXJkcxgBIAMoCzIFLkNhcmQiSwoSQ2Fy",
            "ZENvbGxlY3Rpb25DYXJkEg4KBmFtb3VudBgCIAEoAxIZCgdjYXJkS2V5GAQg",
            "ASgLMgguQ2FyZEtleUoECAEQAkoECAMQBCJBCghEZWNrQ2FyZBIOCgZhbW91",
            "bnQYAiABKAMSGQoHY2FyZEtleRgEIAEoCzIILkNhcmRLZXlKBAgBEAJKBAgD",
            "EAQiIwoLQ2FyZExpYnJhcnkSFAoFY2FyZHMYASADKAsyBS5DYXJkIucBChFP",
            "dmVybG9yZFByb3RvdHlwZRIKCgJpZBgBIAEoAxIMCgRpY29uGAIgASgJEgwK",
            "BG5hbWUYAyABKAkSGAoQc2hvcnREZXNjcmlwdGlvbhgEIAEoCRIXCg9sb25n",
            "RGVzY3JpcHRpb24YBSABKAkSHgoHZmFjdGlvbhgGIAEoDjINLkZhY3Rpb24u",
            "RW51bRInCgZza2lsbHMYCSADKAsyFy5PdmVybG9yZFNraWxsUHJvdG90eXBl",
            "EhYKDmluaXRpYWxEZWZlbnNlGAwgASgFSgQIBxAISgQICBAJSgQIChALSgQI",
            "CxAMImQKEE92ZXJsb3JkVXNlckRhdGESEwoLcHJvdG90eXBlSWQYASABKAMS",
            "EgoKZXhwZXJpZW5jZRgCIAEoAxINCgVsZXZlbBgDIAEoAxIYChB1bmxvY2tl",
            "ZFNraWxsSWRzGAQgAygDImIKFE92ZXJsb3JkVXNlckluc3RhbmNlEiUKCXBy",
            "b3RvdHlwZRgBIAEoCzISLk92ZXJsb3JkUHJvdG90eXBlEiMKCHVzZXJEYXRh",
            "GAIgASgLMhEuT3ZlcmxvcmRVc2VyRGF0YSJmChVPdmVybG9yZE1hdGNoSW5z",
            "dGFuY2USHwoKaW5zdGFuY2VJZBgBIAEoCzILLkluc3RhbmNlSWQSDwoHZGVm",
            "ZW5zZRgCIAEoBRILCgNnb28YAyABKAUSDgoGbWF4R29vGAQgASgFIqsDChZP",
            "dmVybG9yZFNraWxsUHJvdG90eXBlEg0KBXRpdGxlGAEgASgJEiYKBXNraWxs",
            "GAIgASgOMhcuT3ZlcmxvcmRTa2lsbFR5cGUuRW51bRIQCghpY29uUGF0aBgD",
            "IAEoCRITCgtkZXNjcmlwdGlvbhgEIAEoCRInCgxza2lsbFRhcmdldHMYBSAD",
            "KA4yES5Ta2lsbFRhcmdldC5FbnVtEjgKF3RhcmdldFVuaXRTcGVjaWFsU3Rh",
            "dHVzGAYgASgOMhcuVW5pdFNwZWNpYWxTdGF0dXMuRW51bRIlCg50YXJnZXRG",
            "YWN0aW9ucxgHIAMoDjINLkZhY3Rpb24uRW51bRINCgV2YWx1ZRgIIAEoBRIQ",
            "Cghjb29sZG93bhgJIAEoBRIXCg9pbml0aWFsQ29vbGRvd24YCiABKAUSDgoG",
            "ZGFtYWdlGAsgASgFEg0KBWNvdW50GAwgASgFEgoKAmlkGA0gASgDEhcKD2Nh",
            "blNlbGVjdFRhcmdldBgPIAEoCBISCgp1bml0U3RhdHVzGBAgASgJEhEKCXNp",
            "bmdsZVVzZRgRIAEoCEoECA4QDyI+ChVPdmVybG9yZFByb3RvdHlwZUxpc3QS",
            "JQoJb3ZlcmxvcmRzGAEgAygLMhIuT3ZlcmxvcmRQcm90b3R5cGUiRAoUT3Zl",
            "cmxvcmRVc2VyRGF0YUxpc3QSLAoRb3ZlcmxvcmRzVXNlckRhdGEYASADKAsy",
            "ES5PdmVybG9yZFVzZXJEYXRhIjgKEkNhcmRDb2xsZWN0aW9uTGlzdBIiCgVj",
            "YXJkcxgBIAMoCzITLkNhcmRDb2xsZWN0aW9uQ2FyZCIgCghEZWNrTGlzdBIU",
            "CgVkZWNrcxgBIAMoCzIFLkRlY2siOQoGQUlEZWNrEhMKBGRlY2sYASABKAsy",
            "BS5EZWNrEhoKBHR5cGUYAiABKA4yDC5BSVR5cGUuRW51bSIkCgpBSURlY2tM",
            "aXN0EhYKBWRlY2tzGAEgAygLMgcuQUlEZWNrIrMBChRPdmVybG9yZExldmVs",
            "aW5nRGF0YRIdCgdyZXdhcmRzGAEgAygLMgwuTGV2ZWxSZXdhcmQSLAoRZXhw",
            "ZXJpZW5jZUFjdGlvbnMYAiADKAsyES5FeHBlcmllbmNlQWN0aW9uEg0KBWZp",
            "eGVkGAMgASgFEhYKDmV4cGVyaWVuY2VTdGVwGAQgASgFEhUKDWdvb1Jld2Fy",
            "ZFN0ZXAYBSABKAUSEAoIbWF4TGV2ZWwYBiABKAUijAEKC0xldmVsUmV3YXJk",
            "Eg0KBWxldmVsGAEgASgFEi8KC3NraWxsUmV3YXJkGAIgASgLMhguT3Zlcmxv",
            "cmRTa2lsbFJld2FyZEl0ZW1IABIzChFib29zdGVyUGFja1Jld2FyZBgDIAEo",
            "CzIWLkJvb3N0ZXJQYWNrUmV3YXJkSXRlbUgAQggKBnJld2FyZCItChdPdmVy",
            "bG9yZFNraWxsUmV3YXJkSXRlbRISCgpza2lsbEluZGV4GAEgASgFIicKFUJv",
            "b3N0ZXJQYWNrUmV3YXJkSXRlbRIOCgZhbW91bnQYASABKAUiUgoQRXhwZXJp",
            "ZW5jZUFjdGlvbhIqCgZhY3Rpb24YASABKA4yGi5FeHBlcmllbmNlQWN0aW9u",
            "VHlwZS5FbnVtEhIKCmV4cGVyaWVuY2UYAiABKAUikAEKDUNvbnRyYWN0U3Rh",
            "dGUSIgoabGFzdFBsYXNtYWNoYWluQmxvY2tOdW1iZXIYASABKAQSKQoXY3Vy",
            "cmVudEZpYXRQdXJjaGFzZVR4SWQYBSABKAsyCC5CaWdVSW50Eh4KFmN1cnJl",
            "bnRPcmFjbGVDb21tYW5kSWQYBiABKARKBAgCEANKBAgDEARKBAgEEAUi7QEK",
            "FUNvbnRyYWN0Q29uZmlndXJhdGlvbhIjChtmaWF0UHVyY2hhc2VDb250cmFj",
            "dFZlcnNpb24YASABKAQSKQoXaW5pdGlhbEZpYXRQdXJjaGFzZVR4SWQYAiAB",
            "KAsyCC5CaWdVSW50EiYKHnVzZUNhcmRMaWJyYXJ5QXNVc2VyQ29sbGVjdGlv",
            "bhgDIAEoCBI1ChVkYXRhV2lwZUNvbmZpZ3VyYXRpb24YBCADKAsyFi5EYXRh",
            "V2lwZUNvbmZpZ3VyYXRpb24SJQodY2FyZENvbGxlY3Rpb25TeW5jRGF0YVZl",
            "cnNpb24YBSABKAkipwQKC1BsYXllclN0YXRlEgoKAmlkGAEgASgJEi0KDWN1",
            "cnJlbnRBY3Rpb24YAiABKA4yFi5QbGF5ZXJBY3Rpb25UeXBlLkVudW0SIgoL",
            "Y2FyZHNJbkhhbmQYBCADKAsyDS5DYXJkSW5zdGFuY2USIgoLY2FyZHNJblBs",
            "YXkYBSADKAsyDS5DYXJkSW5zdGFuY2USIgoLY2FyZHNJbkRlY2sYBiADKAsy",
            "DS5DYXJkSW5zdGFuY2USEwoEZGVjaxgHIAEoCzIFLkRlY2sSDwoHZGVmZW5z",
            "ZRgIIAEoBRISCgpjdXJyZW50R29vGAkgASgFEhAKCGdvb1ZpYWxzGAogASgF",
            "EhQKDGhhc0RyYXduQ2FyZBgLIAEoCBInChBjYXJkc0luR3JhdmV5YXJkGAwg",
            "AygLMg0uQ2FyZEluc3RhbmNlEh8KF2luaXRpYWxDYXJkc0luSGFuZENvdW50",
            "GA0gASgFEhYKDm1heENhcmRzSW5QbGF5GA4gASgFEhYKDm1heENhcmRzSW5I",
            "YW5kGA8gASgFEhMKC21heEdvb1ZpYWxzGBAgASgFEhAKCHR1cm5UaW1lGBEg",
            "ASgFEhIKCnR1cm5OdW1iZXIYEiABKAUSHwoKaW5zdGFuY2VJZBgTIAEoCzIL",
            "Lkluc3RhbmNlSWQSJAoNbXVsbGlnYW5DYXJkcxgUIAMoCzINLkNhcmRJbnN0",
            "YW5jZRINCgVpbmRleBgVIAEoBUoECAMQBCJMChJJbml0aWFsUGxheWVyU3Rh",
            "dGUSCgoCaWQYASABKAkSFQoNbWF0Y2hBY2NlcHRlZBgCIAEoCBITCgRkZWNr",
            "GAMgASgLMgUuRGVjayIwCg9QbGF5ZXJUaW1lc3RhbXASCgoCaWQYASABKAkS",
            "EQoJdXBkYXRlZEF0GAIgASgDIrsDCgVNYXRjaBIKCgJpZBgBIAEoAxIOCgZ0",
            "b3BpY3MYAiADKAkSKQoMcGxheWVyU3RhdGVzGAMgAygLMhMuSW5pdGlhbFBs",
            "YXllclN0YXRlEh0KBnN0YXR1cxgEIAEoDjINLk1hdGNoLlN0YXR1cxIPCgd2",
            "ZXJzaW9uGAUgASgJEhIKCnJhbmRvbVNlZWQYBiABKAMSIAoOY3VzdG9tR2Ft",
            "ZUFkZHIYByABKAsyCC5BZGRyZXNzEhEKCWNyZWF0ZWRBdBgIIAEoAxIbChN1",
            "c2VCYWNrZW5kR2FtZUxvZ2ljGAkgASgIEikKD3BsYXllckxhc3RTZWVucxgK",
            "IAMoCzIQLlBsYXllclRpbWVzdGFtcBI0ChFwbGF5ZXJEZWJ1Z0NoZWF0cxgL",
            "IAMoCzIZLkRlYnVnQ2hlYXRzQ29uZmlndXJhdGlvbiJ0CgZTdGF0dXMSCwoH",
            "Q3JlYXRlZBAAEgwKCE1hdGNoaW5nEAESCwoHU3RhcnRlZBACEgsKB1BsYXlp",
            "bmcQAxIOCgpQbGF5ZXJMZWZ0EAQSCQoFRW5kZWQQBRIMCghUaW1lZG91dBAG",
            "EgwKCENhbmNlbGVkEAciNgoTTWF0Y2hNYWtpbmdJbmZvTGlzdBIfCgVpbmZv",
            "cxgBIAMoCzIQLk1hdGNoTWFraW5nSW5mbyI2Cg9NYXRjaE1ha2luZ0luZm8S",
            "DgoGdXNlcklkGAEgASgJEhMKBGRlY2sYAiABKAsyBS5EZWNrIoYFCgxQbGF5",
            "ZXJBY3Rpb24SKgoKYWN0aW9uVHlwZRgBIAEoDjIWLlBsYXllckFjdGlvblR5",
            "cGUuRW51bRIQCghwbGF5ZXJJZBgCIAEoCRInCgdlbmRUdXJuGAMgASgLMhQu",
            "UGxheWVyQWN0aW9uRW5kVHVybkgAEikKCG11bGxpZ2FuGAQgASgLMhUuUGxh",
            "eWVyQWN0aW9uTXVsbGlnYW5IABIpCghjYXJkUGxheRgFIAEoCzIVLlBsYXll",
            "ckFjdGlvbkNhcmRQbGF5SAASLQoKY2FyZEF0dGFjaxgGIAEoCzIXLlBsYXll",
            "ckFjdGlvbkNhcmRBdHRhY2tIABI3Cg9jYXJkQWJpbGl0eVVzZWQYByABKAsy",
            "HC5QbGF5ZXJBY3Rpb25DYXJkQWJpbGl0eVVzZWRIABI7ChFvdmVybG9yZFNr",
            "aWxsVXNlZBgIIAEoCzIeLlBsYXllckFjdGlvbk92ZXJsb3JkU2tpbGxVc2Vk",
            "SAASLQoKbGVhdmVNYXRjaBgJIAEoCzIXLlBsYXllckFjdGlvbkxlYXZlTWF0",
            "Y2hIABIpCghyYW5rQnVmZhgKIAEoCzIVLlBsYXllckFjdGlvblJhbmtCdWZm",
            "SAASSQoYY2hlYXREZXN0cm95Q2FyZHNPbkJvYXJkGAsgASgLMiUuUGxheWVy",
            "QWN0aW9uQ2hlYXREZXN0cm95Q2FyZHNPbkJvYXJkSAASLAoOYWN0aW9uT3V0",
            "Y29tZXMYDiADKAsyFC5QbGF5ZXJBY3Rpb25PdXRjb21lEhEKCWNyZWF0ZWRB",
            "dBgPIAEoAxIkChBjb250cm9sR2FtZVN0YXRlGBAgASgLMgouR2FtZVN0YXRl",
            "QggKBmFjdGlvbiKeAQoRUGxheWVyQWN0aW9uRXZlbnQSIwoMcGxheWVyQWN0",
            "aW9uGAEgASgLMg0uUGxheWVyQWN0aW9uEhUKBW1hdGNoGAIgASgLMgYuTWF0",
            "Y2gSFwoFYmxvY2sYAyABKAsyCC5IaXN0b3J5EhoKEkN1cnJlbnRBY3Rpb25J",
            "bmRleBgEIAEoAxIYChBjcmVhdGVkQnlCYWNrZW5kGAUgASgIIlwKDVBsYXll",
            "clByb2ZpbGUSOAoQcmVnaXN0cmF0aW9uRGF0YRgBIAEoCzIeLlBsYXllclBy",
            "b2ZpbGVSZWdpc3RyYXRpb25EYXRhEhEKCXVwZGF0ZWRBdBgCIAEoAyLJAQod",
            "UGxheWVyUHJvZmlsZVJlZ2lzdHJhdGlvbkRhdGESDgoGdXNlcklkGAEgASgJ",
            "Eg4KBmRlY2tJZBgCIAEoAxIPCgd2ZXJzaW9uGAMgASgJEhwKCmN1c3RvbUdh",
            "bWUYBCABKAsyCC5BZGRyZXNzEgwKBHRhZ3MYBSADKAkSGwoTdXNlQmFja2Vu",
            "ZEdhbWVMb2dpYxgGIAEoCBIuCgtkZWJ1Z0NoZWF0cxgHIAEoCzIZLkRlYnVn",
            "Q2hlYXRzQ29uZmlndXJhdGlvbiI0CgpQbGF5ZXJQb29sEiYKDnBsYXllclBy",
            "b2ZpbGVzGAEgAygLMg4uUGxheWVyUHJvZmlsZSIfCgpNYXRjaENvdW50EhEK",
            "CWN1cnJlbnRJZBgBIAEoAyKDAgoYRGVidWdDaGVhdHNDb25maWd1cmF0aW9u",
            "Eg8KB2VuYWJsZWQYASABKAgSFQoNdXNlQ3VzdG9tRGVjaxgCIAEoCBIZCgpj",
            "dXN0b21EZWNrGAMgASgLMgUuRGVjaxIbChN1c2VDdXN0b21SYW5kb21TZWVk",
            "GAQgASgIEhgKEGN1c3RvbVJhbmRvbVNlZWQYBSABKAMSGgoSZGlzYWJsZURl",
            "Y2tTaHVmZmxlGAYgASgIEhwKFGZvcmNlRmlyc3RUdXJuVXNlcklkGAcgASgJ",
            "Eh0KFWlnbm9yZUdvb1JlcXVpcmVtZW50cxgIIAEoCBIUCgxza2lwTXVsbGln",
            "YW4YCSABKAgipQEKCEdhbWVNb2RlEgoKAklEGAEgASgJEgwKBG5hbWUYAiAB",
            "KAkSEwoLZGVzY3JpcHRpb24YAyABKAkSDwoHdmVyc2lvbhgEIAEoCRIlCg5n",
            "YW1lX21vZGVfdHlwZRgFIAEoDjINLkdhbWVNb2RlVHlwZRIZCgdhZGRyZXNz",
            "GAYgASgLMgguQWRkcmVzcxIXCgVPd25lchgHIAEoCzIILkFkZHJlc3MiLQoM",
            "R2FtZU1vZGVMaXN0Eh0KCmdhbWVfbW9kZXMYASADKAsyCS5HYW1lTW9kZSIr",
            "ChtDdXN0b21HYW1lTW9kZUN1c3RvbVVpTGFiZWwSDAoEdGV4dBgBIAEoCSI/",
            "ChxDdXN0b21HYW1lTW9kZUN1c3RvbVVpQnV0dG9uEg0KBXRpdGxlGAEgASgJ",
            "EhAKCGNhbGxEYXRhGAIgASgMIqEBCh1DdXN0b21HYW1lTW9kZUN1c3RvbVVp",
            "RWxlbWVudBITCgRyZWN0GAEgASgLMgUuUmVjdBItCgVsYWJlbBgCIAEoCzIc",
            "LkN1c3RvbUdhbWVNb2RlQ3VzdG9tVWlMYWJlbEgAEi8KBmJ1dHRvbhgDIAEo",
            "CzIdLkN1c3RvbUdhbWVNb2RlQ3VzdG9tVWlCdXR0b25IAEILCgl1aUVsZW1l",
            "bnQiigIKCUdhbWVTdGF0ZRIKCgJpZBgBIAEoAxIPCgdpc0VuZGVkGAIgASgI",
            "EhoKEmN1cnJlbnRQbGF5ZXJJbmRleBgDIAEoBRIiCgxwbGF5ZXJTdGF0ZXMY",
            "BCADKAsyDC5QbGF5ZXJTdGF0ZRIaChJjdXJyZW50QWN0aW9uSW5kZXgYBSAB",
            "KAMSJAoNcGxheWVyQWN0aW9ucxgGIAMoCzINLlBsYXllckFjdGlvbhISCgpy",
            "YW5kb21TZWVkGAcgASgDEg4KBndpbm5lchgIIAEoCRIPCgd2ZXJzaW9uGAkg",
            "ASgJEhEKCWNyZWF0ZWRBdBgKIAEoAxIWCg5uZXh0SW5zdGFuY2VJZBgLIAEo",
            "BSJhChRDYXJkQ2hvb3NhYmxlQWJpbGl0eRITCgtkZXNjcmlwdGlvbhgBIAEo",
            "CRIhCgthYmlsaXR5RGF0YRgCIAEoCzIMLkFiaWxpdHlEYXRhEhEKCWF0dHJp",
            "YnV0ZRgDIAEoCSL9CAoLQWJpbGl0eURhdGESIgoHYWJpbGl0eRgBIAEoDjIR",
            "LkFiaWxpdHlUeXBlLkVudW0SJwoIYWN0aXZpdHkYAiABKA4yFS5BYmlsaXR5",
            "QWN0aXZpdHkuRW51bRIlCgd0cmlnZ2VyGAMgASgOMhQuQWJpbGl0eVRyaWdn",
            "ZXIuRW51bRIdCgd0YXJnZXRzGAQgAygOMgwuVGFyZ2V0LkVudW0SGAoEc3Rh",
            "dBgFIAEoDjIKLlN0YXQuRW51bRIeCgdmYWN0aW9uGAYgASgOMg0uRmFjdGlv",
            "bi5FbnVtEiMKBmVmZmVjdBgHIAEoDjITLkFiaWxpdHlFZmZlY3QuRW51bRIy",
            "ChFhdHRhY2tSZXN0cmljdGlvbhgIIAEoDjIXLkF0dGFja1Jlc3RyaWN0aW9u",
            "LkVudW0SJgoOdGFyZ2V0Q2FyZFR5cGUYCSABKA4yDi5DYXJkVHlwZS5FbnVt",
            "EjgKF3RhcmdldFVuaXRTcGVjaWFsU3RhdHVzGAogASgOMhcuVW5pdFNwZWNp",
            "YWxTdGF0dXMuRW51bRImCg50YXJnZXRVbml0VHlwZRgLIAEoDjIOLkNhcmRU",
            "eXBlLkVudW0SDQoFdmFsdWUYDCABKAUSDgoGZGFtYWdlGA0gASgFEg8KB2Rl",
            "ZmVuc2UYDiABKAUSDAoEbmFtZRgPIAEoCRINCgV0dXJucxgQIAEoBRINCgVj",
            "b3VudBgRIAEoBRINCgVkZWxheRgSIAEoBRI6ChN2aXN1YWxFZmZlY3RzVG9Q",
            "bGF5GBMgAygLMh0uQWJpbGl0eURhdGEuVmlzdWFsRWZmZWN0SW5mbxI+Chdn",
            "YW1lTWVjaGFuaWNEZXNjcmlwdGlvbhgUIAEoDjIdLkdhbWVNZWNoYW5pY0Rl",
            "c2NyaXB0aW9uLkVudW0SJAoNdGFyZ2V0RmFjdGlvbhgVIAEoDjINLkZhY3Rp",
            "b24uRW51bRIrCgpzdWJUcmlnZ2VyGBYgASgOMhcuQWJpbGl0eVN1YlRyaWdn",
            "ZXIuRW51bRIxChJjaG9vc2FibGVBYmlsaXRpZXMYFyADKAsyFS5DYXJkQ2hv",
            "b3NhYmxlQWJpbGl0eRIQCghkZWZlbnNlMhgYIAEoBRIMCgRjb3N0GBkgASgF",
            "EiYKDnRhcmdldENhcmRLaW5kGBogASgOMg4uQ2FyZEtpbmQuRW51bRJJCiJ0",
            "YXJnZXRHYW1lTWVjaGFuaWNEZXNjcmlwdGlvblR5cGVzGBsgAygOMh0uR2Ft",
            "ZU1lY2hhbmljRGVzY3JpcHRpb24uRW51bRq9AQoQVmlzdWFsRWZmZWN0SW5m",
            "bxI8CgRUeXBlGAEgASgOMi4uQWJpbGl0eURhdGEuVmlzdWFsRWZmZWN0SW5m",
            "by5WaXN1YWxFZmZlY3RUeXBlEgwKBFBhdGgYAiABKAkiXQoQVmlzdWFsRWZm",
            "ZWN0VHlwZRINCglVbmRlZmluZWQQABIKCgZJbXBhY3QQARIKCgZNb3ZpbmcQ",
            "AhIQCgxJbXBhY3RfSGVhdnkQAxIQCgxJbXBhY3RfRmVyYWwQBCI6Cg9DYXJk",
            "QWJpbGl0eVJhZ2USEwoLYWRkZWREYW1hZ2UYASABKAUSEgoKd2FzQXBwbGll",
            "ZBgCIAEoCCJBCipDYXJkQWJpbGl0eUFkZGl0aW9uYWxEYW1hZ2VUb0hlYXZ5",
            "SW5BdHRhY2sSEwoLYWRkZWREYW1hZ2UYASABKAUiSQoVQ2FyZEFiaWxpdHlD",
            "aGFuZ2VTdGF0EhYKDnN0YXRBZGp1c3RtZW50GAEgASgFEhgKBHN0YXQYAiAB",
            "KA4yCi5TdGF0LkVudW0iUQoZQ2FyZEFiaWxpdHlQcmlvcml0eUF0dGFjaxIa",
            "ChJhdHRhY2tlck9sZERlZmVuc2UYASABKAUSGAoQdGFyZ2V0T2xkRGVmZW5z",
            "ZRgCIAEoBSJpChRDYXJkQWJpbGl0eVJlYW5pbWF0ZRIVCg1kZWZhdWx0RGFt",
            "YWdlGAEgASgFEhYKDmRlZmF1bHREZWZlbnNlGAIgASgFEiIKC25ld0luc3Rh",
            "bmNlGAMgASgLMg0uQ2FyZEluc3RhbmNlIj8KGUNhcmRBYmlsaXR5QXR0YWNr",
            "T3ZlcmxvcmQSDgoGZGFtYWdlGAEgASgFEhIKCndhc0FwcGxpZWQYAiABKAgi",
            "TwotQ2FyZEFiaWxpdHlSZXBsYWNlVW5pdHNXaXRoVHlwZU9uU3Ryb25nZXJP",
            "bmVzEh4KB2ZhY3Rpb24YASABKA4yDS5GYWN0aW9uLkVudW0iRQorQ2FyZEFi",
            "aWxpdHlEZWFsRGFtYWdlVG9UaGlzQW5kQWRqYWNlbnRVbml0cxIWCg5hZGph",
            "Y2VudERhbWFnZRgBIAEoBSJICiZDYXJkQWJpbGl0eURldm91clpvbWJpZUFu",
            "ZENvbWJpbmVTdGF0cxIeCgdmYWN0aW9uGAEgASgOMg0uRmFjdGlvbi5FbnVt",
            "Is0QChNQbGF5ZXJBY3Rpb25PdXRjb21lEjsKBHJhZ2UYASABKAsyKy5QbGF5",
            "ZXJBY3Rpb25PdXRjb21lLkNhcmRBYmlsaXR5UmFnZU91dGNvbWVIABJPCg5w",
            "cmlvcml0eUF0dGFjaxgCIAEoCzI1LlBsYXllckFjdGlvbk91dGNvbWUuQ2Fy",
            "ZEFiaWxpdHlQcmlvcml0eUF0dGFja091dGNvbWVIABJxCh9hZGRpdGlvbmFs",
            "RGFtYWdlVG9IZWF2eUluQXR0YWNrGAMgASgLMkYuUGxheWVyQWN0aW9uT3V0",
            "Y29tZS5DYXJkQWJpbGl0eUFkZGl0aW9uYWxEYW1hZ2VUb0hlYXZ5SW5BdHRh",
            "Y2tPdXRjb21lSAASRwoKY2hhbmdlU3RhdBgFIAEoCzIxLlBsYXllckFjdGlv",
            "bk91dGNvbWUuQ2FyZEFiaWxpdHlDaGFuZ2VTdGF0T3V0Y29tZUgAEkUKCXJl",
            "YW5pbWF0ZRgEIAEoCzIwLlBsYXllckFjdGlvbk91dGNvbWUuQ2FyZEFiaWxp",
            "dHlSZWFuaW1hdGVPdXRjb21lSAASTwoOYXR0YWNrT3ZlcmxvcmQYBiABKAsy",
            "NS5QbGF5ZXJBY3Rpb25PdXRjb21lLkNhcmRBYmlsaXR5QXR0YWNrT3Zlcmxv",
            "cmRPdXRjb21lSAASPAoKY2FyZEF0dGFjaxgHIAEoCzImLlBsYXllckFjdGlv",
            "bk91dGNvbWUuQ2FyZEF0dGFja091dGNvbWVIABJ3CiJyZXBsYWNlVW5pdHNX",
            "aXRoVHlwZU9uU3Ryb25nZXJPbmVzGAggASgLMkkuUGxheWVyQWN0aW9uT3V0",
            "Y29tZS5DYXJkQWJpbGl0eVJlcGxhY2VVbml0c1dpdGhUeXBlT25TdHJvbmdl",
            "ck9uZXNPdXRjb21lSAAScwogZGVhbERhbWFnZVRvVGhpc0FuZEFkamFjZW50",
            "VW5pdHMYCSABKAsyRy5QbGF5ZXJBY3Rpb25PdXRjb21lLkNhcmRBYmlsaXR5",
            "RGVhbERhbWFnZVRvVGhpc0FuZEFkamFjZW50VW5pdHNPdXRjb21lSAASaQob",
            "ZGV2b3VyWm9tYmllQW5kQ29tYmluZVN0YXRzGAogASgLMkIuUGxheWVyQWN0",
            "aW9uT3V0Y29tZS5DYXJkQWJpbGl0eURldm91clpvbWJpZUFuZENvbWJpbmVT",
            "dGF0c091dGNvbWVIABpMChZDYXJkQWJpbGl0eVJhZ2VPdXRjb21lEh8KCmlu",
            "c3RhbmNlSWQYASABKAsyCy5JbnN0YW5jZUlkEhEKCW5ld0RhbWFnZRgCIAEo",
            "BRpXCiBDYXJkQWJpbGl0eVByaW9yaXR5QXR0YWNrT3V0Y29tZRIfCgppbnN0",
            "YW5jZUlkGAEgASgLMgsuSW5zdGFuY2VJZBISCgpuZXdEZWZlbnNlGAIgASgF",
            "GkUKG0NhcmRBYmlsaXR5UmVhbmltYXRlT3V0Y29tZRImCg9uZXdDYXJkSW5z",
            "dGFuY2UYASABKAsyDS5DYXJkSW5zdGFuY2UaaQoxQ2FyZEFiaWxpdHlBZGRp",
            "dGlvbmFsRGFtYWdlVG9IZWF2eUluQXR0YWNrT3V0Y29tZRIfCgppbnN0YW5j",
            "ZUlkGAEgASgLMgsuSW5zdGFuY2VJZBITCgthZGRlZERhbWFnZRgCIAEoBRqn",
            "AQocQ2FyZEFiaWxpdHlDaGFuZ2VTdGF0T3V0Y29tZRIfCgppbnN0YW5jZUlk",
            "GAEgASgLMgsuSW5zdGFuY2VJZBIRCgluZXdEYW1hZ2UYAiABKAUSEgoKbmV3",
            "RGVmZW5zZRgDIAEoBRIYCgRzdGF0GAQgASgOMgouU3RhdC5FbnVtEiUKEHRh",
            "cmdldEluc3RhbmNlSWQYBSABKAsyCy5JbnN0YW5jZUlkGmcKIENhcmRBYmls",
            "aXR5QXR0YWNrT3ZlcmxvcmRPdXRjb21lEh8KCmluc3RhbmNlSWQYASABKAsy",
            "Cy5JbnN0YW5jZUlkEhIKCm5ld0RlZmVuc2UYAiABKAUSDgoGZGFtYWdlGAMg",
            "ASgFGpkBChFDYXJkQXR0YWNrT3V0Y29tZRInChJhdHRhY2tlckluc3RhbmNl",
            "SWQYASABKAsyCy5JbnN0YW5jZUlkEiUKEHRhcmdldEluc3RhbmNlSWQYAiAB",
            "KAsyCy5JbnN0YW5jZUlkEhoKEmF0dGFja2VyTmV3RGVmZW5zZRgDIAEoBRIY",
            "ChB0YXJnZXROZXdEZWZlbnNlGAQgASgFGpoCCjRDYXJkQWJpbGl0eVJlcGxh",
            "Y2VVbml0c1dpdGhUeXBlT25TdHJvbmdlck9uZXNPdXRjb21lEnMKEG5ld0Nh",
            "cmRJbnN0YW5jZXMYASADKAsyWS5QbGF5ZXJBY3Rpb25PdXRjb21lLkNhcmRB",
            "YmlsaXR5UmVwbGFjZVVuaXRzV2l0aFR5cGVPblN0cm9uZ2VyT25lc091dGNv",
            "bWUuTmV3Q2FyZEluc3RhbmNlEiMKDm9sZEluc3RhbmNlSWRzGAIgAygLMgsu",
            "SW5zdGFuY2VJZBpICg9OZXdDYXJkSW5zdGFuY2USIwoMY2FyZEluc3RhbmNl",
            "GAEgASgLMg0uQ2FyZEluc3RhbmNlEhAKCHBvc2l0aW9uGAIgASgFGjQKMkNh",
            "cmRBYmlsaXR5RGVhbERhbWFnZVRvVGhpc0FuZEFkamFjZW50VW5pdHNPdXRj",
            "b21lGlcKLUNhcmRBYmlsaXR5RGV2b3VyWm9tYmllQW5kQ29tYmluZVN0YXRz",
            "T3V0Y29tZRImChF0YXJnZXRJbnN0YW5jZUlkcxgBIAMoCzILLkluc3RhbmNl",
            "SWRCCQoHT3V0Y29tZSKlBQoTQ2FyZEFiaWxpdHlJbnN0YW5jZRIgCgRyYWdl",
            "GAEgASgLMhAuQ2FyZEFiaWxpdHlSYWdlSAASNAoOcHJpb3JpdHlBdHRhY2sY",
            "AiABKAsyGi5DYXJkQWJpbGl0eVByaW9yaXR5QXR0YWNrSAASKgoJcmVhbmlt",
            "YXRlGAUgASgLMhUuQ2FyZEFiaWxpdHlSZWFuaW1hdGVIABJWCh9hZGRpdGlv",
            "bmFsRGFtYWdlVG9IZWF2eUluQXR0YWNrGAYgASgLMisuQ2FyZEFiaWxpdHlB",
            "ZGRpdGlvbmFsRGFtYWdlVG9IZWF2eUluQXR0YWNrSAASLAoKY2hhbmdlU3Rh",
            "dBgHIAEoCzIWLkNhcmRBYmlsaXR5Q2hhbmdlU3RhdEgAEjQKDmF0dGFja092",
            "ZXJsb3JkGAggASgLMhouQ2FyZEFiaWxpdHlBdHRhY2tPdmVybG9yZEgAElwK",
            "InJlcGxhY2VVbml0c1dpdGhUeXBlT25TdHJvbmdlck9uZXMYCSABKAsyLi5D",
            "YXJkQWJpbGl0eVJlcGxhY2VVbml0c1dpdGhUeXBlT25TdHJvbmdlck9uZXNI",
            "ABJYCiBkZWFsRGFtYWdlVG9UaGlzQW5kQWRqYWNlbnRVbml0cxgKIAEoCzIs",
            "LkNhcmRBYmlsaXR5RGVhbERhbWFnZVRvVGhpc0FuZEFkamFjZW50VW5pdHNI",
            "ABJOChtkZXZvdXJab21iaWVBbmRDb21iaW5lU3RhdHMYCyABKAsyJy5DYXJk",
            "QWJpbGl0eURldm91clpvbWJpZUFuZENvbWJpbmVTdGF0c0gAEhAKCGlzQWN0",
            "aXZlGAMgASgIEiUKB3RyaWdnZXIYBCABKA4yFC5BYmlsaXR5VHJpZ2dlci5F",
            "bnVtQg0KC0FiaWxpdHlUeXBlIowCCgxDYXJkSW5zdGFuY2USGAoJcHJvdG90",
            "eXBlGAEgASgLMgUuQ2FyZBIfCgppbnN0YW5jZUlkGAIgASgLMgsuSW5zdGFu",
            "Y2VJZBIrCghpbnN0YW5jZRgDIAEoCzIZLkNhcmRJbnN0YW5jZVNwZWNpZmlj",
            "RGF0YRINCgVvd25lchgEIAEoCRIlCh1hYmlsaXRpZXNJbnN0YW5jZXNJbml0",
            "aWFsaXplZBgFIAEoCBIwChJhYmlsaXRpZXNJbnN0YW5jZXMYBiADKAsyFC5D",
            "YXJkQWJpbGl0eUluc3RhbmNlEhgKBHpvbmUYByABKA4yCi5ab25lLnR5cGUS",
            "EgoKb3duZXJJbmRleBgIIAEoBSIdCgtEYXRhSWRPd25lchIOCgZkYXRhSWQY",
            "ASABKAUiIAoIQ2FyZERlY2sSFAoFY2FyZHMYASADKAsyBS5DYXJkIhgKCklu",
            "c3RhbmNlSWQSCgoCaWQYASABKAUiWgoaT3ZlcmxvcmRTa2lsbE1hdGNoSW5z",
            "dGFuY2USKgoJcHJvdG90eXBlGAEgASgLMhcuT3ZlcmxvcmRTa2lsbFByb3Rv",
            "dHlwZRIQCghjb29sZG93bhgCIAEoBSKTAQoWUGxheWVyQWN0aW9uTGVhdmVN",
            "YXRjaBIOCgZ3aW5uZXIYASABKAkSLgoGcmVhc29uGAIgASgOMh4uUGxheWVy",
            "QWN0aW9uTGVhdmVNYXRjaC5SZWFzb24iOQoGUmVhc29uEggKBE5vbmUQABIP",
            "CgtQbGF5ZXJMZWF2ZRABEhQKEEtlZXBBbGl2ZVRpbWVvdXQQAiJDChRQbGF5",
            "ZXJBY3Rpb25DYXJkUGxheRIZCgRjYXJkGAEgASgLMgsuSW5zdGFuY2VJZBIQ",
            "Cghwb3NpdGlvbhgCIAEoBSJJChRQbGF5ZXJBY3Rpb25SYW5rQnVmZhIZCgRj",
            "YXJkGAEgASgLMgsuSW5zdGFuY2VJZBIWCgd0YXJnZXRzGAIgAygLMgUuVW5p",
            "dCJOChZQbGF5ZXJBY3Rpb25DYXJkQXR0YWNrEh0KCGF0dGFja2VyGAEgASgL",
            "MgsuSW5zdGFuY2VJZBIVCgZ0YXJnZXQYAiABKAsyBS5Vbml0IngKG1BsYXll",
            "ckFjdGlvbkNhcmRBYmlsaXR5VXNlZBIZCgRjYXJkGAEgASgLMgsuSW5zdGFu",
            "Y2VJZBIWCgd0YXJnZXRzGAMgAygLMgUuVW5pdBImCgtBYmlsaXR5VHlwZRgE",
            "IAEoDjIRLkFiaWxpdHlUeXBlLkVudW0iXwodUGxheWVyQWN0aW9uT3Zlcmxv",
            "cmRTa2lsbFVzZWQSDwoHU2tpbGxJZBgBIAEoAxIVCgZ0YXJnZXQYAiABKAsy",
            "BS5Vbml0EhYKB3RhcmdldHMYAyADKAsyBS5Vbml0IhUKE1BsYXllckFjdGlv",
            "bkVuZFR1cm4iPAoUUGxheWVyQWN0aW9uTXVsbGlnYW4SJAoPbXVsbGlnYW5l",
            "ZENhcmRzGAEgAygLMgsuSW5zdGFuY2VJZCJLCiRQbGF5ZXJBY3Rpb25DaGVh",
            "dERlc3Ryb3lDYXJkc09uQm9hcmQSIwoOZGVzdHJveWVkQ2FyZHMYASADKAsy",
            "Cy5JbnN0YW5jZUlkIjUKD1N0YXJ0R2FtZUFjdGlvbhIiCgxwbGF5ZXJTdGF0",
            "ZXMYASADKAsyDC5QbGF5ZXJTdGF0ZSJGCgRVbml0Eh8KCmluc3RhbmNlSWQY",
            "ASABKAsyCy5JbnN0YW5jZUlkEh0KCVBhcmFtZXRlchgDIAEoCzIKLlBhcmFt",
            "ZXRlciI+CglQYXJhbWV0ZXISDgoGRGFtYWdlGAEgASgFEg8KB0RlZmVuc2UY",
            "AiABKAUSEAoIQ2FyZE5hbWUYAyABKAkiSgoKR2FtZVJlcGxheRIeCgdhY3Rp",
            "b25zGAUgAygLMg0uUGxheWVyQWN0aW9uEhwKBmJsb2NrcxgGIAMoCzIMLkhp",
            "c3RvcnlEYXRhIikKBlBsYXllchIKCgJpZBgBIAEoCRITCgRkZWNrGAIgASgL",
            "MgUuRGVjayIlCgdIaXN0b3J5EhoKBGxpc3QYASADKAsyDC5IaXN0b3J5RGF0",
            "YSKNAgoLSGlzdG9yeURhdGESKAoKY3JlYXRlR2FtZRgBIAEoCzISLkhpc3Rv",
            "cnlDcmVhdGVHYW1lSAASLAoMZnVsbEluc3RhbmNlGAIgASgLMhQuSGlzdG9y",
            "eUZ1bGxJbnN0YW5jZUgAEigKDHNob3dJbnN0YW5jZRgDIAEoCzIQLkhpc3Rv",
            "cnlJbnN0YW5jZUgAEiQKDGhpZGVJbnN0YW5jZRgEIAEoCzIMLkhpc3RvcnlI",
            "aWRlSAASKgoOY2hhbmdlSW5zdGFuY2UYBSABKAsyEC5IaXN0b3J5SW5zdGFu",
            "Y2VIABIiCgdlbmRHYW1lGAYgASgLMg8uSGlzdG9yeUVuZEdhbWVIAEIGCgRk",
            "YXRhImIKEUhpc3RvcnlDcmVhdGVHYW1lEg4KBmdhbWVJZBgBIAEoAxIYCgdw",
            "bGF5ZXJzGAIgAygLMgcuUGxheWVyEhIKCnJhbmRvbVNlZWQYAyABKAMSDwoH",
            "dmVyc2lvbhgEIAEoCSJXChNIaXN0b3J5RnVsbEluc3RhbmNlEh8KCmluc3Rh",
            "bmNlSWQYASABKAsyCy5JbnN0YW5jZUlkEg4KBmRhbWFnZRgCIAEoBRIPCgdk",
            "ZWZlbnNlGAMgASgFImQKD0hpc3RvcnlJbnN0YW5jZRIfCgppbnN0YW5jZUlk",
            "GAEgASgLMgsuSW5zdGFuY2VJZBINCgV2YWx1ZRgCIAEoBSIhCgZjaGFuZ2US",
            "CgoGRGFtYWdlEAASCwoHRGVmZW5zZRABIkMKC0hpc3RvcnlIaWRlEh8KCmlu",
            "c3RhbmNlSWQYASABKAsyCy5JbnN0YW5jZUlkEhMKBHpvbmUYAiABKAsyBS5a",
            "b25lIkMKDkhpc3RvcnlFbmRHYW1lEg8KB21hdGNoSWQYASABKAMSDgoGdXNl",
            "cklkGAIgASgJEhAKCHdpbm5lcklkGAMgASgJIjgKGURlZmF1bHREZWNrc0Rh",
            "dGFDb250YWluZXISGwoMZGVmYXVsdERlY2tzGAEgAygLMgUuRGVjayJQCh5E",
            "ZWZhdWx0Q29sbGVjdGlvbkRhdGFDb250YWluZXISLgoRZGVmYXVsdENvbGxl",
            "Y3Rpb24YASADKAsyEy5DYXJkQ29sbGVjdGlvbkNhcmQiMAoYQ2FyZExpYnJh",
            "cnlEYXRhQ29udGFpbmVyEhQKBWNhcmRzGAEgAygLMgUuQ2FyZCJICh9PdmVy",
            "bG9yZFByb3RvdHlwZXNEYXRhQ29udGFpbmVyEiUKCW92ZXJsb3JkcxgBIAMo",
            "CzISLk92ZXJsb3JkUHJvdG90eXBlIjAKFEFJRGVja3NEYXRhQ29udGFpbmVy",
            "EhgKB2FpRGVja3MYASADKAsyBy5BSURlY2siUAodT3ZlcmxvcmRMZXZlbGlu",
            "Z0RhdGFDb250YWluZXISLwoQb3ZlcmxvcmRMZXZlbGluZxgBIAEoCzIVLk92",
            "ZXJsb3JkTGV2ZWxpbmdEYXRhIl4KFURhdGFXaXBlQ29uZmlndXJhdGlvbhIP",
            "Cgd2ZXJzaW9uGAEgASgJEhEKCXdpcGVEZWNrcxgCIAEoCBIhChl3aXBlT3Zl",
            "cmxvcmRVc2VySW5zdGFuY2VzGAMgASgIIksKGURhdGFXaXBlQ29uZmlndXJh",
            "dGlvbkxpc3QSLgoOY29uZmlndXJhdGlvbnMYASADKAsyFi5EYXRhV2lwZUNv",
            "bmZpZ3VyYXRpb24iVwoeRGF0YVdpcGVDb25maWd1cmF0aW9uQ29udGFpbmVy",
            "EjUKFWRhdGFXaXBlQ29uZmlndXJhdGlvbhgBIAMoCzIWLkRhdGFXaXBlQ29u",
            "ZmlndXJhdGlvbiLGAQoSVXNlclBlcnNpc3RlbnREYXRhEhkKB2FkZHJlc3MY",
            "ASABKAsyCC5BZGRyZXNzEiEKGWV4ZWN1dGVkRGF0YVdpcGVzVmVyc2lvbnMY",
            "AiADKAkSOAowbGFzdEZ1bGxDYXJkQ29sbGVjdGlvblN5bmNQbGFzbWFjaGFp",
            "bkJsb2NrSGVpZ2h0GAMgASgEEjgKMGxhc3RBdXRvQ2FyZENvbGxlY3Rpb25T",
            "eW5jUGxhc21hY2hhaW5CbG9ja0hlaWdodBgEIAEoBCK6AQoUTm90aWZpY2F0",
            "aW9uRW5kTWF0Y2gSEgoKb3ZlcmxvcmRJZBgBIAEoAxIQCghvbGRMZXZlbBgC",
            "IAEoBRIVCg1vbGRFeHBlcmllbmNlGAMgASgDEhAKCG5ld0xldmVsGAQgASgF",
            "EhUKDW5ld0V4cGVyaWVuY2UYBSABKAMSHQoHcmV3YXJkcxgGIAMoCzIMLkxl",
            "dmVsUmV3YXJkEg0KBWlzV2luGAcgASgIEg4KBmRlY2tJZBgIIAEoAyIoChBO",
            "b3RpZmljYXRpb25UeXBlIhQKBEVudW0SDAoIRW5kTWF0Y2gQACKcAQoMTm90",
            "aWZpY2F0aW9uEgoKAmlkGAEgASgFEhEKCWNyZWF0ZWRBdBgCIAEoAxIMCgRz",
            "ZWVuGAMgASgIEiQKBHR5cGUYBCABKA4yFi5Ob3RpZmljYXRpb25UeXBlLkVu",
            "dW0SKQoIZW5kTWF0Y2gYCiABKAsyFS5Ob3RpZmljYXRpb25FbmRNYXRjaEgA",
            "Qg4KDE5vdGlmaWNhdGlvbiI4ChBOb3RpZmljYXRpb25MaXN0EiQKDW5vdGlm",
            "aWNhdGlvbnMYASADKAsyDS5Ob3RpZmljYXRpb24iIQoPVXNlcklkQ29udGFp",
            "bmVyEg4KBnVzZXJJZBgBIAEoCSLpAgoZTWludGluZ1RyYW5zYWN0aW9uUmVj",
            "ZWlwdBI/Cgp2ZXJpZnlIYXNoGAEgASgLMisuTWludGluZ1RyYW5zYWN0aW9u",
            "UmVjZWlwdC5WZXJpZnlTaWduUmVzdWx0EhgKBnVzZXJJZBgCIAEoCzIILkJp",
            "Z1VJbnQSDwoHYm9vc3RlchgDIAEoBBINCgVzdXBlchgKIAEoBBILCgNhaXIY",
            "BCABKAQSDQoFZWFydGgYBSABKAQSDAoEZmlyZRgGIAEoBBIMCgRsaWZlGAcg",
            "ASgEEg0KBXRveGljGAggASgEEg0KBXdhdGVyGAkgASgEEg0KBXNtYWxsGAsg",
            "ASgEEg4KBm1pbmlvbhgMIAEoBBIPCgdiaW5hbmNlGA0gASgEEhYKBHR4SWQY",
            "DiABKAsyCC5CaWdVSW50GjMKEFZlcmlmeVNpZ25SZXN1bHQSDAoEaGFzaBgB",
            "IAEoDBIRCglzaWduYXR1cmUYAiABKAwiUwojTWludGluZ1RyYW5zYWN0aW9u",
            "UmVjZWlwdENvbGxlY3Rpb24SLAoIcmVjZWlwdHMYASADKAsyGi5NaW50aW5n",
            "VHJhbnNhY3Rpb25SZWNlaXB0IlIKHkNhcmRBbW91bnRDaGFuZ2VJdGVtc0Nv",
            "bnRhaW5lchIwChFjYXJkQW1vdW50Q2hhbmdlcxgBIAMoCzIVLkNhcmRBbW91",
            "bnRDaGFuZ2VJdGVtIkcKFENhcmRBbW91bnRDaGFuZ2VJdGVtEhkKB2NhcmRL",
            "ZXkYASABKAsyCC5DYXJkS2V5EhQKDGFtb3VudENoYW5nZRgCIAEoAyonCgxH",
            "YW1lTW9kZVR5cGUSDQoJQ29tbXVuaXR5EAASCAoETG9vbRABQiOqAiBMb29t",
            "LlpvbWJpZUJhdHRsZWdyb3VuZC5Qcm90b2J1ZmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Loom.Client.Protobuf.TypesReflection.Descriptor, global::Loom.ZombieBattleground.Protobuf.NullableReflection.Descriptor, global::Loom.ZombieBattleground.Protobuf.ZbEnumsReflection.Descriptor, global::Loom.ZombieBattleground.Protobuf.ZbCustombaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Loom.ZombieBattleground.Protobuf.GameModeType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.InitData), global::Loom.ZombieBattleground.Protobuf.InitData.Parser, new[]{ "DefaultDecks", "DefaultCollection", "Cards", "Overlords", "AiDecks", "Version", "Oracle", "OverlordLeveling" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.Account), global::Loom.ZombieBattleground.Protobuf.Account.Parser, new[]{ "UserId", "PhoneNumberVerified", "RewardRedeemed", "IsKickstarter", "Image", "EmailNotification", "EloScore", "CurrentTier", "GameMembershipTier", "Owner" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.Deck), global::Loom.ZombieBattleground.Protobuf.Deck.Parser, new[]{ "Id", "Name", "OverlordId", "Cards", "PrimarySkill", "SecondarySkill" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.Card), global::Loom.ZombieBattleground.Protobuf.Card.Parser, new[]{ "CardKey", "Kind", "Faction", "Name", "Description", "FlavorText", "Picture", "Rank", "Type", "Frame", "Damage", "Defense", "Cost", "PictureTransform", "Abilities", "UniqueAnimation", "Hidden", "Overrides" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardOverrides), global::Loom.ZombieBattleground.Protobuf.CardOverrides.Parser, new[]{ "Kind", "Faction", "Name", "Description", "FlavorText", "Picture", "Rank", "Type", "Frame", "Damage", "Defense", "Cost", "PictureTransform", "Abilities", "UniqueAnimation", "Hidden" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardInstanceSpecificData), global::Loom.ZombieBattleground.Protobuf.CardInstanceSpecificData.Parser, new[]{ "Damage", "Defense", "Type", "Faction", "Cost", "Abilities" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PictureTransform), global::Loom.ZombieBattleground.Protobuf.PictureTransform.Parser, new[]{ "Position", "Scale" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.Vector3Float), global::Loom.ZombieBattleground.Protobuf.Vector3Float.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.Vector2Int), global::Loom.ZombieBattleground.Protobuf.Vector2Int.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.Rect), global::Loom.ZombieBattleground.Protobuf.Rect.Parser, new[]{ "Position", "Size" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardList), global::Loom.ZombieBattleground.Protobuf.CardList.Parser, new[]{ "Cards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardCollectionCard), global::Loom.ZombieBattleground.Protobuf.CardCollectionCard.Parser, new[]{ "Amount", "CardKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.DeckCard), global::Loom.ZombieBattleground.Protobuf.DeckCard.Parser, new[]{ "Amount", "CardKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardLibrary), global::Loom.ZombieBattleground.Protobuf.CardLibrary.Parser, new[]{ "Cards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.OverlordPrototype), global::Loom.ZombieBattleground.Protobuf.OverlordPrototype.Parser, new[]{ "Id", "Icon", "Name", "ShortDescription", "LongDescription", "Faction", "Skills", "InitialDefense" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.OverlordUserData), global::Loom.ZombieBattleground.Protobuf.OverlordUserData.Parser, new[]{ "PrototypeId", "Experience", "Level", "UnlockedSkillIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.OverlordUserInstance), global::Loom.ZombieBattleground.Protobuf.OverlordUserInstance.Parser, new[]{ "Prototype", "UserData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.OverlordMatchInstance), global::Loom.ZombieBattleground.Protobuf.OverlordMatchInstance.Parser, new[]{ "InstanceId", "Defense", "Goo", "MaxGoo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.OverlordSkillPrototype), global::Loom.ZombieBattleground.Protobuf.OverlordSkillPrototype.Parser, new[]{ "Title", "Skill", "IconPath", "Description", "SkillTargets", "TargetUnitSpecialStatus", "TargetFactions", "Value", "Cooldown", "InitialCooldown", "Damage", "Count", "Id", "CanSelectTarget", "UnitStatus", "SingleUse" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.OverlordPrototypeList), global::Loom.ZombieBattleground.Protobuf.OverlordPrototypeList.Parser, new[]{ "Overlords" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.OverlordUserDataList), global::Loom.ZombieBattleground.Protobuf.OverlordUserDataList.Parser, new[]{ "OverlordsUserData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardCollectionList), global::Loom.ZombieBattleground.Protobuf.CardCollectionList.Parser, new[]{ "Cards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.DeckList), global::Loom.ZombieBattleground.Protobuf.DeckList.Parser, new[]{ "Decks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.AIDeck), global::Loom.ZombieBattleground.Protobuf.AIDeck.Parser, new[]{ "Deck", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.AIDeckList), global::Loom.ZombieBattleground.Protobuf.AIDeckList.Parser, new[]{ "Decks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.OverlordLevelingData), global::Loom.ZombieBattleground.Protobuf.OverlordLevelingData.Parser, new[]{ "Rewards", "ExperienceActions", "Fixed", "ExperienceStep", "GooRewardStep", "MaxLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.LevelReward), global::Loom.ZombieBattleground.Protobuf.LevelReward.Parser, new[]{ "Level", "SkillReward", "BoosterPackReward" }, new[]{ "Reward" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.OverlordSkillRewardItem), global::Loom.ZombieBattleground.Protobuf.OverlordSkillRewardItem.Parser, new[]{ "SkillIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.BoosterPackRewardItem), global::Loom.ZombieBattleground.Protobuf.BoosterPackRewardItem.Parser, new[]{ "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.ExperienceAction), global::Loom.ZombieBattleground.Protobuf.ExperienceAction.Parser, new[]{ "Action", "Experience" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.ContractState), global::Loom.ZombieBattleground.Protobuf.ContractState.Parser, new[]{ "LastPlasmachainBlockNumber", "CurrentFiatPurchaseTxId", "CurrentOracleCommandId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.ContractConfiguration), global::Loom.ZombieBattleground.Protobuf.ContractConfiguration.Parser, new[]{ "FiatPurchaseContractVersion", "InitialFiatPurchaseTxId", "UseCardLibraryAsUserCollection", "DataWipeConfiguration", "CardCollectionSyncDataVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerState), global::Loom.ZombieBattleground.Protobuf.PlayerState.Parser, new[]{ "Id", "CurrentAction", "CardsInHand", "CardsInPlay", "CardsInDeck", "Deck", "Defense", "CurrentGoo", "GooVials", "HasDrawnCard", "CardsInGraveyard", "InitialCardsInHandCount", "MaxCardsInPlay", "MaxCardsInHand", "MaxGooVials", "TurnTime", "TurnNumber", "InstanceId", "MulliganCards", "Index" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.InitialPlayerState), global::Loom.ZombieBattleground.Protobuf.InitialPlayerState.Parser, new[]{ "Id", "MatchAccepted", "Deck" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerTimestamp), global::Loom.ZombieBattleground.Protobuf.PlayerTimestamp.Parser, new[]{ "Id", "UpdatedAt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.Match), global::Loom.ZombieBattleground.Protobuf.Match.Parser, new[]{ "Id", "Topics", "PlayerStates", "Status", "Version", "RandomSeed", "CustomGameAddr", "CreatedAt", "UseBackendGameLogic", "PlayerLastSeens", "PlayerDebugCheats" }, null, new[]{ typeof(global::Loom.ZombieBattleground.Protobuf.Match.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.MatchMakingInfoList), global::Loom.ZombieBattleground.Protobuf.MatchMakingInfoList.Parser, new[]{ "Infos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.MatchMakingInfo), global::Loom.ZombieBattleground.Protobuf.MatchMakingInfo.Parser, new[]{ "UserId", "Deck" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerAction), global::Loom.ZombieBattleground.Protobuf.PlayerAction.Parser, new[]{ "ActionType", "PlayerId", "EndTurn", "Mulligan", "CardPlay", "CardAttack", "CardAbilityUsed", "OverlordSkillUsed", "LeaveMatch", "RankBuff", "CheatDestroyCardsOnBoard", "ActionOutcomes", "CreatedAt", "ControlGameState" }, new[]{ "Action" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionEvent), global::Loom.ZombieBattleground.Protobuf.PlayerActionEvent.Parser, new[]{ "PlayerAction", "Match", "Block", "CurrentActionIndex", "CreatedByBackend" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerProfile), global::Loom.ZombieBattleground.Protobuf.PlayerProfile.Parser, new[]{ "RegistrationData", "UpdatedAt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerProfileRegistrationData), global::Loom.ZombieBattleground.Protobuf.PlayerProfileRegistrationData.Parser, new[]{ "UserId", "DeckId", "Version", "CustomGame", "Tags", "UseBackendGameLogic", "DebugCheats" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerPool), global::Loom.ZombieBattleground.Protobuf.PlayerPool.Parser, new[]{ "PlayerProfiles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.MatchCount), global::Loom.ZombieBattleground.Protobuf.MatchCount.Parser, new[]{ "CurrentId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.DebugCheatsConfiguration), global::Loom.ZombieBattleground.Protobuf.DebugCheatsConfiguration.Parser, new[]{ "Enabled", "UseCustomDeck", "CustomDeck", "UseCustomRandomSeed", "CustomRandomSeed", "DisableDeckShuffle", "ForceFirstTurnUserId", "IgnoreGooRequirements", "SkipMulligan" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GameMode), global::Loom.ZombieBattleground.Protobuf.GameMode.Parser, new[]{ "ID", "Name", "Description", "Version", "GameModeType", "Address", "Owner" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GameModeList), global::Loom.ZombieBattleground.Protobuf.GameModeList.Parser, new[]{ "GameModes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CustomGameModeCustomUiLabel), global::Loom.ZombieBattleground.Protobuf.CustomGameModeCustomUiLabel.Parser, new[]{ "Text" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CustomGameModeCustomUiButton), global::Loom.ZombieBattleground.Protobuf.CustomGameModeCustomUiButton.Parser, new[]{ "Title", "CallData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CustomGameModeCustomUiElement), global::Loom.ZombieBattleground.Protobuf.CustomGameModeCustomUiElement.Parser, new[]{ "Rect", "Label", "Button" }, new[]{ "UiElement" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GameState), global::Loom.ZombieBattleground.Protobuf.GameState.Parser, new[]{ "Id", "IsEnded", "CurrentPlayerIndex", "PlayerStates", "CurrentActionIndex", "PlayerActions", "RandomSeed", "Winner", "Version", "CreatedAt", "NextInstanceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardChoosableAbility), global::Loom.ZombieBattleground.Protobuf.CardChoosableAbility.Parser, new[]{ "Description", "AbilityData", "Attribute" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.AbilityData), global::Loom.ZombieBattleground.Protobuf.AbilityData.Parser, new[]{ "Ability", "Activity", "Trigger", "Targets", "Stat", "Faction", "Effect", "AttackRestriction", "TargetCardType", "TargetUnitSpecialStatus", "TargetUnitType", "Value", "Damage", "Defense", "Name", "Turns", "Count", "Delay", "VisualEffectsToPlay", "GameMechanicDescription", "TargetFaction", "SubTrigger", "ChoosableAbilities", "Defense2", "Cost", "TargetCardKind", "TargetGameMechanicDescriptionTypes" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.AbilityData.Types.VisualEffectInfo), global::Loom.ZombieBattleground.Protobuf.AbilityData.Types.VisualEffectInfo.Parser, new[]{ "Type", "Path" }, null, new[]{ typeof(global::Loom.ZombieBattleground.Protobuf.AbilityData.Types.VisualEffectInfo.Types.VisualEffectType) }, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardAbilityRage), global::Loom.ZombieBattleground.Protobuf.CardAbilityRage.Parser, new[]{ "AddedDamage", "WasApplied" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardAbilityAdditionalDamageToHeavyInAttack), global::Loom.ZombieBattleground.Protobuf.CardAbilityAdditionalDamageToHeavyInAttack.Parser, new[]{ "AddedDamage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardAbilityChangeStat), global::Loom.ZombieBattleground.Protobuf.CardAbilityChangeStat.Parser, new[]{ "StatAdjustment", "Stat" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardAbilityPriorityAttack), global::Loom.ZombieBattleground.Protobuf.CardAbilityPriorityAttack.Parser, new[]{ "AttackerOldDefense", "TargetOldDefense" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardAbilityReanimate), global::Loom.ZombieBattleground.Protobuf.CardAbilityReanimate.Parser, new[]{ "DefaultDamage", "DefaultDefense", "NewInstance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardAbilityAttackOverlord), global::Loom.ZombieBattleground.Protobuf.CardAbilityAttackOverlord.Parser, new[]{ "Damage", "WasApplied" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardAbilityReplaceUnitsWithTypeOnStrongerOnes), global::Loom.ZombieBattleground.Protobuf.CardAbilityReplaceUnitsWithTypeOnStrongerOnes.Parser, new[]{ "Faction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardAbilityDealDamageToThisAndAdjacentUnits), global::Loom.ZombieBattleground.Protobuf.CardAbilityDealDamageToThisAndAdjacentUnits.Parser, new[]{ "AdjacentDamage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardAbilityDevourZombieAndCombineStats), global::Loom.ZombieBattleground.Protobuf.CardAbilityDevourZombieAndCombineStats.Parser, new[]{ "Faction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome), global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Parser, new[]{ "Rage", "PriorityAttack", "AdditionalDamageToHeavyInAttack", "ChangeStat", "Reanimate", "AttackOverlord", "CardAttack", "ReplaceUnitsWithTypeOnStrongerOnes", "DealDamageToThisAndAdjacentUnits", "DevourZombieAndCombineStats" }, new[]{ "Outcome" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityRageOutcome), global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityRageOutcome.Parser, new[]{ "InstanceId", "NewDamage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityPriorityAttackOutcome), global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityPriorityAttackOutcome.Parser, new[]{ "InstanceId", "NewDefense" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityReanimateOutcome), global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityReanimateOutcome.Parser, new[]{ "NewCardInstance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityAdditionalDamageToHeavyInAttackOutcome), global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityAdditionalDamageToHeavyInAttackOutcome.Parser, new[]{ "InstanceId", "AddedDamage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityChangeStatOutcome), global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityChangeStatOutcome.Parser, new[]{ "InstanceId", "NewDamage", "NewDefense", "Stat", "TargetInstanceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityAttackOverlordOutcome), global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityAttackOverlordOutcome.Parser, new[]{ "InstanceId", "NewDefense", "Damage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAttackOutcome), global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAttackOutcome.Parser, new[]{ "AttackerInstanceId", "TargetInstanceId", "AttackerNewDefense", "TargetNewDefense" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityReplaceUnitsWithTypeOnStrongerOnesOutcome), global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityReplaceUnitsWithTypeOnStrongerOnesOutcome.Parser, new[]{ "NewCardInstances", "OldInstanceIds" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityReplaceUnitsWithTypeOnStrongerOnesOutcome.Types.NewCardInstance), global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityReplaceUnitsWithTypeOnStrongerOnesOutcome.Types.NewCardInstance.Parser, new[]{ "CardInstance", "Position" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityDealDamageToThisAndAdjacentUnitsOutcome), global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityDealDamageToThisAndAdjacentUnitsOutcome.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityDevourZombieAndCombineStatsOutcome), global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityDevourZombieAndCombineStatsOutcome.Parser, new[]{ "TargetInstanceIds" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardAbilityInstance), global::Loom.ZombieBattleground.Protobuf.CardAbilityInstance.Parser, new[]{ "Rage", "PriorityAttack", "Reanimate", "AdditionalDamageToHeavyInAttack", "ChangeStat", "AttackOverlord", "ReplaceUnitsWithTypeOnStrongerOnes", "DealDamageToThisAndAdjacentUnits", "DevourZombieAndCombineStats", "IsActive", "Trigger" }, new[]{ "AbilityType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardInstance), global::Loom.ZombieBattleground.Protobuf.CardInstance.Parser, new[]{ "Prototype", "InstanceId", "Instance", "Owner", "AbilitiesInstancesInitialized", "AbilitiesInstances", "Zone", "OwnerIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.DataIdOwner), global::Loom.ZombieBattleground.Protobuf.DataIdOwner.Parser, new[]{ "DataId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardDeck), global::Loom.ZombieBattleground.Protobuf.CardDeck.Parser, new[]{ "Cards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.InstanceId), global::Loom.ZombieBattleground.Protobuf.InstanceId.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.OverlordSkillMatchInstance), global::Loom.ZombieBattleground.Protobuf.OverlordSkillMatchInstance.Parser, new[]{ "Prototype", "Cooldown" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionLeaveMatch), global::Loom.ZombieBattleground.Protobuf.PlayerActionLeaveMatch.Parser, new[]{ "Winner", "Reason" }, null, new[]{ typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionLeaveMatch.Types.Reason) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionCardPlay), global::Loom.ZombieBattleground.Protobuf.PlayerActionCardPlay.Parser, new[]{ "Card", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionRankBuff), global::Loom.ZombieBattleground.Protobuf.PlayerActionRankBuff.Parser, new[]{ "Card", "Targets" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAttack), global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAttack.Parser, new[]{ "Attacker", "Target" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAbilityUsed), global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAbilityUsed.Parser, new[]{ "Card", "Targets", "AbilityType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionOverlordSkillUsed), global::Loom.ZombieBattleground.Protobuf.PlayerActionOverlordSkillUsed.Parser, new[]{ "SkillId", "Target", "Targets" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionEndTurn), global::Loom.ZombieBattleground.Protobuf.PlayerActionEndTurn.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionMulligan), global::Loom.ZombieBattleground.Protobuf.PlayerActionMulligan.Parser, new[]{ "MulliganedCards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionCheatDestroyCardsOnBoard), global::Loom.ZombieBattleground.Protobuf.PlayerActionCheatDestroyCardsOnBoard.Parser, new[]{ "DestroyedCards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.StartGameAction), global::Loom.ZombieBattleground.Protobuf.StartGameAction.Parser, new[]{ "PlayerStates" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.Unit), global::Loom.ZombieBattleground.Protobuf.Unit.Parser, new[]{ "InstanceId", "Parameter" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.Parameter), global::Loom.ZombieBattleground.Protobuf.Parameter.Parser, new[]{ "Damage", "Defense", "CardName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GameReplay), global::Loom.ZombieBattleground.Protobuf.GameReplay.Parser, new[]{ "Actions", "Blocks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.Player), global::Loom.ZombieBattleground.Protobuf.Player.Parser, new[]{ "Id", "Deck" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.History), global::Loom.ZombieBattleground.Protobuf.History.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.HistoryData), global::Loom.ZombieBattleground.Protobuf.HistoryData.Parser, new[]{ "CreateGame", "FullInstance", "ShowInstance", "HideInstance", "ChangeInstance", "EndGame" }, new[]{ "Data" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.HistoryCreateGame), global::Loom.ZombieBattleground.Protobuf.HistoryCreateGame.Parser, new[]{ "GameId", "Players", "RandomSeed", "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.HistoryFullInstance), global::Loom.ZombieBattleground.Protobuf.HistoryFullInstance.Parser, new[]{ "InstanceId", "Damage", "Defense" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.HistoryInstance), global::Loom.ZombieBattleground.Protobuf.HistoryInstance.Parser, new[]{ "InstanceId", "Value" }, null, new[]{ typeof(global::Loom.ZombieBattleground.Protobuf.HistoryInstance.Types.change) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.HistoryHide), global::Loom.ZombieBattleground.Protobuf.HistoryHide.Parser, new[]{ "InstanceId", "Zone" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.HistoryEndGame), global::Loom.ZombieBattleground.Protobuf.HistoryEndGame.Parser, new[]{ "MatchId", "UserId", "WinnerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.DefaultDecksDataContainer), global::Loom.ZombieBattleground.Protobuf.DefaultDecksDataContainer.Parser, new[]{ "DefaultDecks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.DefaultCollectionDataContainer), global::Loom.ZombieBattleground.Protobuf.DefaultCollectionDataContainer.Parser, new[]{ "DefaultCollection" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardLibraryDataContainer), global::Loom.ZombieBattleground.Protobuf.CardLibraryDataContainer.Parser, new[]{ "Cards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.OverlordPrototypesDataContainer), global::Loom.ZombieBattleground.Protobuf.OverlordPrototypesDataContainer.Parser, new[]{ "Overlords" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.AIDecksDataContainer), global::Loom.ZombieBattleground.Protobuf.AIDecksDataContainer.Parser, new[]{ "AiDecks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.OverlordLevelingDataContainer), global::Loom.ZombieBattleground.Protobuf.OverlordLevelingDataContainer.Parser, new[]{ "OverlordLeveling" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.DataWipeConfiguration), global::Loom.ZombieBattleground.Protobuf.DataWipeConfiguration.Parser, new[]{ "Version", "WipeDecks", "WipeOverlordUserInstances" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.DataWipeConfigurationList), global::Loom.ZombieBattleground.Protobuf.DataWipeConfigurationList.Parser, new[]{ "Configurations" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.DataWipeConfigurationContainer), global::Loom.ZombieBattleground.Protobuf.DataWipeConfigurationContainer.Parser, new[]{ "DataWipeConfiguration" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.UserPersistentData), global::Loom.ZombieBattleground.Protobuf.UserPersistentData.Parser, new[]{ "Address", "ExecutedDataWipesVersions", "LastFullCardCollectionSyncPlasmachainBlockHeight", "LastAutoCardCollectionSyncPlasmachainBlockHeight" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.NotificationEndMatch), global::Loom.ZombieBattleground.Protobuf.NotificationEndMatch.Parser, new[]{ "OverlordId", "OldLevel", "OldExperience", "NewLevel", "NewExperience", "Rewards", "IsWin", "DeckId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.NotificationType), global::Loom.ZombieBattleground.Protobuf.NotificationType.Parser, null, null, new[]{ typeof(global::Loom.ZombieBattleground.Protobuf.NotificationType.Types.Enum) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.Notification), global::Loom.ZombieBattleground.Protobuf.Notification.Parser, new[]{ "Id", "CreatedAt", "Seen", "Type", "EndMatch" }, new[]{ "Notification" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.NotificationList), global::Loom.ZombieBattleground.Protobuf.NotificationList.Parser, new[]{ "Notifications" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.UserIdContainer), global::Loom.ZombieBattleground.Protobuf.UserIdContainer.Parser, new[]{ "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.MintingTransactionReceipt), global::Loom.ZombieBattleground.Protobuf.MintingTransactionReceipt.Parser, new[]{ "VerifyHash", "UserId", "Booster", "Super", "Air", "Earth", "Fire", "Life", "Toxic", "Water", "Small", "Minion", "Binance", "TxId" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.MintingTransactionReceipt.Types.VerifySignResult), global::Loom.ZombieBattleground.Protobuf.MintingTransactionReceipt.Types.VerifySignResult.Parser, new[]{ "Hash", "Signature" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.MintingTransactionReceiptCollection), global::Loom.ZombieBattleground.Protobuf.MintingTransactionReceiptCollection.Parser, new[]{ "Receipts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardAmountChangeItemsContainer), global::Loom.ZombieBattleground.Protobuf.CardAmountChangeItemsContainer.Parser, new[]{ "CardAmountChanges" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardAmountChangeItem), global::Loom.ZombieBattleground.Protobuf.CardAmountChangeItem.Parser, new[]{ "CardKey", "AmountChange" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum GameModeType {
    [pbr::OriginalName("Community")] Community = 0,
    [pbr::OriginalName("Loom")] Loom = 1,
  }

  #endregion

  #region Messages
  public sealed partial class InitData : pb::IMessage<InitData> {
    private static readonly pb::MessageParser<InitData> _parser = new pb::MessageParser<InitData>(() => new InitData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitData(InitData other) : this() {
      defaultDecks_ = other.defaultDecks_.Clone();
      defaultCollection_ = other.defaultCollection_.Clone();
      cards_ = other.cards_.Clone();
      overlords_ = other.overlords_.Clone();
      aiDecks_ = other.aiDecks_.Clone();
      version_ = other.version_;
      oracle_ = other.oracle_ != null ? other.oracle_.Clone() : null;
      overlordLeveling_ = other.overlordLeveling_ != null ? other.overlordLeveling_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitData Clone() {
      return new InitData(this);
    }

    /// <summary>Field number for the "defaultDecks" field.</summary>
    public const int DefaultDecksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Deck> _repeated_defaultDecks_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.Deck.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck> defaultDecks_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck> DefaultDecks {
      get { return defaultDecks_; }
    }

    /// <summary>Field number for the "defaultCollection" field.</summary>
    public const int DefaultCollectionFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardCollectionCard> _repeated_defaultCollection_codec
        = pb::FieldCodec.ForMessage(18, global::Loom.ZombieBattleground.Protobuf.CardCollectionCard.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollectionCard> defaultCollection_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollectionCard>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollectionCard> DefaultCollection {
      get { return defaultCollection_; }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Card> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(26, global::Loom.ZombieBattleground.Protobuf.Card.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card> cards_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "overlords" field.</summary>
    public const int OverlordsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.OverlordPrototype> _repeated_overlords_codec
        = pb::FieldCodec.ForMessage(34, global::Loom.ZombieBattleground.Protobuf.OverlordPrototype.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.OverlordPrototype> overlords_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.OverlordPrototype>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.OverlordPrototype> Overlords {
      get { return overlords_; }
    }

    /// <summary>Field number for the "aiDecks" field.</summary>
    public const int AiDecksFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.AIDeck> _repeated_aiDecks_codec
        = pb::FieldCodec.ForMessage(42, global::Loom.ZombieBattleground.Protobuf.AIDeck.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AIDeck> aiDecks_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AIDeck>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AIDeck> AiDecks {
      get { return aiDecks_; }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 6;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "oracle" field.</summary>
    public const int OracleFieldNumber = 7;
    private global::Loom.Client.Protobuf.Address oracle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.Client.Protobuf.Address Oracle {
      get { return oracle_; }
      set {
        oracle_ = value;
      }
    }

    /// <summary>Field number for the "overlordLeveling" field.</summary>
    public const int OverlordLevelingFieldNumber = 8;
    private global::Loom.ZombieBattleground.Protobuf.OverlordLevelingData overlordLeveling_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.OverlordLevelingData OverlordLeveling {
      get { return overlordLeveling_; }
      set {
        overlordLeveling_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!defaultDecks_.Equals(other.defaultDecks_)) return false;
      if(!defaultCollection_.Equals(other.defaultCollection_)) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if(!overlords_.Equals(other.overlords_)) return false;
      if(!aiDecks_.Equals(other.aiDecks_)) return false;
      if (Version != other.Version) return false;
      if (!object.Equals(Oracle, other.Oracle)) return false;
      if (!object.Equals(OverlordLeveling, other.OverlordLeveling)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= defaultDecks_.GetHashCode();
      hash ^= defaultCollection_.GetHashCode();
      hash ^= cards_.GetHashCode();
      hash ^= overlords_.GetHashCode();
      hash ^= aiDecks_.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (oracle_ != null) hash ^= Oracle.GetHashCode();
      if (overlordLeveling_ != null) hash ^= OverlordLeveling.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      defaultDecks_.WriteTo(output, _repeated_defaultDecks_codec);
      defaultCollection_.WriteTo(output, _repeated_defaultCollection_codec);
      cards_.WriteTo(output, _repeated_cards_codec);
      overlords_.WriteTo(output, _repeated_overlords_codec);
      aiDecks_.WriteTo(output, _repeated_aiDecks_codec);
      if (Version.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Version);
      }
      if (oracle_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Oracle);
      }
      if (overlordLeveling_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(OverlordLeveling);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += defaultDecks_.CalculateSize(_repeated_defaultDecks_codec);
      size += defaultCollection_.CalculateSize(_repeated_defaultCollection_codec);
      size += cards_.CalculateSize(_repeated_cards_codec);
      size += overlords_.CalculateSize(_repeated_overlords_codec);
      size += aiDecks_.CalculateSize(_repeated_aiDecks_codec);
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (oracle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Oracle);
      }
      if (overlordLeveling_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OverlordLeveling);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitData other) {
      if (other == null) {
        return;
      }
      defaultDecks_.Add(other.defaultDecks_);
      defaultCollection_.Add(other.defaultCollection_);
      cards_.Add(other.cards_);
      overlords_.Add(other.overlords_);
      aiDecks_.Add(other.aiDecks_);
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.oracle_ != null) {
        if (oracle_ == null) {
          oracle_ = new global::Loom.Client.Protobuf.Address();
        }
        Oracle.MergeFrom(other.Oracle);
      }
      if (other.overlordLeveling_ != null) {
        if (overlordLeveling_ == null) {
          overlordLeveling_ = new global::Loom.ZombieBattleground.Protobuf.OverlordLevelingData();
        }
        OverlordLeveling.MergeFrom(other.OverlordLeveling);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            defaultDecks_.AddEntriesFrom(input, _repeated_defaultDecks_codec);
            break;
          }
          case 18: {
            defaultCollection_.AddEntriesFrom(input, _repeated_defaultCollection_codec);
            break;
          }
          case 26: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 34: {
            overlords_.AddEntriesFrom(input, _repeated_overlords_codec);
            break;
          }
          case 42: {
            aiDecks_.AddEntriesFrom(input, _repeated_aiDecks_codec);
            break;
          }
          case 50: {
            Version = input.ReadString();
            break;
          }
          case 58: {
            if (oracle_ == null) {
              oracle_ = new global::Loom.Client.Protobuf.Address();
            }
            input.ReadMessage(oracle_);
            break;
          }
          case 66: {
            if (overlordLeveling_ == null) {
              overlordLeveling_ = new global::Loom.ZombieBattleground.Protobuf.OverlordLevelingData();
            }
            input.ReadMessage(overlordLeveling_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Account : pb::IMessage<Account> {
    private static readonly pb::MessageParser<Account> _parser = new pb::MessageParser<Account>(() => new Account());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Account> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account(Account other) : this() {
      userId_ = other.userId_;
      phoneNumberVerified_ = other.phoneNumberVerified_;
      rewardRedeemed_ = other.rewardRedeemed_;
      isKickstarter_ = other.isKickstarter_;
      image_ = other.image_;
      emailNotification_ = other.emailNotification_;
      eloScore_ = other.eloScore_;
      currentTier_ = other.currentTier_;
      gameMembershipTier_ = other.gameMembershipTier_;
      owner_ = other.owner_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account Clone() {
      return new Account(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "phone_number_verified" field.</summary>
    public const int PhoneNumberVerifiedFieldNumber = 2;
    private bool phoneNumberVerified_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PhoneNumberVerified {
      get { return phoneNumberVerified_; }
      set {
        phoneNumberVerified_ = value;
      }
    }

    /// <summary>Field number for the "reward_redeemed" field.</summary>
    public const int RewardRedeemedFieldNumber = 3;
    private bool rewardRedeemed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RewardRedeemed {
      get { return rewardRedeemed_; }
      set {
        rewardRedeemed_ = value;
      }
    }

    /// <summary>Field number for the "is_kickstarter" field.</summary>
    public const int IsKickstarterFieldNumber = 4;
    private bool isKickstarter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsKickstarter {
      get { return isKickstarter_; }
      set {
        isKickstarter_ = value;
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 5;
    private string image_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Image {
      get { return image_; }
      set {
        image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "email_notification" field.</summary>
    public const int EmailNotificationFieldNumber = 6;
    private bool emailNotification_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EmailNotification {
      get { return emailNotification_; }
      set {
        emailNotification_ = value;
      }
    }

    /// <summary>Field number for the "elo_score" field.</summary>
    public const int EloScoreFieldNumber = 7;
    private long eloScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EloScore {
      get { return eloScore_; }
      set {
        eloScore_ = value;
      }
    }

    /// <summary>Field number for the "current_tier" field.</summary>
    public const int CurrentTierFieldNumber = 8;
    private int currentTier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentTier {
      get { return currentTier_; }
      set {
        currentTier_ = value;
      }
    }

    /// <summary>Field number for the "game_membership_tier" field.</summary>
    public const int GameMembershipTierFieldNumber = 9;
    private int gameMembershipTier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameMembershipTier {
      get { return gameMembershipTier_; }
      set {
        gameMembershipTier_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 10;
    private pb::ByteString owner_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Owner {
      get { return owner_; }
      set {
        owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Account);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Account other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (PhoneNumberVerified != other.PhoneNumberVerified) return false;
      if (RewardRedeemed != other.RewardRedeemed) return false;
      if (IsKickstarter != other.IsKickstarter) return false;
      if (Image != other.Image) return false;
      if (EmailNotification != other.EmailNotification) return false;
      if (EloScore != other.EloScore) return false;
      if (CurrentTier != other.CurrentTier) return false;
      if (GameMembershipTier != other.GameMembershipTier) return false;
      if (Owner != other.Owner) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (PhoneNumberVerified != false) hash ^= PhoneNumberVerified.GetHashCode();
      if (RewardRedeemed != false) hash ^= RewardRedeemed.GetHashCode();
      if (IsKickstarter != false) hash ^= IsKickstarter.GetHashCode();
      if (Image.Length != 0) hash ^= Image.GetHashCode();
      if (EmailNotification != false) hash ^= EmailNotification.GetHashCode();
      if (EloScore != 0L) hash ^= EloScore.GetHashCode();
      if (CurrentTier != 0) hash ^= CurrentTier.GetHashCode();
      if (GameMembershipTier != 0) hash ^= GameMembershipTier.GetHashCode();
      if (Owner.Length != 0) hash ^= Owner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (PhoneNumberVerified != false) {
        output.WriteRawTag(16);
        output.WriteBool(PhoneNumberVerified);
      }
      if (RewardRedeemed != false) {
        output.WriteRawTag(24);
        output.WriteBool(RewardRedeemed);
      }
      if (IsKickstarter != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsKickstarter);
      }
      if (Image.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Image);
      }
      if (EmailNotification != false) {
        output.WriteRawTag(48);
        output.WriteBool(EmailNotification);
      }
      if (EloScore != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(EloScore);
      }
      if (CurrentTier != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CurrentTier);
      }
      if (GameMembershipTier != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(GameMembershipTier);
      }
      if (Owner.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (PhoneNumberVerified != false) {
        size += 1 + 1;
      }
      if (RewardRedeemed != false) {
        size += 1 + 1;
      }
      if (IsKickstarter != false) {
        size += 1 + 1;
      }
      if (Image.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Image);
      }
      if (EmailNotification != false) {
        size += 1 + 1;
      }
      if (EloScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EloScore);
      }
      if (CurrentTier != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentTier);
      }
      if (GameMembershipTier != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameMembershipTier);
      }
      if (Owner.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Owner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Account other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.PhoneNumberVerified != false) {
        PhoneNumberVerified = other.PhoneNumberVerified;
      }
      if (other.RewardRedeemed != false) {
        RewardRedeemed = other.RewardRedeemed;
      }
      if (other.IsKickstarter != false) {
        IsKickstarter = other.IsKickstarter;
      }
      if (other.Image.Length != 0) {
        Image = other.Image;
      }
      if (other.EmailNotification != false) {
        EmailNotification = other.EmailNotification;
      }
      if (other.EloScore != 0L) {
        EloScore = other.EloScore;
      }
      if (other.CurrentTier != 0) {
        CurrentTier = other.CurrentTier;
      }
      if (other.GameMembershipTier != 0) {
        GameMembershipTier = other.GameMembershipTier;
      }
      if (other.Owner.Length != 0) {
        Owner = other.Owner;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 16: {
            PhoneNumberVerified = input.ReadBool();
            break;
          }
          case 24: {
            RewardRedeemed = input.ReadBool();
            break;
          }
          case 32: {
            IsKickstarter = input.ReadBool();
            break;
          }
          case 42: {
            Image = input.ReadString();
            break;
          }
          case 48: {
            EmailNotification = input.ReadBool();
            break;
          }
          case 56: {
            EloScore = input.ReadInt64();
            break;
          }
          case 64: {
            CurrentTier = input.ReadInt32();
            break;
          }
          case 72: {
            GameMembershipTier = input.ReadInt32();
            break;
          }
          case 82: {
            Owner = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Deck : pb::IMessage<Deck> {
    private static readonly pb::MessageParser<Deck> _parser = new pb::MessageParser<Deck>(() => new Deck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Deck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Deck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Deck(Deck other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      overlordId_ = other.overlordId_;
      cards_ = other.cards_.Clone();
      primarySkill_ = other.primarySkill_;
      secondarySkill_ = other.secondarySkill_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Deck Clone() {
      return new Deck(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "overlordId" field.</summary>
    public const int OverlordIdFieldNumber = 3;
    private long overlordId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OverlordId {
      get { return overlordId_; }
      set {
        overlordId_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.DeckCard> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(34, global::Loom.ZombieBattleground.Protobuf.DeckCard.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.DeckCard> cards_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.DeckCard>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.DeckCard> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "primarySkill" field.</summary>
    public const int PrimarySkillFieldNumber = 5;
    private global::Loom.ZombieBattleground.Protobuf.OverlordSkillType.Types.Enum primarySkill_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.OverlordSkillType.Types.Enum PrimarySkill {
      get { return primarySkill_; }
      set {
        primarySkill_ = value;
      }
    }

    /// <summary>Field number for the "secondarySkill" field.</summary>
    public const int SecondarySkillFieldNumber = 6;
    private global::Loom.ZombieBattleground.Protobuf.OverlordSkillType.Types.Enum secondarySkill_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.OverlordSkillType.Types.Enum SecondarySkill {
      get { return secondarySkill_; }
      set {
        secondarySkill_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Deck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Deck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (OverlordId != other.OverlordId) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if (PrimarySkill != other.PrimarySkill) return false;
      if (SecondarySkill != other.SecondarySkill) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (OverlordId != 0L) hash ^= OverlordId.GetHashCode();
      hash ^= cards_.GetHashCode();
      if (PrimarySkill != 0) hash ^= PrimarySkill.GetHashCode();
      if (SecondarySkill != 0) hash ^= SecondarySkill.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (OverlordId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(OverlordId);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      if (PrimarySkill != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) PrimarySkill);
      }
      if (SecondarySkill != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) SecondarySkill);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (OverlordId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OverlordId);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (PrimarySkill != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PrimarySkill);
      }
      if (SecondarySkill != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SecondarySkill);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Deck other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.OverlordId != 0L) {
        OverlordId = other.OverlordId;
      }
      cards_.Add(other.cards_);
      if (other.PrimarySkill != 0) {
        PrimarySkill = other.PrimarySkill;
      }
      if (other.SecondarySkill != 0) {
        SecondarySkill = other.SecondarySkill;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            OverlordId = input.ReadInt64();
            break;
          }
          case 34: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 40: {
            primarySkill_ = (global::Loom.ZombieBattleground.Protobuf.OverlordSkillType.Types.Enum) input.ReadEnum();
            break;
          }
          case 48: {
            secondarySkill_ = (global::Loom.ZombieBattleground.Protobuf.OverlordSkillType.Types.Enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Card : pb::IMessage<Card> {
    private static readonly pb::MessageParser<Card> _parser = new pb::MessageParser<Card>(() => new Card());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Card> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Card() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Card(Card other) : this() {
      cardKey_ = other.cardKey_ != null ? other.cardKey_.Clone() : null;
      kind_ = other.kind_;
      faction_ = other.faction_;
      name_ = other.name_;
      description_ = other.description_;
      flavorText_ = other.flavorText_;
      picture_ = other.picture_;
      rank_ = other.rank_;
      type_ = other.type_;
      frame_ = other.frame_;
      damage_ = other.damage_;
      defense_ = other.defense_;
      cost_ = other.cost_;
      pictureTransform_ = other.pictureTransform_ != null ? other.pictureTransform_.Clone() : null;
      abilities_ = other.abilities_.Clone();
      uniqueAnimation_ = other.uniqueAnimation_;
      hidden_ = other.hidden_;
      overrides_ = other.overrides_ != null ? other.overrides_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Card Clone() {
      return new Card(this);
    }

    /// <summary>Field number for the "cardKey" field.</summary>
    public const int CardKeyFieldNumber = 23;
    private global::Loom.ZombieBattleground.Protobuf.CardKey cardKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardKey CardKey {
      get { return cardKey_; }
      set {
        cardKey_ = value;
      }
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.CardKind.Types.Enum kind_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardKind.Types.Enum Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    /// <summary>Field number for the "faction" field.</summary>
    public const int FactionFieldNumber = 3;
    private global::Loom.ZombieBattleground.Protobuf.Faction.Types.Enum faction_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Faction.Types.Enum Faction {
      get { return faction_; }
      set {
        faction_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "flavorText" field.</summary>
    public const int FlavorTextFieldNumber = 6;
    private string flavorText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FlavorText {
      get { return flavorText_; }
      set {
        flavorText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "picture" field.</summary>
    public const int PictureFieldNumber = 7;
    private string picture_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Picture {
      get { return picture_; }
      set {
        picture_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 8;
    private global::Loom.ZombieBattleground.Protobuf.CreatureRank.Types.Enum rank_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CreatureRank.Types.Enum Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 9;
    private global::Loom.ZombieBattleground.Protobuf.CardType.Types.Enum type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardType.Types.Enum Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 11;
    private string frame_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Frame {
      get { return frame_; }
      set {
        frame_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 12;
    private int damage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "defense" field.</summary>
    public const int DefenseFieldNumber = 13;
    private int defense_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Defense {
      get { return defense_; }
      set {
        defense_ = value;
      }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 14;
    private int cost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    /// <summary>Field number for the "pictureTransform" field.</summary>
    public const int PictureTransformFieldNumber = 16;
    private global::Loom.ZombieBattleground.Protobuf.PictureTransform pictureTransform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PictureTransform PictureTransform {
      get { return pictureTransform_; }
      set {
        pictureTransform_ = value;
      }
    }

    /// <summary>Field number for the "abilities" field.</summary>
    public const int AbilitiesFieldNumber = 17;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.AbilityData> _repeated_abilities_codec
        = pb::FieldCodec.ForMessage(138, global::Loom.ZombieBattleground.Protobuf.AbilityData.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AbilityData> abilities_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AbilityData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AbilityData> Abilities {
      get { return abilities_; }
    }

    /// <summary>Field number for the "uniqueAnimation" field.</summary>
    public const int UniqueAnimationFieldNumber = 18;
    private global::Loom.ZombieBattleground.Protobuf.UniqueAnimation.Types.Enum uniqueAnimation_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.UniqueAnimation.Types.Enum UniqueAnimation {
      get { return uniqueAnimation_; }
      set {
        uniqueAnimation_ = value;
      }
    }

    /// <summary>Field number for the "hidden" field.</summary>
    public const int HiddenFieldNumber = 20;
    private bool hidden_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Hidden {
      get { return hidden_; }
      set {
        hidden_ = value;
      }
    }

    /// <summary>Field number for the "overrides" field.</summary>
    public const int OverridesFieldNumber = 22;
    private global::Loom.ZombieBattleground.Protobuf.CardOverrides overrides_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardOverrides Overrides {
      get { return overrides_; }
      set {
        overrides_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Card);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Card other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CardKey, other.CardKey)) return false;
      if (Kind != other.Kind) return false;
      if (Faction != other.Faction) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (FlavorText != other.FlavorText) return false;
      if (Picture != other.Picture) return false;
      if (Rank != other.Rank) return false;
      if (Type != other.Type) return false;
      if (Frame != other.Frame) return false;
      if (Damage != other.Damage) return false;
      if (Defense != other.Defense) return false;
      if (Cost != other.Cost) return false;
      if (!object.Equals(PictureTransform, other.PictureTransform)) return false;
      if(!abilities_.Equals(other.abilities_)) return false;
      if (UniqueAnimation != other.UniqueAnimation) return false;
      if (Hidden != other.Hidden) return false;
      if (!object.Equals(Overrides, other.Overrides)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cardKey_ != null) hash ^= CardKey.GetHashCode();
      if (Kind != 0) hash ^= Kind.GetHashCode();
      if (Faction != 0) hash ^= Faction.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (FlavorText.Length != 0) hash ^= FlavorText.GetHashCode();
      if (Picture.Length != 0) hash ^= Picture.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Frame.Length != 0) hash ^= Frame.GetHashCode();
      if (Damage != 0) hash ^= Damage.GetHashCode();
      if (Defense != 0) hash ^= Defense.GetHashCode();
      if (Cost != 0) hash ^= Cost.GetHashCode();
      if (pictureTransform_ != null) hash ^= PictureTransform.GetHashCode();
      hash ^= abilities_.GetHashCode();
      if (UniqueAnimation != 0) hash ^= UniqueAnimation.GetHashCode();
      if (Hidden != false) hash ^= Hidden.GetHashCode();
      if (overrides_ != null) hash ^= Overrides.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Kind != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Kind);
      }
      if (Faction != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Faction);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      if (FlavorText.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(FlavorText);
      }
      if (Picture.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Picture);
      }
      if (Rank != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Rank);
      }
      if (Type != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Type);
      }
      if (Frame.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Frame);
      }
      if (Damage != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Damage);
      }
      if (Defense != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Defense);
      }
      if (Cost != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Cost);
      }
      if (pictureTransform_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(PictureTransform);
      }
      abilities_.WriteTo(output, _repeated_abilities_codec);
      if (UniqueAnimation != 0) {
        output.WriteRawTag(144, 1);
        output.WriteEnum((int) UniqueAnimation);
      }
      if (Hidden != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(Hidden);
      }
      if (overrides_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(Overrides);
      }
      if (cardKey_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(CardKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cardKey_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CardKey);
      }
      if (Kind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      if (Faction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Faction);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (FlavorText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FlavorText);
      }
      if (Picture.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Picture);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Rank);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Frame.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Frame);
      }
      if (Damage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
      }
      if (Defense != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Defense);
      }
      if (Cost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (pictureTransform_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PictureTransform);
      }
      size += abilities_.CalculateSize(_repeated_abilities_codec);
      if (UniqueAnimation != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UniqueAnimation);
      }
      if (Hidden != false) {
        size += 2 + 1;
      }
      if (overrides_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Overrides);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Card other) {
      if (other == null) {
        return;
      }
      if (other.cardKey_ != null) {
        if (cardKey_ == null) {
          cardKey_ = new global::Loom.ZombieBattleground.Protobuf.CardKey();
        }
        CardKey.MergeFrom(other.CardKey);
      }
      if (other.Kind != 0) {
        Kind = other.Kind;
      }
      if (other.Faction != 0) {
        Faction = other.Faction;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.FlavorText.Length != 0) {
        FlavorText = other.FlavorText;
      }
      if (other.Picture.Length != 0) {
        Picture = other.Picture;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Frame.Length != 0) {
        Frame = other.Frame;
      }
      if (other.Damage != 0) {
        Damage = other.Damage;
      }
      if (other.Defense != 0) {
        Defense = other.Defense;
      }
      if (other.Cost != 0) {
        Cost = other.Cost;
      }
      if (other.pictureTransform_ != null) {
        if (pictureTransform_ == null) {
          pictureTransform_ = new global::Loom.ZombieBattleground.Protobuf.PictureTransform();
        }
        PictureTransform.MergeFrom(other.PictureTransform);
      }
      abilities_.Add(other.abilities_);
      if (other.UniqueAnimation != 0) {
        UniqueAnimation = other.UniqueAnimation;
      }
      if (other.Hidden != false) {
        Hidden = other.Hidden;
      }
      if (other.overrides_ != null) {
        if (overrides_ == null) {
          overrides_ = new global::Loom.ZombieBattleground.Protobuf.CardOverrides();
        }
        Overrides.MergeFrom(other.Overrides);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            kind_ = (global::Loom.ZombieBattleground.Protobuf.CardKind.Types.Enum) input.ReadEnum();
            break;
          }
          case 24: {
            faction_ = (global::Loom.ZombieBattleground.Protobuf.Faction.Types.Enum) input.ReadEnum();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 50: {
            FlavorText = input.ReadString();
            break;
          }
          case 58: {
            Picture = input.ReadString();
            break;
          }
          case 64: {
            rank_ = (global::Loom.ZombieBattleground.Protobuf.CreatureRank.Types.Enum) input.ReadEnum();
            break;
          }
          case 72: {
            type_ = (global::Loom.ZombieBattleground.Protobuf.CardType.Types.Enum) input.ReadEnum();
            break;
          }
          case 90: {
            Frame = input.ReadString();
            break;
          }
          case 96: {
            Damage = input.ReadInt32();
            break;
          }
          case 104: {
            Defense = input.ReadInt32();
            break;
          }
          case 112: {
            Cost = input.ReadInt32();
            break;
          }
          case 130: {
            if (pictureTransform_ == null) {
              pictureTransform_ = new global::Loom.ZombieBattleground.Protobuf.PictureTransform();
            }
            input.ReadMessage(pictureTransform_);
            break;
          }
          case 138: {
            abilities_.AddEntriesFrom(input, _repeated_abilities_codec);
            break;
          }
          case 144: {
            uniqueAnimation_ = (global::Loom.ZombieBattleground.Protobuf.UniqueAnimation.Types.Enum) input.ReadEnum();
            break;
          }
          case 160: {
            Hidden = input.ReadBool();
            break;
          }
          case 178: {
            if (overrides_ == null) {
              overrides_ = new global::Loom.ZombieBattleground.Protobuf.CardOverrides();
            }
            input.ReadMessage(overrides_);
            break;
          }
          case 186: {
            if (cardKey_ == null) {
              cardKey_ = new global::Loom.ZombieBattleground.Protobuf.CardKey();
            }
            input.ReadMessage(cardKey_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardOverrides : pb::IMessage<CardOverrides> {
    private static readonly pb::MessageParser<CardOverrides> _parser = new pb::MessageParser<CardOverrides>(() => new CardOverrides());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardOverrides> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardOverrides() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardOverrides(CardOverrides other) : this() {
      kind_ = other.kind_ != null ? other.kind_.Clone() : null;
      faction_ = other.faction_ != null ? other.faction_.Clone() : null;
      name_ = other.name_ != null ? other.name_.Clone() : null;
      description_ = other.description_ != null ? other.description_.Clone() : null;
      flavorText_ = other.flavorText_ != null ? other.flavorText_.Clone() : null;
      picture_ = other.picture_ != null ? other.picture_.Clone() : null;
      rank_ = other.rank_ != null ? other.rank_.Clone() : null;
      type_ = other.type_ != null ? other.type_.Clone() : null;
      frame_ = other.frame_ != null ? other.frame_.Clone() : null;
      damage_ = other.damage_ != null ? other.damage_.Clone() : null;
      defense_ = other.defense_ != null ? other.defense_.Clone() : null;
      cost_ = other.cost_ != null ? other.cost_.Clone() : null;
      pictureTransform_ = other.pictureTransform_ != null ? other.pictureTransform_.Clone() : null;
      abilities_ = other.abilities_.Clone();
      uniqueAnimation_ = other.uniqueAnimation_ != null ? other.uniqueAnimation_.Clone() : null;
      hidden_ = other.hidden_ != null ? other.hidden_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardOverrides Clone() {
      return new CardOverrides(this);
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.CardKindEnumValue kind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardKindEnumValue Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    /// <summary>Field number for the "faction" field.</summary>
    public const int FactionFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.FactionEnumValue faction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.FactionEnumValue Faction {
      get { return faction_; }
      set {
        faction_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private global::Loom.ZombieBattleground.Protobuf.StringValue name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.StringValue Name {
      get { return name_; }
      set {
        name_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private global::Loom.ZombieBattleground.Protobuf.StringValue description_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.StringValue Description {
      get { return description_; }
      set {
        description_ = value;
      }
    }

    /// <summary>Field number for the "flavorText" field.</summary>
    public const int FlavorTextFieldNumber = 5;
    private global::Loom.ZombieBattleground.Protobuf.StringValue flavorText_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.StringValue FlavorText {
      get { return flavorText_; }
      set {
        flavorText_ = value;
      }
    }

    /// <summary>Field number for the "picture" field.</summary>
    public const int PictureFieldNumber = 6;
    private global::Loom.ZombieBattleground.Protobuf.StringValue picture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.StringValue Picture {
      get { return picture_; }
      set {
        picture_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 7;
    private global::Loom.ZombieBattleground.Protobuf.CreatureRankEnumValue rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CreatureRankEnumValue Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 8;
    private global::Loom.ZombieBattleground.Protobuf.CardTypeEnumValue type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardTypeEnumValue Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 9;
    private global::Loom.ZombieBattleground.Protobuf.StringValue frame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.StringValue Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 10;
    private global::Loom.ZombieBattleground.Protobuf.Int32Value damage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Int32Value Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "defense" field.</summary>
    public const int DefenseFieldNumber = 11;
    private global::Loom.ZombieBattleground.Protobuf.Int32Value defense_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Int32Value Defense {
      get { return defense_; }
      set {
        defense_ = value;
      }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 12;
    private global::Loom.ZombieBattleground.Protobuf.Int32Value cost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Int32Value Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    /// <summary>Field number for the "pictureTransform" field.</summary>
    public const int PictureTransformFieldNumber = 13;
    private global::Loom.ZombieBattleground.Protobuf.PictureTransform pictureTransform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PictureTransform PictureTransform {
      get { return pictureTransform_; }
      set {
        pictureTransform_ = value;
      }
    }

    /// <summary>Field number for the "abilities" field.</summary>
    public const int AbilitiesFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.AbilityData> _repeated_abilities_codec
        = pb::FieldCodec.ForMessage(114, global::Loom.ZombieBattleground.Protobuf.AbilityData.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AbilityData> abilities_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AbilityData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AbilityData> Abilities {
      get { return abilities_; }
    }

    /// <summary>Field number for the "uniqueAnimation" field.</summary>
    public const int UniqueAnimationFieldNumber = 15;
    private global::Loom.ZombieBattleground.Protobuf.UniqueAnimationEnumValue uniqueAnimation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.UniqueAnimationEnumValue UniqueAnimation {
      get { return uniqueAnimation_; }
      set {
        uniqueAnimation_ = value;
      }
    }

    /// <summary>Field number for the "hidden" field.</summary>
    public const int HiddenFieldNumber = 16;
    private global::Loom.ZombieBattleground.Protobuf.BoolValue hidden_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.BoolValue Hidden {
      get { return hidden_; }
      set {
        hidden_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardOverrides);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardOverrides other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Kind, other.Kind)) return false;
      if (!object.Equals(Faction, other.Faction)) return false;
      if (!object.Equals(Name, other.Name)) return false;
      if (!object.Equals(Description, other.Description)) return false;
      if (!object.Equals(FlavorText, other.FlavorText)) return false;
      if (!object.Equals(Picture, other.Picture)) return false;
      if (!object.Equals(Rank, other.Rank)) return false;
      if (!object.Equals(Type, other.Type)) return false;
      if (!object.Equals(Frame, other.Frame)) return false;
      if (!object.Equals(Damage, other.Damage)) return false;
      if (!object.Equals(Defense, other.Defense)) return false;
      if (!object.Equals(Cost, other.Cost)) return false;
      if (!object.Equals(PictureTransform, other.PictureTransform)) return false;
      if(!abilities_.Equals(other.abilities_)) return false;
      if (!object.Equals(UniqueAnimation, other.UniqueAnimation)) return false;
      if (!object.Equals(Hidden, other.Hidden)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (kind_ != null) hash ^= Kind.GetHashCode();
      if (faction_ != null) hash ^= Faction.GetHashCode();
      if (name_ != null) hash ^= Name.GetHashCode();
      if (description_ != null) hash ^= Description.GetHashCode();
      if (flavorText_ != null) hash ^= FlavorText.GetHashCode();
      if (picture_ != null) hash ^= Picture.GetHashCode();
      if (rank_ != null) hash ^= Rank.GetHashCode();
      if (type_ != null) hash ^= Type.GetHashCode();
      if (frame_ != null) hash ^= Frame.GetHashCode();
      if (damage_ != null) hash ^= Damage.GetHashCode();
      if (defense_ != null) hash ^= Defense.GetHashCode();
      if (cost_ != null) hash ^= Cost.GetHashCode();
      if (pictureTransform_ != null) hash ^= PictureTransform.GetHashCode();
      hash ^= abilities_.GetHashCode();
      if (uniqueAnimation_ != null) hash ^= UniqueAnimation.GetHashCode();
      if (hidden_ != null) hash ^= Hidden.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (kind_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Kind);
      }
      if (faction_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Faction);
      }
      if (name_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Name);
      }
      if (description_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Description);
      }
      if (flavorText_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(FlavorText);
      }
      if (picture_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Picture);
      }
      if (rank_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Rank);
      }
      if (type_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Type);
      }
      if (frame_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Frame);
      }
      if (damage_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Damage);
      }
      if (defense_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Defense);
      }
      if (cost_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Cost);
      }
      if (pictureTransform_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(PictureTransform);
      }
      abilities_.WriteTo(output, _repeated_abilities_codec);
      if (uniqueAnimation_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(UniqueAnimation);
      }
      if (hidden_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Hidden);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (kind_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Kind);
      }
      if (faction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Faction);
      }
      if (name_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Name);
      }
      if (description_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Description);
      }
      if (flavorText_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FlavorText);
      }
      if (picture_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Picture);
      }
      if (rank_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rank);
      }
      if (type_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
      }
      if (frame_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Frame);
      }
      if (damage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Damage);
      }
      if (defense_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Defense);
      }
      if (cost_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cost);
      }
      if (pictureTransform_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PictureTransform);
      }
      size += abilities_.CalculateSize(_repeated_abilities_codec);
      if (uniqueAnimation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UniqueAnimation);
      }
      if (hidden_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Hidden);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardOverrides other) {
      if (other == null) {
        return;
      }
      if (other.kind_ != null) {
        if (kind_ == null) {
          kind_ = new global::Loom.ZombieBattleground.Protobuf.CardKindEnumValue();
        }
        Kind.MergeFrom(other.Kind);
      }
      if (other.faction_ != null) {
        if (faction_ == null) {
          faction_ = new global::Loom.ZombieBattleground.Protobuf.FactionEnumValue();
        }
        Faction.MergeFrom(other.Faction);
      }
      if (other.name_ != null) {
        if (name_ == null) {
          name_ = new global::Loom.ZombieBattleground.Protobuf.StringValue();
        }
        Name.MergeFrom(other.Name);
      }
      if (other.description_ != null) {
        if (description_ == null) {
          description_ = new global::Loom.ZombieBattleground.Protobuf.StringValue();
        }
        Description.MergeFrom(other.Description);
      }
      if (other.flavorText_ != null) {
        if (flavorText_ == null) {
          flavorText_ = new global::Loom.ZombieBattleground.Protobuf.StringValue();
        }
        FlavorText.MergeFrom(other.FlavorText);
      }
      if (other.picture_ != null) {
        if (picture_ == null) {
          picture_ = new global::Loom.ZombieBattleground.Protobuf.StringValue();
        }
        Picture.MergeFrom(other.Picture);
      }
      if (other.rank_ != null) {
        if (rank_ == null) {
          rank_ = new global::Loom.ZombieBattleground.Protobuf.CreatureRankEnumValue();
        }
        Rank.MergeFrom(other.Rank);
      }
      if (other.type_ != null) {
        if (type_ == null) {
          type_ = new global::Loom.ZombieBattleground.Protobuf.CardTypeEnumValue();
        }
        Type.MergeFrom(other.Type);
      }
      if (other.frame_ != null) {
        if (frame_ == null) {
          frame_ = new global::Loom.ZombieBattleground.Protobuf.StringValue();
        }
        Frame.MergeFrom(other.Frame);
      }
      if (other.damage_ != null) {
        if (damage_ == null) {
          damage_ = new global::Loom.ZombieBattleground.Protobuf.Int32Value();
        }
        Damage.MergeFrom(other.Damage);
      }
      if (other.defense_ != null) {
        if (defense_ == null) {
          defense_ = new global::Loom.ZombieBattleground.Protobuf.Int32Value();
        }
        Defense.MergeFrom(other.Defense);
      }
      if (other.cost_ != null) {
        if (cost_ == null) {
          cost_ = new global::Loom.ZombieBattleground.Protobuf.Int32Value();
        }
        Cost.MergeFrom(other.Cost);
      }
      if (other.pictureTransform_ != null) {
        if (pictureTransform_ == null) {
          pictureTransform_ = new global::Loom.ZombieBattleground.Protobuf.PictureTransform();
        }
        PictureTransform.MergeFrom(other.PictureTransform);
      }
      abilities_.Add(other.abilities_);
      if (other.uniqueAnimation_ != null) {
        if (uniqueAnimation_ == null) {
          uniqueAnimation_ = new global::Loom.ZombieBattleground.Protobuf.UniqueAnimationEnumValue();
        }
        UniqueAnimation.MergeFrom(other.UniqueAnimation);
      }
      if (other.hidden_ != null) {
        if (hidden_ == null) {
          hidden_ = new global::Loom.ZombieBattleground.Protobuf.BoolValue();
        }
        Hidden.MergeFrom(other.Hidden);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (kind_ == null) {
              kind_ = new global::Loom.ZombieBattleground.Protobuf.CardKindEnumValue();
            }
            input.ReadMessage(kind_);
            break;
          }
          case 18: {
            if (faction_ == null) {
              faction_ = new global::Loom.ZombieBattleground.Protobuf.FactionEnumValue();
            }
            input.ReadMessage(faction_);
            break;
          }
          case 26: {
            if (name_ == null) {
              name_ = new global::Loom.ZombieBattleground.Protobuf.StringValue();
            }
            input.ReadMessage(name_);
            break;
          }
          case 34: {
            if (description_ == null) {
              description_ = new global::Loom.ZombieBattleground.Protobuf.StringValue();
            }
            input.ReadMessage(description_);
            break;
          }
          case 42: {
            if (flavorText_ == null) {
              flavorText_ = new global::Loom.ZombieBattleground.Protobuf.StringValue();
            }
            input.ReadMessage(flavorText_);
            break;
          }
          case 50: {
            if (picture_ == null) {
              picture_ = new global::Loom.ZombieBattleground.Protobuf.StringValue();
            }
            input.ReadMessage(picture_);
            break;
          }
          case 58: {
            if (rank_ == null) {
              rank_ = new global::Loom.ZombieBattleground.Protobuf.CreatureRankEnumValue();
            }
            input.ReadMessage(rank_);
            break;
          }
          case 66: {
            if (type_ == null) {
              type_ = new global::Loom.ZombieBattleground.Protobuf.CardTypeEnumValue();
            }
            input.ReadMessage(type_);
            break;
          }
          case 74: {
            if (frame_ == null) {
              frame_ = new global::Loom.ZombieBattleground.Protobuf.StringValue();
            }
            input.ReadMessage(frame_);
            break;
          }
          case 82: {
            if (damage_ == null) {
              damage_ = new global::Loom.ZombieBattleground.Protobuf.Int32Value();
            }
            input.ReadMessage(damage_);
            break;
          }
          case 90: {
            if (defense_ == null) {
              defense_ = new global::Loom.ZombieBattleground.Protobuf.Int32Value();
            }
            input.ReadMessage(defense_);
            break;
          }
          case 98: {
            if (cost_ == null) {
              cost_ = new global::Loom.ZombieBattleground.Protobuf.Int32Value();
            }
            input.ReadMessage(cost_);
            break;
          }
          case 106: {
            if (pictureTransform_ == null) {
              pictureTransform_ = new global::Loom.ZombieBattleground.Protobuf.PictureTransform();
            }
            input.ReadMessage(pictureTransform_);
            break;
          }
          case 114: {
            abilities_.AddEntriesFrom(input, _repeated_abilities_codec);
            break;
          }
          case 122: {
            if (uniqueAnimation_ == null) {
              uniqueAnimation_ = new global::Loom.ZombieBattleground.Protobuf.UniqueAnimationEnumValue();
            }
            input.ReadMessage(uniqueAnimation_);
            break;
          }
          case 130: {
            if (hidden_ == null) {
              hidden_ = new global::Loom.ZombieBattleground.Protobuf.BoolValue();
            }
            input.ReadMessage(hidden_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardInstanceSpecificData : pb::IMessage<CardInstanceSpecificData> {
    private static readonly pb::MessageParser<CardInstanceSpecificData> _parser = new pb::MessageParser<CardInstanceSpecificData>(() => new CardInstanceSpecificData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardInstanceSpecificData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardInstanceSpecificData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardInstanceSpecificData(CardInstanceSpecificData other) : this() {
      damage_ = other.damage_;
      defense_ = other.defense_;
      type_ = other.type_;
      faction_ = other.faction_;
      cost_ = other.cost_;
      abilities_ = other.abilities_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardInstanceSpecificData Clone() {
      return new CardInstanceSpecificData(this);
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 1;
    private int damage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "defense" field.</summary>
    public const int DefenseFieldNumber = 2;
    private int defense_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Defense {
      get { return defense_; }
      set {
        defense_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::Loom.ZombieBattleground.Protobuf.CardType.Types.Enum type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardType.Types.Enum Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "faction" field.</summary>
    public const int FactionFieldNumber = 4;
    private global::Loom.ZombieBattleground.Protobuf.Faction.Types.Enum faction_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Faction.Types.Enum Faction {
      get { return faction_; }
      set {
        faction_ = value;
      }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 5;
    private int cost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    /// <summary>Field number for the "abilities" field.</summary>
    public const int AbilitiesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.AbilityData> _repeated_abilities_codec
        = pb::FieldCodec.ForMessage(50, global::Loom.ZombieBattleground.Protobuf.AbilityData.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AbilityData> abilities_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AbilityData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AbilityData> Abilities {
      get { return abilities_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardInstanceSpecificData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardInstanceSpecificData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Damage != other.Damage) return false;
      if (Defense != other.Defense) return false;
      if (Type != other.Type) return false;
      if (Faction != other.Faction) return false;
      if (Cost != other.Cost) return false;
      if(!abilities_.Equals(other.abilities_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Damage != 0) hash ^= Damage.GetHashCode();
      if (Defense != 0) hash ^= Defense.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Faction != 0) hash ^= Faction.GetHashCode();
      if (Cost != 0) hash ^= Cost.GetHashCode();
      hash ^= abilities_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Damage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Damage);
      }
      if (Defense != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Defense);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (Faction != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Faction);
      }
      if (Cost != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Cost);
      }
      abilities_.WriteTo(output, _repeated_abilities_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Damage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
      }
      if (Defense != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Defense);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Faction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Faction);
      }
      if (Cost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      size += abilities_.CalculateSize(_repeated_abilities_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardInstanceSpecificData other) {
      if (other == null) {
        return;
      }
      if (other.Damage != 0) {
        Damage = other.Damage;
      }
      if (other.Defense != 0) {
        Defense = other.Defense;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Faction != 0) {
        Faction = other.Faction;
      }
      if (other.Cost != 0) {
        Cost = other.Cost;
      }
      abilities_.Add(other.abilities_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Damage = input.ReadInt32();
            break;
          }
          case 16: {
            Defense = input.ReadInt32();
            break;
          }
          case 24: {
            type_ = (global::Loom.ZombieBattleground.Protobuf.CardType.Types.Enum) input.ReadEnum();
            break;
          }
          case 32: {
            faction_ = (global::Loom.ZombieBattleground.Protobuf.Faction.Types.Enum) input.ReadEnum();
            break;
          }
          case 40: {
            Cost = input.ReadInt32();
            break;
          }
          case 50: {
            abilities_.AddEntriesFrom(input, _repeated_abilities_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PictureTransform : pb::IMessage<PictureTransform> {
    private static readonly pb::MessageParser<PictureTransform> _parser = new pb::MessageParser<PictureTransform>(() => new PictureTransform());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PictureTransform> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PictureTransform() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PictureTransform(PictureTransform other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      scale_ = other.scale_ != null ? other.scale_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PictureTransform Clone() {
      return new PictureTransform(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.Vector3Float position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Vector3Float Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.Vector3Float scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Vector3Float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PictureTransform);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PictureTransform other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Scale, other.Scale)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (scale_ != null) hash ^= Scale.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (scale_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Scale);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (scale_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scale);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PictureTransform other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Loom.ZombieBattleground.Protobuf.Vector3Float();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.scale_ != null) {
        if (scale_ == null) {
          scale_ = new global::Loom.ZombieBattleground.Protobuf.Vector3Float();
        }
        Scale.MergeFrom(other.Scale);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              position_ = new global::Loom.ZombieBattleground.Protobuf.Vector3Float();
            }
            input.ReadMessage(position_);
            break;
          }
          case 18: {
            if (scale_ == null) {
              scale_ = new global::Loom.ZombieBattleground.Protobuf.Vector3Float();
            }
            input.ReadMessage(scale_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vector3Float : pb::IMessage<Vector3Float> {
    private static readonly pb::MessageParser<Vector3Float> _parser = new pb::MessageParser<Vector3Float>(() => new Vector3Float());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector3Float> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3Float() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3Float(Vector3Float other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3Float Clone() {
      return new Vector3Float(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector3Float);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector3Float other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector3Float other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vector2Int : pb::IMessage<Vector2Int> {
    private static readonly pb::MessageParser<Vector2Int> _parser = new pb::MessageParser<Vector2Int>(() => new Vector2Int());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector2Int> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2Int() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2Int(Vector2Int other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2Int Clone() {
      return new Vector2Int(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector2Int);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector2Int other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector2Int other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Rect : pb::IMessage<Rect> {
    private static readonly pb::MessageParser<Rect> _parser = new pb::MessageParser<Rect>(() => new Rect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Rect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rect(Rect other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      size_ = other.size_ != null ? other.size_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rect Clone() {
      return new Rect(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.Vector2Int position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Vector2Int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.Vector2Int size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Vector2Int Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Rect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Rect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Size, other.Size)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (size_ != null) hash ^= Size.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (size_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Size);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (size_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Size);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Rect other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Loom.ZombieBattleground.Protobuf.Vector2Int();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.size_ != null) {
        if (size_ == null) {
          size_ = new global::Loom.ZombieBattleground.Protobuf.Vector2Int();
        }
        Size.MergeFrom(other.Size);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              position_ = new global::Loom.ZombieBattleground.Protobuf.Vector2Int();
            }
            input.ReadMessage(position_);
            break;
          }
          case 18: {
            if (size_ == null) {
              size_ = new global::Loom.ZombieBattleground.Protobuf.Vector2Int();
            }
            input.ReadMessage(size_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardList : pb::IMessage<CardList> {
    private static readonly pb::MessageParser<CardList> _parser = new pb::MessageParser<CardList>(() => new CardList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardList(CardList other) : this() {
      cards_ = other.cards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardList Clone() {
      return new CardList(this);
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Card> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.Card.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card> cards_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cards_.Equals(other.cards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cards_.WriteTo(output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardList other) {
      if (other == null) {
        return;
      }
      cards_.Add(other.cards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardCollectionCard : pb::IMessage<CardCollectionCard> {
    private static readonly pb::MessageParser<CardCollectionCard> _parser = new pb::MessageParser<CardCollectionCard>(() => new CardCollectionCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardCollectionCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardCollectionCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardCollectionCard(CardCollectionCard other) : this() {
      amount_ = other.amount_;
      cardKey_ = other.cardKey_ != null ? other.cardKey_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardCollectionCard Clone() {
      return new CardCollectionCard(this);
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "cardKey" field.</summary>
    public const int CardKeyFieldNumber = 4;
    private global::Loom.ZombieBattleground.Protobuf.CardKey cardKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardKey CardKey {
      get { return cardKey_; }
      set {
        cardKey_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardCollectionCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardCollectionCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Amount != other.Amount) return false;
      if (!object.Equals(CardKey, other.CardKey)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (cardKey_ != null) hash ^= CardKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (cardKey_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CardKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (cardKey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardCollectionCard other) {
      if (other == null) {
        return;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.cardKey_ != null) {
        if (cardKey_ == null) {
          cardKey_ = new global::Loom.ZombieBattleground.Protobuf.CardKey();
        }
        CardKey.MergeFrom(other.CardKey);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
          case 34: {
            if (cardKey_ == null) {
              cardKey_ = new global::Loom.ZombieBattleground.Protobuf.CardKey();
            }
            input.ReadMessage(cardKey_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeckCard : pb::IMessage<DeckCard> {
    private static readonly pb::MessageParser<DeckCard> _parser = new pb::MessageParser<DeckCard>(() => new DeckCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeckCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeckCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeckCard(DeckCard other) : this() {
      amount_ = other.amount_;
      cardKey_ = other.cardKey_ != null ? other.cardKey_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeckCard Clone() {
      return new DeckCard(this);
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "cardKey" field.</summary>
    public const int CardKeyFieldNumber = 4;
    private global::Loom.ZombieBattleground.Protobuf.CardKey cardKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardKey CardKey {
      get { return cardKey_; }
      set {
        cardKey_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeckCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeckCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Amount != other.Amount) return false;
      if (!object.Equals(CardKey, other.CardKey)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (cardKey_ != null) hash ^= CardKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (cardKey_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CardKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (cardKey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeckCard other) {
      if (other == null) {
        return;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.cardKey_ != null) {
        if (cardKey_ == null) {
          cardKey_ = new global::Loom.ZombieBattleground.Protobuf.CardKey();
        }
        CardKey.MergeFrom(other.CardKey);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
          case 34: {
            if (cardKey_ == null) {
              cardKey_ = new global::Loom.ZombieBattleground.Protobuf.CardKey();
            }
            input.ReadMessage(cardKey_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardLibrary : pb::IMessage<CardLibrary> {
    private static readonly pb::MessageParser<CardLibrary> _parser = new pb::MessageParser<CardLibrary>(() => new CardLibrary());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardLibrary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardLibrary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardLibrary(CardLibrary other) : this() {
      cards_ = other.cards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardLibrary Clone() {
      return new CardLibrary(this);
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Card> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.Card.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card> cards_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardLibrary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardLibrary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cards_.Equals(other.cards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cards_.WriteTo(output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardLibrary other) {
      if (other == null) {
        return;
      }
      cards_.Add(other.cards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Overlord prototype, shared between all users
  /// </summary>
  public sealed partial class OverlordPrototype : pb::IMessage<OverlordPrototype> {
    private static readonly pb::MessageParser<OverlordPrototype> _parser = new pb::MessageParser<OverlordPrototype>(() => new OverlordPrototype());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OverlordPrototype> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordPrototype() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordPrototype(OverlordPrototype other) : this() {
      id_ = other.id_;
      icon_ = other.icon_;
      name_ = other.name_;
      shortDescription_ = other.shortDescription_;
      longDescription_ = other.longDescription_;
      faction_ = other.faction_;
      skills_ = other.skills_.Clone();
      initialDefense_ = other.initialDefense_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordPrototype Clone() {
      return new OverlordPrototype(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 2;
    private string icon_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shortDescription" field.</summary>
    public const int ShortDescriptionFieldNumber = 4;
    private string shortDescription_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShortDescription {
      get { return shortDescription_; }
      set {
        shortDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "longDescription" field.</summary>
    public const int LongDescriptionFieldNumber = 5;
    private string longDescription_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LongDescription {
      get { return longDescription_; }
      set {
        longDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "faction" field.</summary>
    public const int FactionFieldNumber = 6;
    private global::Loom.ZombieBattleground.Protobuf.Faction.Types.Enum faction_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Faction.Types.Enum Faction {
      get { return faction_; }
      set {
        faction_ = value;
      }
    }

    /// <summary>Field number for the "skills" field.</summary>
    public const int SkillsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.OverlordSkillPrototype> _repeated_skills_codec
        = pb::FieldCodec.ForMessage(74, global::Loom.ZombieBattleground.Protobuf.OverlordSkillPrototype.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.OverlordSkillPrototype> skills_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.OverlordSkillPrototype>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.OverlordSkillPrototype> Skills {
      get { return skills_; }
    }

    /// <summary>Field number for the "initialDefense" field.</summary>
    public const int InitialDefenseFieldNumber = 12;
    private int initialDefense_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InitialDefense {
      get { return initialDefense_; }
      set {
        initialDefense_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OverlordPrototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OverlordPrototype other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Icon != other.Icon) return false;
      if (Name != other.Name) return false;
      if (ShortDescription != other.ShortDescription) return false;
      if (LongDescription != other.LongDescription) return false;
      if (Faction != other.Faction) return false;
      if(!skills_.Equals(other.skills_)) return false;
      if (InitialDefense != other.InitialDefense) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ShortDescription.Length != 0) hash ^= ShortDescription.GetHashCode();
      if (LongDescription.Length != 0) hash ^= LongDescription.GetHashCode();
      if (Faction != 0) hash ^= Faction.GetHashCode();
      hash ^= skills_.GetHashCode();
      if (InitialDefense != 0) hash ^= InitialDefense.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Icon);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (ShortDescription.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ShortDescription);
      }
      if (LongDescription.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LongDescription);
      }
      if (Faction != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Faction);
      }
      skills_.WriteTo(output, _repeated_skills_codec);
      if (InitialDefense != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(InitialDefense);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ShortDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShortDescription);
      }
      if (LongDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LongDescription);
      }
      if (Faction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Faction);
      }
      size += skills_.CalculateSize(_repeated_skills_codec);
      if (InitialDefense != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InitialDefense);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OverlordPrototype other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ShortDescription.Length != 0) {
        ShortDescription = other.ShortDescription;
      }
      if (other.LongDescription.Length != 0) {
        LongDescription = other.LongDescription;
      }
      if (other.Faction != 0) {
        Faction = other.Faction;
      }
      skills_.Add(other.skills_);
      if (other.InitialDefense != 0) {
        InitialDefense = other.InitialDefense;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Icon = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            ShortDescription = input.ReadString();
            break;
          }
          case 42: {
            LongDescription = input.ReadString();
            break;
          }
          case 48: {
            faction_ = (global::Loom.ZombieBattleground.Protobuf.Faction.Types.Enum) input.ReadEnum();
            break;
          }
          case 74: {
            skills_.AddEntriesFrom(input, _repeated_skills_codec);
            break;
          }
          case 96: {
            InitialDefense = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Per-user overlord data, stored between matches
  /// </summary>
  public sealed partial class OverlordUserData : pb::IMessage<OverlordUserData> {
    private static readonly pb::MessageParser<OverlordUserData> _parser = new pb::MessageParser<OverlordUserData>(() => new OverlordUserData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OverlordUserData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordUserData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordUserData(OverlordUserData other) : this() {
      prototypeId_ = other.prototypeId_;
      experience_ = other.experience_;
      level_ = other.level_;
      unlockedSkillIds_ = other.unlockedSkillIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordUserData Clone() {
      return new OverlordUserData(this);
    }

    /// <summary>Field number for the "prototypeId" field.</summary>
    public const int PrototypeIdFieldNumber = 1;
    private long prototypeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PrototypeId {
      get { return prototypeId_; }
      set {
        prototypeId_ = value;
      }
    }

    /// <summary>Field number for the "experience" field.</summary>
    public const int ExperienceFieldNumber = 2;
    private long experience_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Experience {
      get { return experience_; }
      set {
        experience_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private long level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "unlockedSkillIds" field.</summary>
    public const int UnlockedSkillIdsFieldNumber = 4;
    private static readonly pb::FieldCodec<long> _repeated_unlockedSkillIds_codec
        = pb::FieldCodec.ForInt64(34);
    private readonly pbc::RepeatedField<long> unlockedSkillIds_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> UnlockedSkillIds {
      get { return unlockedSkillIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OverlordUserData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OverlordUserData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PrototypeId != other.PrototypeId) return false;
      if (Experience != other.Experience) return false;
      if (Level != other.Level) return false;
      if(!unlockedSkillIds_.Equals(other.unlockedSkillIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PrototypeId != 0L) hash ^= PrototypeId.GetHashCode();
      if (Experience != 0L) hash ^= Experience.GetHashCode();
      if (Level != 0L) hash ^= Level.GetHashCode();
      hash ^= unlockedSkillIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PrototypeId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PrototypeId);
      }
      if (Experience != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Experience);
      }
      if (Level != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Level);
      }
      unlockedSkillIds_.WriteTo(output, _repeated_unlockedSkillIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PrototypeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PrototypeId);
      }
      if (Experience != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Experience);
      }
      if (Level != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Level);
      }
      size += unlockedSkillIds_.CalculateSize(_repeated_unlockedSkillIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OverlordUserData other) {
      if (other == null) {
        return;
      }
      if (other.PrototypeId != 0L) {
        PrototypeId = other.PrototypeId;
      }
      if (other.Experience != 0L) {
        Experience = other.Experience;
      }
      if (other.Level != 0L) {
        Level = other.Level;
      }
      unlockedSkillIds_.Add(other.unlockedSkillIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PrototypeId = input.ReadInt64();
            break;
          }
          case 16: {
            Experience = input.ReadInt64();
            break;
          }
          case 24: {
            Level = input.ReadInt64();
            break;
          }
          case 34:
          case 32: {
            unlockedSkillIds_.AddEntriesFrom(input, _repeated_unlockedSkillIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Full overlord data, tuple of shared and per-user data
  /// </summary>
  public sealed partial class OverlordUserInstance : pb::IMessage<OverlordUserInstance> {
    private static readonly pb::MessageParser<OverlordUserInstance> _parser = new pb::MessageParser<OverlordUserInstance>(() => new OverlordUserInstance());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OverlordUserInstance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordUserInstance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordUserInstance(OverlordUserInstance other) : this() {
      prototype_ = other.prototype_ != null ? other.prototype_.Clone() : null;
      userData_ = other.userData_ != null ? other.userData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordUserInstance Clone() {
      return new OverlordUserInstance(this);
    }

    /// <summary>Field number for the "prototype" field.</summary>
    public const int PrototypeFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.OverlordPrototype prototype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.OverlordPrototype Prototype {
      get { return prototype_; }
      set {
        prototype_ = value;
      }
    }

    /// <summary>Field number for the "userData" field.</summary>
    public const int UserDataFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.OverlordUserData userData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.OverlordUserData UserData {
      get { return userData_; }
      set {
        userData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OverlordUserInstance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OverlordUserInstance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Prototype, other.Prototype)) return false;
      if (!object.Equals(UserData, other.UserData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (prototype_ != null) hash ^= Prototype.GetHashCode();
      if (userData_ != null) hash ^= UserData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (prototype_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Prototype);
      }
      if (userData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (prototype_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prototype);
      }
      if (userData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OverlordUserInstance other) {
      if (other == null) {
        return;
      }
      if (other.prototype_ != null) {
        if (prototype_ == null) {
          prototype_ = new global::Loom.ZombieBattleground.Protobuf.OverlordPrototype();
        }
        Prototype.MergeFrom(other.Prototype);
      }
      if (other.userData_ != null) {
        if (userData_ == null) {
          userData_ = new global::Loom.ZombieBattleground.Protobuf.OverlordUserData();
        }
        UserData.MergeFrom(other.UserData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (prototype_ == null) {
              prototype_ = new global::Loom.ZombieBattleground.Protobuf.OverlordPrototype();
            }
            input.ReadMessage(prototype_);
            break;
          }
          case 18: {
            if (userData_ == null) {
              userData_ = new global::Loom.ZombieBattleground.Protobuf.OverlordUserData();
            }
            input.ReadMessage(userData_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Overlord data only meaningful within a single match
  /// </summary>
  public sealed partial class OverlordMatchInstance : pb::IMessage<OverlordMatchInstance> {
    private static readonly pb::MessageParser<OverlordMatchInstance> _parser = new pb::MessageParser<OverlordMatchInstance>(() => new OverlordMatchInstance());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OverlordMatchInstance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordMatchInstance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordMatchInstance(OverlordMatchInstance other) : this() {
      instanceId_ = other.instanceId_ != null ? other.instanceId_.Clone() : null;
      defense_ = other.defense_;
      goo_ = other.goo_;
      maxGoo_ = other.maxGoo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordMatchInstance Clone() {
      return new OverlordMatchInstance(this);
    }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.InstanceId instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.InstanceId InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "defense" field.</summary>
    public const int DefenseFieldNumber = 2;
    private int defense_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Defense {
      get { return defense_; }
      set {
        defense_ = value;
      }
    }

    /// <summary>Field number for the "goo" field.</summary>
    public const int GooFieldNumber = 3;
    private int goo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Goo {
      get { return goo_; }
      set {
        goo_ = value;
      }
    }

    /// <summary>Field number for the "maxGoo" field.</summary>
    public const int MaxGooFieldNumber = 4;
    private int maxGoo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxGoo {
      get { return maxGoo_; }
      set {
        maxGoo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OverlordMatchInstance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OverlordMatchInstance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(InstanceId, other.InstanceId)) return false;
      if (Defense != other.Defense) return false;
      if (Goo != other.Goo) return false;
      if (MaxGoo != other.MaxGoo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (instanceId_ != null) hash ^= InstanceId.GetHashCode();
      if (Defense != 0) hash ^= Defense.GetHashCode();
      if (Goo != 0) hash ^= Goo.GetHashCode();
      if (MaxGoo != 0) hash ^= MaxGoo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (instanceId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(InstanceId);
      }
      if (Defense != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Defense);
      }
      if (Goo != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Goo);
      }
      if (MaxGoo != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxGoo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (instanceId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InstanceId);
      }
      if (Defense != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Defense);
      }
      if (Goo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Goo);
      }
      if (MaxGoo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxGoo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OverlordMatchInstance other) {
      if (other == null) {
        return;
      }
      if (other.instanceId_ != null) {
        if (instanceId_ == null) {
          instanceId_ = new global::Loom.ZombieBattleground.Protobuf.InstanceId();
        }
        InstanceId.MergeFrom(other.InstanceId);
      }
      if (other.Defense != 0) {
        Defense = other.Defense;
      }
      if (other.Goo != 0) {
        Goo = other.Goo;
      }
      if (other.MaxGoo != 0) {
        MaxGoo = other.MaxGoo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (instanceId_ == null) {
              instanceId_ = new global::Loom.ZombieBattleground.Protobuf.InstanceId();
            }
            input.ReadMessage(instanceId_);
            break;
          }
          case 16: {
            Defense = input.ReadInt32();
            break;
          }
          case 24: {
            Goo = input.ReadInt32();
            break;
          }
          case 32: {
            MaxGoo = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OverlordSkillPrototype : pb::IMessage<OverlordSkillPrototype> {
    private static readonly pb::MessageParser<OverlordSkillPrototype> _parser = new pb::MessageParser<OverlordSkillPrototype>(() => new OverlordSkillPrototype());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OverlordSkillPrototype> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordSkillPrototype() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordSkillPrototype(OverlordSkillPrototype other) : this() {
      title_ = other.title_;
      skill_ = other.skill_;
      iconPath_ = other.iconPath_;
      description_ = other.description_;
      skillTargets_ = other.skillTargets_.Clone();
      targetUnitSpecialStatus_ = other.targetUnitSpecialStatus_;
      targetFactions_ = other.targetFactions_.Clone();
      value_ = other.value_;
      cooldown_ = other.cooldown_;
      initialCooldown_ = other.initialCooldown_;
      damage_ = other.damage_;
      count_ = other.count_;
      id_ = other.id_;
      canSelectTarget_ = other.canSelectTarget_;
      unitStatus_ = other.unitStatus_;
      singleUse_ = other.singleUse_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordSkillPrototype Clone() {
      return new OverlordSkillPrototype(this);
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 1;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "skill" field.</summary>
    public const int SkillFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.OverlordSkillType.Types.Enum skill_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.OverlordSkillType.Types.Enum Skill {
      get { return skill_; }
      set {
        skill_ = value;
      }
    }

    /// <summary>Field number for the "iconPath" field.</summary>
    public const int IconPathFieldNumber = 3;
    private string iconPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IconPath {
      get { return iconPath_; }
      set {
        iconPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "skillTargets" field.</summary>
    public const int SkillTargetsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.SkillTarget.Types.Enum> _repeated_skillTargets_codec
        = pb::FieldCodec.ForEnum(42, x => (int) x, x => (global::Loom.ZombieBattleground.Protobuf.SkillTarget.Types.Enum) x);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.SkillTarget.Types.Enum> skillTargets_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.SkillTarget.Types.Enum>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.SkillTarget.Types.Enum> SkillTargets {
      get { return skillTargets_; }
    }

    /// <summary>Field number for the "targetUnitSpecialStatus" field.</summary>
    public const int TargetUnitSpecialStatusFieldNumber = 6;
    private global::Loom.ZombieBattleground.Protobuf.UnitSpecialStatus.Types.Enum targetUnitSpecialStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.UnitSpecialStatus.Types.Enum TargetUnitSpecialStatus {
      get { return targetUnitSpecialStatus_; }
      set {
        targetUnitSpecialStatus_ = value;
      }
    }

    /// <summary>Field number for the "targetFactions" field.</summary>
    public const int TargetFactionsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Faction.Types.Enum> _repeated_targetFactions_codec
        = pb::FieldCodec.ForEnum(58, x => (int) x, x => (global::Loom.ZombieBattleground.Protobuf.Faction.Types.Enum) x);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Faction.Types.Enum> targetFactions_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Faction.Types.Enum>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Faction.Types.Enum> TargetFactions {
      get { return targetFactions_; }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 8;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "cooldown" field.</summary>
    public const int CooldownFieldNumber = 9;
    private int cooldown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cooldown {
      get { return cooldown_; }
      set {
        cooldown_ = value;
      }
    }

    /// <summary>Field number for the "initialCooldown" field.</summary>
    public const int InitialCooldownFieldNumber = 10;
    private int initialCooldown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InitialCooldown {
      get { return initialCooldown_; }
      set {
        initialCooldown_ = value;
      }
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 11;
    private int damage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 12;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 13;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "canSelectTarget" field.</summary>
    public const int CanSelectTargetFieldNumber = 15;
    private bool canSelectTarget_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanSelectTarget {
      get { return canSelectTarget_; }
      set {
        canSelectTarget_ = value;
      }
    }

    /// <summary>Field number for the "unitStatus" field.</summary>
    public const int UnitStatusFieldNumber = 16;
    private string unitStatus_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnitStatus {
      get { return unitStatus_; }
      set {
        unitStatus_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "singleUse" field.</summary>
    public const int SingleUseFieldNumber = 17;
    private bool singleUse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SingleUse {
      get { return singleUse_; }
      set {
        singleUse_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OverlordSkillPrototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OverlordSkillPrototype other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Title != other.Title) return false;
      if (Skill != other.Skill) return false;
      if (IconPath != other.IconPath) return false;
      if (Description != other.Description) return false;
      if(!skillTargets_.Equals(other.skillTargets_)) return false;
      if (TargetUnitSpecialStatus != other.TargetUnitSpecialStatus) return false;
      if(!targetFactions_.Equals(other.targetFactions_)) return false;
      if (Value != other.Value) return false;
      if (Cooldown != other.Cooldown) return false;
      if (InitialCooldown != other.InitialCooldown) return false;
      if (Damage != other.Damage) return false;
      if (Count != other.Count) return false;
      if (Id != other.Id) return false;
      if (CanSelectTarget != other.CanSelectTarget) return false;
      if (UnitStatus != other.UnitStatus) return false;
      if (SingleUse != other.SingleUse) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Skill != 0) hash ^= Skill.GetHashCode();
      if (IconPath.Length != 0) hash ^= IconPath.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= skillTargets_.GetHashCode();
      if (TargetUnitSpecialStatus != 0) hash ^= TargetUnitSpecialStatus.GetHashCode();
      hash ^= targetFactions_.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (Cooldown != 0) hash ^= Cooldown.GetHashCode();
      if (InitialCooldown != 0) hash ^= InitialCooldown.GetHashCode();
      if (Damage != 0) hash ^= Damage.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (CanSelectTarget != false) hash ^= CanSelectTarget.GetHashCode();
      if (UnitStatus.Length != 0) hash ^= UnitStatus.GetHashCode();
      if (SingleUse != false) hash ^= SingleUse.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Title.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Title);
      }
      if (Skill != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Skill);
      }
      if (IconPath.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(IconPath);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      skillTargets_.WriteTo(output, _repeated_skillTargets_codec);
      if (TargetUnitSpecialStatus != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) TargetUnitSpecialStatus);
      }
      targetFactions_.WriteTo(output, _repeated_targetFactions_codec);
      if (Value != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Value);
      }
      if (Cooldown != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Cooldown);
      }
      if (InitialCooldown != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(InitialCooldown);
      }
      if (Damage != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Damage);
      }
      if (Count != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Count);
      }
      if (Id != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(Id);
      }
      if (CanSelectTarget != false) {
        output.WriteRawTag(120);
        output.WriteBool(CanSelectTarget);
      }
      if (UnitStatus.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(UnitStatus);
      }
      if (SingleUse != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(SingleUse);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Skill != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Skill);
      }
      if (IconPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IconPath);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += skillTargets_.CalculateSize(_repeated_skillTargets_codec);
      if (TargetUnitSpecialStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TargetUnitSpecialStatus);
      }
      size += targetFactions_.CalculateSize(_repeated_targetFactions_codec);
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (Cooldown != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cooldown);
      }
      if (InitialCooldown != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InitialCooldown);
      }
      if (Damage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (CanSelectTarget != false) {
        size += 1 + 1;
      }
      if (UnitStatus.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UnitStatus);
      }
      if (SingleUse != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OverlordSkillPrototype other) {
      if (other == null) {
        return;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Skill != 0) {
        Skill = other.Skill;
      }
      if (other.IconPath.Length != 0) {
        IconPath = other.IconPath;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      skillTargets_.Add(other.skillTargets_);
      if (other.TargetUnitSpecialStatus != 0) {
        TargetUnitSpecialStatus = other.TargetUnitSpecialStatus;
      }
      targetFactions_.Add(other.targetFactions_);
      if (other.Value != 0) {
        Value = other.Value;
      }
      if (other.Cooldown != 0) {
        Cooldown = other.Cooldown;
      }
      if (other.InitialCooldown != 0) {
        InitialCooldown = other.InitialCooldown;
      }
      if (other.Damage != 0) {
        Damage = other.Damage;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.CanSelectTarget != false) {
        CanSelectTarget = other.CanSelectTarget;
      }
      if (other.UnitStatus.Length != 0) {
        UnitStatus = other.UnitStatus;
      }
      if (other.SingleUse != false) {
        SingleUse = other.SingleUse;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Title = input.ReadString();
            break;
          }
          case 16: {
            skill_ = (global::Loom.ZombieBattleground.Protobuf.OverlordSkillType.Types.Enum) input.ReadEnum();
            break;
          }
          case 26: {
            IconPath = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42:
          case 40: {
            skillTargets_.AddEntriesFrom(input, _repeated_skillTargets_codec);
            break;
          }
          case 48: {
            targetUnitSpecialStatus_ = (global::Loom.ZombieBattleground.Protobuf.UnitSpecialStatus.Types.Enum) input.ReadEnum();
            break;
          }
          case 58:
          case 56: {
            targetFactions_.AddEntriesFrom(input, _repeated_targetFactions_codec);
            break;
          }
          case 64: {
            Value = input.ReadInt32();
            break;
          }
          case 72: {
            Cooldown = input.ReadInt32();
            break;
          }
          case 80: {
            InitialCooldown = input.ReadInt32();
            break;
          }
          case 88: {
            Damage = input.ReadInt32();
            break;
          }
          case 96: {
            Count = input.ReadInt32();
            break;
          }
          case 104: {
            Id = input.ReadInt64();
            break;
          }
          case 120: {
            CanSelectTarget = input.ReadBool();
            break;
          }
          case 130: {
            UnitStatus = input.ReadString();
            break;
          }
          case 136: {
            SingleUse = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OverlordPrototypeList : pb::IMessage<OverlordPrototypeList> {
    private static readonly pb::MessageParser<OverlordPrototypeList> _parser = new pb::MessageParser<OverlordPrototypeList>(() => new OverlordPrototypeList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OverlordPrototypeList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordPrototypeList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordPrototypeList(OverlordPrototypeList other) : this() {
      overlords_ = other.overlords_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordPrototypeList Clone() {
      return new OverlordPrototypeList(this);
    }

    /// <summary>Field number for the "overlords" field.</summary>
    public const int OverlordsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.OverlordPrototype> _repeated_overlords_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.OverlordPrototype.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.OverlordPrototype> overlords_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.OverlordPrototype>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.OverlordPrototype> Overlords {
      get { return overlords_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OverlordPrototypeList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OverlordPrototypeList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!overlords_.Equals(other.overlords_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= overlords_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      overlords_.WriteTo(output, _repeated_overlords_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += overlords_.CalculateSize(_repeated_overlords_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OverlordPrototypeList other) {
      if (other == null) {
        return;
      }
      overlords_.Add(other.overlords_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            overlords_.AddEntriesFrom(input, _repeated_overlords_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class OverlordUserDataList : pb::IMessage<OverlordUserDataList> {
    private static readonly pb::MessageParser<OverlordUserDataList> _parser = new pb::MessageParser<OverlordUserDataList>(() => new OverlordUserDataList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OverlordUserDataList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordUserDataList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordUserDataList(OverlordUserDataList other) : this() {
      overlordsUserData_ = other.overlordsUserData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordUserDataList Clone() {
      return new OverlordUserDataList(this);
    }

    /// <summary>Field number for the "overlordsUserData" field.</summary>
    public const int OverlordsUserDataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.OverlordUserData> _repeated_overlordsUserData_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.OverlordUserData.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.OverlordUserData> overlordsUserData_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.OverlordUserData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.OverlordUserData> OverlordsUserData {
      get { return overlordsUserData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OverlordUserDataList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OverlordUserDataList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!overlordsUserData_.Equals(other.overlordsUserData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= overlordsUserData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      overlordsUserData_.WriteTo(output, _repeated_overlordsUserData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += overlordsUserData_.CalculateSize(_repeated_overlordsUserData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OverlordUserDataList other) {
      if (other == null) {
        return;
      }
      overlordsUserData_.Add(other.overlordsUserData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            overlordsUserData_.AddEntriesFrom(input, _repeated_overlordsUserData_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardCollectionList : pb::IMessage<CardCollectionList> {
    private static readonly pb::MessageParser<CardCollectionList> _parser = new pb::MessageParser<CardCollectionList>(() => new CardCollectionList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardCollectionList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardCollectionList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardCollectionList(CardCollectionList other) : this() {
      cards_ = other.cards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardCollectionList Clone() {
      return new CardCollectionList(this);
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardCollectionCard> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.CardCollectionCard.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollectionCard> cards_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollectionCard>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollectionCard> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardCollectionList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardCollectionList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cards_.Equals(other.cards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cards_.WriteTo(output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardCollectionList other) {
      if (other == null) {
        return;
      }
      cards_.Add(other.cards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeckList : pb::IMessage<DeckList> {
    private static readonly pb::MessageParser<DeckList> _parser = new pb::MessageParser<DeckList>(() => new DeckList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeckList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeckList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeckList(DeckList other) : this() {
      decks_ = other.decks_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeckList Clone() {
      return new DeckList(this);
    }

    /// <summary>Field number for the "decks" field.</summary>
    public const int DecksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Deck> _repeated_decks_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.Deck.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck> decks_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck> Decks {
      get { return decks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeckList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeckList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!decks_.Equals(other.decks_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= decks_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      decks_.WriteTo(output, _repeated_decks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += decks_.CalculateSize(_repeated_decks_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeckList other) {
      if (other == null) {
        return;
      }
      decks_.Add(other.decks_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            decks_.AddEntriesFrom(input, _repeated_decks_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIDeck : pb::IMessage<AIDeck> {
    private static readonly pb::MessageParser<AIDeck> _parser = new pb::MessageParser<AIDeck>(() => new AIDeck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIDeck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIDeck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIDeck(AIDeck other) : this() {
      deck_ = other.deck_ != null ? other.deck_.Clone() : null;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIDeck Clone() {
      return new AIDeck(this);
    }

    /// <summary>Field number for the "deck" field.</summary>
    public const int DeckFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.Deck deck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Deck Deck {
      get { return deck_; }
      set {
        deck_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.AIType.Types.Enum type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.AIType.Types.Enum Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIDeck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIDeck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Deck, other.Deck)) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (deck_ != null) hash ^= Deck.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (deck_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Deck);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (deck_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deck);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIDeck other) {
      if (other == null) {
        return;
      }
      if (other.deck_ != null) {
        if (deck_ == null) {
          deck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
        }
        Deck.MergeFrom(other.Deck);
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (deck_ == null) {
              deck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
            }
            input.ReadMessage(deck_);
            break;
          }
          case 16: {
            type_ = (global::Loom.ZombieBattleground.Protobuf.AIType.Types.Enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIDeckList : pb::IMessage<AIDeckList> {
    private static readonly pb::MessageParser<AIDeckList> _parser = new pb::MessageParser<AIDeckList>(() => new AIDeckList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIDeckList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIDeckList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIDeckList(AIDeckList other) : this() {
      decks_ = other.decks_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIDeckList Clone() {
      return new AIDeckList(this);
    }

    /// <summary>Field number for the "decks" field.</summary>
    public const int DecksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.AIDeck> _repeated_decks_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.AIDeck.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AIDeck> decks_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AIDeck>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AIDeck> Decks {
      get { return decks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIDeckList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIDeckList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!decks_.Equals(other.decks_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= decks_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      decks_.WriteTo(output, _repeated_decks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += decks_.CalculateSize(_repeated_decks_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIDeckList other) {
      if (other == null) {
        return;
      }
      decks_.Add(other.decks_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            decks_.AddEntriesFrom(input, _repeated_decks_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class OverlordLevelingData : pb::IMessage<OverlordLevelingData> {
    private static readonly pb::MessageParser<OverlordLevelingData> _parser = new pb::MessageParser<OverlordLevelingData>(() => new OverlordLevelingData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OverlordLevelingData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordLevelingData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordLevelingData(OverlordLevelingData other) : this() {
      rewards_ = other.rewards_.Clone();
      experienceActions_ = other.experienceActions_.Clone();
      fixed_ = other.fixed_;
      experienceStep_ = other.experienceStep_;
      gooRewardStep_ = other.gooRewardStep_;
      maxLevel_ = other.maxLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordLevelingData Clone() {
      return new OverlordLevelingData(this);
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.LevelReward> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.LevelReward.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.LevelReward> rewards_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.LevelReward>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.LevelReward> Rewards {
      get { return rewards_; }
    }

    /// <summary>Field number for the "experienceActions" field.</summary>
    public const int ExperienceActionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.ExperienceAction> _repeated_experienceActions_codec
        = pb::FieldCodec.ForMessage(18, global::Loom.ZombieBattleground.Protobuf.ExperienceAction.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.ExperienceAction> experienceActions_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.ExperienceAction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.ExperienceAction> ExperienceActions {
      get { return experienceActions_; }
    }

    /// <summary>Field number for the "fixed" field.</summary>
    public const int FixedFieldNumber = 3;
    private int fixed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Fixed {
      get { return fixed_; }
      set {
        fixed_ = value;
      }
    }

    /// <summary>Field number for the "experienceStep" field.</summary>
    public const int ExperienceStepFieldNumber = 4;
    private int experienceStep_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExperienceStep {
      get { return experienceStep_; }
      set {
        experienceStep_ = value;
      }
    }

    /// <summary>Field number for the "gooRewardStep" field.</summary>
    public const int GooRewardStepFieldNumber = 5;
    private int gooRewardStep_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GooRewardStep {
      get { return gooRewardStep_; }
      set {
        gooRewardStep_ = value;
      }
    }

    /// <summary>Field number for the "maxLevel" field.</summary>
    public const int MaxLevelFieldNumber = 6;
    private int maxLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxLevel {
      get { return maxLevel_; }
      set {
        maxLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OverlordLevelingData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OverlordLevelingData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rewards_.Equals(other.rewards_)) return false;
      if(!experienceActions_.Equals(other.experienceActions_)) return false;
      if (Fixed != other.Fixed) return false;
      if (ExperienceStep != other.ExperienceStep) return false;
      if (GooRewardStep != other.GooRewardStep) return false;
      if (MaxLevel != other.MaxLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rewards_.GetHashCode();
      hash ^= experienceActions_.GetHashCode();
      if (Fixed != 0) hash ^= Fixed.GetHashCode();
      if (ExperienceStep != 0) hash ^= ExperienceStep.GetHashCode();
      if (GooRewardStep != 0) hash ^= GooRewardStep.GetHashCode();
      if (MaxLevel != 0) hash ^= MaxLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rewards_.WriteTo(output, _repeated_rewards_codec);
      experienceActions_.WriteTo(output, _repeated_experienceActions_codec);
      if (Fixed != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Fixed);
      }
      if (ExperienceStep != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ExperienceStep);
      }
      if (GooRewardStep != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(GooRewardStep);
      }
      if (MaxLevel != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MaxLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      size += experienceActions_.CalculateSize(_repeated_experienceActions_codec);
      if (Fixed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Fixed);
      }
      if (ExperienceStep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExperienceStep);
      }
      if (GooRewardStep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GooRewardStep);
      }
      if (MaxLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OverlordLevelingData other) {
      if (other == null) {
        return;
      }
      rewards_.Add(other.rewards_);
      experienceActions_.Add(other.experienceActions_);
      if (other.Fixed != 0) {
        Fixed = other.Fixed;
      }
      if (other.ExperienceStep != 0) {
        ExperienceStep = other.ExperienceStep;
      }
      if (other.GooRewardStep != 0) {
        GooRewardStep = other.GooRewardStep;
      }
      if (other.MaxLevel != 0) {
        MaxLevel = other.MaxLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
          case 18: {
            experienceActions_.AddEntriesFrom(input, _repeated_experienceActions_codec);
            break;
          }
          case 24: {
            Fixed = input.ReadInt32();
            break;
          }
          case 32: {
            ExperienceStep = input.ReadInt32();
            break;
          }
          case 40: {
            GooRewardStep = input.ReadInt32();
            break;
          }
          case 48: {
            MaxLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LevelReward : pb::IMessage<LevelReward> {
    private static readonly pb::MessageParser<LevelReward> _parser = new pb::MessageParser<LevelReward>(() => new LevelReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelReward(LevelReward other) : this() {
      level_ = other.level_;
      switch (other.RewardCase) {
        case RewardOneofCase.SkillReward:
          SkillReward = other.SkillReward.Clone();
          break;
        case RewardOneofCase.BoosterPackReward:
          BoosterPackReward = other.BoosterPackReward.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelReward Clone() {
      return new LevelReward(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "skillReward" field.</summary>
    public const int SkillRewardFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.OverlordSkillRewardItem SkillReward {
      get { return rewardCase_ == RewardOneofCase.SkillReward ? (global::Loom.ZombieBattleground.Protobuf.OverlordSkillRewardItem) reward_ : null; }
      set {
        reward_ = value;
        rewardCase_ = value == null ? RewardOneofCase.None : RewardOneofCase.SkillReward;
      }
    }

    /// <summary>Field number for the "boosterPackReward" field.</summary>
    public const int BoosterPackRewardFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.BoosterPackRewardItem BoosterPackReward {
      get { return rewardCase_ == RewardOneofCase.BoosterPackReward ? (global::Loom.ZombieBattleground.Protobuf.BoosterPackRewardItem) reward_ : null; }
      set {
        reward_ = value;
        rewardCase_ = value == null ? RewardOneofCase.None : RewardOneofCase.BoosterPackReward;
      }
    }

    private object reward_;
    /// <summary>Enum of possible cases for the "reward" oneof.</summary>
    public enum RewardOneofCase {
      None = 0,
      SkillReward = 2,
      BoosterPackReward = 3,
    }
    private RewardOneofCase rewardCase_ = RewardOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RewardOneofCase RewardCase {
      get { return rewardCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReward() {
      rewardCase_ = RewardOneofCase.None;
      reward_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if (!object.Equals(SkillReward, other.SkillReward)) return false;
      if (!object.Equals(BoosterPackReward, other.BoosterPackReward)) return false;
      if (RewardCase != other.RewardCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      if (rewardCase_ == RewardOneofCase.SkillReward) hash ^= SkillReward.GetHashCode();
      if (rewardCase_ == RewardOneofCase.BoosterPackReward) hash ^= BoosterPackReward.GetHashCode();
      hash ^= (int) rewardCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
      if (rewardCase_ == RewardOneofCase.SkillReward) {
        output.WriteRawTag(18);
        output.WriteMessage(SkillReward);
      }
      if (rewardCase_ == RewardOneofCase.BoosterPackReward) {
        output.WriteRawTag(26);
        output.WriteMessage(BoosterPackReward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (rewardCase_ == RewardOneofCase.SkillReward) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SkillReward);
      }
      if (rewardCase_ == RewardOneofCase.BoosterPackReward) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BoosterPackReward);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelReward other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      switch (other.RewardCase) {
        case RewardOneofCase.SkillReward:
          if (SkillReward == null) {
            SkillReward = new global::Loom.ZombieBattleground.Protobuf.OverlordSkillRewardItem();
          }
          SkillReward.MergeFrom(other.SkillReward);
          break;
        case RewardOneofCase.BoosterPackReward:
          if (BoosterPackReward == null) {
            BoosterPackReward = new global::Loom.ZombieBattleground.Protobuf.BoosterPackRewardItem();
          }
          BoosterPackReward.MergeFrom(other.BoosterPackReward);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
          case 18: {
            global::Loom.ZombieBattleground.Protobuf.OverlordSkillRewardItem subBuilder = new global::Loom.ZombieBattleground.Protobuf.OverlordSkillRewardItem();
            if (rewardCase_ == RewardOneofCase.SkillReward) {
              subBuilder.MergeFrom(SkillReward);
            }
            input.ReadMessage(subBuilder);
            SkillReward = subBuilder;
            break;
          }
          case 26: {
            global::Loom.ZombieBattleground.Protobuf.BoosterPackRewardItem subBuilder = new global::Loom.ZombieBattleground.Protobuf.BoosterPackRewardItem();
            if (rewardCase_ == RewardOneofCase.BoosterPackReward) {
              subBuilder.MergeFrom(BoosterPackReward);
            }
            input.ReadMessage(subBuilder);
            BoosterPackReward = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class OverlordSkillRewardItem : pb::IMessage<OverlordSkillRewardItem> {
    private static readonly pb::MessageParser<OverlordSkillRewardItem> _parser = new pb::MessageParser<OverlordSkillRewardItem>(() => new OverlordSkillRewardItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OverlordSkillRewardItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordSkillRewardItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordSkillRewardItem(OverlordSkillRewardItem other) : this() {
      skillIndex_ = other.skillIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordSkillRewardItem Clone() {
      return new OverlordSkillRewardItem(this);
    }

    /// <summary>Field number for the "skillIndex" field.</summary>
    public const int SkillIndexFieldNumber = 1;
    private int skillIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillIndex {
      get { return skillIndex_; }
      set {
        skillIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OverlordSkillRewardItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OverlordSkillRewardItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SkillIndex != other.SkillIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SkillIndex != 0) hash ^= SkillIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkillIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OverlordSkillRewardItem other) {
      if (other == null) {
        return;
      }
      if (other.SkillIndex != 0) {
        SkillIndex = other.SkillIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SkillIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BoosterPackRewardItem : pb::IMessage<BoosterPackRewardItem> {
    private static readonly pb::MessageParser<BoosterPackRewardItem> _parser = new pb::MessageParser<BoosterPackRewardItem>(() => new BoosterPackRewardItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BoosterPackRewardItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoosterPackRewardItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoosterPackRewardItem(BoosterPackRewardItem other) : this() {
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoosterPackRewardItem Clone() {
      return new BoosterPackRewardItem(this);
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 1;
    private int amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BoosterPackRewardItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BoosterPackRewardItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Amount != 0) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Amount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BoosterPackRewardItem other) {
      if (other == null) {
        return;
      }
      if (other.Amount != 0) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Amount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExperienceAction : pb::IMessage<ExperienceAction> {
    private static readonly pb::MessageParser<ExperienceAction> _parser = new pb::MessageParser<ExperienceAction>(() => new ExperienceAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExperienceAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExperienceAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExperienceAction(ExperienceAction other) : this() {
      action_ = other.action_;
      experience_ = other.experience_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExperienceAction Clone() {
      return new ExperienceAction(this);
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.ExperienceActionType.Types.Enum action_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.ExperienceActionType.Types.Enum Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "experience" field.</summary>
    public const int ExperienceFieldNumber = 2;
    private int experience_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Experience {
      get { return experience_; }
      set {
        experience_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExperienceAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExperienceAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Action != other.Action) return false;
      if (Experience != other.Experience) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Action != 0) hash ^= Action.GetHashCode();
      if (Experience != 0) hash ^= Experience.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Action != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Action);
      }
      if (Experience != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Experience);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
      }
      if (Experience != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Experience);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExperienceAction other) {
      if (other == null) {
        return;
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
      if (other.Experience != 0) {
        Experience = other.Experience;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            action_ = (global::Loom.ZombieBattleground.Protobuf.ExperienceActionType.Types.Enum) input.ReadEnum();
            break;
          }
          case 16: {
            Experience = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ContractState : pb::IMessage<ContractState> {
    private static readonly pb::MessageParser<ContractState> _parser = new pb::MessageParser<ContractState>(() => new ContractState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContractState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContractState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContractState(ContractState other) : this() {
      lastPlasmachainBlockNumber_ = other.lastPlasmachainBlockNumber_;
      currentFiatPurchaseTxId_ = other.currentFiatPurchaseTxId_ != null ? other.currentFiatPurchaseTxId_.Clone() : null;
      currentOracleCommandId_ = other.currentOracleCommandId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContractState Clone() {
      return new ContractState(this);
    }

    /// <summary>Field number for the "lastPlasmachainBlockNumber" field.</summary>
    public const int LastPlasmachainBlockNumberFieldNumber = 1;
    private ulong lastPlasmachainBlockNumber_;
    /// <summary>
    /// Last Plasmachain block succesfully processed by oracle
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LastPlasmachainBlockNumber {
      get { return lastPlasmachainBlockNumber_; }
      set {
        lastPlasmachainBlockNumber_ = value;
      }
    }

    /// <summary>Field number for the "currentFiatPurchaseTxId" field.</summary>
    public const int CurrentFiatPurchaseTxIdFieldNumber = 5;
    private global::Loom.Client.Protobuf.BigUInt currentFiatPurchaseTxId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.Client.Protobuf.BigUInt CurrentFiatPurchaseTxId {
      get { return currentFiatPurchaseTxId_; }
      set {
        currentFiatPurchaseTxId_ = value;
      }
    }

    /// <summary>Field number for the "currentOracleCommandId" field.</summary>
    public const int CurrentOracleCommandIdFieldNumber = 6;
    private ulong currentOracleCommandId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CurrentOracleCommandId {
      get { return currentOracleCommandId_; }
      set {
        currentOracleCommandId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContractState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContractState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LastPlasmachainBlockNumber != other.LastPlasmachainBlockNumber) return false;
      if (!object.Equals(CurrentFiatPurchaseTxId, other.CurrentFiatPurchaseTxId)) return false;
      if (CurrentOracleCommandId != other.CurrentOracleCommandId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LastPlasmachainBlockNumber != 0UL) hash ^= LastPlasmachainBlockNumber.GetHashCode();
      if (currentFiatPurchaseTxId_ != null) hash ^= CurrentFiatPurchaseTxId.GetHashCode();
      if (CurrentOracleCommandId != 0UL) hash ^= CurrentOracleCommandId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LastPlasmachainBlockNumber != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(LastPlasmachainBlockNumber);
      }
      if (currentFiatPurchaseTxId_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(CurrentFiatPurchaseTxId);
      }
      if (CurrentOracleCommandId != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(CurrentOracleCommandId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LastPlasmachainBlockNumber != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LastPlasmachainBlockNumber);
      }
      if (currentFiatPurchaseTxId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentFiatPurchaseTxId);
      }
      if (CurrentOracleCommandId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CurrentOracleCommandId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContractState other) {
      if (other == null) {
        return;
      }
      if (other.LastPlasmachainBlockNumber != 0UL) {
        LastPlasmachainBlockNumber = other.LastPlasmachainBlockNumber;
      }
      if (other.currentFiatPurchaseTxId_ != null) {
        if (currentFiatPurchaseTxId_ == null) {
          currentFiatPurchaseTxId_ = new global::Loom.Client.Protobuf.BigUInt();
        }
        CurrentFiatPurchaseTxId.MergeFrom(other.CurrentFiatPurchaseTxId);
      }
      if (other.CurrentOracleCommandId != 0UL) {
        CurrentOracleCommandId = other.CurrentOracleCommandId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LastPlasmachainBlockNumber = input.ReadUInt64();
            break;
          }
          case 42: {
            if (currentFiatPurchaseTxId_ == null) {
              currentFiatPurchaseTxId_ = new global::Loom.Client.Protobuf.BigUInt();
            }
            input.ReadMessage(currentFiatPurchaseTxId_);
            break;
          }
          case 48: {
            CurrentOracleCommandId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ContractConfiguration : pb::IMessage<ContractConfiguration> {
    private static readonly pb::MessageParser<ContractConfiguration> _parser = new pb::MessageParser<ContractConfiguration>(() => new ContractConfiguration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContractConfiguration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContractConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContractConfiguration(ContractConfiguration other) : this() {
      fiatPurchaseContractVersion_ = other.fiatPurchaseContractVersion_;
      initialFiatPurchaseTxId_ = other.initialFiatPurchaseTxId_ != null ? other.initialFiatPurchaseTxId_.Clone() : null;
      useCardLibraryAsUserCollection_ = other.useCardLibraryAsUserCollection_;
      dataWipeConfiguration_ = other.dataWipeConfiguration_.Clone();
      cardCollectionSyncDataVersion_ = other.cardCollectionSyncDataVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContractConfiguration Clone() {
      return new ContractConfiguration(this);
    }

    /// <summary>Field number for the "fiatPurchaseContractVersion" field.</summary>
    public const int FiatPurchaseContractVersionFieldNumber = 1;
    private ulong fiatPurchaseContractVersion_;
    /// <summary>
    /// Plasmachain FiatPurchase contract version
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FiatPurchaseContractVersion {
      get { return fiatPurchaseContractVersion_; }
      set {
        fiatPurchaseContractVersion_ = value;
      }
    }

    /// <summary>Field number for the "initialFiatPurchaseTxId" field.</summary>
    public const int InitialFiatPurchaseTxIdFieldNumber = 2;
    private global::Loom.Client.Protobuf.BigUInt initialFiatPurchaseTxId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.Client.Protobuf.BigUInt InitialFiatPurchaseTxId {
      get { return initialFiatPurchaseTxId_; }
      set {
        initialFiatPurchaseTxId_ = value;
      }
    }

    /// <summary>Field number for the "useCardLibraryAsUserCollection" field.</summary>
    public const int UseCardLibraryAsUserCollectionFieldNumber = 3;
    private bool useCardLibraryAsUserCollection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseCardLibraryAsUserCollection {
      get { return useCardLibraryAsUserCollection_; }
      set {
        useCardLibraryAsUserCollection_ = value;
      }
    }

    /// <summary>Field number for the "dataWipeConfiguration" field.</summary>
    public const int DataWipeConfigurationFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.DataWipeConfiguration> _repeated_dataWipeConfiguration_codec
        = pb::FieldCodec.ForMessage(34, global::Loom.ZombieBattleground.Protobuf.DataWipeConfiguration.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.DataWipeConfiguration> dataWipeConfiguration_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.DataWipeConfiguration>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.DataWipeConfiguration> DataWipeConfiguration {
      get { return dataWipeConfiguration_; }
    }

    /// <summary>Field number for the "cardCollectionSyncDataVersion" field.</summary>
    public const int CardCollectionSyncDataVersionFieldNumber = 5;
    private string cardCollectionSyncDataVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CardCollectionSyncDataVersion {
      get { return cardCollectionSyncDataVersion_; }
      set {
        cardCollectionSyncDataVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContractConfiguration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContractConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FiatPurchaseContractVersion != other.FiatPurchaseContractVersion) return false;
      if (!object.Equals(InitialFiatPurchaseTxId, other.InitialFiatPurchaseTxId)) return false;
      if (UseCardLibraryAsUserCollection != other.UseCardLibraryAsUserCollection) return false;
      if(!dataWipeConfiguration_.Equals(other.dataWipeConfiguration_)) return false;
      if (CardCollectionSyncDataVersion != other.CardCollectionSyncDataVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FiatPurchaseContractVersion != 0UL) hash ^= FiatPurchaseContractVersion.GetHashCode();
      if (initialFiatPurchaseTxId_ != null) hash ^= InitialFiatPurchaseTxId.GetHashCode();
      if (UseCardLibraryAsUserCollection != false) hash ^= UseCardLibraryAsUserCollection.GetHashCode();
      hash ^= dataWipeConfiguration_.GetHashCode();
      if (CardCollectionSyncDataVersion.Length != 0) hash ^= CardCollectionSyncDataVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FiatPurchaseContractVersion != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(FiatPurchaseContractVersion);
      }
      if (initialFiatPurchaseTxId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(InitialFiatPurchaseTxId);
      }
      if (UseCardLibraryAsUserCollection != false) {
        output.WriteRawTag(24);
        output.WriteBool(UseCardLibraryAsUserCollection);
      }
      dataWipeConfiguration_.WriteTo(output, _repeated_dataWipeConfiguration_codec);
      if (CardCollectionSyncDataVersion.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CardCollectionSyncDataVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FiatPurchaseContractVersion != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FiatPurchaseContractVersion);
      }
      if (initialFiatPurchaseTxId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InitialFiatPurchaseTxId);
      }
      if (UseCardLibraryAsUserCollection != false) {
        size += 1 + 1;
      }
      size += dataWipeConfiguration_.CalculateSize(_repeated_dataWipeConfiguration_codec);
      if (CardCollectionSyncDataVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CardCollectionSyncDataVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContractConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.FiatPurchaseContractVersion != 0UL) {
        FiatPurchaseContractVersion = other.FiatPurchaseContractVersion;
      }
      if (other.initialFiatPurchaseTxId_ != null) {
        if (initialFiatPurchaseTxId_ == null) {
          initialFiatPurchaseTxId_ = new global::Loom.Client.Protobuf.BigUInt();
        }
        InitialFiatPurchaseTxId.MergeFrom(other.InitialFiatPurchaseTxId);
      }
      if (other.UseCardLibraryAsUserCollection != false) {
        UseCardLibraryAsUserCollection = other.UseCardLibraryAsUserCollection;
      }
      dataWipeConfiguration_.Add(other.dataWipeConfiguration_);
      if (other.CardCollectionSyncDataVersion.Length != 0) {
        CardCollectionSyncDataVersion = other.CardCollectionSyncDataVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FiatPurchaseContractVersion = input.ReadUInt64();
            break;
          }
          case 18: {
            if (initialFiatPurchaseTxId_ == null) {
              initialFiatPurchaseTxId_ = new global::Loom.Client.Protobuf.BigUInt();
            }
            input.ReadMessage(initialFiatPurchaseTxId_);
            break;
          }
          case 24: {
            UseCardLibraryAsUserCollection = input.ReadBool();
            break;
          }
          case 34: {
            dataWipeConfiguration_.AddEntriesFrom(input, _repeated_dataWipeConfiguration_codec);
            break;
          }
          case 42: {
            CardCollectionSyncDataVersion = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerState : pb::IMessage<PlayerState> {
    private static readonly pb::MessageParser<PlayerState> _parser = new pb::MessageParser<PlayerState>(() => new PlayerState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerState(PlayerState other) : this() {
      id_ = other.id_;
      currentAction_ = other.currentAction_;
      cardsInHand_ = other.cardsInHand_.Clone();
      cardsInPlay_ = other.cardsInPlay_.Clone();
      cardsInDeck_ = other.cardsInDeck_.Clone();
      deck_ = other.deck_ != null ? other.deck_.Clone() : null;
      defense_ = other.defense_;
      currentGoo_ = other.currentGoo_;
      gooVials_ = other.gooVials_;
      hasDrawnCard_ = other.hasDrawnCard_;
      cardsInGraveyard_ = other.cardsInGraveyard_.Clone();
      initialCardsInHandCount_ = other.initialCardsInHandCount_;
      maxCardsInPlay_ = other.maxCardsInPlay_;
      maxCardsInHand_ = other.maxCardsInHand_;
      maxGooVials_ = other.maxGooVials_;
      turnTime_ = other.turnTime_;
      turnNumber_ = other.turnNumber_;
      instanceId_ = other.instanceId_ != null ? other.instanceId_.Clone() : null;
      mulliganCards_ = other.mulliganCards_.Clone();
      index_ = other.index_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerState Clone() {
      return new PlayerState(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currentAction" field.</summary>
    public const int CurrentActionFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.PlayerActionType.Types.Enum currentAction_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerActionType.Types.Enum CurrentAction {
      get { return currentAction_; }
      set {
        currentAction_ = value;
      }
    }

    /// <summary>Field number for the "cardsInHand" field.</summary>
    public const int CardsInHandFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardInstance> _repeated_cardsInHand_codec
        = pb::FieldCodec.ForMessage(34, global::Loom.ZombieBattleground.Protobuf.CardInstance.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance> cardsInHand_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance> CardsInHand {
      get { return cardsInHand_; }
    }

    /// <summary>Field number for the "cardsInPlay" field.</summary>
    public const int CardsInPlayFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardInstance> _repeated_cardsInPlay_codec
        = pb::FieldCodec.ForMessage(42, global::Loom.ZombieBattleground.Protobuf.CardInstance.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance> cardsInPlay_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance> CardsInPlay {
      get { return cardsInPlay_; }
    }

    /// <summary>Field number for the "cardsInDeck" field.</summary>
    public const int CardsInDeckFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardInstance> _repeated_cardsInDeck_codec
        = pb::FieldCodec.ForMessage(50, global::Loom.ZombieBattleground.Protobuf.CardInstance.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance> cardsInDeck_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance> CardsInDeck {
      get { return cardsInDeck_; }
    }

    /// <summary>Field number for the "deck" field.</summary>
    public const int DeckFieldNumber = 7;
    private global::Loom.ZombieBattleground.Protobuf.Deck deck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Deck Deck {
      get { return deck_; }
      set {
        deck_ = value;
      }
    }

    /// <summary>Field number for the "defense" field.</summary>
    public const int DefenseFieldNumber = 8;
    private int defense_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Defense {
      get { return defense_; }
      set {
        defense_ = value;
      }
    }

    /// <summary>Field number for the "currentGoo" field.</summary>
    public const int CurrentGooFieldNumber = 9;
    private int currentGoo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentGoo {
      get { return currentGoo_; }
      set {
        currentGoo_ = value;
      }
    }

    /// <summary>Field number for the "gooVials" field.</summary>
    public const int GooVialsFieldNumber = 10;
    private int gooVials_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GooVials {
      get { return gooVials_; }
      set {
        gooVials_ = value;
      }
    }

    /// <summary>Field number for the "hasDrawnCard" field.</summary>
    public const int HasDrawnCardFieldNumber = 11;
    private bool hasDrawnCard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDrawnCard {
      get { return hasDrawnCard_; }
      set {
        hasDrawnCard_ = value;
      }
    }

    /// <summary>Field number for the "cardsInGraveyard" field.</summary>
    public const int CardsInGraveyardFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardInstance> _repeated_cardsInGraveyard_codec
        = pb::FieldCodec.ForMessage(98, global::Loom.ZombieBattleground.Protobuf.CardInstance.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance> cardsInGraveyard_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance> CardsInGraveyard {
      get { return cardsInGraveyard_; }
    }

    /// <summary>Field number for the "initialCardsInHandCount" field.</summary>
    public const int InitialCardsInHandCountFieldNumber = 13;
    private int initialCardsInHandCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InitialCardsInHandCount {
      get { return initialCardsInHandCount_; }
      set {
        initialCardsInHandCount_ = value;
      }
    }

    /// <summary>Field number for the "maxCardsInPlay" field.</summary>
    public const int MaxCardsInPlayFieldNumber = 14;
    private int maxCardsInPlay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxCardsInPlay {
      get { return maxCardsInPlay_; }
      set {
        maxCardsInPlay_ = value;
      }
    }

    /// <summary>Field number for the "maxCardsInHand" field.</summary>
    public const int MaxCardsInHandFieldNumber = 15;
    private int maxCardsInHand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxCardsInHand {
      get { return maxCardsInHand_; }
      set {
        maxCardsInHand_ = value;
      }
    }

    /// <summary>Field number for the "maxGooVials" field.</summary>
    public const int MaxGooVialsFieldNumber = 16;
    private int maxGooVials_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxGooVials {
      get { return maxGooVials_; }
      set {
        maxGooVials_ = value;
      }
    }

    /// <summary>Field number for the "turnTime" field.</summary>
    public const int TurnTimeFieldNumber = 17;
    private int turnTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TurnTime {
      get { return turnTime_; }
      set {
        turnTime_ = value;
      }
    }

    /// <summary>Field number for the "turnNumber" field.</summary>
    public const int TurnNumberFieldNumber = 18;
    private int turnNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TurnNumber {
      get { return turnNumber_; }
      set {
        turnNumber_ = value;
      }
    }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 19;
    private global::Loom.ZombieBattleground.Protobuf.InstanceId instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.InstanceId InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "mulliganCards" field.</summary>
    public const int MulliganCardsFieldNumber = 20;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardInstance> _repeated_mulliganCards_codec
        = pb::FieldCodec.ForMessage(162, global::Loom.ZombieBattleground.Protobuf.CardInstance.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance> mulliganCards_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance> MulliganCards {
      get { return mulliganCards_; }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 21;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (CurrentAction != other.CurrentAction) return false;
      if(!cardsInHand_.Equals(other.cardsInHand_)) return false;
      if(!cardsInPlay_.Equals(other.cardsInPlay_)) return false;
      if(!cardsInDeck_.Equals(other.cardsInDeck_)) return false;
      if (!object.Equals(Deck, other.Deck)) return false;
      if (Defense != other.Defense) return false;
      if (CurrentGoo != other.CurrentGoo) return false;
      if (GooVials != other.GooVials) return false;
      if (HasDrawnCard != other.HasDrawnCard) return false;
      if(!cardsInGraveyard_.Equals(other.cardsInGraveyard_)) return false;
      if (InitialCardsInHandCount != other.InitialCardsInHandCount) return false;
      if (MaxCardsInPlay != other.MaxCardsInPlay) return false;
      if (MaxCardsInHand != other.MaxCardsInHand) return false;
      if (MaxGooVials != other.MaxGooVials) return false;
      if (TurnTime != other.TurnTime) return false;
      if (TurnNumber != other.TurnNumber) return false;
      if (!object.Equals(InstanceId, other.InstanceId)) return false;
      if(!mulliganCards_.Equals(other.mulliganCards_)) return false;
      if (Index != other.Index) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (CurrentAction != 0) hash ^= CurrentAction.GetHashCode();
      hash ^= cardsInHand_.GetHashCode();
      hash ^= cardsInPlay_.GetHashCode();
      hash ^= cardsInDeck_.GetHashCode();
      if (deck_ != null) hash ^= Deck.GetHashCode();
      if (Defense != 0) hash ^= Defense.GetHashCode();
      if (CurrentGoo != 0) hash ^= CurrentGoo.GetHashCode();
      if (GooVials != 0) hash ^= GooVials.GetHashCode();
      if (HasDrawnCard != false) hash ^= HasDrawnCard.GetHashCode();
      hash ^= cardsInGraveyard_.GetHashCode();
      if (InitialCardsInHandCount != 0) hash ^= InitialCardsInHandCount.GetHashCode();
      if (MaxCardsInPlay != 0) hash ^= MaxCardsInPlay.GetHashCode();
      if (MaxCardsInHand != 0) hash ^= MaxCardsInHand.GetHashCode();
      if (MaxGooVials != 0) hash ^= MaxGooVials.GetHashCode();
      if (TurnTime != 0) hash ^= TurnTime.GetHashCode();
      if (TurnNumber != 0) hash ^= TurnNumber.GetHashCode();
      if (instanceId_ != null) hash ^= InstanceId.GetHashCode();
      hash ^= mulliganCards_.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (CurrentAction != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CurrentAction);
      }
      cardsInHand_.WriteTo(output, _repeated_cardsInHand_codec);
      cardsInPlay_.WriteTo(output, _repeated_cardsInPlay_codec);
      cardsInDeck_.WriteTo(output, _repeated_cardsInDeck_codec);
      if (deck_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Deck);
      }
      if (Defense != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Defense);
      }
      if (CurrentGoo != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CurrentGoo);
      }
      if (GooVials != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(GooVials);
      }
      if (HasDrawnCard != false) {
        output.WriteRawTag(88);
        output.WriteBool(HasDrawnCard);
      }
      cardsInGraveyard_.WriteTo(output, _repeated_cardsInGraveyard_codec);
      if (InitialCardsInHandCount != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(InitialCardsInHandCount);
      }
      if (MaxCardsInPlay != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(MaxCardsInPlay);
      }
      if (MaxCardsInHand != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(MaxCardsInHand);
      }
      if (MaxGooVials != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(MaxGooVials);
      }
      if (TurnTime != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(TurnTime);
      }
      if (TurnNumber != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(TurnNumber);
      }
      if (instanceId_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(InstanceId);
      }
      mulliganCards_.WriteTo(output, _repeated_mulliganCards_codec);
      if (Index != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(Index);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (CurrentAction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CurrentAction);
      }
      size += cardsInHand_.CalculateSize(_repeated_cardsInHand_codec);
      size += cardsInPlay_.CalculateSize(_repeated_cardsInPlay_codec);
      size += cardsInDeck_.CalculateSize(_repeated_cardsInDeck_codec);
      if (deck_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deck);
      }
      if (Defense != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Defense);
      }
      if (CurrentGoo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentGoo);
      }
      if (GooVials != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GooVials);
      }
      if (HasDrawnCard != false) {
        size += 1 + 1;
      }
      size += cardsInGraveyard_.CalculateSize(_repeated_cardsInGraveyard_codec);
      if (InitialCardsInHandCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InitialCardsInHandCount);
      }
      if (MaxCardsInPlay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxCardsInPlay);
      }
      if (MaxCardsInHand != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxCardsInHand);
      }
      if (MaxGooVials != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxGooVials);
      }
      if (TurnTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TurnTime);
      }
      if (TurnNumber != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TurnNumber);
      }
      if (instanceId_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InstanceId);
      }
      size += mulliganCards_.CalculateSize(_repeated_mulliganCards_codec);
      if (Index != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerState other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.CurrentAction != 0) {
        CurrentAction = other.CurrentAction;
      }
      cardsInHand_.Add(other.cardsInHand_);
      cardsInPlay_.Add(other.cardsInPlay_);
      cardsInDeck_.Add(other.cardsInDeck_);
      if (other.deck_ != null) {
        if (deck_ == null) {
          deck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
        }
        Deck.MergeFrom(other.Deck);
      }
      if (other.Defense != 0) {
        Defense = other.Defense;
      }
      if (other.CurrentGoo != 0) {
        CurrentGoo = other.CurrentGoo;
      }
      if (other.GooVials != 0) {
        GooVials = other.GooVials;
      }
      if (other.HasDrawnCard != false) {
        HasDrawnCard = other.HasDrawnCard;
      }
      cardsInGraveyard_.Add(other.cardsInGraveyard_);
      if (other.InitialCardsInHandCount != 0) {
        InitialCardsInHandCount = other.InitialCardsInHandCount;
      }
      if (other.MaxCardsInPlay != 0) {
        MaxCardsInPlay = other.MaxCardsInPlay;
      }
      if (other.MaxCardsInHand != 0) {
        MaxCardsInHand = other.MaxCardsInHand;
      }
      if (other.MaxGooVials != 0) {
        MaxGooVials = other.MaxGooVials;
      }
      if (other.TurnTime != 0) {
        TurnTime = other.TurnTime;
      }
      if (other.TurnNumber != 0) {
        TurnNumber = other.TurnNumber;
      }
      if (other.instanceId_ != null) {
        if (instanceId_ == null) {
          instanceId_ = new global::Loom.ZombieBattleground.Protobuf.InstanceId();
        }
        InstanceId.MergeFrom(other.InstanceId);
      }
      mulliganCards_.Add(other.mulliganCards_);
      if (other.Index != 0) {
        Index = other.Index;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            currentAction_ = (global::Loom.ZombieBattleground.Protobuf.PlayerActionType.Types.Enum) input.ReadEnum();
            break;
          }
          case 34: {
            cardsInHand_.AddEntriesFrom(input, _repeated_cardsInHand_codec);
            break;
          }
          case 42: {
            cardsInPlay_.AddEntriesFrom(input, _repeated_cardsInPlay_codec);
            break;
          }
          case 50: {
            cardsInDeck_.AddEntriesFrom(input, _repeated_cardsInDeck_codec);
            break;
          }
          case 58: {
            if (deck_ == null) {
              deck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
            }
            input.ReadMessage(deck_);
            break;
          }
          case 64: {
            Defense = input.ReadInt32();
            break;
          }
          case 72: {
            CurrentGoo = input.ReadInt32();
            break;
          }
          case 80: {
            GooVials = input.ReadInt32();
            break;
          }
          case 88: {
            HasDrawnCard = input.ReadBool();
            break;
          }
          case 98: {
            cardsInGraveyard_.AddEntriesFrom(input, _repeated_cardsInGraveyard_codec);
            break;
          }
          case 104: {
            InitialCardsInHandCount = input.ReadInt32();
            break;
          }
          case 112: {
            MaxCardsInPlay = input.ReadInt32();
            break;
          }
          case 120: {
            MaxCardsInHand = input.ReadInt32();
            break;
          }
          case 128: {
            MaxGooVials = input.ReadInt32();
            break;
          }
          case 136: {
            TurnTime = input.ReadInt32();
            break;
          }
          case 144: {
            TurnNumber = input.ReadInt32();
            break;
          }
          case 154: {
            if (instanceId_ == null) {
              instanceId_ = new global::Loom.ZombieBattleground.Protobuf.InstanceId();
            }
            input.ReadMessage(instanceId_);
            break;
          }
          case 162: {
            mulliganCards_.AddEntriesFrom(input, _repeated_mulliganCards_codec);
            break;
          }
          case 168: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InitialPlayerState : pb::IMessage<InitialPlayerState> {
    private static readonly pb::MessageParser<InitialPlayerState> _parser = new pb::MessageParser<InitialPlayerState>(() => new InitialPlayerState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitialPlayerState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitialPlayerState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitialPlayerState(InitialPlayerState other) : this() {
      id_ = other.id_;
      matchAccepted_ = other.matchAccepted_;
      deck_ = other.deck_ != null ? other.deck_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitialPlayerState Clone() {
      return new InitialPlayerState(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "matchAccepted" field.</summary>
    public const int MatchAcceptedFieldNumber = 2;
    private bool matchAccepted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MatchAccepted {
      get { return matchAccepted_; }
      set {
        matchAccepted_ = value;
      }
    }

    /// <summary>Field number for the "deck" field.</summary>
    public const int DeckFieldNumber = 3;
    private global::Loom.ZombieBattleground.Protobuf.Deck deck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Deck Deck {
      get { return deck_; }
      set {
        deck_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitialPlayerState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitialPlayerState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (MatchAccepted != other.MatchAccepted) return false;
      if (!object.Equals(Deck, other.Deck)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (MatchAccepted != false) hash ^= MatchAccepted.GetHashCode();
      if (deck_ != null) hash ^= Deck.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (MatchAccepted != false) {
        output.WriteRawTag(16);
        output.WriteBool(MatchAccepted);
      }
      if (deck_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Deck);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (MatchAccepted != false) {
        size += 1 + 1;
      }
      if (deck_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deck);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitialPlayerState other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.MatchAccepted != false) {
        MatchAccepted = other.MatchAccepted;
      }
      if (other.deck_ != null) {
        if (deck_ == null) {
          deck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
        }
        Deck.MergeFrom(other.Deck);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            MatchAccepted = input.ReadBool();
            break;
          }
          case 26: {
            if (deck_ == null) {
              deck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
            }
            input.ReadMessage(deck_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerTimestamp : pb::IMessage<PlayerTimestamp> {
    private static readonly pb::MessageParser<PlayerTimestamp> _parser = new pb::MessageParser<PlayerTimestamp>(() => new PlayerTimestamp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerTimestamp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerTimestamp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerTimestamp(PlayerTimestamp other) : this() {
      id_ = other.id_;
      updatedAt_ = other.updatedAt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerTimestamp Clone() {
      return new PlayerTimestamp(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "updatedAt" field.</summary>
    public const int UpdatedAtFieldNumber = 2;
    private long updatedAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpdatedAt {
      get { return updatedAt_; }
      set {
        updatedAt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerTimestamp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerTimestamp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (UpdatedAt != other.UpdatedAt) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (UpdatedAt != 0L) hash ^= UpdatedAt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (UpdatedAt != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UpdatedAt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (UpdatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpdatedAt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerTimestamp other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.UpdatedAt != 0L) {
        UpdatedAt = other.UpdatedAt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            UpdatedAt = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Match : pb::IMessage<Match> {
    private static readonly pb::MessageParser<Match> _parser = new pb::MessageParser<Match>(() => new Match());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Match> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match(Match other) : this() {
      id_ = other.id_;
      topics_ = other.topics_.Clone();
      playerStates_ = other.playerStates_.Clone();
      status_ = other.status_;
      version_ = other.version_;
      randomSeed_ = other.randomSeed_;
      customGameAddr_ = other.customGameAddr_ != null ? other.customGameAddr_.Clone() : null;
      createdAt_ = other.createdAt_;
      useBackendGameLogic_ = other.useBackendGameLogic_;
      playerLastSeens_ = other.playerLastSeens_.Clone();
      playerDebugCheats_ = other.playerDebugCheats_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match Clone() {
      return new Match(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "topics" field.</summary>
    public const int TopicsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_topics_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> topics_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Topics {
      get { return topics_; }
    }

    /// <summary>Field number for the "playerStates" field.</summary>
    public const int PlayerStatesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.InitialPlayerState> _repeated_playerStates_codec
        = pb::FieldCodec.ForMessage(26, global::Loom.ZombieBattleground.Protobuf.InitialPlayerState.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.InitialPlayerState> playerStates_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.InitialPlayerState>();
    /// <summary>
    /// TODO: this data is not used by the client, but is still sent.
    /// Perhaps we can split Match into MatchMetadata and MatchInitialPlayerState
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.InitialPlayerState> PlayerStates {
      get { return playerStates_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private global::Loom.ZombieBattleground.Protobuf.Match.Types.Status status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Match.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 5;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "randomSeed" field.</summary>
    public const int RandomSeedFieldNumber = 6;
    private long randomSeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RandomSeed {
      get { return randomSeed_; }
      set {
        randomSeed_ = value;
      }
    }

    /// <summary>Field number for the "customGameAddr" field.</summary>
    public const int CustomGameAddrFieldNumber = 7;
    private global::Loom.Client.Protobuf.Address customGameAddr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.Client.Protobuf.Address CustomGameAddr {
      get { return customGameAddr_; }
      set {
        customGameAddr_ = value;
      }
    }

    /// <summary>Field number for the "createdAt" field.</summary>
    public const int CreatedAtFieldNumber = 8;
    private long createdAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "useBackendGameLogic" field.</summary>
    public const int UseBackendGameLogicFieldNumber = 9;
    private bool useBackendGameLogic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseBackendGameLogic {
      get { return useBackendGameLogic_; }
      set {
        useBackendGameLogic_ = value;
      }
    }

    /// <summary>Field number for the "playerLastSeens" field.</summary>
    public const int PlayerLastSeensFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.PlayerTimestamp> _repeated_playerLastSeens_codec
        = pb::FieldCodec.ForMessage(82, global::Loom.ZombieBattleground.Protobuf.PlayerTimestamp.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerTimestamp> playerLastSeens_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerTimestamp>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerTimestamp> PlayerLastSeens {
      get { return playerLastSeens_; }
    }

    /// <summary>Field number for the "playerDebugCheats" field.</summary>
    public const int PlayerDebugCheatsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.DebugCheatsConfiguration> _repeated_playerDebugCheats_codec
        = pb::FieldCodec.ForMessage(90, global::Loom.ZombieBattleground.Protobuf.DebugCheatsConfiguration.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.DebugCheatsConfiguration> playerDebugCheats_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.DebugCheatsConfiguration>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.DebugCheatsConfiguration> PlayerDebugCheats {
      get { return playerDebugCheats_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Match);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Match other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!topics_.Equals(other.topics_)) return false;
      if(!playerStates_.Equals(other.playerStates_)) return false;
      if (Status != other.Status) return false;
      if (Version != other.Version) return false;
      if (RandomSeed != other.RandomSeed) return false;
      if (!object.Equals(CustomGameAddr, other.CustomGameAddr)) return false;
      if (CreatedAt != other.CreatedAt) return false;
      if (UseBackendGameLogic != other.UseBackendGameLogic) return false;
      if(!playerLastSeens_.Equals(other.playerLastSeens_)) return false;
      if(!playerDebugCheats_.Equals(other.playerDebugCheats_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      hash ^= topics_.GetHashCode();
      hash ^= playerStates_.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (RandomSeed != 0L) hash ^= RandomSeed.GetHashCode();
      if (customGameAddr_ != null) hash ^= CustomGameAddr.GetHashCode();
      if (CreatedAt != 0L) hash ^= CreatedAt.GetHashCode();
      if (UseBackendGameLogic != false) hash ^= UseBackendGameLogic.GetHashCode();
      hash ^= playerLastSeens_.GetHashCode();
      hash ^= playerDebugCheats_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      topics_.WriteTo(output, _repeated_topics_codec);
      playerStates_.WriteTo(output, _repeated_playerStates_codec);
      if (Status != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Status);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Version);
      }
      if (RandomSeed != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(RandomSeed);
      }
      if (customGameAddr_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(CustomGameAddr);
      }
      if (CreatedAt != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(CreatedAt);
      }
      if (UseBackendGameLogic != false) {
        output.WriteRawTag(72);
        output.WriteBool(UseBackendGameLogic);
      }
      playerLastSeens_.WriteTo(output, _repeated_playerLastSeens_codec);
      playerDebugCheats_.WriteTo(output, _repeated_playerDebugCheats_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      size += topics_.CalculateSize(_repeated_topics_codec);
      size += playerStates_.CalculateSize(_repeated_playerStates_codec);
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (RandomSeed != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RandomSeed);
      }
      if (customGameAddr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CustomGameAddr);
      }
      if (CreatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAt);
      }
      if (UseBackendGameLogic != false) {
        size += 1 + 1;
      }
      size += playerLastSeens_.CalculateSize(_repeated_playerLastSeens_codec);
      size += playerDebugCheats_.CalculateSize(_repeated_playerDebugCheats_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Match other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      topics_.Add(other.topics_);
      playerStates_.Add(other.playerStates_);
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.RandomSeed != 0L) {
        RandomSeed = other.RandomSeed;
      }
      if (other.customGameAddr_ != null) {
        if (customGameAddr_ == null) {
          customGameAddr_ = new global::Loom.Client.Protobuf.Address();
        }
        CustomGameAddr.MergeFrom(other.CustomGameAddr);
      }
      if (other.CreatedAt != 0L) {
        CreatedAt = other.CreatedAt;
      }
      if (other.UseBackendGameLogic != false) {
        UseBackendGameLogic = other.UseBackendGameLogic;
      }
      playerLastSeens_.Add(other.playerLastSeens_);
      playerDebugCheats_.Add(other.playerDebugCheats_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            topics_.AddEntriesFrom(input, _repeated_topics_codec);
            break;
          }
          case 26: {
            playerStates_.AddEntriesFrom(input, _repeated_playerStates_codec);
            break;
          }
          case 32: {
            status_ = (global::Loom.ZombieBattleground.Protobuf.Match.Types.Status) input.ReadEnum();
            break;
          }
          case 42: {
            Version = input.ReadString();
            break;
          }
          case 48: {
            RandomSeed = input.ReadInt64();
            break;
          }
          case 58: {
            if (customGameAddr_ == null) {
              customGameAddr_ = new global::Loom.Client.Protobuf.Address();
            }
            input.ReadMessage(customGameAddr_);
            break;
          }
          case 64: {
            CreatedAt = input.ReadInt64();
            break;
          }
          case 72: {
            UseBackendGameLogic = input.ReadBool();
            break;
          }
          case 82: {
            playerLastSeens_.AddEntriesFrom(input, _repeated_playerLastSeens_codec);
            break;
          }
          case 90: {
            playerDebugCheats_.AddEntriesFrom(input, _repeated_playerDebugCheats_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Match message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        [pbr::OriginalName("Created")] Created = 0,
        [pbr::OriginalName("Matching")] Matching = 1,
        [pbr::OriginalName("Started")] Started = 2,
        [pbr::OriginalName("Playing")] Playing = 3,
        [pbr::OriginalName("PlayerLeft")] PlayerLeft = 4,
        [pbr::OriginalName("Ended")] Ended = 5,
        [pbr::OriginalName("Timedout")] Timedout = 6,
        [pbr::OriginalName("Canceled")] Canceled = 7,
      }

    }
    #endregion

  }

  public sealed partial class MatchMakingInfoList : pb::IMessage<MatchMakingInfoList> {
    private static readonly pb::MessageParser<MatchMakingInfoList> _parser = new pb::MessageParser<MatchMakingInfoList>(() => new MatchMakingInfoList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchMakingInfoList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchMakingInfoList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchMakingInfoList(MatchMakingInfoList other) : this() {
      infos_ = other.infos_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchMakingInfoList Clone() {
      return new MatchMakingInfoList(this);
    }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.MatchMakingInfo> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.MatchMakingInfo.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.MatchMakingInfo> infos_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.MatchMakingInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.MatchMakingInfo> Infos {
      get { return infos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchMakingInfoList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchMakingInfoList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!infos_.Equals(other.infos_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= infos_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      infos_.WriteTo(output, _repeated_infos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += infos_.CalculateSize(_repeated_infos_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchMakingInfoList other) {
      if (other == null) {
        return;
      }
      infos_.Add(other.infos_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MatchMakingInfo : pb::IMessage<MatchMakingInfo> {
    private static readonly pb::MessageParser<MatchMakingInfo> _parser = new pb::MessageParser<MatchMakingInfo>(() => new MatchMakingInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchMakingInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchMakingInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchMakingInfo(MatchMakingInfo other) : this() {
      userId_ = other.userId_;
      deck_ = other.deck_ != null ? other.deck_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchMakingInfo Clone() {
      return new MatchMakingInfo(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deck" field.</summary>
    public const int DeckFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.Deck deck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Deck Deck {
      get { return deck_; }
      set {
        deck_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchMakingInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchMakingInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (!object.Equals(Deck, other.Deck)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (deck_ != null) hash ^= Deck.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (deck_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Deck);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (deck_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deck);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchMakingInfo other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.deck_ != null) {
        if (deck_ == null) {
          deck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
        }
        Deck.MergeFrom(other.Deck);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            if (deck_ == null) {
              deck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
            }
            input.ReadMessage(deck_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerAction : pb::IMessage<PlayerAction> {
    private static readonly pb::MessageParser<PlayerAction> _parser = new pb::MessageParser<PlayerAction>(() => new PlayerAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerAction(PlayerAction other) : this() {
      actionType_ = other.actionType_;
      playerId_ = other.playerId_;
      actionOutcomes_ = other.actionOutcomes_.Clone();
      createdAt_ = other.createdAt_;
      controlGameState_ = other.controlGameState_ != null ? other.controlGameState_.Clone() : null;
      switch (other.ActionCase) {
        case ActionOneofCase.EndTurn:
          EndTurn = other.EndTurn.Clone();
          break;
        case ActionOneofCase.Mulligan:
          Mulligan = other.Mulligan.Clone();
          break;
        case ActionOneofCase.CardPlay:
          CardPlay = other.CardPlay.Clone();
          break;
        case ActionOneofCase.CardAttack:
          CardAttack = other.CardAttack.Clone();
          break;
        case ActionOneofCase.CardAbilityUsed:
          CardAbilityUsed = other.CardAbilityUsed.Clone();
          break;
        case ActionOneofCase.OverlordSkillUsed:
          OverlordSkillUsed = other.OverlordSkillUsed.Clone();
          break;
        case ActionOneofCase.LeaveMatch:
          LeaveMatch = other.LeaveMatch.Clone();
          break;
        case ActionOneofCase.RankBuff:
          RankBuff = other.RankBuff.Clone();
          break;
        case ActionOneofCase.CheatDestroyCardsOnBoard:
          CheatDestroyCardsOnBoard = other.CheatDestroyCardsOnBoard.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerAction Clone() {
      return new PlayerAction(this);
    }

    /// <summary>Field number for the "actionType" field.</summary>
    public const int ActionTypeFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.PlayerActionType.Types.Enum actionType_ = 0;
    /// <summary>
    /// not sure we really need this
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerActionType.Types.Enum ActionType {
      get { return actionType_; }
      set {
        actionType_ = value;
      }
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private string playerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "endTurn" field.</summary>
    public const int EndTurnFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerActionEndTurn EndTurn {
      get { return actionCase_ == ActionOneofCase.EndTurn ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionEndTurn) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.EndTurn;
      }
    }

    /// <summary>Field number for the "mulligan" field.</summary>
    public const int MulliganFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerActionMulligan Mulligan {
      get { return actionCase_ == ActionOneofCase.Mulligan ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionMulligan) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.Mulligan;
      }
    }

    /// <summary>Field number for the "cardPlay" field.</summary>
    public const int CardPlayFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerActionCardPlay CardPlay {
      get { return actionCase_ == ActionOneofCase.CardPlay ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionCardPlay) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.CardPlay;
      }
    }

    /// <summary>Field number for the "cardAttack" field.</summary>
    public const int CardAttackFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAttack CardAttack {
      get { return actionCase_ == ActionOneofCase.CardAttack ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAttack) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.CardAttack;
      }
    }

    /// <summary>Field number for the "cardAbilityUsed" field.</summary>
    public const int CardAbilityUsedFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAbilityUsed CardAbilityUsed {
      get { return actionCase_ == ActionOneofCase.CardAbilityUsed ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAbilityUsed) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.CardAbilityUsed;
      }
    }

    /// <summary>Field number for the "overlordSkillUsed" field.</summary>
    public const int OverlordSkillUsedFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerActionOverlordSkillUsed OverlordSkillUsed {
      get { return actionCase_ == ActionOneofCase.OverlordSkillUsed ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionOverlordSkillUsed) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.OverlordSkillUsed;
      }
    }

    /// <summary>Field number for the "leaveMatch" field.</summary>
    public const int LeaveMatchFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerActionLeaveMatch LeaveMatch {
      get { return actionCase_ == ActionOneofCase.LeaveMatch ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionLeaveMatch) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.LeaveMatch;
      }
    }

    /// <summary>Field number for the "rankBuff" field.</summary>
    public const int RankBuffFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerActionRankBuff RankBuff {
      get { return actionCase_ == ActionOneofCase.RankBuff ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionRankBuff) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.RankBuff;
      }
    }

    /// <summary>Field number for the "cheatDestroyCardsOnBoard" field.</summary>
    public const int CheatDestroyCardsOnBoardFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerActionCheatDestroyCardsOnBoard CheatDestroyCardsOnBoard {
      get { return actionCase_ == ActionOneofCase.CheatDestroyCardsOnBoard ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionCheatDestroyCardsOnBoard) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.CheatDestroyCardsOnBoard;
      }
    }

    /// <summary>Field number for the "actionOutcomes" field.</summary>
    public const int ActionOutcomesFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome> _repeated_actionOutcomes_codec
        = pb::FieldCodec.ForMessage(114, global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome> actionOutcomes_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome> ActionOutcomes {
      get { return actionOutcomes_; }
    }

    /// <summary>Field number for the "createdAt" field.</summary>
    public const int CreatedAtFieldNumber = 15;
    private long createdAt_;
    /// <summary>
    /// timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "controlGameState" field.</summary>
    public const int ControlGameStateFieldNumber = 16;
    private global::Loom.ZombieBattleground.Protobuf.GameState controlGameState_;
    /// <summary>
    /// To be removed later. Only useful for client-logic games.
    /// After constructing the "meat" of the action, the client fills this structure with his local game state.
    /// The other client can then compare the game with his own and panic if de-sync is detected.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.GameState ControlGameState {
      get { return controlGameState_; }
      set {
        controlGameState_ = value;
      }
    }

    private object action_;
    /// <summary>Enum of possible cases for the "action" oneof.</summary>
    public enum ActionOneofCase {
      None = 0,
      EndTurn = 3,
      Mulligan = 4,
      CardPlay = 5,
      CardAttack = 6,
      CardAbilityUsed = 7,
      OverlordSkillUsed = 8,
      LeaveMatch = 9,
      RankBuff = 10,
      CheatDestroyCardsOnBoard = 11,
    }
    private ActionOneofCase actionCase_ = ActionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionOneofCase ActionCase {
      get { return actionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAction() {
      actionCase_ = ActionOneofCase.None;
      action_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActionType != other.ActionType) return false;
      if (PlayerId != other.PlayerId) return false;
      if (!object.Equals(EndTurn, other.EndTurn)) return false;
      if (!object.Equals(Mulligan, other.Mulligan)) return false;
      if (!object.Equals(CardPlay, other.CardPlay)) return false;
      if (!object.Equals(CardAttack, other.CardAttack)) return false;
      if (!object.Equals(CardAbilityUsed, other.CardAbilityUsed)) return false;
      if (!object.Equals(OverlordSkillUsed, other.OverlordSkillUsed)) return false;
      if (!object.Equals(LeaveMatch, other.LeaveMatch)) return false;
      if (!object.Equals(RankBuff, other.RankBuff)) return false;
      if (!object.Equals(CheatDestroyCardsOnBoard, other.CheatDestroyCardsOnBoard)) return false;
      if(!actionOutcomes_.Equals(other.actionOutcomes_)) return false;
      if (CreatedAt != other.CreatedAt) return false;
      if (!object.Equals(ControlGameState, other.ControlGameState)) return false;
      if (ActionCase != other.ActionCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActionType != 0) hash ^= ActionType.GetHashCode();
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (actionCase_ == ActionOneofCase.EndTurn) hash ^= EndTurn.GetHashCode();
      if (actionCase_ == ActionOneofCase.Mulligan) hash ^= Mulligan.GetHashCode();
      if (actionCase_ == ActionOneofCase.CardPlay) hash ^= CardPlay.GetHashCode();
      if (actionCase_ == ActionOneofCase.CardAttack) hash ^= CardAttack.GetHashCode();
      if (actionCase_ == ActionOneofCase.CardAbilityUsed) hash ^= CardAbilityUsed.GetHashCode();
      if (actionCase_ == ActionOneofCase.OverlordSkillUsed) hash ^= OverlordSkillUsed.GetHashCode();
      if (actionCase_ == ActionOneofCase.LeaveMatch) hash ^= LeaveMatch.GetHashCode();
      if (actionCase_ == ActionOneofCase.RankBuff) hash ^= RankBuff.GetHashCode();
      if (actionCase_ == ActionOneofCase.CheatDestroyCardsOnBoard) hash ^= CheatDestroyCardsOnBoard.GetHashCode();
      hash ^= actionOutcomes_.GetHashCode();
      if (CreatedAt != 0L) hash ^= CreatedAt.GetHashCode();
      if (controlGameState_ != null) hash ^= ControlGameState.GetHashCode();
      hash ^= (int) actionCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActionType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ActionType);
      }
      if (PlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerId);
      }
      if (actionCase_ == ActionOneofCase.EndTurn) {
        output.WriteRawTag(26);
        output.WriteMessage(EndTurn);
      }
      if (actionCase_ == ActionOneofCase.Mulligan) {
        output.WriteRawTag(34);
        output.WriteMessage(Mulligan);
      }
      if (actionCase_ == ActionOneofCase.CardPlay) {
        output.WriteRawTag(42);
        output.WriteMessage(CardPlay);
      }
      if (actionCase_ == ActionOneofCase.CardAttack) {
        output.WriteRawTag(50);
        output.WriteMessage(CardAttack);
      }
      if (actionCase_ == ActionOneofCase.CardAbilityUsed) {
        output.WriteRawTag(58);
        output.WriteMessage(CardAbilityUsed);
      }
      if (actionCase_ == ActionOneofCase.OverlordSkillUsed) {
        output.WriteRawTag(66);
        output.WriteMessage(OverlordSkillUsed);
      }
      if (actionCase_ == ActionOneofCase.LeaveMatch) {
        output.WriteRawTag(74);
        output.WriteMessage(LeaveMatch);
      }
      if (actionCase_ == ActionOneofCase.RankBuff) {
        output.WriteRawTag(82);
        output.WriteMessage(RankBuff);
      }
      if (actionCase_ == ActionOneofCase.CheatDestroyCardsOnBoard) {
        output.WriteRawTag(90);
        output.WriteMessage(CheatDestroyCardsOnBoard);
      }
      actionOutcomes_.WriteTo(output, _repeated_actionOutcomes_codec);
      if (CreatedAt != 0L) {
        output.WriteRawTag(120);
        output.WriteInt64(CreatedAt);
      }
      if (controlGameState_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(ControlGameState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActionType);
      }
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (actionCase_ == ActionOneofCase.EndTurn) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTurn);
      }
      if (actionCase_ == ActionOneofCase.Mulligan) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mulligan);
      }
      if (actionCase_ == ActionOneofCase.CardPlay) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardPlay);
      }
      if (actionCase_ == ActionOneofCase.CardAttack) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardAttack);
      }
      if (actionCase_ == ActionOneofCase.CardAbilityUsed) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardAbilityUsed);
      }
      if (actionCase_ == ActionOneofCase.OverlordSkillUsed) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OverlordSkillUsed);
      }
      if (actionCase_ == ActionOneofCase.LeaveMatch) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeaveMatch);
      }
      if (actionCase_ == ActionOneofCase.RankBuff) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RankBuff);
      }
      if (actionCase_ == ActionOneofCase.CheatDestroyCardsOnBoard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CheatDestroyCardsOnBoard);
      }
      size += actionOutcomes_.CalculateSize(_repeated_actionOutcomes_codec);
      if (CreatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAt);
      }
      if (controlGameState_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ControlGameState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerAction other) {
      if (other == null) {
        return;
      }
      if (other.ActionType != 0) {
        ActionType = other.ActionType;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      actionOutcomes_.Add(other.actionOutcomes_);
      if (other.CreatedAt != 0L) {
        CreatedAt = other.CreatedAt;
      }
      if (other.controlGameState_ != null) {
        if (controlGameState_ == null) {
          controlGameState_ = new global::Loom.ZombieBattleground.Protobuf.GameState();
        }
        ControlGameState.MergeFrom(other.ControlGameState);
      }
      switch (other.ActionCase) {
        case ActionOneofCase.EndTurn:
          if (EndTurn == null) {
            EndTurn = new global::Loom.ZombieBattleground.Protobuf.PlayerActionEndTurn();
          }
          EndTurn.MergeFrom(other.EndTurn);
          break;
        case ActionOneofCase.Mulligan:
          if (Mulligan == null) {
            Mulligan = new global::Loom.ZombieBattleground.Protobuf.PlayerActionMulligan();
          }
          Mulligan.MergeFrom(other.Mulligan);
          break;
        case ActionOneofCase.CardPlay:
          if (CardPlay == null) {
            CardPlay = new global::Loom.ZombieBattleground.Protobuf.PlayerActionCardPlay();
          }
          CardPlay.MergeFrom(other.CardPlay);
          break;
        case ActionOneofCase.CardAttack:
          if (CardAttack == null) {
            CardAttack = new global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAttack();
          }
          CardAttack.MergeFrom(other.CardAttack);
          break;
        case ActionOneofCase.CardAbilityUsed:
          if (CardAbilityUsed == null) {
            CardAbilityUsed = new global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAbilityUsed();
          }
          CardAbilityUsed.MergeFrom(other.CardAbilityUsed);
          break;
        case ActionOneofCase.OverlordSkillUsed:
          if (OverlordSkillUsed == null) {
            OverlordSkillUsed = new global::Loom.ZombieBattleground.Protobuf.PlayerActionOverlordSkillUsed();
          }
          OverlordSkillUsed.MergeFrom(other.OverlordSkillUsed);
          break;
        case ActionOneofCase.LeaveMatch:
          if (LeaveMatch == null) {
            LeaveMatch = new global::Loom.ZombieBattleground.Protobuf.PlayerActionLeaveMatch();
          }
          LeaveMatch.MergeFrom(other.LeaveMatch);
          break;
        case ActionOneofCase.RankBuff:
          if (RankBuff == null) {
            RankBuff = new global::Loom.ZombieBattleground.Protobuf.PlayerActionRankBuff();
          }
          RankBuff.MergeFrom(other.RankBuff);
          break;
        case ActionOneofCase.CheatDestroyCardsOnBoard:
          if (CheatDestroyCardsOnBoard == null) {
            CheatDestroyCardsOnBoard = new global::Loom.ZombieBattleground.Protobuf.PlayerActionCheatDestroyCardsOnBoard();
          }
          CheatDestroyCardsOnBoard.MergeFrom(other.CheatDestroyCardsOnBoard);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            actionType_ = (global::Loom.ZombieBattleground.Protobuf.PlayerActionType.Types.Enum) input.ReadEnum();
            break;
          }
          case 18: {
            PlayerId = input.ReadString();
            break;
          }
          case 26: {
            global::Loom.ZombieBattleground.Protobuf.PlayerActionEndTurn subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionEndTurn();
            if (actionCase_ == ActionOneofCase.EndTurn) {
              subBuilder.MergeFrom(EndTurn);
            }
            input.ReadMessage(subBuilder);
            EndTurn = subBuilder;
            break;
          }
          case 34: {
            global::Loom.ZombieBattleground.Protobuf.PlayerActionMulligan subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionMulligan();
            if (actionCase_ == ActionOneofCase.Mulligan) {
              subBuilder.MergeFrom(Mulligan);
            }
            input.ReadMessage(subBuilder);
            Mulligan = subBuilder;
            break;
          }
          case 42: {
            global::Loom.ZombieBattleground.Protobuf.PlayerActionCardPlay subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionCardPlay();
            if (actionCase_ == ActionOneofCase.CardPlay) {
              subBuilder.MergeFrom(CardPlay);
            }
            input.ReadMessage(subBuilder);
            CardPlay = subBuilder;
            break;
          }
          case 50: {
            global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAttack subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAttack();
            if (actionCase_ == ActionOneofCase.CardAttack) {
              subBuilder.MergeFrom(CardAttack);
            }
            input.ReadMessage(subBuilder);
            CardAttack = subBuilder;
            break;
          }
          case 58: {
            global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAbilityUsed subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAbilityUsed();
            if (actionCase_ == ActionOneofCase.CardAbilityUsed) {
              subBuilder.MergeFrom(CardAbilityUsed);
            }
            input.ReadMessage(subBuilder);
            CardAbilityUsed = subBuilder;
            break;
          }
          case 66: {
            global::Loom.ZombieBattleground.Protobuf.PlayerActionOverlordSkillUsed subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionOverlordSkillUsed();
            if (actionCase_ == ActionOneofCase.OverlordSkillUsed) {
              subBuilder.MergeFrom(OverlordSkillUsed);
            }
            input.ReadMessage(subBuilder);
            OverlordSkillUsed = subBuilder;
            break;
          }
          case 74: {
            global::Loom.ZombieBattleground.Protobuf.PlayerActionLeaveMatch subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionLeaveMatch();
            if (actionCase_ == ActionOneofCase.LeaveMatch) {
              subBuilder.MergeFrom(LeaveMatch);
            }
            input.ReadMessage(subBuilder);
            LeaveMatch = subBuilder;
            break;
          }
          case 82: {
            global::Loom.ZombieBattleground.Protobuf.PlayerActionRankBuff subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionRankBuff();
            if (actionCase_ == ActionOneofCase.RankBuff) {
              subBuilder.MergeFrom(RankBuff);
            }
            input.ReadMessage(subBuilder);
            RankBuff = subBuilder;
            break;
          }
          case 90: {
            global::Loom.ZombieBattleground.Protobuf.PlayerActionCheatDestroyCardsOnBoard subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionCheatDestroyCardsOnBoard();
            if (actionCase_ == ActionOneofCase.CheatDestroyCardsOnBoard) {
              subBuilder.MergeFrom(CheatDestroyCardsOnBoard);
            }
            input.ReadMessage(subBuilder);
            CheatDestroyCardsOnBoard = subBuilder;
            break;
          }
          case 114: {
            actionOutcomes_.AddEntriesFrom(input, _repeated_actionOutcomes_codec);
            break;
          }
          case 120: {
            CreatedAt = input.ReadInt64();
            break;
          }
          case 130: {
            if (controlGameState_ == null) {
              controlGameState_ = new global::Loom.ZombieBattleground.Protobuf.GameState();
            }
            input.ReadMessage(controlGameState_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerActionEvent : pb::IMessage<PlayerActionEvent> {
    private static readonly pb::MessageParser<PlayerActionEvent> _parser = new pb::MessageParser<PlayerActionEvent>(() => new PlayerActionEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerActionEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionEvent(PlayerActionEvent other) : this() {
      playerAction_ = other.playerAction_ != null ? other.playerAction_.Clone() : null;
      match_ = other.match_ != null ? other.match_.Clone() : null;
      block_ = other.block_ != null ? other.block_.Clone() : null;
      currentActionIndex_ = other.currentActionIndex_;
      createdByBackend_ = other.createdByBackend_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionEvent Clone() {
      return new PlayerActionEvent(this);
    }

    /// <summary>Field number for the "playerAction" field.</summary>
    public const int PlayerActionFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.PlayerAction playerAction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerAction PlayerAction {
      get { return playerAction_; }
      set {
        playerAction_ = value;
      }
    }

    /// <summary>Field number for the "match" field.</summary>
    public const int MatchFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.Match match_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Match Match {
      get { return match_; }
      set {
        match_ = value;
      }
    }

    /// <summary>Field number for the "block" field.</summary>
    public const int BlockFieldNumber = 3;
    private global::Loom.ZombieBattleground.Protobuf.History block_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.History Block {
      get { return block_; }
      set {
        block_ = value;
      }
    }

    /// <summary>Field number for the "CurrentActionIndex" field.</summary>
    public const int CurrentActionIndexFieldNumber = 4;
    private long currentActionIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurrentActionIndex {
      get { return currentActionIndex_; }
      set {
        currentActionIndex_ = value;
      }
    }

    /// <summary>Field number for the "createdByBackend" field.</summary>
    public const int CreatedByBackendFieldNumber = 5;
    private bool createdByBackend_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CreatedByBackend {
      get { return createdByBackend_; }
      set {
        createdByBackend_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerActionEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerActionEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerAction, other.PlayerAction)) return false;
      if (!object.Equals(Match, other.Match)) return false;
      if (!object.Equals(Block, other.Block)) return false;
      if (CurrentActionIndex != other.CurrentActionIndex) return false;
      if (CreatedByBackend != other.CreatedByBackend) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerAction_ != null) hash ^= PlayerAction.GetHashCode();
      if (match_ != null) hash ^= Match.GetHashCode();
      if (block_ != null) hash ^= Block.GetHashCode();
      if (CurrentActionIndex != 0L) hash ^= CurrentActionIndex.GetHashCode();
      if (CreatedByBackend != false) hash ^= CreatedByBackend.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerAction_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerAction);
      }
      if (match_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Match);
      }
      if (block_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Block);
      }
      if (CurrentActionIndex != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CurrentActionIndex);
      }
      if (CreatedByBackend != false) {
        output.WriteRawTag(40);
        output.WriteBool(CreatedByBackend);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerAction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerAction);
      }
      if (match_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Match);
      }
      if (block_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Block);
      }
      if (CurrentActionIndex != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrentActionIndex);
      }
      if (CreatedByBackend != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerActionEvent other) {
      if (other == null) {
        return;
      }
      if (other.playerAction_ != null) {
        if (playerAction_ == null) {
          playerAction_ = new global::Loom.ZombieBattleground.Protobuf.PlayerAction();
        }
        PlayerAction.MergeFrom(other.PlayerAction);
      }
      if (other.match_ != null) {
        if (match_ == null) {
          match_ = new global::Loom.ZombieBattleground.Protobuf.Match();
        }
        Match.MergeFrom(other.Match);
      }
      if (other.block_ != null) {
        if (block_ == null) {
          block_ = new global::Loom.ZombieBattleground.Protobuf.History();
        }
        Block.MergeFrom(other.Block);
      }
      if (other.CurrentActionIndex != 0L) {
        CurrentActionIndex = other.CurrentActionIndex;
      }
      if (other.CreatedByBackend != false) {
        CreatedByBackend = other.CreatedByBackend;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (playerAction_ == null) {
              playerAction_ = new global::Loom.ZombieBattleground.Protobuf.PlayerAction();
            }
            input.ReadMessage(playerAction_);
            break;
          }
          case 18: {
            if (match_ == null) {
              match_ = new global::Loom.ZombieBattleground.Protobuf.Match();
            }
            input.ReadMessage(match_);
            break;
          }
          case 26: {
            if (block_ == null) {
              block_ = new global::Loom.ZombieBattleground.Protobuf.History();
            }
            input.ReadMessage(block_);
            break;
          }
          case 32: {
            CurrentActionIndex = input.ReadInt64();
            break;
          }
          case 40: {
            CreatedByBackend = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerProfile : pb::IMessage<PlayerProfile> {
    private static readonly pb::MessageParser<PlayerProfile> _parser = new pb::MessageParser<PlayerProfile>(() => new PlayerProfile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerProfile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerProfile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerProfile(PlayerProfile other) : this() {
      registrationData_ = other.registrationData_ != null ? other.registrationData_.Clone() : null;
      updatedAt_ = other.updatedAt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerProfile Clone() {
      return new PlayerProfile(this);
    }

    /// <summary>Field number for the "registrationData" field.</summary>
    public const int RegistrationDataFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.PlayerProfileRegistrationData registrationData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerProfileRegistrationData RegistrationData {
      get { return registrationData_; }
      set {
        registrationData_ = value;
      }
    }

    /// <summary>Field number for the "updatedAt" field.</summary>
    public const int UpdatedAtFieldNumber = 2;
    private long updatedAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpdatedAt {
      get { return updatedAt_; }
      set {
        updatedAt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerProfile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerProfile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RegistrationData, other.RegistrationData)) return false;
      if (UpdatedAt != other.UpdatedAt) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (registrationData_ != null) hash ^= RegistrationData.GetHashCode();
      if (UpdatedAt != 0L) hash ^= UpdatedAt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (registrationData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RegistrationData);
      }
      if (UpdatedAt != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UpdatedAt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (registrationData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RegistrationData);
      }
      if (UpdatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpdatedAt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerProfile other) {
      if (other == null) {
        return;
      }
      if (other.registrationData_ != null) {
        if (registrationData_ == null) {
          registrationData_ = new global::Loom.ZombieBattleground.Protobuf.PlayerProfileRegistrationData();
        }
        RegistrationData.MergeFrom(other.RegistrationData);
      }
      if (other.UpdatedAt != 0L) {
        UpdatedAt = other.UpdatedAt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (registrationData_ == null) {
              registrationData_ = new global::Loom.ZombieBattleground.Protobuf.PlayerProfileRegistrationData();
            }
            input.ReadMessage(registrationData_);
            break;
          }
          case 16: {
            UpdatedAt = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerProfileRegistrationData : pb::IMessage<PlayerProfileRegistrationData> {
    private static readonly pb::MessageParser<PlayerProfileRegistrationData> _parser = new pb::MessageParser<PlayerProfileRegistrationData>(() => new PlayerProfileRegistrationData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerProfileRegistrationData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerProfileRegistrationData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerProfileRegistrationData(PlayerProfileRegistrationData other) : this() {
      userId_ = other.userId_;
      deckId_ = other.deckId_;
      version_ = other.version_;
      customGame_ = other.customGame_ != null ? other.customGame_.Clone() : null;
      tags_ = other.tags_.Clone();
      useBackendGameLogic_ = other.useBackendGameLogic_;
      debugCheats_ = other.debugCheats_ != null ? other.debugCheats_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerProfileRegistrationData Clone() {
      return new PlayerProfileRegistrationData(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deckId" field.</summary>
    public const int DeckIdFieldNumber = 2;
    private long deckId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DeckId {
      get { return deckId_; }
      set {
        deckId_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "customGame" field.</summary>
    public const int CustomGameFieldNumber = 4;
    private global::Loom.Client.Protobuf.Address customGame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.Client.Protobuf.Address CustomGame {
      get { return customGame_; }
      set {
        customGame_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_tags_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "useBackendGameLogic" field.</summary>
    public const int UseBackendGameLogicFieldNumber = 6;
    private bool useBackendGameLogic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseBackendGameLogic {
      get { return useBackendGameLogic_; }
      set {
        useBackendGameLogic_ = value;
      }
    }

    /// <summary>Field number for the "debugCheats" field.</summary>
    public const int DebugCheatsFieldNumber = 7;
    private global::Loom.ZombieBattleground.Protobuf.DebugCheatsConfiguration debugCheats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.DebugCheatsConfiguration DebugCheats {
      get { return debugCheats_; }
      set {
        debugCheats_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerProfileRegistrationData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerProfileRegistrationData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (DeckId != other.DeckId) return false;
      if (Version != other.Version) return false;
      if (!object.Equals(CustomGame, other.CustomGame)) return false;
      if(!tags_.Equals(other.tags_)) return false;
      if (UseBackendGameLogic != other.UseBackendGameLogic) return false;
      if (!object.Equals(DebugCheats, other.DebugCheats)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (DeckId != 0L) hash ^= DeckId.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (customGame_ != null) hash ^= CustomGame.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (UseBackendGameLogic != false) hash ^= UseBackendGameLogic.GetHashCode();
      if (debugCheats_ != null) hash ^= DebugCheats.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (DeckId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(DeckId);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Version);
      }
      if (customGame_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CustomGame);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      if (UseBackendGameLogic != false) {
        output.WriteRawTag(48);
        output.WriteBool(UseBackendGameLogic);
      }
      if (debugCheats_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(DebugCheats);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (DeckId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DeckId);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (customGame_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CustomGame);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (UseBackendGameLogic != false) {
        size += 1 + 1;
      }
      if (debugCheats_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DebugCheats);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerProfileRegistrationData other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.DeckId != 0L) {
        DeckId = other.DeckId;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.customGame_ != null) {
        if (customGame_ == null) {
          customGame_ = new global::Loom.Client.Protobuf.Address();
        }
        CustomGame.MergeFrom(other.CustomGame);
      }
      tags_.Add(other.tags_);
      if (other.UseBackendGameLogic != false) {
        UseBackendGameLogic = other.UseBackendGameLogic;
      }
      if (other.debugCheats_ != null) {
        if (debugCheats_ == null) {
          debugCheats_ = new global::Loom.ZombieBattleground.Protobuf.DebugCheatsConfiguration();
        }
        DebugCheats.MergeFrom(other.DebugCheats);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 16: {
            DeckId = input.ReadInt64();
            break;
          }
          case 26: {
            Version = input.ReadString();
            break;
          }
          case 34: {
            if (customGame_ == null) {
              customGame_ = new global::Loom.Client.Protobuf.Address();
            }
            input.ReadMessage(customGame_);
            break;
          }
          case 42: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 48: {
            UseBackendGameLogic = input.ReadBool();
            break;
          }
          case 58: {
            if (debugCheats_ == null) {
              debugCheats_ = new global::Loom.ZombieBattleground.Protobuf.DebugCheatsConfiguration();
            }
            input.ReadMessage(debugCheats_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerPool : pb::IMessage<PlayerPool> {
    private static readonly pb::MessageParser<PlayerPool> _parser = new pb::MessageParser<PlayerPool>(() => new PlayerPool());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerPool> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPool() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPool(PlayerPool other) : this() {
      playerProfiles_ = other.playerProfiles_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPool Clone() {
      return new PlayerPool(this);
    }

    /// <summary>Field number for the "playerProfiles" field.</summary>
    public const int PlayerProfilesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.PlayerProfile> _repeated_playerProfiles_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.PlayerProfile.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerProfile> playerProfiles_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerProfile>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerProfile> PlayerProfiles {
      get { return playerProfiles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerPool);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerPool other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!playerProfiles_.Equals(other.playerProfiles_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= playerProfiles_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      playerProfiles_.WriteTo(output, _repeated_playerProfiles_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerProfiles_.CalculateSize(_repeated_playerProfiles_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerPool other) {
      if (other == null) {
        return;
      }
      playerProfiles_.Add(other.playerProfiles_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            playerProfiles_.AddEntriesFrom(input, _repeated_playerProfiles_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MatchCount : pb::IMessage<MatchCount> {
    private static readonly pb::MessageParser<MatchCount> _parser = new pb::MessageParser<MatchCount>(() => new MatchCount());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchCount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchCount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchCount(MatchCount other) : this() {
      currentId_ = other.currentId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchCount Clone() {
      return new MatchCount(this);
    }

    /// <summary>Field number for the "currentId" field.</summary>
    public const int CurrentIdFieldNumber = 1;
    private long currentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurrentId {
      get { return currentId_; }
      set {
        currentId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchCount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchCount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentId != other.CurrentId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentId != 0L) hash ^= CurrentId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CurrentId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrentId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchCount other) {
      if (other == null) {
        return;
      }
      if (other.CurrentId != 0L) {
        CurrentId = other.CurrentId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CurrentId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DebugCheatsConfiguration : pb::IMessage<DebugCheatsConfiguration> {
    private static readonly pb::MessageParser<DebugCheatsConfiguration> _parser = new pb::MessageParser<DebugCheatsConfiguration>(() => new DebugCheatsConfiguration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DebugCheatsConfiguration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugCheatsConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugCheatsConfiguration(DebugCheatsConfiguration other) : this() {
      enabled_ = other.enabled_;
      useCustomDeck_ = other.useCustomDeck_;
      customDeck_ = other.customDeck_ != null ? other.customDeck_.Clone() : null;
      useCustomRandomSeed_ = other.useCustomRandomSeed_;
      customRandomSeed_ = other.customRandomSeed_;
      disableDeckShuffle_ = other.disableDeckShuffle_;
      forceFirstTurnUserId_ = other.forceFirstTurnUserId_;
      ignoreGooRequirements_ = other.ignoreGooRequirements_;
      skipMulligan_ = other.skipMulligan_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugCheatsConfiguration Clone() {
      return new DebugCheatsConfiguration(this);
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 1;
    private bool enabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "useCustomDeck" field.</summary>
    public const int UseCustomDeckFieldNumber = 2;
    private bool useCustomDeck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseCustomDeck {
      get { return useCustomDeck_; }
      set {
        useCustomDeck_ = value;
      }
    }

    /// <summary>Field number for the "customDeck" field.</summary>
    public const int CustomDeckFieldNumber = 3;
    private global::Loom.ZombieBattleground.Protobuf.Deck customDeck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Deck CustomDeck {
      get { return customDeck_; }
      set {
        customDeck_ = value;
      }
    }

    /// <summary>Field number for the "useCustomRandomSeed" field.</summary>
    public const int UseCustomRandomSeedFieldNumber = 4;
    private bool useCustomRandomSeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseCustomRandomSeed {
      get { return useCustomRandomSeed_; }
      set {
        useCustomRandomSeed_ = value;
      }
    }

    /// <summary>Field number for the "customRandomSeed" field.</summary>
    public const int CustomRandomSeedFieldNumber = 5;
    private long customRandomSeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CustomRandomSeed {
      get { return customRandomSeed_; }
      set {
        customRandomSeed_ = value;
      }
    }

    /// <summary>Field number for the "disableDeckShuffle" field.</summary>
    public const int DisableDeckShuffleFieldNumber = 6;
    private bool disableDeckShuffle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisableDeckShuffle {
      get { return disableDeckShuffle_; }
      set {
        disableDeckShuffle_ = value;
      }
    }

    /// <summary>Field number for the "forceFirstTurnUserId" field.</summary>
    public const int ForceFirstTurnUserIdFieldNumber = 7;
    private string forceFirstTurnUserId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ForceFirstTurnUserId {
      get { return forceFirstTurnUserId_; }
      set {
        forceFirstTurnUserId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ignoreGooRequirements" field.</summary>
    public const int IgnoreGooRequirementsFieldNumber = 8;
    private bool ignoreGooRequirements_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IgnoreGooRequirements {
      get { return ignoreGooRequirements_; }
      set {
        ignoreGooRequirements_ = value;
      }
    }

    /// <summary>Field number for the "skipMulligan" field.</summary>
    public const int SkipMulliganFieldNumber = 9;
    private bool skipMulligan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SkipMulligan {
      get { return skipMulligan_; }
      set {
        skipMulligan_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DebugCheatsConfiguration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DebugCheatsConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Enabled != other.Enabled) return false;
      if (UseCustomDeck != other.UseCustomDeck) return false;
      if (!object.Equals(CustomDeck, other.CustomDeck)) return false;
      if (UseCustomRandomSeed != other.UseCustomRandomSeed) return false;
      if (CustomRandomSeed != other.CustomRandomSeed) return false;
      if (DisableDeckShuffle != other.DisableDeckShuffle) return false;
      if (ForceFirstTurnUserId != other.ForceFirstTurnUserId) return false;
      if (IgnoreGooRequirements != other.IgnoreGooRequirements) return false;
      if (SkipMulligan != other.SkipMulligan) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (UseCustomDeck != false) hash ^= UseCustomDeck.GetHashCode();
      if (customDeck_ != null) hash ^= CustomDeck.GetHashCode();
      if (UseCustomRandomSeed != false) hash ^= UseCustomRandomSeed.GetHashCode();
      if (CustomRandomSeed != 0L) hash ^= CustomRandomSeed.GetHashCode();
      if (DisableDeckShuffle != false) hash ^= DisableDeckShuffle.GetHashCode();
      if (ForceFirstTurnUserId.Length != 0) hash ^= ForceFirstTurnUserId.GetHashCode();
      if (IgnoreGooRequirements != false) hash ^= IgnoreGooRequirements.GetHashCode();
      if (SkipMulligan != false) hash ^= SkipMulligan.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Enabled != false) {
        output.WriteRawTag(8);
        output.WriteBool(Enabled);
      }
      if (UseCustomDeck != false) {
        output.WriteRawTag(16);
        output.WriteBool(UseCustomDeck);
      }
      if (customDeck_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CustomDeck);
      }
      if (UseCustomRandomSeed != false) {
        output.WriteRawTag(32);
        output.WriteBool(UseCustomRandomSeed);
      }
      if (CustomRandomSeed != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(CustomRandomSeed);
      }
      if (DisableDeckShuffle != false) {
        output.WriteRawTag(48);
        output.WriteBool(DisableDeckShuffle);
      }
      if (ForceFirstTurnUserId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ForceFirstTurnUserId);
      }
      if (IgnoreGooRequirements != false) {
        output.WriteRawTag(64);
        output.WriteBool(IgnoreGooRequirements);
      }
      if (SkipMulligan != false) {
        output.WriteRawTag(72);
        output.WriteBool(SkipMulligan);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (UseCustomDeck != false) {
        size += 1 + 1;
      }
      if (customDeck_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CustomDeck);
      }
      if (UseCustomRandomSeed != false) {
        size += 1 + 1;
      }
      if (CustomRandomSeed != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CustomRandomSeed);
      }
      if (DisableDeckShuffle != false) {
        size += 1 + 1;
      }
      if (ForceFirstTurnUserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ForceFirstTurnUserId);
      }
      if (IgnoreGooRequirements != false) {
        size += 1 + 1;
      }
      if (SkipMulligan != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DebugCheatsConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.UseCustomDeck != false) {
        UseCustomDeck = other.UseCustomDeck;
      }
      if (other.customDeck_ != null) {
        if (customDeck_ == null) {
          customDeck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
        }
        CustomDeck.MergeFrom(other.CustomDeck);
      }
      if (other.UseCustomRandomSeed != false) {
        UseCustomRandomSeed = other.UseCustomRandomSeed;
      }
      if (other.CustomRandomSeed != 0L) {
        CustomRandomSeed = other.CustomRandomSeed;
      }
      if (other.DisableDeckShuffle != false) {
        DisableDeckShuffle = other.DisableDeckShuffle;
      }
      if (other.ForceFirstTurnUserId.Length != 0) {
        ForceFirstTurnUserId = other.ForceFirstTurnUserId;
      }
      if (other.IgnoreGooRequirements != false) {
        IgnoreGooRequirements = other.IgnoreGooRequirements;
      }
      if (other.SkipMulligan != false) {
        SkipMulligan = other.SkipMulligan;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Enabled = input.ReadBool();
            break;
          }
          case 16: {
            UseCustomDeck = input.ReadBool();
            break;
          }
          case 26: {
            if (customDeck_ == null) {
              customDeck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
            }
            input.ReadMessage(customDeck_);
            break;
          }
          case 32: {
            UseCustomRandomSeed = input.ReadBool();
            break;
          }
          case 40: {
            CustomRandomSeed = input.ReadInt64();
            break;
          }
          case 48: {
            DisableDeckShuffle = input.ReadBool();
            break;
          }
          case 58: {
            ForceFirstTurnUserId = input.ReadString();
            break;
          }
          case 64: {
            IgnoreGooRequirements = input.ReadBool();
            break;
          }
          case 72: {
            SkipMulligan = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameMode : pb::IMessage<GameMode> {
    private static readonly pb::MessageParser<GameMode> _parser = new pb::MessageParser<GameMode>(() => new GameMode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameMode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameMode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameMode(GameMode other) : this() {
      iD_ = other.iD_;
      name_ = other.name_;
      description_ = other.description_;
      version_ = other.version_;
      gameModeType_ = other.gameModeType_;
      address_ = other.address_ != null ? other.address_.Clone() : null;
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameMode Clone() {
      return new GameMode(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private string iD_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ID {
      get { return iD_; }
      set {
        iD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 4;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_mode_type" field.</summary>
    public const int GameModeTypeFieldNumber = 5;
    private global::Loom.ZombieBattleground.Protobuf.GameModeType gameModeType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.GameModeType GameModeType {
      get { return gameModeType_; }
      set {
        gameModeType_ = value;
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 6;
    private global::Loom.Client.Protobuf.Address address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.Client.Protobuf.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "Owner" field.</summary>
    public const int OwnerFieldNumber = 7;
    private global::Loom.Client.Protobuf.Address owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.Client.Protobuf.Address Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameMode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameMode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (Version != other.Version) return false;
      if (GameModeType != other.GameModeType) return false;
      if (!object.Equals(Address, other.Address)) return false;
      if (!object.Equals(Owner, other.Owner)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID.Length != 0) hash ^= ID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (GameModeType != 0) hash ^= GameModeType.GetHashCode();
      if (address_ != null) hash ^= Address.GetHashCode();
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Version);
      }
      if (GameModeType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) GameModeType);
      }
      if (address_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Address);
      }
      if (owner_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (GameModeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GameModeType);
      }
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameMode other) {
      if (other == null) {
        return;
      }
      if (other.ID.Length != 0) {
        ID = other.ID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.GameModeType != 0) {
        GameModeType = other.GameModeType;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          address_ = new global::Loom.Client.Protobuf.Address();
        }
        Address.MergeFrom(other.Address);
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          owner_ = new global::Loom.Client.Protobuf.Address();
        }
        Owner.MergeFrom(other.Owner);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ID = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            Version = input.ReadString();
            break;
          }
          case 40: {
            gameModeType_ = (global::Loom.ZombieBattleground.Protobuf.GameModeType) input.ReadEnum();
            break;
          }
          case 50: {
            if (address_ == null) {
              address_ = new global::Loom.Client.Protobuf.Address();
            }
            input.ReadMessage(address_);
            break;
          }
          case 58: {
            if (owner_ == null) {
              owner_ = new global::Loom.Client.Protobuf.Address();
            }
            input.ReadMessage(owner_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameModeList : pb::IMessage<GameModeList> {
    private static readonly pb::MessageParser<GameModeList> _parser = new pb::MessageParser<GameModeList>(() => new GameModeList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameModeList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeList(GameModeList other) : this() {
      gameModes_ = other.gameModes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeList Clone() {
      return new GameModeList(this);
    }

    /// <summary>Field number for the "game_modes" field.</summary>
    public const int GameModesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.GameMode> _repeated_gameModes_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.GameMode.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.GameMode> gameModes_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.GameMode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.GameMode> GameModes {
      get { return gameModes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameModeList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameModeList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!gameModes_.Equals(other.gameModes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= gameModes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      gameModes_.WriteTo(output, _repeated_gameModes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += gameModes_.CalculateSize(_repeated_gameModes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameModeList other) {
      if (other == null) {
        return;
      }
      gameModes_.Add(other.gameModes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            gameModes_.AddEntriesFrom(input, _repeated_gameModes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CustomGameModeCustomUiLabel : pb::IMessage<CustomGameModeCustomUiLabel> {
    private static readonly pb::MessageParser<CustomGameModeCustomUiLabel> _parser = new pb::MessageParser<CustomGameModeCustomUiLabel>(() => new CustomGameModeCustomUiLabel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CustomGameModeCustomUiLabel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomGameModeCustomUiLabel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomGameModeCustomUiLabel(CustomGameModeCustomUiLabel other) : this() {
      text_ = other.text_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomGameModeCustomUiLabel Clone() {
      return new CustomGameModeCustomUiLabel(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CustomGameModeCustomUiLabel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CustomGameModeCustomUiLabel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Text != other.Text) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Text.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CustomGameModeCustomUiLabel other) {
      if (other == null) {
        return;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CustomGameModeCustomUiButton : pb::IMessage<CustomGameModeCustomUiButton> {
    private static readonly pb::MessageParser<CustomGameModeCustomUiButton> _parser = new pb::MessageParser<CustomGameModeCustomUiButton>(() => new CustomGameModeCustomUiButton());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CustomGameModeCustomUiButton> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomGameModeCustomUiButton() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomGameModeCustomUiButton(CustomGameModeCustomUiButton other) : this() {
      title_ = other.title_;
      callData_ = other.callData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomGameModeCustomUiButton Clone() {
      return new CustomGameModeCustomUiButton(this);
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 1;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "callData" field.</summary>
    public const int CallDataFieldNumber = 2;
    private pb::ByteString callData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CallData {
      get { return callData_; }
      set {
        callData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CustomGameModeCustomUiButton);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CustomGameModeCustomUiButton other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Title != other.Title) return false;
      if (CallData != other.CallData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (CallData.Length != 0) hash ^= CallData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Title.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Title);
      }
      if (CallData.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(CallData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (CallData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CallData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CustomGameModeCustomUiButton other) {
      if (other == null) {
        return;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.CallData.Length != 0) {
        CallData = other.CallData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Title = input.ReadString();
            break;
          }
          case 18: {
            CallData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CustomGameModeCustomUiElement : pb::IMessage<CustomGameModeCustomUiElement> {
    private static readonly pb::MessageParser<CustomGameModeCustomUiElement> _parser = new pb::MessageParser<CustomGameModeCustomUiElement>(() => new CustomGameModeCustomUiElement());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CustomGameModeCustomUiElement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomGameModeCustomUiElement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomGameModeCustomUiElement(CustomGameModeCustomUiElement other) : this() {
      rect_ = other.rect_ != null ? other.rect_.Clone() : null;
      switch (other.UiElementCase) {
        case UiElementOneofCase.Label:
          Label = other.Label.Clone();
          break;
        case UiElementOneofCase.Button:
          Button = other.Button.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomGameModeCustomUiElement Clone() {
      return new CustomGameModeCustomUiElement(this);
    }

    /// <summary>Field number for the "rect" field.</summary>
    public const int RectFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.Rect rect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Rect Rect {
      get { return rect_; }
      set {
        rect_ = value;
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CustomGameModeCustomUiLabel Label {
      get { return uiElementCase_ == UiElementOneofCase.Label ? (global::Loom.ZombieBattleground.Protobuf.CustomGameModeCustomUiLabel) uiElement_ : null; }
      set {
        uiElement_ = value;
        uiElementCase_ = value == null ? UiElementOneofCase.None : UiElementOneofCase.Label;
      }
    }

    /// <summary>Field number for the "button" field.</summary>
    public const int ButtonFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CustomGameModeCustomUiButton Button {
      get { return uiElementCase_ == UiElementOneofCase.Button ? (global::Loom.ZombieBattleground.Protobuf.CustomGameModeCustomUiButton) uiElement_ : null; }
      set {
        uiElement_ = value;
        uiElementCase_ = value == null ? UiElementOneofCase.None : UiElementOneofCase.Button;
      }
    }

    private object uiElement_;
    /// <summary>Enum of possible cases for the "uiElement" oneof.</summary>
    public enum UiElementOneofCase {
      None = 0,
      Label = 2,
      Button = 3,
    }
    private UiElementOneofCase uiElementCase_ = UiElementOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UiElementOneofCase UiElementCase {
      get { return uiElementCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUiElement() {
      uiElementCase_ = UiElementOneofCase.None;
      uiElement_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CustomGameModeCustomUiElement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CustomGameModeCustomUiElement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Rect, other.Rect)) return false;
      if (!object.Equals(Label, other.Label)) return false;
      if (!object.Equals(Button, other.Button)) return false;
      if (UiElementCase != other.UiElementCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rect_ != null) hash ^= Rect.GetHashCode();
      if (uiElementCase_ == UiElementOneofCase.Label) hash ^= Label.GetHashCode();
      if (uiElementCase_ == UiElementOneofCase.Button) hash ^= Button.GetHashCode();
      hash ^= (int) uiElementCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rect_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Rect);
      }
      if (uiElementCase_ == UiElementOneofCase.Label) {
        output.WriteRawTag(18);
        output.WriteMessage(Label);
      }
      if (uiElementCase_ == UiElementOneofCase.Button) {
        output.WriteRawTag(26);
        output.WriteMessage(Button);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rect_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rect);
      }
      if (uiElementCase_ == UiElementOneofCase.Label) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Label);
      }
      if (uiElementCase_ == UiElementOneofCase.Button) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Button);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CustomGameModeCustomUiElement other) {
      if (other == null) {
        return;
      }
      if (other.rect_ != null) {
        if (rect_ == null) {
          rect_ = new global::Loom.ZombieBattleground.Protobuf.Rect();
        }
        Rect.MergeFrom(other.Rect);
      }
      switch (other.UiElementCase) {
        case UiElementOneofCase.Label:
          if (Label == null) {
            Label = new global::Loom.ZombieBattleground.Protobuf.CustomGameModeCustomUiLabel();
          }
          Label.MergeFrom(other.Label);
          break;
        case UiElementOneofCase.Button:
          if (Button == null) {
            Button = new global::Loom.ZombieBattleground.Protobuf.CustomGameModeCustomUiButton();
          }
          Button.MergeFrom(other.Button);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (rect_ == null) {
              rect_ = new global::Loom.ZombieBattleground.Protobuf.Rect();
            }
            input.ReadMessage(rect_);
            break;
          }
          case 18: {
            global::Loom.ZombieBattleground.Protobuf.CustomGameModeCustomUiLabel subBuilder = new global::Loom.ZombieBattleground.Protobuf.CustomGameModeCustomUiLabel();
            if (uiElementCase_ == UiElementOneofCase.Label) {
              subBuilder.MergeFrom(Label);
            }
            input.ReadMessage(subBuilder);
            Label = subBuilder;
            break;
          }
          case 26: {
            global::Loom.ZombieBattleground.Protobuf.CustomGameModeCustomUiButton subBuilder = new global::Loom.ZombieBattleground.Protobuf.CustomGameModeCustomUiButton();
            if (uiElementCase_ == UiElementOneofCase.Button) {
              subBuilder.MergeFrom(Button);
            }
            input.ReadMessage(subBuilder);
            Button = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameState : pb::IMessage<GameState> {
    private static readonly pb::MessageParser<GameState> _parser = new pb::MessageParser<GameState>(() => new GameState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState(GameState other) : this() {
      id_ = other.id_;
      isEnded_ = other.isEnded_;
      currentPlayerIndex_ = other.currentPlayerIndex_;
      playerStates_ = other.playerStates_.Clone();
      currentActionIndex_ = other.currentActionIndex_;
      playerActions_ = other.playerActions_.Clone();
      randomSeed_ = other.randomSeed_;
      winner_ = other.winner_;
      version_ = other.version_;
      createdAt_ = other.createdAt_;
      nextInstanceId_ = other.nextInstanceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState Clone() {
      return new GameState(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "isEnded" field.</summary>
    public const int IsEndedFieldNumber = 2;
    private bool isEnded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEnded {
      get { return isEnded_; }
      set {
        isEnded_ = value;
      }
    }

    /// <summary>Field number for the "currentPlayerIndex" field.</summary>
    public const int CurrentPlayerIndexFieldNumber = 3;
    private int currentPlayerIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentPlayerIndex {
      get { return currentPlayerIndex_; }
      set {
        currentPlayerIndex_ = value;
      }
    }

    /// <summary>Field number for the "playerStates" field.</summary>
    public const int PlayerStatesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.PlayerState> _repeated_playerStates_codec
        = pb::FieldCodec.ForMessage(34, global::Loom.ZombieBattleground.Protobuf.PlayerState.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerState> playerStates_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerState>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerState> PlayerStates {
      get { return playerStates_; }
    }

    /// <summary>Field number for the "currentActionIndex" field.</summary>
    public const int CurrentActionIndexFieldNumber = 5;
    private long currentActionIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurrentActionIndex {
      get { return currentActionIndex_; }
      set {
        currentActionIndex_ = value;
      }
    }

    /// <summary>Field number for the "playerActions" field.</summary>
    public const int PlayerActionsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.PlayerAction> _repeated_playerActions_codec
        = pb::FieldCodec.ForMessage(50, global::Loom.ZombieBattleground.Protobuf.PlayerAction.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerAction> playerActions_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerAction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerAction> PlayerActions {
      get { return playerActions_; }
    }

    /// <summary>Field number for the "randomSeed" field.</summary>
    public const int RandomSeedFieldNumber = 7;
    private long randomSeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RandomSeed {
      get { return randomSeed_; }
      set {
        randomSeed_ = value;
      }
    }

    /// <summary>Field number for the "winner" field.</summary>
    public const int WinnerFieldNumber = 8;
    private string winner_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Winner {
      get { return winner_; }
      set {
        winner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 9;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createdAt" field.</summary>
    public const int CreatedAtFieldNumber = 10;
    private long createdAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "nextInstanceId" field.</summary>
    public const int NextInstanceIdFieldNumber = 11;
    private int nextInstanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextInstanceId {
      get { return nextInstanceId_; }
      set {
        nextInstanceId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (IsEnded != other.IsEnded) return false;
      if (CurrentPlayerIndex != other.CurrentPlayerIndex) return false;
      if(!playerStates_.Equals(other.playerStates_)) return false;
      if (CurrentActionIndex != other.CurrentActionIndex) return false;
      if(!playerActions_.Equals(other.playerActions_)) return false;
      if (RandomSeed != other.RandomSeed) return false;
      if (Winner != other.Winner) return false;
      if (Version != other.Version) return false;
      if (CreatedAt != other.CreatedAt) return false;
      if (NextInstanceId != other.NextInstanceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (IsEnded != false) hash ^= IsEnded.GetHashCode();
      if (CurrentPlayerIndex != 0) hash ^= CurrentPlayerIndex.GetHashCode();
      hash ^= playerStates_.GetHashCode();
      if (CurrentActionIndex != 0L) hash ^= CurrentActionIndex.GetHashCode();
      hash ^= playerActions_.GetHashCode();
      if (RandomSeed != 0L) hash ^= RandomSeed.GetHashCode();
      if (Winner.Length != 0) hash ^= Winner.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (CreatedAt != 0L) hash ^= CreatedAt.GetHashCode();
      if (NextInstanceId != 0) hash ^= NextInstanceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (IsEnded != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsEnded);
      }
      if (CurrentPlayerIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurrentPlayerIndex);
      }
      playerStates_.WriteTo(output, _repeated_playerStates_codec);
      if (CurrentActionIndex != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(CurrentActionIndex);
      }
      playerActions_.WriteTo(output, _repeated_playerActions_codec);
      if (RandomSeed != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(RandomSeed);
      }
      if (Winner.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Winner);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Version);
      }
      if (CreatedAt != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(CreatedAt);
      }
      if (NextInstanceId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(NextInstanceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (IsEnded != false) {
        size += 1 + 1;
      }
      if (CurrentPlayerIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentPlayerIndex);
      }
      size += playerStates_.CalculateSize(_repeated_playerStates_codec);
      if (CurrentActionIndex != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrentActionIndex);
      }
      size += playerActions_.CalculateSize(_repeated_playerActions_codec);
      if (RandomSeed != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RandomSeed);
      }
      if (Winner.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Winner);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (CreatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAt);
      }
      if (NextInstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextInstanceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameState other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.IsEnded != false) {
        IsEnded = other.IsEnded;
      }
      if (other.CurrentPlayerIndex != 0) {
        CurrentPlayerIndex = other.CurrentPlayerIndex;
      }
      playerStates_.Add(other.playerStates_);
      if (other.CurrentActionIndex != 0L) {
        CurrentActionIndex = other.CurrentActionIndex;
      }
      playerActions_.Add(other.playerActions_);
      if (other.RandomSeed != 0L) {
        RandomSeed = other.RandomSeed;
      }
      if (other.Winner.Length != 0) {
        Winner = other.Winner;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.CreatedAt != 0L) {
        CreatedAt = other.CreatedAt;
      }
      if (other.NextInstanceId != 0) {
        NextInstanceId = other.NextInstanceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            IsEnded = input.ReadBool();
            break;
          }
          case 24: {
            CurrentPlayerIndex = input.ReadInt32();
            break;
          }
          case 34: {
            playerStates_.AddEntriesFrom(input, _repeated_playerStates_codec);
            break;
          }
          case 40: {
            CurrentActionIndex = input.ReadInt64();
            break;
          }
          case 50: {
            playerActions_.AddEntriesFrom(input, _repeated_playerActions_codec);
            break;
          }
          case 56: {
            RandomSeed = input.ReadInt64();
            break;
          }
          case 66: {
            Winner = input.ReadString();
            break;
          }
          case 74: {
            Version = input.ReadString();
            break;
          }
          case 80: {
            CreatedAt = input.ReadInt64();
            break;
          }
          case 88: {
            NextInstanceId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardChoosableAbility : pb::IMessage<CardChoosableAbility> {
    private static readonly pb::MessageParser<CardChoosableAbility> _parser = new pb::MessageParser<CardChoosableAbility>(() => new CardChoosableAbility());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardChoosableAbility> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardChoosableAbility() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardChoosableAbility(CardChoosableAbility other) : this() {
      description_ = other.description_;
      abilityData_ = other.abilityData_ != null ? other.abilityData_.Clone() : null;
      attribute_ = other.attribute_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardChoosableAbility Clone() {
      return new CardChoosableAbility(this);
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 1;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "abilityData" field.</summary>
    public const int AbilityDataFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.AbilityData abilityData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.AbilityData AbilityData {
      get { return abilityData_; }
      set {
        abilityData_ = value;
      }
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 3;
    private string attribute_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Attribute {
      get { return attribute_; }
      set {
        attribute_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardChoosableAbility);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardChoosableAbility other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Description != other.Description) return false;
      if (!object.Equals(AbilityData, other.AbilityData)) return false;
      if (Attribute != other.Attribute) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (abilityData_ != null) hash ^= AbilityData.GetHashCode();
      if (Attribute.Length != 0) hash ^= Attribute.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Description.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Description);
      }
      if (abilityData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AbilityData);
      }
      if (Attribute.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Attribute);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (abilityData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AbilityData);
      }
      if (Attribute.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Attribute);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardChoosableAbility other) {
      if (other == null) {
        return;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.abilityData_ != null) {
        if (abilityData_ == null) {
          abilityData_ = new global::Loom.ZombieBattleground.Protobuf.AbilityData();
        }
        AbilityData.MergeFrom(other.AbilityData);
      }
      if (other.Attribute.Length != 0) {
        Attribute = other.Attribute;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Description = input.ReadString();
            break;
          }
          case 18: {
            if (abilityData_ == null) {
              abilityData_ = new global::Loom.ZombieBattleground.Protobuf.AbilityData();
            }
            input.ReadMessage(abilityData_);
            break;
          }
          case 26: {
            Attribute = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AbilityData : pb::IMessage<AbilityData> {
    private static readonly pb::MessageParser<AbilityData> _parser = new pb::MessageParser<AbilityData>(() => new AbilityData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AbilityData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbilityData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbilityData(AbilityData other) : this() {
      ability_ = other.ability_;
      activity_ = other.activity_;
      trigger_ = other.trigger_;
      targets_ = other.targets_.Clone();
      stat_ = other.stat_;
      faction_ = other.faction_;
      effect_ = other.effect_;
      attackRestriction_ = other.attackRestriction_;
      targetCardType_ = other.targetCardType_;
      targetUnitSpecialStatus_ = other.targetUnitSpecialStatus_;
      targetUnitType_ = other.targetUnitType_;
      value_ = other.value_;
      damage_ = other.damage_;
      defense_ = other.defense_;
      name_ = other.name_;
      turns_ = other.turns_;
      count_ = other.count_;
      delay_ = other.delay_;
      visualEffectsToPlay_ = other.visualEffectsToPlay_.Clone();
      gameMechanicDescription_ = other.gameMechanicDescription_;
      targetFaction_ = other.targetFaction_;
      subTrigger_ = other.subTrigger_;
      choosableAbilities_ = other.choosableAbilities_.Clone();
      defense2_ = other.defense2_;
      cost_ = other.cost_;
      targetCardKind_ = other.targetCardKind_;
      targetGameMechanicDescriptionTypes_ = other.targetGameMechanicDescriptionTypes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbilityData Clone() {
      return new AbilityData(this);
    }

    /// <summary>Field number for the "ability" field.</summary>
    public const int AbilityFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.AbilityType.Types.Enum ability_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.AbilityType.Types.Enum Ability {
      get { return ability_; }
      set {
        ability_ = value;
      }
    }

    /// <summary>Field number for the "activity" field.</summary>
    public const int ActivityFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.AbilityActivity.Types.Enum activity_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.AbilityActivity.Types.Enum Activity {
      get { return activity_; }
      set {
        activity_ = value;
      }
    }

    /// <summary>Field number for the "trigger" field.</summary>
    public const int TriggerFieldNumber = 3;
    private global::Loom.ZombieBattleground.Protobuf.AbilityTrigger.Types.Enum trigger_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.AbilityTrigger.Types.Enum Trigger {
      get { return trigger_; }
      set {
        trigger_ = value;
      }
    }

    /// <summary>Field number for the "targets" field.</summary>
    public const int TargetsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Target.Types.Enum> _repeated_targets_codec
        = pb::FieldCodec.ForEnum(34, x => (int) x, x => (global::Loom.ZombieBattleground.Protobuf.Target.Types.Enum) x);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Target.Types.Enum> targets_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Target.Types.Enum>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Target.Types.Enum> Targets {
      get { return targets_; }
    }

    /// <summary>Field number for the "stat" field.</summary>
    public const int StatFieldNumber = 5;
    private global::Loom.ZombieBattleground.Protobuf.Stat.Types.Enum stat_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Stat.Types.Enum Stat {
      get { return stat_; }
      set {
        stat_ = value;
      }
    }

    /// <summary>Field number for the "faction" field.</summary>
    public const int FactionFieldNumber = 6;
    private global::Loom.ZombieBattleground.Protobuf.Faction.Types.Enum faction_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Faction.Types.Enum Faction {
      get { return faction_; }
      set {
        faction_ = value;
      }
    }

    /// <summary>Field number for the "effect" field.</summary>
    public const int EffectFieldNumber = 7;
    private global::Loom.ZombieBattleground.Protobuf.AbilityEffect.Types.Enum effect_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.AbilityEffect.Types.Enum Effect {
      get { return effect_; }
      set {
        effect_ = value;
      }
    }

    /// <summary>Field number for the "attackRestriction" field.</summary>
    public const int AttackRestrictionFieldNumber = 8;
    private global::Loom.ZombieBattleground.Protobuf.AttackRestriction.Types.Enum attackRestriction_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.AttackRestriction.Types.Enum AttackRestriction {
      get { return attackRestriction_; }
      set {
        attackRestriction_ = value;
      }
    }

    /// <summary>Field number for the "targetCardType" field.</summary>
    public const int TargetCardTypeFieldNumber = 9;
    private global::Loom.ZombieBattleground.Protobuf.CardType.Types.Enum targetCardType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardType.Types.Enum TargetCardType {
      get { return targetCardType_; }
      set {
        targetCardType_ = value;
      }
    }

    /// <summary>Field number for the "targetUnitSpecialStatus" field.</summary>
    public const int TargetUnitSpecialStatusFieldNumber = 10;
    private global::Loom.ZombieBattleground.Protobuf.UnitSpecialStatus.Types.Enum targetUnitSpecialStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.UnitSpecialStatus.Types.Enum TargetUnitSpecialStatus {
      get { return targetUnitSpecialStatus_; }
      set {
        targetUnitSpecialStatus_ = value;
      }
    }

    /// <summary>Field number for the "targetUnitType" field.</summary>
    public const int TargetUnitTypeFieldNumber = 11;
    private global::Loom.ZombieBattleground.Protobuf.CardType.Types.Enum targetUnitType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardType.Types.Enum TargetUnitType {
      get { return targetUnitType_; }
      set {
        targetUnitType_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 12;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 13;
    private int damage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "defense" field.</summary>
    public const int DefenseFieldNumber = 14;
    private int defense_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Defense {
      get { return defense_; }
      set {
        defense_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 15;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "turns" field.</summary>
    public const int TurnsFieldNumber = 16;
    private int turns_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Turns {
      get { return turns_; }
      set {
        turns_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 17;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "delay" field.</summary>
    public const int DelayFieldNumber = 18;
    private int delay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Delay {
      get { return delay_; }
      set {
        delay_ = value;
      }
    }

    /// <summary>Field number for the "visualEffectsToPlay" field.</summary>
    public const int VisualEffectsToPlayFieldNumber = 19;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.AbilityData.Types.VisualEffectInfo> _repeated_visualEffectsToPlay_codec
        = pb::FieldCodec.ForMessage(154, global::Loom.ZombieBattleground.Protobuf.AbilityData.Types.VisualEffectInfo.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AbilityData.Types.VisualEffectInfo> visualEffectsToPlay_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AbilityData.Types.VisualEffectInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AbilityData.Types.VisualEffectInfo> VisualEffectsToPlay {
      get { return visualEffectsToPlay_; }
    }

    /// <summary>Field number for the "gameMechanicDescription" field.</summary>
    public const int GameMechanicDescriptionFieldNumber = 20;
    private global::Loom.ZombieBattleground.Protobuf.GameMechanicDescription.Types.Enum gameMechanicDescription_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.GameMechanicDescription.Types.Enum GameMechanicDescription {
      get { return gameMechanicDescription_; }
      set {
        gameMechanicDescription_ = value;
      }
    }

    /// <summary>Field number for the "targetFaction" field.</summary>
    public const int TargetFactionFieldNumber = 21;
    private global::Loom.ZombieBattleground.Protobuf.Faction.Types.Enum targetFaction_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Faction.Types.Enum TargetFaction {
      get { return targetFaction_; }
      set {
        targetFaction_ = value;
      }
    }

    /// <summary>Field number for the "subTrigger" field.</summary>
    public const int SubTriggerFieldNumber = 22;
    private global::Loom.ZombieBattleground.Protobuf.AbilitySubTrigger.Types.Enum subTrigger_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.AbilitySubTrigger.Types.Enum SubTrigger {
      get { return subTrigger_; }
      set {
        subTrigger_ = value;
      }
    }

    /// <summary>Field number for the "choosableAbilities" field.</summary>
    public const int ChoosableAbilitiesFieldNumber = 23;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardChoosableAbility> _repeated_choosableAbilities_codec
        = pb::FieldCodec.ForMessage(186, global::Loom.ZombieBattleground.Protobuf.CardChoosableAbility.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardChoosableAbility> choosableAbilities_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardChoosableAbility>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardChoosableAbility> ChoosableAbilities {
      get { return choosableAbilities_; }
    }

    /// <summary>Field number for the "defense2" field.</summary>
    public const int Defense2FieldNumber = 24;
    private int defense2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Defense2 {
      get { return defense2_; }
      set {
        defense2_ = value;
      }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 25;
    private int cost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    /// <summary>Field number for the "targetCardKind" field.</summary>
    public const int TargetCardKindFieldNumber = 26;
    private global::Loom.ZombieBattleground.Protobuf.CardKind.Types.Enum targetCardKind_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardKind.Types.Enum TargetCardKind {
      get { return targetCardKind_; }
      set {
        targetCardKind_ = value;
      }
    }

    /// <summary>Field number for the "targetGameMechanicDescriptionTypes" field.</summary>
    public const int TargetGameMechanicDescriptionTypesFieldNumber = 27;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.GameMechanicDescription.Types.Enum> _repeated_targetGameMechanicDescriptionTypes_codec
        = pb::FieldCodec.ForEnum(218, x => (int) x, x => (global::Loom.ZombieBattleground.Protobuf.GameMechanicDescription.Types.Enum) x);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.GameMechanicDescription.Types.Enum> targetGameMechanicDescriptionTypes_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.GameMechanicDescription.Types.Enum>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.GameMechanicDescription.Types.Enum> TargetGameMechanicDescriptionTypes {
      get { return targetGameMechanicDescriptionTypes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AbilityData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AbilityData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ability != other.Ability) return false;
      if (Activity != other.Activity) return false;
      if (Trigger != other.Trigger) return false;
      if(!targets_.Equals(other.targets_)) return false;
      if (Stat != other.Stat) return false;
      if (Faction != other.Faction) return false;
      if (Effect != other.Effect) return false;
      if (AttackRestriction != other.AttackRestriction) return false;
      if (TargetCardType != other.TargetCardType) return false;
      if (TargetUnitSpecialStatus != other.TargetUnitSpecialStatus) return false;
      if (TargetUnitType != other.TargetUnitType) return false;
      if (Value != other.Value) return false;
      if (Damage != other.Damage) return false;
      if (Defense != other.Defense) return false;
      if (Name != other.Name) return false;
      if (Turns != other.Turns) return false;
      if (Count != other.Count) return false;
      if (Delay != other.Delay) return false;
      if(!visualEffectsToPlay_.Equals(other.visualEffectsToPlay_)) return false;
      if (GameMechanicDescription != other.GameMechanicDescription) return false;
      if (TargetFaction != other.TargetFaction) return false;
      if (SubTrigger != other.SubTrigger) return false;
      if(!choosableAbilities_.Equals(other.choosableAbilities_)) return false;
      if (Defense2 != other.Defense2) return false;
      if (Cost != other.Cost) return false;
      if (TargetCardKind != other.TargetCardKind) return false;
      if(!targetGameMechanicDescriptionTypes_.Equals(other.targetGameMechanicDescriptionTypes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ability != 0) hash ^= Ability.GetHashCode();
      if (Activity != 0) hash ^= Activity.GetHashCode();
      if (Trigger != 0) hash ^= Trigger.GetHashCode();
      hash ^= targets_.GetHashCode();
      if (Stat != 0) hash ^= Stat.GetHashCode();
      if (Faction != 0) hash ^= Faction.GetHashCode();
      if (Effect != 0) hash ^= Effect.GetHashCode();
      if (AttackRestriction != 0) hash ^= AttackRestriction.GetHashCode();
      if (TargetCardType != 0) hash ^= TargetCardType.GetHashCode();
      if (TargetUnitSpecialStatus != 0) hash ^= TargetUnitSpecialStatus.GetHashCode();
      if (TargetUnitType != 0) hash ^= TargetUnitType.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (Damage != 0) hash ^= Damage.GetHashCode();
      if (Defense != 0) hash ^= Defense.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Turns != 0) hash ^= Turns.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Delay != 0) hash ^= Delay.GetHashCode();
      hash ^= visualEffectsToPlay_.GetHashCode();
      if (GameMechanicDescription != 0) hash ^= GameMechanicDescription.GetHashCode();
      if (TargetFaction != 0) hash ^= TargetFaction.GetHashCode();
      if (SubTrigger != 0) hash ^= SubTrigger.GetHashCode();
      hash ^= choosableAbilities_.GetHashCode();
      if (Defense2 != 0) hash ^= Defense2.GetHashCode();
      if (Cost != 0) hash ^= Cost.GetHashCode();
      if (TargetCardKind != 0) hash ^= TargetCardKind.GetHashCode();
      hash ^= targetGameMechanicDescriptionTypes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ability != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Ability);
      }
      if (Activity != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Activity);
      }
      if (Trigger != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Trigger);
      }
      targets_.WriteTo(output, _repeated_targets_codec);
      if (Stat != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Stat);
      }
      if (Faction != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Faction);
      }
      if (Effect != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Effect);
      }
      if (AttackRestriction != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) AttackRestriction);
      }
      if (TargetCardType != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) TargetCardType);
      }
      if (TargetUnitSpecialStatus != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) TargetUnitSpecialStatus);
      }
      if (TargetUnitType != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) TargetUnitType);
      }
      if (Value != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Value);
      }
      if (Damage != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Damage);
      }
      if (Defense != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Defense);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Name);
      }
      if (Turns != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Turns);
      }
      if (Count != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Count);
      }
      if (Delay != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(Delay);
      }
      visualEffectsToPlay_.WriteTo(output, _repeated_visualEffectsToPlay_codec);
      if (GameMechanicDescription != 0) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) GameMechanicDescription);
      }
      if (TargetFaction != 0) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) TargetFaction);
      }
      if (SubTrigger != 0) {
        output.WriteRawTag(176, 1);
        output.WriteEnum((int) SubTrigger);
      }
      choosableAbilities_.WriteTo(output, _repeated_choosableAbilities_codec);
      if (Defense2 != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(Defense2);
      }
      if (Cost != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(Cost);
      }
      if (TargetCardKind != 0) {
        output.WriteRawTag(208, 1);
        output.WriteEnum((int) TargetCardKind);
      }
      targetGameMechanicDescriptionTypes_.WriteTo(output, _repeated_targetGameMechanicDescriptionTypes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ability != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Ability);
      }
      if (Activity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Activity);
      }
      if (Trigger != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Trigger);
      }
      size += targets_.CalculateSize(_repeated_targets_codec);
      if (Stat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Stat);
      }
      if (Faction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Faction);
      }
      if (Effect != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Effect);
      }
      if (AttackRestriction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AttackRestriction);
      }
      if (TargetCardType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TargetCardType);
      }
      if (TargetUnitSpecialStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TargetUnitSpecialStatus);
      }
      if (TargetUnitType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TargetUnitType);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (Damage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
      }
      if (Defense != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Defense);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Turns != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Turns);
      }
      if (Count != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Delay != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Delay);
      }
      size += visualEffectsToPlay_.CalculateSize(_repeated_visualEffectsToPlay_codec);
      if (GameMechanicDescription != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) GameMechanicDescription);
      }
      if (TargetFaction != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TargetFaction);
      }
      if (SubTrigger != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SubTrigger);
      }
      size += choosableAbilities_.CalculateSize(_repeated_choosableAbilities_codec);
      if (Defense2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Defense2);
      }
      if (Cost != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (TargetCardKind != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TargetCardKind);
      }
      size += targetGameMechanicDescriptionTypes_.CalculateSize(_repeated_targetGameMechanicDescriptionTypes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AbilityData other) {
      if (other == null) {
        return;
      }
      if (other.Ability != 0) {
        Ability = other.Ability;
      }
      if (other.Activity != 0) {
        Activity = other.Activity;
      }
      if (other.Trigger != 0) {
        Trigger = other.Trigger;
      }
      targets_.Add(other.targets_);
      if (other.Stat != 0) {
        Stat = other.Stat;
      }
      if (other.Faction != 0) {
        Faction = other.Faction;
      }
      if (other.Effect != 0) {
        Effect = other.Effect;
      }
      if (other.AttackRestriction != 0) {
        AttackRestriction = other.AttackRestriction;
      }
      if (other.TargetCardType != 0) {
        TargetCardType = other.TargetCardType;
      }
      if (other.TargetUnitSpecialStatus != 0) {
        TargetUnitSpecialStatus = other.TargetUnitSpecialStatus;
      }
      if (other.TargetUnitType != 0) {
        TargetUnitType = other.TargetUnitType;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      if (other.Damage != 0) {
        Damage = other.Damage;
      }
      if (other.Defense != 0) {
        Defense = other.Defense;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Turns != 0) {
        Turns = other.Turns;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Delay != 0) {
        Delay = other.Delay;
      }
      visualEffectsToPlay_.Add(other.visualEffectsToPlay_);
      if (other.GameMechanicDescription != 0) {
        GameMechanicDescription = other.GameMechanicDescription;
      }
      if (other.TargetFaction != 0) {
        TargetFaction = other.TargetFaction;
      }
      if (other.SubTrigger != 0) {
        SubTrigger = other.SubTrigger;
      }
      choosableAbilities_.Add(other.choosableAbilities_);
      if (other.Defense2 != 0) {
        Defense2 = other.Defense2;
      }
      if (other.Cost != 0) {
        Cost = other.Cost;
      }
      if (other.TargetCardKind != 0) {
        TargetCardKind = other.TargetCardKind;
      }
      targetGameMechanicDescriptionTypes_.Add(other.targetGameMechanicDescriptionTypes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ability_ = (global::Loom.ZombieBattleground.Protobuf.AbilityType.Types.Enum) input.ReadEnum();
            break;
          }
          case 16: {
            activity_ = (global::Loom.ZombieBattleground.Protobuf.AbilityActivity.Types.Enum) input.ReadEnum();
            break;
          }
          case 24: {
            trigger_ = (global::Loom.ZombieBattleground.Protobuf.AbilityTrigger.Types.Enum) input.ReadEnum();
            break;
          }
          case 34:
          case 32: {
            targets_.AddEntriesFrom(input, _repeated_targets_codec);
            break;
          }
          case 40: {
            stat_ = (global::Loom.ZombieBattleground.Protobuf.Stat.Types.Enum) input.ReadEnum();
            break;
          }
          case 48: {
            faction_ = (global::Loom.ZombieBattleground.Protobuf.Faction.Types.Enum) input.ReadEnum();
            break;
          }
          case 56: {
            effect_ = (global::Loom.ZombieBattleground.Protobuf.AbilityEffect.Types.Enum) input.ReadEnum();
            break;
          }
          case 64: {
            attackRestriction_ = (global::Loom.ZombieBattleground.Protobuf.AttackRestriction.Types.Enum) input.ReadEnum();
            break;
          }
          case 72: {
            targetCardType_ = (global::Loom.ZombieBattleground.Protobuf.CardType.Types.Enum) input.ReadEnum();
            break;
          }
          case 80: {
            targetUnitSpecialStatus_ = (global::Loom.ZombieBattleground.Protobuf.UnitSpecialStatus.Types.Enum) input.ReadEnum();
            break;
          }
          case 88: {
            targetUnitType_ = (global::Loom.ZombieBattleground.Protobuf.CardType.Types.Enum) input.ReadEnum();
            break;
          }
          case 96: {
            Value = input.ReadInt32();
            break;
          }
          case 104: {
            Damage = input.ReadInt32();
            break;
          }
          case 112: {
            Defense = input.ReadInt32();
            break;
          }
          case 122: {
            Name = input.ReadString();
            break;
          }
          case 128: {
            Turns = input.ReadInt32();
            break;
          }
          case 136: {
            Count = input.ReadInt32();
            break;
          }
          case 144: {
            Delay = input.ReadInt32();
            break;
          }
          case 154: {
            visualEffectsToPlay_.AddEntriesFrom(input, _repeated_visualEffectsToPlay_codec);
            break;
          }
          case 160: {
            gameMechanicDescription_ = (global::Loom.ZombieBattleground.Protobuf.GameMechanicDescription.Types.Enum) input.ReadEnum();
            break;
          }
          case 168: {
            targetFaction_ = (global::Loom.ZombieBattleground.Protobuf.Faction.Types.Enum) input.ReadEnum();
            break;
          }
          case 176: {
            subTrigger_ = (global::Loom.ZombieBattleground.Protobuf.AbilitySubTrigger.Types.Enum) input.ReadEnum();
            break;
          }
          case 186: {
            choosableAbilities_.AddEntriesFrom(input, _repeated_choosableAbilities_codec);
            break;
          }
          case 192: {
            Defense2 = input.ReadInt32();
            break;
          }
          case 200: {
            Cost = input.ReadInt32();
            break;
          }
          case 208: {
            targetCardKind_ = (global::Loom.ZombieBattleground.Protobuf.CardKind.Types.Enum) input.ReadEnum();
            break;
          }
          case 218:
          case 216: {
            targetGameMechanicDescriptionTypes_.AddEntriesFrom(input, _repeated_targetGameMechanicDescriptionTypes_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AbilityData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class VisualEffectInfo : pb::IMessage<VisualEffectInfo> {
        private static readonly pb::MessageParser<VisualEffectInfo> _parser = new pb::MessageParser<VisualEffectInfo>(() => new VisualEffectInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<VisualEffectInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Loom.ZombieBattleground.Protobuf.AbilityData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VisualEffectInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VisualEffectInfo(VisualEffectInfo other) : this() {
          type_ = other.type_;
          path_ = other.path_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VisualEffectInfo Clone() {
          return new VisualEffectInfo(this);
        }

        /// <summary>Field number for the "Type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::Loom.ZombieBattleground.Protobuf.AbilityData.Types.VisualEffectInfo.Types.VisualEffectType type_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.AbilityData.Types.VisualEffectInfo.Types.VisualEffectType Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "Path" field.</summary>
        public const int PathFieldNumber = 2;
        private string path_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Path {
          get { return path_; }
          set {
            path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as VisualEffectInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(VisualEffectInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Type != other.Type) return false;
          if (Path != other.Path) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Type != 0) hash ^= Type.GetHashCode();
          if (Path.Length != 0) hash ^= Path.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Type != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Type);
          }
          if (Path.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Path);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (Path.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(VisualEffectInfo other) {
          if (other == null) {
            return;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.Path.Length != 0) {
            Path = other.Path;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                type_ = (global::Loom.ZombieBattleground.Protobuf.AbilityData.Types.VisualEffectInfo.Types.VisualEffectType) input.ReadEnum();
                break;
              }
              case 18: {
                Path = input.ReadString();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the VisualEffectInfo message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum VisualEffectType {
            [pbr::OriginalName("Undefined")] Undefined = 0,
            [pbr::OriginalName("Impact")] Impact = 1,
            [pbr::OriginalName("Moving")] Moving = 2,
            [pbr::OriginalName("Impact_Heavy")] ImpactHeavy = 3,
            [pbr::OriginalName("Impact_Feral")] ImpactFeral = 4,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class CardAbilityRage : pb::IMessage<CardAbilityRage> {
    private static readonly pb::MessageParser<CardAbilityRage> _parser = new pb::MessageParser<CardAbilityRage>(() => new CardAbilityRage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardAbilityRage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityRage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityRage(CardAbilityRage other) : this() {
      addedDamage_ = other.addedDamage_;
      wasApplied_ = other.wasApplied_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityRage Clone() {
      return new CardAbilityRage(this);
    }

    /// <summary>Field number for the "addedDamage" field.</summary>
    public const int AddedDamageFieldNumber = 1;
    private int addedDamage_;
    /// <summary>
    /// TODO: Remove me
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddedDamage {
      get { return addedDamage_; }
      set {
        addedDamage_ = value;
      }
    }

    /// <summary>Field number for the "wasApplied" field.</summary>
    public const int WasAppliedFieldNumber = 2;
    private bool wasApplied_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WasApplied {
      get { return wasApplied_; }
      set {
        wasApplied_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardAbilityRage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardAbilityRage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AddedDamage != other.AddedDamage) return false;
      if (WasApplied != other.WasApplied) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AddedDamage != 0) hash ^= AddedDamage.GetHashCode();
      if (WasApplied != false) hash ^= WasApplied.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AddedDamage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AddedDamage);
      }
      if (WasApplied != false) {
        output.WriteRawTag(16);
        output.WriteBool(WasApplied);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AddedDamage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddedDamage);
      }
      if (WasApplied != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardAbilityRage other) {
      if (other == null) {
        return;
      }
      if (other.AddedDamage != 0) {
        AddedDamage = other.AddedDamage;
      }
      if (other.WasApplied != false) {
        WasApplied = other.WasApplied;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AddedDamage = input.ReadInt32();
            break;
          }
          case 16: {
            WasApplied = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardAbilityAdditionalDamageToHeavyInAttack : pb::IMessage<CardAbilityAdditionalDamageToHeavyInAttack> {
    private static readonly pb::MessageParser<CardAbilityAdditionalDamageToHeavyInAttack> _parser = new pb::MessageParser<CardAbilityAdditionalDamageToHeavyInAttack>(() => new CardAbilityAdditionalDamageToHeavyInAttack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardAbilityAdditionalDamageToHeavyInAttack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityAdditionalDamageToHeavyInAttack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityAdditionalDamageToHeavyInAttack(CardAbilityAdditionalDamageToHeavyInAttack other) : this() {
      addedDamage_ = other.addedDamage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityAdditionalDamageToHeavyInAttack Clone() {
      return new CardAbilityAdditionalDamageToHeavyInAttack(this);
    }

    /// <summary>Field number for the "addedDamage" field.</summary>
    public const int AddedDamageFieldNumber = 1;
    private int addedDamage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddedDamage {
      get { return addedDamage_; }
      set {
        addedDamage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardAbilityAdditionalDamageToHeavyInAttack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardAbilityAdditionalDamageToHeavyInAttack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AddedDamage != other.AddedDamage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AddedDamage != 0) hash ^= AddedDamage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AddedDamage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AddedDamage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AddedDamage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddedDamage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardAbilityAdditionalDamageToHeavyInAttack other) {
      if (other == null) {
        return;
      }
      if (other.AddedDamage != 0) {
        AddedDamage = other.AddedDamage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AddedDamage = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardAbilityChangeStat : pb::IMessage<CardAbilityChangeStat> {
    private static readonly pb::MessageParser<CardAbilityChangeStat> _parser = new pb::MessageParser<CardAbilityChangeStat>(() => new CardAbilityChangeStat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardAbilityChangeStat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityChangeStat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityChangeStat(CardAbilityChangeStat other) : this() {
      statAdjustment_ = other.statAdjustment_;
      stat_ = other.stat_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityChangeStat Clone() {
      return new CardAbilityChangeStat(this);
    }

    /// <summary>Field number for the "statAdjustment" field.</summary>
    public const int StatAdjustmentFieldNumber = 1;
    private int statAdjustment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StatAdjustment {
      get { return statAdjustment_; }
      set {
        statAdjustment_ = value;
      }
    }

    /// <summary>Field number for the "stat" field.</summary>
    public const int StatFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.Stat.Types.Enum stat_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Stat.Types.Enum Stat {
      get { return stat_; }
      set {
        stat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardAbilityChangeStat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardAbilityChangeStat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatAdjustment != other.StatAdjustment) return false;
      if (Stat != other.Stat) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatAdjustment != 0) hash ^= StatAdjustment.GetHashCode();
      if (Stat != 0) hash ^= Stat.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StatAdjustment != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StatAdjustment);
      }
      if (Stat != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Stat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatAdjustment != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatAdjustment);
      }
      if (Stat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Stat);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardAbilityChangeStat other) {
      if (other == null) {
        return;
      }
      if (other.StatAdjustment != 0) {
        StatAdjustment = other.StatAdjustment;
      }
      if (other.Stat != 0) {
        Stat = other.Stat;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StatAdjustment = input.ReadInt32();
            break;
          }
          case 16: {
            stat_ = (global::Loom.ZombieBattleground.Protobuf.Stat.Types.Enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardAbilityPriorityAttack : pb::IMessage<CardAbilityPriorityAttack> {
    private static readonly pb::MessageParser<CardAbilityPriorityAttack> _parser = new pb::MessageParser<CardAbilityPriorityAttack>(() => new CardAbilityPriorityAttack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardAbilityPriorityAttack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityPriorityAttack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityPriorityAttack(CardAbilityPriorityAttack other) : this() {
      attackerOldDefense_ = other.attackerOldDefense_;
      targetOldDefense_ = other.targetOldDefense_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityPriorityAttack Clone() {
      return new CardAbilityPriorityAttack(this);
    }

    /// <summary>Field number for the "attackerOldDefense" field.</summary>
    public const int AttackerOldDefenseFieldNumber = 1;
    private int attackerOldDefense_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackerOldDefense {
      get { return attackerOldDefense_; }
      set {
        attackerOldDefense_ = value;
      }
    }

    /// <summary>Field number for the "targetOldDefense" field.</summary>
    public const int TargetOldDefenseFieldNumber = 2;
    private int targetOldDefense_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetOldDefense {
      get { return targetOldDefense_; }
      set {
        targetOldDefense_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardAbilityPriorityAttack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardAbilityPriorityAttack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AttackerOldDefense != other.AttackerOldDefense) return false;
      if (TargetOldDefense != other.TargetOldDefense) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AttackerOldDefense != 0) hash ^= AttackerOldDefense.GetHashCode();
      if (TargetOldDefense != 0) hash ^= TargetOldDefense.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AttackerOldDefense != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AttackerOldDefense);
      }
      if (TargetOldDefense != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetOldDefense);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AttackerOldDefense != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackerOldDefense);
      }
      if (TargetOldDefense != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetOldDefense);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardAbilityPriorityAttack other) {
      if (other == null) {
        return;
      }
      if (other.AttackerOldDefense != 0) {
        AttackerOldDefense = other.AttackerOldDefense;
      }
      if (other.TargetOldDefense != 0) {
        TargetOldDefense = other.TargetOldDefense;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AttackerOldDefense = input.ReadInt32();
            break;
          }
          case 16: {
            TargetOldDefense = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardAbilityReanimate : pb::IMessage<CardAbilityReanimate> {
    private static readonly pb::MessageParser<CardAbilityReanimate> _parser = new pb::MessageParser<CardAbilityReanimate>(() => new CardAbilityReanimate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardAbilityReanimate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityReanimate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityReanimate(CardAbilityReanimate other) : this() {
      defaultDamage_ = other.defaultDamage_;
      defaultDefense_ = other.defaultDefense_;
      newInstance_ = other.newInstance_ != null ? other.newInstance_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityReanimate Clone() {
      return new CardAbilityReanimate(this);
    }

    /// <summary>Field number for the "defaultDamage" field.</summary>
    public const int DefaultDamageFieldNumber = 1;
    private int defaultDamage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultDamage {
      get { return defaultDamage_; }
      set {
        defaultDamage_ = value;
      }
    }

    /// <summary>Field number for the "defaultDefense" field.</summary>
    public const int DefaultDefenseFieldNumber = 2;
    private int defaultDefense_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultDefense {
      get { return defaultDefense_; }
      set {
        defaultDefense_ = value;
      }
    }

    /// <summary>Field number for the "newInstance" field.</summary>
    public const int NewInstanceFieldNumber = 3;
    private global::Loom.ZombieBattleground.Protobuf.CardInstance newInstance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardInstance NewInstance {
      get { return newInstance_; }
      set {
        newInstance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardAbilityReanimate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardAbilityReanimate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DefaultDamage != other.DefaultDamage) return false;
      if (DefaultDefense != other.DefaultDefense) return false;
      if (!object.Equals(NewInstance, other.NewInstance)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DefaultDamage != 0) hash ^= DefaultDamage.GetHashCode();
      if (DefaultDefense != 0) hash ^= DefaultDefense.GetHashCode();
      if (newInstance_ != null) hash ^= NewInstance.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DefaultDamage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DefaultDamage);
      }
      if (DefaultDefense != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DefaultDefense);
      }
      if (newInstance_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(NewInstance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DefaultDamage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefaultDamage);
      }
      if (DefaultDefense != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefaultDefense);
      }
      if (newInstance_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewInstance);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardAbilityReanimate other) {
      if (other == null) {
        return;
      }
      if (other.DefaultDamage != 0) {
        DefaultDamage = other.DefaultDamage;
      }
      if (other.DefaultDefense != 0) {
        DefaultDefense = other.DefaultDefense;
      }
      if (other.newInstance_ != null) {
        if (newInstance_ == null) {
          newInstance_ = new global::Loom.ZombieBattleground.Protobuf.CardInstance();
        }
        NewInstance.MergeFrom(other.NewInstance);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DefaultDamage = input.ReadInt32();
            break;
          }
          case 16: {
            DefaultDefense = input.ReadInt32();
            break;
          }
          case 26: {
            if (newInstance_ == null) {
              newInstance_ = new global::Loom.ZombieBattleground.Protobuf.CardInstance();
            }
            input.ReadMessage(newInstance_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardAbilityAttackOverlord : pb::IMessage<CardAbilityAttackOverlord> {
    private static readonly pb::MessageParser<CardAbilityAttackOverlord> _parser = new pb::MessageParser<CardAbilityAttackOverlord>(() => new CardAbilityAttackOverlord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardAbilityAttackOverlord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityAttackOverlord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityAttackOverlord(CardAbilityAttackOverlord other) : this() {
      damage_ = other.damage_;
      wasApplied_ = other.wasApplied_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityAttackOverlord Clone() {
      return new CardAbilityAttackOverlord(this);
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 1;
    private int damage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "wasApplied" field.</summary>
    public const int WasAppliedFieldNumber = 2;
    private bool wasApplied_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WasApplied {
      get { return wasApplied_; }
      set {
        wasApplied_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardAbilityAttackOverlord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardAbilityAttackOverlord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Damage != other.Damage) return false;
      if (WasApplied != other.WasApplied) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Damage != 0) hash ^= Damage.GetHashCode();
      if (WasApplied != false) hash ^= WasApplied.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Damage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Damage);
      }
      if (WasApplied != false) {
        output.WriteRawTag(16);
        output.WriteBool(WasApplied);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Damage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
      }
      if (WasApplied != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardAbilityAttackOverlord other) {
      if (other == null) {
        return;
      }
      if (other.Damage != 0) {
        Damage = other.Damage;
      }
      if (other.WasApplied != false) {
        WasApplied = other.WasApplied;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Damage = input.ReadInt32();
            break;
          }
          case 16: {
            WasApplied = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardAbilityReplaceUnitsWithTypeOnStrongerOnes : pb::IMessage<CardAbilityReplaceUnitsWithTypeOnStrongerOnes> {
    private static readonly pb::MessageParser<CardAbilityReplaceUnitsWithTypeOnStrongerOnes> _parser = new pb::MessageParser<CardAbilityReplaceUnitsWithTypeOnStrongerOnes>(() => new CardAbilityReplaceUnitsWithTypeOnStrongerOnes());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardAbilityReplaceUnitsWithTypeOnStrongerOnes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityReplaceUnitsWithTypeOnStrongerOnes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityReplaceUnitsWithTypeOnStrongerOnes(CardAbilityReplaceUnitsWithTypeOnStrongerOnes other) : this() {
      faction_ = other.faction_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityReplaceUnitsWithTypeOnStrongerOnes Clone() {
      return new CardAbilityReplaceUnitsWithTypeOnStrongerOnes(this);
    }

    /// <summary>Field number for the "faction" field.</summary>
    public const int FactionFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.Faction.Types.Enum faction_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Faction.Types.Enum Faction {
      get { return faction_; }
      set {
        faction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardAbilityReplaceUnitsWithTypeOnStrongerOnes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardAbilityReplaceUnitsWithTypeOnStrongerOnes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Faction != other.Faction) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Faction != 0) hash ^= Faction.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Faction != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Faction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Faction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Faction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardAbilityReplaceUnitsWithTypeOnStrongerOnes other) {
      if (other == null) {
        return;
      }
      if (other.Faction != 0) {
        Faction = other.Faction;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            faction_ = (global::Loom.ZombieBattleground.Protobuf.Faction.Types.Enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardAbilityDealDamageToThisAndAdjacentUnits : pb::IMessage<CardAbilityDealDamageToThisAndAdjacentUnits> {
    private static readonly pb::MessageParser<CardAbilityDealDamageToThisAndAdjacentUnits> _parser = new pb::MessageParser<CardAbilityDealDamageToThisAndAdjacentUnits>(() => new CardAbilityDealDamageToThisAndAdjacentUnits());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardAbilityDealDamageToThisAndAdjacentUnits> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityDealDamageToThisAndAdjacentUnits() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityDealDamageToThisAndAdjacentUnits(CardAbilityDealDamageToThisAndAdjacentUnits other) : this() {
      adjacentDamage_ = other.adjacentDamage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityDealDamageToThisAndAdjacentUnits Clone() {
      return new CardAbilityDealDamageToThisAndAdjacentUnits(this);
    }

    /// <summary>Field number for the "adjacentDamage" field.</summary>
    public const int AdjacentDamageFieldNumber = 1;
    private int adjacentDamage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AdjacentDamage {
      get { return adjacentDamage_; }
      set {
        adjacentDamage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardAbilityDealDamageToThisAndAdjacentUnits);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardAbilityDealDamageToThisAndAdjacentUnits other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AdjacentDamage != other.AdjacentDamage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AdjacentDamage != 0) hash ^= AdjacentDamage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AdjacentDamage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AdjacentDamage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AdjacentDamage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AdjacentDamage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardAbilityDealDamageToThisAndAdjacentUnits other) {
      if (other == null) {
        return;
      }
      if (other.AdjacentDamage != 0) {
        AdjacentDamage = other.AdjacentDamage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AdjacentDamage = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardAbilityDevourZombieAndCombineStats : pb::IMessage<CardAbilityDevourZombieAndCombineStats> {
    private static readonly pb::MessageParser<CardAbilityDevourZombieAndCombineStats> _parser = new pb::MessageParser<CardAbilityDevourZombieAndCombineStats>(() => new CardAbilityDevourZombieAndCombineStats());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardAbilityDevourZombieAndCombineStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityDevourZombieAndCombineStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityDevourZombieAndCombineStats(CardAbilityDevourZombieAndCombineStats other) : this() {
      faction_ = other.faction_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityDevourZombieAndCombineStats Clone() {
      return new CardAbilityDevourZombieAndCombineStats(this);
    }

    /// <summary>Field number for the "faction" field.</summary>
    public const int FactionFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.Faction.Types.Enum faction_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Faction.Types.Enum Faction {
      get { return faction_; }
      set {
        faction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardAbilityDevourZombieAndCombineStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardAbilityDevourZombieAndCombineStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Faction != other.Faction) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Faction != 0) hash ^= Faction.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Faction != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Faction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Faction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Faction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardAbilityDevourZombieAndCombineStats other) {
      if (other == null) {
        return;
      }
      if (other.Faction != 0) {
        Faction = other.Faction;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            faction_ = (global::Loom.ZombieBattleground.Protobuf.Faction.Types.Enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerActionOutcome : pb::IMessage<PlayerActionOutcome> {
    private static readonly pb::MessageParser<PlayerActionOutcome> _parser = new pb::MessageParser<PlayerActionOutcome>(() => new PlayerActionOutcome());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerActionOutcome> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionOutcome() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionOutcome(PlayerActionOutcome other) : this() {
      switch (other.OutcomeCase) {
        case OutcomeOneofCase.Rage:
          Rage = other.Rage.Clone();
          break;
        case OutcomeOneofCase.PriorityAttack:
          PriorityAttack = other.PriorityAttack.Clone();
          break;
        case OutcomeOneofCase.AdditionalDamageToHeavyInAttack:
          AdditionalDamageToHeavyInAttack = other.AdditionalDamageToHeavyInAttack.Clone();
          break;
        case OutcomeOneofCase.ChangeStat:
          ChangeStat = other.ChangeStat.Clone();
          break;
        case OutcomeOneofCase.Reanimate:
          Reanimate = other.Reanimate.Clone();
          break;
        case OutcomeOneofCase.AttackOverlord:
          AttackOverlord = other.AttackOverlord.Clone();
          break;
        case OutcomeOneofCase.CardAttack:
          CardAttack = other.CardAttack.Clone();
          break;
        case OutcomeOneofCase.ReplaceUnitsWithTypeOnStrongerOnes:
          ReplaceUnitsWithTypeOnStrongerOnes = other.ReplaceUnitsWithTypeOnStrongerOnes.Clone();
          break;
        case OutcomeOneofCase.DealDamageToThisAndAdjacentUnits:
          DealDamageToThisAndAdjacentUnits = other.DealDamageToThisAndAdjacentUnits.Clone();
          break;
        case OutcomeOneofCase.DevourZombieAndCombineStats:
          DevourZombieAndCombineStats = other.DevourZombieAndCombineStats.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionOutcome Clone() {
      return new PlayerActionOutcome(this);
    }

    /// <summary>Field number for the "rage" field.</summary>
    public const int RageFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityRageOutcome Rage {
      get { return outcomeCase_ == OutcomeOneofCase.Rage ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityRageOutcome) outcome_ : null; }
      set {
        outcome_ = value;
        outcomeCase_ = value == null ? OutcomeOneofCase.None : OutcomeOneofCase.Rage;
      }
    }

    /// <summary>Field number for the "priorityAttack" field.</summary>
    public const int PriorityAttackFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityPriorityAttackOutcome PriorityAttack {
      get { return outcomeCase_ == OutcomeOneofCase.PriorityAttack ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityPriorityAttackOutcome) outcome_ : null; }
      set {
        outcome_ = value;
        outcomeCase_ = value == null ? OutcomeOneofCase.None : OutcomeOneofCase.PriorityAttack;
      }
    }

    /// <summary>Field number for the "additionalDamageToHeavyInAttack" field.</summary>
    public const int AdditionalDamageToHeavyInAttackFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityAdditionalDamageToHeavyInAttackOutcome AdditionalDamageToHeavyInAttack {
      get { return outcomeCase_ == OutcomeOneofCase.AdditionalDamageToHeavyInAttack ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityAdditionalDamageToHeavyInAttackOutcome) outcome_ : null; }
      set {
        outcome_ = value;
        outcomeCase_ = value == null ? OutcomeOneofCase.None : OutcomeOneofCase.AdditionalDamageToHeavyInAttack;
      }
    }

    /// <summary>Field number for the "changeStat" field.</summary>
    public const int ChangeStatFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityChangeStatOutcome ChangeStat {
      get { return outcomeCase_ == OutcomeOneofCase.ChangeStat ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityChangeStatOutcome) outcome_ : null; }
      set {
        outcome_ = value;
        outcomeCase_ = value == null ? OutcomeOneofCase.None : OutcomeOneofCase.ChangeStat;
      }
    }

    /// <summary>Field number for the "reanimate" field.</summary>
    public const int ReanimateFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityReanimateOutcome Reanimate {
      get { return outcomeCase_ == OutcomeOneofCase.Reanimate ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityReanimateOutcome) outcome_ : null; }
      set {
        outcome_ = value;
        outcomeCase_ = value == null ? OutcomeOneofCase.None : OutcomeOneofCase.Reanimate;
      }
    }

    /// <summary>Field number for the "attackOverlord" field.</summary>
    public const int AttackOverlordFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityAttackOverlordOutcome AttackOverlord {
      get { return outcomeCase_ == OutcomeOneofCase.AttackOverlord ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityAttackOverlordOutcome) outcome_ : null; }
      set {
        outcome_ = value;
        outcomeCase_ = value == null ? OutcomeOneofCase.None : OutcomeOneofCase.AttackOverlord;
      }
    }

    /// <summary>Field number for the "cardAttack" field.</summary>
    public const int CardAttackFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAttackOutcome CardAttack {
      get { return outcomeCase_ == OutcomeOneofCase.CardAttack ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAttackOutcome) outcome_ : null; }
      set {
        outcome_ = value;
        outcomeCase_ = value == null ? OutcomeOneofCase.None : OutcomeOneofCase.CardAttack;
      }
    }

    /// <summary>Field number for the "replaceUnitsWithTypeOnStrongerOnes" field.</summary>
    public const int ReplaceUnitsWithTypeOnStrongerOnesFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityReplaceUnitsWithTypeOnStrongerOnesOutcome ReplaceUnitsWithTypeOnStrongerOnes {
      get { return outcomeCase_ == OutcomeOneofCase.ReplaceUnitsWithTypeOnStrongerOnes ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityReplaceUnitsWithTypeOnStrongerOnesOutcome) outcome_ : null; }
      set {
        outcome_ = value;
        outcomeCase_ = value == null ? OutcomeOneofCase.None : OutcomeOneofCase.ReplaceUnitsWithTypeOnStrongerOnes;
      }
    }

    /// <summary>Field number for the "dealDamageToThisAndAdjacentUnits" field.</summary>
    public const int DealDamageToThisAndAdjacentUnitsFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityDealDamageToThisAndAdjacentUnitsOutcome DealDamageToThisAndAdjacentUnits {
      get { return outcomeCase_ == OutcomeOneofCase.DealDamageToThisAndAdjacentUnits ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityDealDamageToThisAndAdjacentUnitsOutcome) outcome_ : null; }
      set {
        outcome_ = value;
        outcomeCase_ = value == null ? OutcomeOneofCase.None : OutcomeOneofCase.DealDamageToThisAndAdjacentUnits;
      }
    }

    /// <summary>Field number for the "devourZombieAndCombineStats" field.</summary>
    public const int DevourZombieAndCombineStatsFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityDevourZombieAndCombineStatsOutcome DevourZombieAndCombineStats {
      get { return outcomeCase_ == OutcomeOneofCase.DevourZombieAndCombineStats ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityDevourZombieAndCombineStatsOutcome) outcome_ : null; }
      set {
        outcome_ = value;
        outcomeCase_ = value == null ? OutcomeOneofCase.None : OutcomeOneofCase.DevourZombieAndCombineStats;
      }
    }

    private object outcome_;
    /// <summary>Enum of possible cases for the "Outcome" oneof.</summary>
    public enum OutcomeOneofCase {
      None = 0,
      Rage = 1,
      PriorityAttack = 2,
      AdditionalDamageToHeavyInAttack = 3,
      ChangeStat = 5,
      Reanimate = 4,
      AttackOverlord = 6,
      CardAttack = 7,
      ReplaceUnitsWithTypeOnStrongerOnes = 8,
      DealDamageToThisAndAdjacentUnits = 9,
      DevourZombieAndCombineStats = 10,
    }
    private OutcomeOneofCase outcomeCase_ = OutcomeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutcomeOneofCase OutcomeCase {
      get { return outcomeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOutcome() {
      outcomeCase_ = OutcomeOneofCase.None;
      outcome_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerActionOutcome);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerActionOutcome other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Rage, other.Rage)) return false;
      if (!object.Equals(PriorityAttack, other.PriorityAttack)) return false;
      if (!object.Equals(AdditionalDamageToHeavyInAttack, other.AdditionalDamageToHeavyInAttack)) return false;
      if (!object.Equals(ChangeStat, other.ChangeStat)) return false;
      if (!object.Equals(Reanimate, other.Reanimate)) return false;
      if (!object.Equals(AttackOverlord, other.AttackOverlord)) return false;
      if (!object.Equals(CardAttack, other.CardAttack)) return false;
      if (!object.Equals(ReplaceUnitsWithTypeOnStrongerOnes, other.ReplaceUnitsWithTypeOnStrongerOnes)) return false;
      if (!object.Equals(DealDamageToThisAndAdjacentUnits, other.DealDamageToThisAndAdjacentUnits)) return false;
      if (!object.Equals(DevourZombieAndCombineStats, other.DevourZombieAndCombineStats)) return false;
      if (OutcomeCase != other.OutcomeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (outcomeCase_ == OutcomeOneofCase.Rage) hash ^= Rage.GetHashCode();
      if (outcomeCase_ == OutcomeOneofCase.PriorityAttack) hash ^= PriorityAttack.GetHashCode();
      if (outcomeCase_ == OutcomeOneofCase.AdditionalDamageToHeavyInAttack) hash ^= AdditionalDamageToHeavyInAttack.GetHashCode();
      if (outcomeCase_ == OutcomeOneofCase.ChangeStat) hash ^= ChangeStat.GetHashCode();
      if (outcomeCase_ == OutcomeOneofCase.Reanimate) hash ^= Reanimate.GetHashCode();
      if (outcomeCase_ == OutcomeOneofCase.AttackOverlord) hash ^= AttackOverlord.GetHashCode();
      if (outcomeCase_ == OutcomeOneofCase.CardAttack) hash ^= CardAttack.GetHashCode();
      if (outcomeCase_ == OutcomeOneofCase.ReplaceUnitsWithTypeOnStrongerOnes) hash ^= ReplaceUnitsWithTypeOnStrongerOnes.GetHashCode();
      if (outcomeCase_ == OutcomeOneofCase.DealDamageToThisAndAdjacentUnits) hash ^= DealDamageToThisAndAdjacentUnits.GetHashCode();
      if (outcomeCase_ == OutcomeOneofCase.DevourZombieAndCombineStats) hash ^= DevourZombieAndCombineStats.GetHashCode();
      hash ^= (int) outcomeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (outcomeCase_ == OutcomeOneofCase.Rage) {
        output.WriteRawTag(10);
        output.WriteMessage(Rage);
      }
      if (outcomeCase_ == OutcomeOneofCase.PriorityAttack) {
        output.WriteRawTag(18);
        output.WriteMessage(PriorityAttack);
      }
      if (outcomeCase_ == OutcomeOneofCase.AdditionalDamageToHeavyInAttack) {
        output.WriteRawTag(26);
        output.WriteMessage(AdditionalDamageToHeavyInAttack);
      }
      if (outcomeCase_ == OutcomeOneofCase.Reanimate) {
        output.WriteRawTag(34);
        output.WriteMessage(Reanimate);
      }
      if (outcomeCase_ == OutcomeOneofCase.ChangeStat) {
        output.WriteRawTag(42);
        output.WriteMessage(ChangeStat);
      }
      if (outcomeCase_ == OutcomeOneofCase.AttackOverlord) {
        output.WriteRawTag(50);
        output.WriteMessage(AttackOverlord);
      }
      if (outcomeCase_ == OutcomeOneofCase.CardAttack) {
        output.WriteRawTag(58);
        output.WriteMessage(CardAttack);
      }
      if (outcomeCase_ == OutcomeOneofCase.ReplaceUnitsWithTypeOnStrongerOnes) {
        output.WriteRawTag(66);
        output.WriteMessage(ReplaceUnitsWithTypeOnStrongerOnes);
      }
      if (outcomeCase_ == OutcomeOneofCase.DealDamageToThisAndAdjacentUnits) {
        output.WriteRawTag(74);
        output.WriteMessage(DealDamageToThisAndAdjacentUnits);
      }
      if (outcomeCase_ == OutcomeOneofCase.DevourZombieAndCombineStats) {
        output.WriteRawTag(82);
        output.WriteMessage(DevourZombieAndCombineStats);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (outcomeCase_ == OutcomeOneofCase.Rage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rage);
      }
      if (outcomeCase_ == OutcomeOneofCase.PriorityAttack) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PriorityAttack);
      }
      if (outcomeCase_ == OutcomeOneofCase.AdditionalDamageToHeavyInAttack) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AdditionalDamageToHeavyInAttack);
      }
      if (outcomeCase_ == OutcomeOneofCase.ChangeStat) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChangeStat);
      }
      if (outcomeCase_ == OutcomeOneofCase.Reanimate) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reanimate);
      }
      if (outcomeCase_ == OutcomeOneofCase.AttackOverlord) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AttackOverlord);
      }
      if (outcomeCase_ == OutcomeOneofCase.CardAttack) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardAttack);
      }
      if (outcomeCase_ == OutcomeOneofCase.ReplaceUnitsWithTypeOnStrongerOnes) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReplaceUnitsWithTypeOnStrongerOnes);
      }
      if (outcomeCase_ == OutcomeOneofCase.DealDamageToThisAndAdjacentUnits) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DealDamageToThisAndAdjacentUnits);
      }
      if (outcomeCase_ == OutcomeOneofCase.DevourZombieAndCombineStats) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DevourZombieAndCombineStats);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerActionOutcome other) {
      if (other == null) {
        return;
      }
      switch (other.OutcomeCase) {
        case OutcomeOneofCase.Rage:
          if (Rage == null) {
            Rage = new global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityRageOutcome();
          }
          Rage.MergeFrom(other.Rage);
          break;
        case OutcomeOneofCase.PriorityAttack:
          if (PriorityAttack == null) {
            PriorityAttack = new global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityPriorityAttackOutcome();
          }
          PriorityAttack.MergeFrom(other.PriorityAttack);
          break;
        case OutcomeOneofCase.AdditionalDamageToHeavyInAttack:
          if (AdditionalDamageToHeavyInAttack == null) {
            AdditionalDamageToHeavyInAttack = new global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityAdditionalDamageToHeavyInAttackOutcome();
          }
          AdditionalDamageToHeavyInAttack.MergeFrom(other.AdditionalDamageToHeavyInAttack);
          break;
        case OutcomeOneofCase.ChangeStat:
          if (ChangeStat == null) {
            ChangeStat = new global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityChangeStatOutcome();
          }
          ChangeStat.MergeFrom(other.ChangeStat);
          break;
        case OutcomeOneofCase.Reanimate:
          if (Reanimate == null) {
            Reanimate = new global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityReanimateOutcome();
          }
          Reanimate.MergeFrom(other.Reanimate);
          break;
        case OutcomeOneofCase.AttackOverlord:
          if (AttackOverlord == null) {
            AttackOverlord = new global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityAttackOverlordOutcome();
          }
          AttackOverlord.MergeFrom(other.AttackOverlord);
          break;
        case OutcomeOneofCase.CardAttack:
          if (CardAttack == null) {
            CardAttack = new global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAttackOutcome();
          }
          CardAttack.MergeFrom(other.CardAttack);
          break;
        case OutcomeOneofCase.ReplaceUnitsWithTypeOnStrongerOnes:
          if (ReplaceUnitsWithTypeOnStrongerOnes == null) {
            ReplaceUnitsWithTypeOnStrongerOnes = new global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityReplaceUnitsWithTypeOnStrongerOnesOutcome();
          }
          ReplaceUnitsWithTypeOnStrongerOnes.MergeFrom(other.ReplaceUnitsWithTypeOnStrongerOnes);
          break;
        case OutcomeOneofCase.DealDamageToThisAndAdjacentUnits:
          if (DealDamageToThisAndAdjacentUnits == null) {
            DealDamageToThisAndAdjacentUnits = new global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityDealDamageToThisAndAdjacentUnitsOutcome();
          }
          DealDamageToThisAndAdjacentUnits.MergeFrom(other.DealDamageToThisAndAdjacentUnits);
          break;
        case OutcomeOneofCase.DevourZombieAndCombineStats:
          if (DevourZombieAndCombineStats == null) {
            DevourZombieAndCombineStats = new global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityDevourZombieAndCombineStatsOutcome();
          }
          DevourZombieAndCombineStats.MergeFrom(other.DevourZombieAndCombineStats);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityRageOutcome subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityRageOutcome();
            if (outcomeCase_ == OutcomeOneofCase.Rage) {
              subBuilder.MergeFrom(Rage);
            }
            input.ReadMessage(subBuilder);
            Rage = subBuilder;
            break;
          }
          case 18: {
            global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityPriorityAttackOutcome subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityPriorityAttackOutcome();
            if (outcomeCase_ == OutcomeOneofCase.PriorityAttack) {
              subBuilder.MergeFrom(PriorityAttack);
            }
            input.ReadMessage(subBuilder);
            PriorityAttack = subBuilder;
            break;
          }
          case 26: {
            global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityAdditionalDamageToHeavyInAttackOutcome subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityAdditionalDamageToHeavyInAttackOutcome();
            if (outcomeCase_ == OutcomeOneofCase.AdditionalDamageToHeavyInAttack) {
              subBuilder.MergeFrom(AdditionalDamageToHeavyInAttack);
            }
            input.ReadMessage(subBuilder);
            AdditionalDamageToHeavyInAttack = subBuilder;
            break;
          }
          case 34: {
            global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityReanimateOutcome subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityReanimateOutcome();
            if (outcomeCase_ == OutcomeOneofCase.Reanimate) {
              subBuilder.MergeFrom(Reanimate);
            }
            input.ReadMessage(subBuilder);
            Reanimate = subBuilder;
            break;
          }
          case 42: {
            global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityChangeStatOutcome subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityChangeStatOutcome();
            if (outcomeCase_ == OutcomeOneofCase.ChangeStat) {
              subBuilder.MergeFrom(ChangeStat);
            }
            input.ReadMessage(subBuilder);
            ChangeStat = subBuilder;
            break;
          }
          case 50: {
            global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityAttackOverlordOutcome subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityAttackOverlordOutcome();
            if (outcomeCase_ == OutcomeOneofCase.AttackOverlord) {
              subBuilder.MergeFrom(AttackOverlord);
            }
            input.ReadMessage(subBuilder);
            AttackOverlord = subBuilder;
            break;
          }
          case 58: {
            global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAttackOutcome subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAttackOutcome();
            if (outcomeCase_ == OutcomeOneofCase.CardAttack) {
              subBuilder.MergeFrom(CardAttack);
            }
            input.ReadMessage(subBuilder);
            CardAttack = subBuilder;
            break;
          }
          case 66: {
            global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityReplaceUnitsWithTypeOnStrongerOnesOutcome subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityReplaceUnitsWithTypeOnStrongerOnesOutcome();
            if (outcomeCase_ == OutcomeOneofCase.ReplaceUnitsWithTypeOnStrongerOnes) {
              subBuilder.MergeFrom(ReplaceUnitsWithTypeOnStrongerOnes);
            }
            input.ReadMessage(subBuilder);
            ReplaceUnitsWithTypeOnStrongerOnes = subBuilder;
            break;
          }
          case 74: {
            global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityDealDamageToThisAndAdjacentUnitsOutcome subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityDealDamageToThisAndAdjacentUnitsOutcome();
            if (outcomeCase_ == OutcomeOneofCase.DealDamageToThisAndAdjacentUnits) {
              subBuilder.MergeFrom(DealDamageToThisAndAdjacentUnits);
            }
            input.ReadMessage(subBuilder);
            DealDamageToThisAndAdjacentUnits = subBuilder;
            break;
          }
          case 82: {
            global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityDevourZombieAndCombineStatsOutcome subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityDevourZombieAndCombineStatsOutcome();
            if (outcomeCase_ == OutcomeOneofCase.DevourZombieAndCombineStats) {
              subBuilder.MergeFrom(DevourZombieAndCombineStats);
            }
            input.ReadMessage(subBuilder);
            DevourZombieAndCombineStats = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PlayerActionOutcome message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class CardAbilityRageOutcome : pb::IMessage<CardAbilityRageOutcome> {
        private static readonly pb::MessageParser<CardAbilityRageOutcome> _parser = new pb::MessageParser<CardAbilityRageOutcome>(() => new CardAbilityRageOutcome());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CardAbilityRageOutcome> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAbilityRageOutcome() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAbilityRageOutcome(CardAbilityRageOutcome other) : this() {
          instanceId_ = other.instanceId_ != null ? other.instanceId_.Clone() : null;
          newDamage_ = other.newDamage_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAbilityRageOutcome Clone() {
          return new CardAbilityRageOutcome(this);
        }

        /// <summary>Field number for the "instanceId" field.</summary>
        public const int InstanceIdFieldNumber = 1;
        private global::Loom.ZombieBattleground.Protobuf.InstanceId instanceId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.InstanceId InstanceId {
          get { return instanceId_; }
          set {
            instanceId_ = value;
          }
        }

        /// <summary>Field number for the "newDamage" field.</summary>
        public const int NewDamageFieldNumber = 2;
        private int newDamage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int NewDamage {
          get { return newDamage_; }
          set {
            newDamage_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CardAbilityRageOutcome);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CardAbilityRageOutcome other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(InstanceId, other.InstanceId)) return false;
          if (NewDamage != other.NewDamage) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (instanceId_ != null) hash ^= InstanceId.GetHashCode();
          if (NewDamage != 0) hash ^= NewDamage.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (instanceId_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(InstanceId);
          }
          if (NewDamage != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(NewDamage);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (instanceId_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(InstanceId);
          }
          if (NewDamage != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewDamage);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CardAbilityRageOutcome other) {
          if (other == null) {
            return;
          }
          if (other.instanceId_ != null) {
            if (instanceId_ == null) {
              instanceId_ = new global::Loom.ZombieBattleground.Protobuf.InstanceId();
            }
            InstanceId.MergeFrom(other.InstanceId);
          }
          if (other.NewDamage != 0) {
            NewDamage = other.NewDamage;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (instanceId_ == null) {
                  instanceId_ = new global::Loom.ZombieBattleground.Protobuf.InstanceId();
                }
                input.ReadMessage(instanceId_);
                break;
              }
              case 16: {
                NewDamage = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class CardAbilityPriorityAttackOutcome : pb::IMessage<CardAbilityPriorityAttackOutcome> {
        private static readonly pb::MessageParser<CardAbilityPriorityAttackOutcome> _parser = new pb::MessageParser<CardAbilityPriorityAttackOutcome>(() => new CardAbilityPriorityAttackOutcome());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CardAbilityPriorityAttackOutcome> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAbilityPriorityAttackOutcome() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAbilityPriorityAttackOutcome(CardAbilityPriorityAttackOutcome other) : this() {
          instanceId_ = other.instanceId_ != null ? other.instanceId_.Clone() : null;
          newDefense_ = other.newDefense_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAbilityPriorityAttackOutcome Clone() {
          return new CardAbilityPriorityAttackOutcome(this);
        }

        /// <summary>Field number for the "instanceId" field.</summary>
        public const int InstanceIdFieldNumber = 1;
        private global::Loom.ZombieBattleground.Protobuf.InstanceId instanceId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.InstanceId InstanceId {
          get { return instanceId_; }
          set {
            instanceId_ = value;
          }
        }

        /// <summary>Field number for the "newDefense" field.</summary>
        public const int NewDefenseFieldNumber = 2;
        private int newDefense_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int NewDefense {
          get { return newDefense_; }
          set {
            newDefense_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CardAbilityPriorityAttackOutcome);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CardAbilityPriorityAttackOutcome other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(InstanceId, other.InstanceId)) return false;
          if (NewDefense != other.NewDefense) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (instanceId_ != null) hash ^= InstanceId.GetHashCode();
          if (NewDefense != 0) hash ^= NewDefense.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (instanceId_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(InstanceId);
          }
          if (NewDefense != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(NewDefense);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (instanceId_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(InstanceId);
          }
          if (NewDefense != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewDefense);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CardAbilityPriorityAttackOutcome other) {
          if (other == null) {
            return;
          }
          if (other.instanceId_ != null) {
            if (instanceId_ == null) {
              instanceId_ = new global::Loom.ZombieBattleground.Protobuf.InstanceId();
            }
            InstanceId.MergeFrom(other.InstanceId);
          }
          if (other.NewDefense != 0) {
            NewDefense = other.NewDefense;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (instanceId_ == null) {
                  instanceId_ = new global::Loom.ZombieBattleground.Protobuf.InstanceId();
                }
                input.ReadMessage(instanceId_);
                break;
              }
              case 16: {
                NewDefense = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class CardAbilityReanimateOutcome : pb::IMessage<CardAbilityReanimateOutcome> {
        private static readonly pb::MessageParser<CardAbilityReanimateOutcome> _parser = new pb::MessageParser<CardAbilityReanimateOutcome>(() => new CardAbilityReanimateOutcome());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CardAbilityReanimateOutcome> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAbilityReanimateOutcome() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAbilityReanimateOutcome(CardAbilityReanimateOutcome other) : this() {
          newCardInstance_ = other.newCardInstance_ != null ? other.newCardInstance_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAbilityReanimateOutcome Clone() {
          return new CardAbilityReanimateOutcome(this);
        }

        /// <summary>Field number for the "newCardInstance" field.</summary>
        public const int NewCardInstanceFieldNumber = 1;
        private global::Loom.ZombieBattleground.Protobuf.CardInstance newCardInstance_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.CardInstance NewCardInstance {
          get { return newCardInstance_; }
          set {
            newCardInstance_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CardAbilityReanimateOutcome);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CardAbilityReanimateOutcome other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(NewCardInstance, other.NewCardInstance)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (newCardInstance_ != null) hash ^= NewCardInstance.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (newCardInstance_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(NewCardInstance);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (newCardInstance_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewCardInstance);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CardAbilityReanimateOutcome other) {
          if (other == null) {
            return;
          }
          if (other.newCardInstance_ != null) {
            if (newCardInstance_ == null) {
              newCardInstance_ = new global::Loom.ZombieBattleground.Protobuf.CardInstance();
            }
            NewCardInstance.MergeFrom(other.NewCardInstance);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (newCardInstance_ == null) {
                  newCardInstance_ = new global::Loom.ZombieBattleground.Protobuf.CardInstance();
                }
                input.ReadMessage(newCardInstance_);
                break;
              }
            }
          }
        }

      }

      public sealed partial class CardAbilityAdditionalDamageToHeavyInAttackOutcome : pb::IMessage<CardAbilityAdditionalDamageToHeavyInAttackOutcome> {
        private static readonly pb::MessageParser<CardAbilityAdditionalDamageToHeavyInAttackOutcome> _parser = new pb::MessageParser<CardAbilityAdditionalDamageToHeavyInAttackOutcome>(() => new CardAbilityAdditionalDamageToHeavyInAttackOutcome());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CardAbilityAdditionalDamageToHeavyInAttackOutcome> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAbilityAdditionalDamageToHeavyInAttackOutcome() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAbilityAdditionalDamageToHeavyInAttackOutcome(CardAbilityAdditionalDamageToHeavyInAttackOutcome other) : this() {
          instanceId_ = other.instanceId_ != null ? other.instanceId_.Clone() : null;
          addedDamage_ = other.addedDamage_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAbilityAdditionalDamageToHeavyInAttackOutcome Clone() {
          return new CardAbilityAdditionalDamageToHeavyInAttackOutcome(this);
        }

        /// <summary>Field number for the "instanceId" field.</summary>
        public const int InstanceIdFieldNumber = 1;
        private global::Loom.ZombieBattleground.Protobuf.InstanceId instanceId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.InstanceId InstanceId {
          get { return instanceId_; }
          set {
            instanceId_ = value;
          }
        }

        /// <summary>Field number for the "addedDamage" field.</summary>
        public const int AddedDamageFieldNumber = 2;
        private int addedDamage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int AddedDamage {
          get { return addedDamage_; }
          set {
            addedDamage_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CardAbilityAdditionalDamageToHeavyInAttackOutcome);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CardAbilityAdditionalDamageToHeavyInAttackOutcome other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(InstanceId, other.InstanceId)) return false;
          if (AddedDamage != other.AddedDamage) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (instanceId_ != null) hash ^= InstanceId.GetHashCode();
          if (AddedDamage != 0) hash ^= AddedDamage.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (instanceId_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(InstanceId);
          }
          if (AddedDamage != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(AddedDamage);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (instanceId_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(InstanceId);
          }
          if (AddedDamage != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddedDamage);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CardAbilityAdditionalDamageToHeavyInAttackOutcome other) {
          if (other == null) {
            return;
          }
          if (other.instanceId_ != null) {
            if (instanceId_ == null) {
              instanceId_ = new global::Loom.ZombieBattleground.Protobuf.InstanceId();
            }
            InstanceId.MergeFrom(other.InstanceId);
          }
          if (other.AddedDamage != 0) {
            AddedDamage = other.AddedDamage;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (instanceId_ == null) {
                  instanceId_ = new global::Loom.ZombieBattleground.Protobuf.InstanceId();
                }
                input.ReadMessage(instanceId_);
                break;
              }
              case 16: {
                AddedDamage = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class CardAbilityChangeStatOutcome : pb::IMessage<CardAbilityChangeStatOutcome> {
        private static readonly pb::MessageParser<CardAbilityChangeStatOutcome> _parser = new pb::MessageParser<CardAbilityChangeStatOutcome>(() => new CardAbilityChangeStatOutcome());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CardAbilityChangeStatOutcome> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAbilityChangeStatOutcome() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAbilityChangeStatOutcome(CardAbilityChangeStatOutcome other) : this() {
          instanceId_ = other.instanceId_ != null ? other.instanceId_.Clone() : null;
          newDamage_ = other.newDamage_;
          newDefense_ = other.newDefense_;
          stat_ = other.stat_;
          targetInstanceId_ = other.targetInstanceId_ != null ? other.targetInstanceId_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAbilityChangeStatOutcome Clone() {
          return new CardAbilityChangeStatOutcome(this);
        }

        /// <summary>Field number for the "instanceId" field.</summary>
        public const int InstanceIdFieldNumber = 1;
        private global::Loom.ZombieBattleground.Protobuf.InstanceId instanceId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.InstanceId InstanceId {
          get { return instanceId_; }
          set {
            instanceId_ = value;
          }
        }

        /// <summary>Field number for the "newDamage" field.</summary>
        public const int NewDamageFieldNumber = 2;
        private int newDamage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int NewDamage {
          get { return newDamage_; }
          set {
            newDamage_ = value;
          }
        }

        /// <summary>Field number for the "newDefense" field.</summary>
        public const int NewDefenseFieldNumber = 3;
        private int newDefense_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int NewDefense {
          get { return newDefense_; }
          set {
            newDefense_ = value;
          }
        }

        /// <summary>Field number for the "stat" field.</summary>
        public const int StatFieldNumber = 4;
        private global::Loom.ZombieBattleground.Protobuf.Stat.Types.Enum stat_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.Stat.Types.Enum Stat {
          get { return stat_; }
          set {
            stat_ = value;
          }
        }

        /// <summary>Field number for the "targetInstanceId" field.</summary>
        public const int TargetInstanceIdFieldNumber = 5;
        private global::Loom.ZombieBattleground.Protobuf.InstanceId targetInstanceId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.InstanceId TargetInstanceId {
          get { return targetInstanceId_; }
          set {
            targetInstanceId_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CardAbilityChangeStatOutcome);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CardAbilityChangeStatOutcome other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(InstanceId, other.InstanceId)) return false;
          if (NewDamage != other.NewDamage) return false;
          if (NewDefense != other.NewDefense) return false;
          if (Stat != other.Stat) return false;
          if (!object.Equals(TargetInstanceId, other.TargetInstanceId)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (instanceId_ != null) hash ^= InstanceId.GetHashCode();
          if (NewDamage != 0) hash ^= NewDamage.GetHashCode();
          if (NewDefense != 0) hash ^= NewDefense.GetHashCode();
          if (Stat != 0) hash ^= Stat.GetHashCode();
          if (targetInstanceId_ != null) hash ^= TargetInstanceId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (instanceId_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(InstanceId);
          }
          if (NewDamage != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(NewDamage);
          }
          if (NewDefense != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(NewDefense);
          }
          if (Stat != 0) {
            output.WriteRawTag(32);
            output.WriteEnum((int) Stat);
          }
          if (targetInstanceId_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(TargetInstanceId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (instanceId_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(InstanceId);
          }
          if (NewDamage != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewDamage);
          }
          if (NewDefense != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewDefense);
          }
          if (Stat != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Stat);
          }
          if (targetInstanceId_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetInstanceId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CardAbilityChangeStatOutcome other) {
          if (other == null) {
            return;
          }
          if (other.instanceId_ != null) {
            if (instanceId_ == null) {
              instanceId_ = new global::Loom.ZombieBattleground.Protobuf.InstanceId();
            }
            InstanceId.MergeFrom(other.InstanceId);
          }
          if (other.NewDamage != 0) {
            NewDamage = other.NewDamage;
          }
          if (other.NewDefense != 0) {
            NewDefense = other.NewDefense;
          }
          if (other.Stat != 0) {
            Stat = other.Stat;
          }
          if (other.targetInstanceId_ != null) {
            if (targetInstanceId_ == null) {
              targetInstanceId_ = new global::Loom.ZombieBattleground.Protobuf.InstanceId();
            }
            TargetInstanceId.MergeFrom(other.TargetInstanceId);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (instanceId_ == null) {
                  instanceId_ = new global::Loom.ZombieBattleground.Protobuf.InstanceId();
                }
                input.ReadMessage(instanceId_);
                break;
              }
              case 16: {
                NewDamage = input.ReadInt32();
                break;
              }
              case 24: {
                NewDefense = input.ReadInt32();
                break;
              }
              case 32: {
                stat_ = (global::Loom.ZombieBattleground.Protobuf.Stat.Types.Enum) input.ReadEnum();
                break;
              }
              case 42: {
                if (targetInstanceId_ == null) {
                  targetInstanceId_ = new global::Loom.ZombieBattleground.Protobuf.InstanceId();
                }
                input.ReadMessage(targetInstanceId_);
                break;
              }
            }
          }
        }

      }

      public sealed partial class CardAbilityAttackOverlordOutcome : pb::IMessage<CardAbilityAttackOverlordOutcome> {
        private static readonly pb::MessageParser<CardAbilityAttackOverlordOutcome> _parser = new pb::MessageParser<CardAbilityAttackOverlordOutcome>(() => new CardAbilityAttackOverlordOutcome());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CardAbilityAttackOverlordOutcome> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAbilityAttackOverlordOutcome() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAbilityAttackOverlordOutcome(CardAbilityAttackOverlordOutcome other) : this() {
          instanceId_ = other.instanceId_ != null ? other.instanceId_.Clone() : null;
          newDefense_ = other.newDefense_;
          damage_ = other.damage_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAbilityAttackOverlordOutcome Clone() {
          return new CardAbilityAttackOverlordOutcome(this);
        }

        /// <summary>Field number for the "instanceId" field.</summary>
        public const int InstanceIdFieldNumber = 1;
        private global::Loom.ZombieBattleground.Protobuf.InstanceId instanceId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.InstanceId InstanceId {
          get { return instanceId_; }
          set {
            instanceId_ = value;
          }
        }

        /// <summary>Field number for the "newDefense" field.</summary>
        public const int NewDefenseFieldNumber = 2;
        private int newDefense_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int NewDefense {
          get { return newDefense_; }
          set {
            newDefense_ = value;
          }
        }

        /// <summary>Field number for the "damage" field.</summary>
        public const int DamageFieldNumber = 3;
        private int damage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Damage {
          get { return damage_; }
          set {
            damage_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CardAbilityAttackOverlordOutcome);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CardAbilityAttackOverlordOutcome other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(InstanceId, other.InstanceId)) return false;
          if (NewDefense != other.NewDefense) return false;
          if (Damage != other.Damage) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (instanceId_ != null) hash ^= InstanceId.GetHashCode();
          if (NewDefense != 0) hash ^= NewDefense.GetHashCode();
          if (Damage != 0) hash ^= Damage.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (instanceId_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(InstanceId);
          }
          if (NewDefense != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(NewDefense);
          }
          if (Damage != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Damage);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (instanceId_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(InstanceId);
          }
          if (NewDefense != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewDefense);
          }
          if (Damage != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CardAbilityAttackOverlordOutcome other) {
          if (other == null) {
            return;
          }
          if (other.instanceId_ != null) {
            if (instanceId_ == null) {
              instanceId_ = new global::Loom.ZombieBattleground.Protobuf.InstanceId();
            }
            InstanceId.MergeFrom(other.InstanceId);
          }
          if (other.NewDefense != 0) {
            NewDefense = other.NewDefense;
          }
          if (other.Damage != 0) {
            Damage = other.Damage;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (instanceId_ == null) {
                  instanceId_ = new global::Loom.ZombieBattleground.Protobuf.InstanceId();
                }
                input.ReadMessage(instanceId_);
                break;
              }
              case 16: {
                NewDefense = input.ReadInt32();
                break;
              }
              case 24: {
                Damage = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class CardAttackOutcome : pb::IMessage<CardAttackOutcome> {
        private static readonly pb::MessageParser<CardAttackOutcome> _parser = new pb::MessageParser<CardAttackOutcome>(() => new CardAttackOutcome());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CardAttackOutcome> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAttackOutcome() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAttackOutcome(CardAttackOutcome other) : this() {
          attackerInstanceId_ = other.attackerInstanceId_ != null ? other.attackerInstanceId_.Clone() : null;
          targetInstanceId_ = other.targetInstanceId_ != null ? other.targetInstanceId_.Clone() : null;
          attackerNewDefense_ = other.attackerNewDefense_;
          targetNewDefense_ = other.targetNewDefense_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAttackOutcome Clone() {
          return new CardAttackOutcome(this);
        }

        /// <summary>Field number for the "attackerInstanceId" field.</summary>
        public const int AttackerInstanceIdFieldNumber = 1;
        private global::Loom.ZombieBattleground.Protobuf.InstanceId attackerInstanceId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.InstanceId AttackerInstanceId {
          get { return attackerInstanceId_; }
          set {
            attackerInstanceId_ = value;
          }
        }

        /// <summary>Field number for the "targetInstanceId" field.</summary>
        public const int TargetInstanceIdFieldNumber = 2;
        private global::Loom.ZombieBattleground.Protobuf.InstanceId targetInstanceId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.InstanceId TargetInstanceId {
          get { return targetInstanceId_; }
          set {
            targetInstanceId_ = value;
          }
        }

        /// <summary>Field number for the "attackerNewDefense" field.</summary>
        public const int AttackerNewDefenseFieldNumber = 3;
        private int attackerNewDefense_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int AttackerNewDefense {
          get { return attackerNewDefense_; }
          set {
            attackerNewDefense_ = value;
          }
        }

        /// <summary>Field number for the "targetNewDefense" field.</summary>
        public const int TargetNewDefenseFieldNumber = 4;
        private int targetNewDefense_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TargetNewDefense {
          get { return targetNewDefense_; }
          set {
            targetNewDefense_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CardAttackOutcome);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CardAttackOutcome other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(AttackerInstanceId, other.AttackerInstanceId)) return false;
          if (!object.Equals(TargetInstanceId, other.TargetInstanceId)) return false;
          if (AttackerNewDefense != other.AttackerNewDefense) return false;
          if (TargetNewDefense != other.TargetNewDefense) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (attackerInstanceId_ != null) hash ^= AttackerInstanceId.GetHashCode();
          if (targetInstanceId_ != null) hash ^= TargetInstanceId.GetHashCode();
          if (AttackerNewDefense != 0) hash ^= AttackerNewDefense.GetHashCode();
          if (TargetNewDefense != 0) hash ^= TargetNewDefense.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (attackerInstanceId_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(AttackerInstanceId);
          }
          if (targetInstanceId_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(TargetInstanceId);
          }
          if (AttackerNewDefense != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(AttackerNewDefense);
          }
          if (TargetNewDefense != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(TargetNewDefense);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (attackerInstanceId_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(AttackerInstanceId);
          }
          if (targetInstanceId_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetInstanceId);
          }
          if (AttackerNewDefense != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackerNewDefense);
          }
          if (TargetNewDefense != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetNewDefense);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CardAttackOutcome other) {
          if (other == null) {
            return;
          }
          if (other.attackerInstanceId_ != null) {
            if (attackerInstanceId_ == null) {
              attackerInstanceId_ = new global::Loom.ZombieBattleground.Protobuf.InstanceId();
            }
            AttackerInstanceId.MergeFrom(other.AttackerInstanceId);
          }
          if (other.targetInstanceId_ != null) {
            if (targetInstanceId_ == null) {
              targetInstanceId_ = new global::Loom.ZombieBattleground.Protobuf.InstanceId();
            }
            TargetInstanceId.MergeFrom(other.TargetInstanceId);
          }
          if (other.AttackerNewDefense != 0) {
            AttackerNewDefense = other.AttackerNewDefense;
          }
          if (other.TargetNewDefense != 0) {
            TargetNewDefense = other.TargetNewDefense;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (attackerInstanceId_ == null) {
                  attackerInstanceId_ = new global::Loom.ZombieBattleground.Protobuf.InstanceId();
                }
                input.ReadMessage(attackerInstanceId_);
                break;
              }
              case 18: {
                if (targetInstanceId_ == null) {
                  targetInstanceId_ = new global::Loom.ZombieBattleground.Protobuf.InstanceId();
                }
                input.ReadMessage(targetInstanceId_);
                break;
              }
              case 24: {
                AttackerNewDefense = input.ReadInt32();
                break;
              }
              case 32: {
                TargetNewDefense = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class CardAbilityReplaceUnitsWithTypeOnStrongerOnesOutcome : pb::IMessage<CardAbilityReplaceUnitsWithTypeOnStrongerOnesOutcome> {
        private static readonly pb::MessageParser<CardAbilityReplaceUnitsWithTypeOnStrongerOnesOutcome> _parser = new pb::MessageParser<CardAbilityReplaceUnitsWithTypeOnStrongerOnesOutcome>(() => new CardAbilityReplaceUnitsWithTypeOnStrongerOnesOutcome());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CardAbilityReplaceUnitsWithTypeOnStrongerOnesOutcome> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAbilityReplaceUnitsWithTypeOnStrongerOnesOutcome() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAbilityReplaceUnitsWithTypeOnStrongerOnesOutcome(CardAbilityReplaceUnitsWithTypeOnStrongerOnesOutcome other) : this() {
          newCardInstances_ = other.newCardInstances_.Clone();
          oldInstanceIds_ = other.oldInstanceIds_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAbilityReplaceUnitsWithTypeOnStrongerOnesOutcome Clone() {
          return new CardAbilityReplaceUnitsWithTypeOnStrongerOnesOutcome(this);
        }

        /// <summary>Field number for the "newCardInstances" field.</summary>
        public const int NewCardInstancesFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityReplaceUnitsWithTypeOnStrongerOnesOutcome.Types.NewCardInstance> _repeated_newCardInstances_codec
            = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityReplaceUnitsWithTypeOnStrongerOnesOutcome.Types.NewCardInstance.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityReplaceUnitsWithTypeOnStrongerOnesOutcome.Types.NewCardInstance> newCardInstances_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityReplaceUnitsWithTypeOnStrongerOnesOutcome.Types.NewCardInstance>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityReplaceUnitsWithTypeOnStrongerOnesOutcome.Types.NewCardInstance> NewCardInstances {
          get { return newCardInstances_; }
        }

        /// <summary>Field number for the "oldInstanceIds" field.</summary>
        public const int OldInstanceIdsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.InstanceId> _repeated_oldInstanceIds_codec
            = pb::FieldCodec.ForMessage(18, global::Loom.ZombieBattleground.Protobuf.InstanceId.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.InstanceId> oldInstanceIds_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.InstanceId>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.InstanceId> OldInstanceIds {
          get { return oldInstanceIds_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CardAbilityReplaceUnitsWithTypeOnStrongerOnesOutcome);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CardAbilityReplaceUnitsWithTypeOnStrongerOnesOutcome other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!newCardInstances_.Equals(other.newCardInstances_)) return false;
          if(!oldInstanceIds_.Equals(other.oldInstanceIds_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= newCardInstances_.GetHashCode();
          hash ^= oldInstanceIds_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          newCardInstances_.WriteTo(output, _repeated_newCardInstances_codec);
          oldInstanceIds_.WriteTo(output, _repeated_oldInstanceIds_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += newCardInstances_.CalculateSize(_repeated_newCardInstances_codec);
          size += oldInstanceIds_.CalculateSize(_repeated_oldInstanceIds_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CardAbilityReplaceUnitsWithTypeOnStrongerOnesOutcome other) {
          if (other == null) {
            return;
          }
          newCardInstances_.Add(other.newCardInstances_);
          oldInstanceIds_.Add(other.oldInstanceIds_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                newCardInstances_.AddEntriesFrom(input, _repeated_newCardInstances_codec);
                break;
              }
              case 18: {
                oldInstanceIds_.AddEntriesFrom(input, _repeated_oldInstanceIds_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the CardAbilityReplaceUnitsWithTypeOnStrongerOnesOutcome message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// info about new card and it position
          /// </summary>
          public sealed partial class NewCardInstance : pb::IMessage<NewCardInstance> {
            private static readonly pb::MessageParser<NewCardInstance> _parser = new pb::MessageParser<NewCardInstance>(() => new NewCardInstance());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<NewCardInstance> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityReplaceUnitsWithTypeOnStrongerOnesOutcome.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public NewCardInstance() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public NewCardInstance(NewCardInstance other) : this() {
              cardInstance_ = other.cardInstance_ != null ? other.cardInstance_.Clone() : null;
              position_ = other.position_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public NewCardInstance Clone() {
              return new NewCardInstance(this);
            }

            /// <summary>Field number for the "cardInstance" field.</summary>
            public const int CardInstanceFieldNumber = 1;
            private global::Loom.ZombieBattleground.Protobuf.CardInstance cardInstance_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Loom.ZombieBattleground.Protobuf.CardInstance CardInstance {
              get { return cardInstance_; }
              set {
                cardInstance_ = value;
              }
            }

            /// <summary>Field number for the "position" field.</summary>
            public const int PositionFieldNumber = 2;
            private int position_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Position {
              get { return position_; }
              set {
                position_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as NewCardInstance);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(NewCardInstance other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(CardInstance, other.CardInstance)) return false;
              if (Position != other.Position) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (cardInstance_ != null) hash ^= CardInstance.GetHashCode();
              if (Position != 0) hash ^= Position.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (cardInstance_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(CardInstance);
              }
              if (Position != 0) {
                output.WriteRawTag(16);
                output.WriteInt32(Position);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (cardInstance_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardInstance);
              }
              if (Position != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(NewCardInstance other) {
              if (other == null) {
                return;
              }
              if (other.cardInstance_ != null) {
                if (cardInstance_ == null) {
                  cardInstance_ = new global::Loom.ZombieBattleground.Protobuf.CardInstance();
                }
                CardInstance.MergeFrom(other.CardInstance);
              }
              if (other.Position != 0) {
                Position = other.Position;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    if (cardInstance_ == null) {
                      cardInstance_ = new global::Loom.ZombieBattleground.Protobuf.CardInstance();
                    }
                    input.ReadMessage(cardInstance_);
                    break;
                  }
                  case 16: {
                    Position = input.ReadInt32();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      /// <summary>
      /// TBD
      /// </summary>
      public sealed partial class CardAbilityDealDamageToThisAndAdjacentUnitsOutcome : pb::IMessage<CardAbilityDealDamageToThisAndAdjacentUnitsOutcome> {
        private static readonly pb::MessageParser<CardAbilityDealDamageToThisAndAdjacentUnitsOutcome> _parser = new pb::MessageParser<CardAbilityDealDamageToThisAndAdjacentUnitsOutcome>(() => new CardAbilityDealDamageToThisAndAdjacentUnitsOutcome());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CardAbilityDealDamageToThisAndAdjacentUnitsOutcome> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAbilityDealDamageToThisAndAdjacentUnitsOutcome() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAbilityDealDamageToThisAndAdjacentUnitsOutcome(CardAbilityDealDamageToThisAndAdjacentUnitsOutcome other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAbilityDealDamageToThisAndAdjacentUnitsOutcome Clone() {
          return new CardAbilityDealDamageToThisAndAdjacentUnitsOutcome(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CardAbilityDealDamageToThisAndAdjacentUnitsOutcome);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CardAbilityDealDamageToThisAndAdjacentUnitsOutcome other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CardAbilityDealDamageToThisAndAdjacentUnitsOutcome other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

      public sealed partial class CardAbilityDevourZombieAndCombineStatsOutcome : pb::IMessage<CardAbilityDevourZombieAndCombineStatsOutcome> {
        private static readonly pb::MessageParser<CardAbilityDevourZombieAndCombineStatsOutcome> _parser = new pb::MessageParser<CardAbilityDevourZombieAndCombineStatsOutcome>(() => new CardAbilityDevourZombieAndCombineStatsOutcome());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CardAbilityDevourZombieAndCombineStatsOutcome> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Descriptor.NestedTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAbilityDevourZombieAndCombineStatsOutcome() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAbilityDevourZombieAndCombineStatsOutcome(CardAbilityDevourZombieAndCombineStatsOutcome other) : this() {
          targetInstanceIds_ = other.targetInstanceIds_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAbilityDevourZombieAndCombineStatsOutcome Clone() {
          return new CardAbilityDevourZombieAndCombineStatsOutcome(this);
        }

        /// <summary>Field number for the "targetInstanceIds" field.</summary>
        public const int TargetInstanceIdsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.InstanceId> _repeated_targetInstanceIds_codec
            = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.InstanceId.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.InstanceId> targetInstanceIds_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.InstanceId>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.InstanceId> TargetInstanceIds {
          get { return targetInstanceIds_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CardAbilityDevourZombieAndCombineStatsOutcome);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CardAbilityDevourZombieAndCombineStatsOutcome other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!targetInstanceIds_.Equals(other.targetInstanceIds_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= targetInstanceIds_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          targetInstanceIds_.WriteTo(output, _repeated_targetInstanceIds_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += targetInstanceIds_.CalculateSize(_repeated_targetInstanceIds_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CardAbilityDevourZombieAndCombineStatsOutcome other) {
          if (other == null) {
            return;
          }
          targetInstanceIds_.Add(other.targetInstanceIds_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                targetInstanceIds_.AddEntriesFrom(input, _repeated_targetInstanceIds_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class CardAbilityInstance : pb::IMessage<CardAbilityInstance> {
    private static readonly pb::MessageParser<CardAbilityInstance> _parser = new pb::MessageParser<CardAbilityInstance>(() => new CardAbilityInstance());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardAbilityInstance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityInstance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityInstance(CardAbilityInstance other) : this() {
      isActive_ = other.isActive_;
      trigger_ = other.trigger_;
      switch (other.AbilityTypeCase) {
        case AbilityTypeOneofCase.Rage:
          Rage = other.Rage.Clone();
          break;
        case AbilityTypeOneofCase.PriorityAttack:
          PriorityAttack = other.PriorityAttack.Clone();
          break;
        case AbilityTypeOneofCase.Reanimate:
          Reanimate = other.Reanimate.Clone();
          break;
        case AbilityTypeOneofCase.AdditionalDamageToHeavyInAttack:
          AdditionalDamageToHeavyInAttack = other.AdditionalDamageToHeavyInAttack.Clone();
          break;
        case AbilityTypeOneofCase.ChangeStat:
          ChangeStat = other.ChangeStat.Clone();
          break;
        case AbilityTypeOneofCase.AttackOverlord:
          AttackOverlord = other.AttackOverlord.Clone();
          break;
        case AbilityTypeOneofCase.ReplaceUnitsWithTypeOnStrongerOnes:
          ReplaceUnitsWithTypeOnStrongerOnes = other.ReplaceUnitsWithTypeOnStrongerOnes.Clone();
          break;
        case AbilityTypeOneofCase.DealDamageToThisAndAdjacentUnits:
          DealDamageToThisAndAdjacentUnits = other.DealDamageToThisAndAdjacentUnits.Clone();
          break;
        case AbilityTypeOneofCase.DevourZombieAndCombineStats:
          DevourZombieAndCombineStats = other.DevourZombieAndCombineStats.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityInstance Clone() {
      return new CardAbilityInstance(this);
    }

    /// <summary>Field number for the "rage" field.</summary>
    public const int RageFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardAbilityRage Rage {
      get { return abilityTypeCase_ == AbilityTypeOneofCase.Rage ? (global::Loom.ZombieBattleground.Protobuf.CardAbilityRage) abilityType_ : null; }
      set {
        abilityType_ = value;
        abilityTypeCase_ = value == null ? AbilityTypeOneofCase.None : AbilityTypeOneofCase.Rage;
      }
    }

    /// <summary>Field number for the "priorityAttack" field.</summary>
    public const int PriorityAttackFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardAbilityPriorityAttack PriorityAttack {
      get { return abilityTypeCase_ == AbilityTypeOneofCase.PriorityAttack ? (global::Loom.ZombieBattleground.Protobuf.CardAbilityPriorityAttack) abilityType_ : null; }
      set {
        abilityType_ = value;
        abilityTypeCase_ = value == null ? AbilityTypeOneofCase.None : AbilityTypeOneofCase.PriorityAttack;
      }
    }

    /// <summary>Field number for the "reanimate" field.</summary>
    public const int ReanimateFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardAbilityReanimate Reanimate {
      get { return abilityTypeCase_ == AbilityTypeOneofCase.Reanimate ? (global::Loom.ZombieBattleground.Protobuf.CardAbilityReanimate) abilityType_ : null; }
      set {
        abilityType_ = value;
        abilityTypeCase_ = value == null ? AbilityTypeOneofCase.None : AbilityTypeOneofCase.Reanimate;
      }
    }

    /// <summary>Field number for the "additionalDamageToHeavyInAttack" field.</summary>
    public const int AdditionalDamageToHeavyInAttackFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardAbilityAdditionalDamageToHeavyInAttack AdditionalDamageToHeavyInAttack {
      get { return abilityTypeCase_ == AbilityTypeOneofCase.AdditionalDamageToHeavyInAttack ? (global::Loom.ZombieBattleground.Protobuf.CardAbilityAdditionalDamageToHeavyInAttack) abilityType_ : null; }
      set {
        abilityType_ = value;
        abilityTypeCase_ = value == null ? AbilityTypeOneofCase.None : AbilityTypeOneofCase.AdditionalDamageToHeavyInAttack;
      }
    }

    /// <summary>Field number for the "changeStat" field.</summary>
    public const int ChangeStatFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardAbilityChangeStat ChangeStat {
      get { return abilityTypeCase_ == AbilityTypeOneofCase.ChangeStat ? (global::Loom.ZombieBattleground.Protobuf.CardAbilityChangeStat) abilityType_ : null; }
      set {
        abilityType_ = value;
        abilityTypeCase_ = value == null ? AbilityTypeOneofCase.None : AbilityTypeOneofCase.ChangeStat;
      }
    }

    /// <summary>Field number for the "attackOverlord" field.</summary>
    public const int AttackOverlordFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardAbilityAttackOverlord AttackOverlord {
      get { return abilityTypeCase_ == AbilityTypeOneofCase.AttackOverlord ? (global::Loom.ZombieBattleground.Protobuf.CardAbilityAttackOverlord) abilityType_ : null; }
      set {
        abilityType_ = value;
        abilityTypeCase_ = value == null ? AbilityTypeOneofCase.None : AbilityTypeOneofCase.AttackOverlord;
      }
    }

    /// <summary>Field number for the "replaceUnitsWithTypeOnStrongerOnes" field.</summary>
    public const int ReplaceUnitsWithTypeOnStrongerOnesFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardAbilityReplaceUnitsWithTypeOnStrongerOnes ReplaceUnitsWithTypeOnStrongerOnes {
      get { return abilityTypeCase_ == AbilityTypeOneofCase.ReplaceUnitsWithTypeOnStrongerOnes ? (global::Loom.ZombieBattleground.Protobuf.CardAbilityReplaceUnitsWithTypeOnStrongerOnes) abilityType_ : null; }
      set {
        abilityType_ = value;
        abilityTypeCase_ = value == null ? AbilityTypeOneofCase.None : AbilityTypeOneofCase.ReplaceUnitsWithTypeOnStrongerOnes;
      }
    }

    /// <summary>Field number for the "dealDamageToThisAndAdjacentUnits" field.</summary>
    public const int DealDamageToThisAndAdjacentUnitsFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardAbilityDealDamageToThisAndAdjacentUnits DealDamageToThisAndAdjacentUnits {
      get { return abilityTypeCase_ == AbilityTypeOneofCase.DealDamageToThisAndAdjacentUnits ? (global::Loom.ZombieBattleground.Protobuf.CardAbilityDealDamageToThisAndAdjacentUnits) abilityType_ : null; }
      set {
        abilityType_ = value;
        abilityTypeCase_ = value == null ? AbilityTypeOneofCase.None : AbilityTypeOneofCase.DealDamageToThisAndAdjacentUnits;
      }
    }

    /// <summary>Field number for the "devourZombieAndCombineStats" field.</summary>
    public const int DevourZombieAndCombineStatsFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardAbilityDevourZombieAndCombineStats DevourZombieAndCombineStats {
      get { return abilityTypeCase_ == AbilityTypeOneofCase.DevourZombieAndCombineStats ? (global::Loom.ZombieBattleground.Protobuf.CardAbilityDevourZombieAndCombineStats) abilityType_ : null; }
      set {
        abilityType_ = value;
        abilityTypeCase_ = value == null ? AbilityTypeOneofCase.None : AbilityTypeOneofCase.DevourZombieAndCombineStats;
      }
    }

    /// <summary>Field number for the "isActive" field.</summary>
    public const int IsActiveFieldNumber = 3;
    private bool isActive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActive {
      get { return isActive_; }
      set {
        isActive_ = value;
      }
    }

    /// <summary>Field number for the "trigger" field.</summary>
    public const int TriggerFieldNumber = 4;
    private global::Loom.ZombieBattleground.Protobuf.AbilityTrigger.Types.Enum trigger_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.AbilityTrigger.Types.Enum Trigger {
      get { return trigger_; }
      set {
        trigger_ = value;
      }
    }

    private object abilityType_;
    /// <summary>Enum of possible cases for the "AbilityType" oneof.</summary>
    public enum AbilityTypeOneofCase {
      None = 0,
      Rage = 1,
      PriorityAttack = 2,
      Reanimate = 5,
      AdditionalDamageToHeavyInAttack = 6,
      ChangeStat = 7,
      AttackOverlord = 8,
      ReplaceUnitsWithTypeOnStrongerOnes = 9,
      DealDamageToThisAndAdjacentUnits = 10,
      DevourZombieAndCombineStats = 11,
    }
    private AbilityTypeOneofCase abilityTypeCase_ = AbilityTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbilityTypeOneofCase AbilityTypeCase {
      get { return abilityTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAbilityType() {
      abilityTypeCase_ = AbilityTypeOneofCase.None;
      abilityType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardAbilityInstance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardAbilityInstance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Rage, other.Rage)) return false;
      if (!object.Equals(PriorityAttack, other.PriorityAttack)) return false;
      if (!object.Equals(Reanimate, other.Reanimate)) return false;
      if (!object.Equals(AdditionalDamageToHeavyInAttack, other.AdditionalDamageToHeavyInAttack)) return false;
      if (!object.Equals(ChangeStat, other.ChangeStat)) return false;
      if (!object.Equals(AttackOverlord, other.AttackOverlord)) return false;
      if (!object.Equals(ReplaceUnitsWithTypeOnStrongerOnes, other.ReplaceUnitsWithTypeOnStrongerOnes)) return false;
      if (!object.Equals(DealDamageToThisAndAdjacentUnits, other.DealDamageToThisAndAdjacentUnits)) return false;
      if (!object.Equals(DevourZombieAndCombineStats, other.DevourZombieAndCombineStats)) return false;
      if (IsActive != other.IsActive) return false;
      if (Trigger != other.Trigger) return false;
      if (AbilityTypeCase != other.AbilityTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (abilityTypeCase_ == AbilityTypeOneofCase.Rage) hash ^= Rage.GetHashCode();
      if (abilityTypeCase_ == AbilityTypeOneofCase.PriorityAttack) hash ^= PriorityAttack.GetHashCode();
      if (abilityTypeCase_ == AbilityTypeOneofCase.Reanimate) hash ^= Reanimate.GetHashCode();
      if (abilityTypeCase_ == AbilityTypeOneofCase.AdditionalDamageToHeavyInAttack) hash ^= AdditionalDamageToHeavyInAttack.GetHashCode();
      if (abilityTypeCase_ == AbilityTypeOneofCase.ChangeStat) hash ^= ChangeStat.GetHashCode();
      if (abilityTypeCase_ == AbilityTypeOneofCase.AttackOverlord) hash ^= AttackOverlord.GetHashCode();
      if (abilityTypeCase_ == AbilityTypeOneofCase.ReplaceUnitsWithTypeOnStrongerOnes) hash ^= ReplaceUnitsWithTypeOnStrongerOnes.GetHashCode();
      if (abilityTypeCase_ == AbilityTypeOneofCase.DealDamageToThisAndAdjacentUnits) hash ^= DealDamageToThisAndAdjacentUnits.GetHashCode();
      if (abilityTypeCase_ == AbilityTypeOneofCase.DevourZombieAndCombineStats) hash ^= DevourZombieAndCombineStats.GetHashCode();
      if (IsActive != false) hash ^= IsActive.GetHashCode();
      if (Trigger != 0) hash ^= Trigger.GetHashCode();
      hash ^= (int) abilityTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (abilityTypeCase_ == AbilityTypeOneofCase.Rage) {
        output.WriteRawTag(10);
        output.WriteMessage(Rage);
      }
      if (abilityTypeCase_ == AbilityTypeOneofCase.PriorityAttack) {
        output.WriteRawTag(18);
        output.WriteMessage(PriorityAttack);
      }
      if (IsActive != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsActive);
      }
      if (Trigger != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Trigger);
      }
      if (abilityTypeCase_ == AbilityTypeOneofCase.Reanimate) {
        output.WriteRawTag(42);
        output.WriteMessage(Reanimate);
      }
      if (abilityTypeCase_ == AbilityTypeOneofCase.AdditionalDamageToHeavyInAttack) {
        output.WriteRawTag(50);
        output.WriteMessage(AdditionalDamageToHeavyInAttack);
      }
      if (abilityTypeCase_ == AbilityTypeOneofCase.ChangeStat) {
        output.WriteRawTag(58);
        output.WriteMessage(ChangeStat);
      }
      if (abilityTypeCase_ == AbilityTypeOneofCase.AttackOverlord) {
        output.WriteRawTag(66);
        output.WriteMessage(AttackOverlord);
      }
      if (abilityTypeCase_ == AbilityTypeOneofCase.ReplaceUnitsWithTypeOnStrongerOnes) {
        output.WriteRawTag(74);
        output.WriteMessage(ReplaceUnitsWithTypeOnStrongerOnes);
      }
      if (abilityTypeCase_ == AbilityTypeOneofCase.DealDamageToThisAndAdjacentUnits) {
        output.WriteRawTag(82);
        output.WriteMessage(DealDamageToThisAndAdjacentUnits);
      }
      if (abilityTypeCase_ == AbilityTypeOneofCase.DevourZombieAndCombineStats) {
        output.WriteRawTag(90);
        output.WriteMessage(DevourZombieAndCombineStats);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (abilityTypeCase_ == AbilityTypeOneofCase.Rage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rage);
      }
      if (abilityTypeCase_ == AbilityTypeOneofCase.PriorityAttack) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PriorityAttack);
      }
      if (abilityTypeCase_ == AbilityTypeOneofCase.Reanimate) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reanimate);
      }
      if (abilityTypeCase_ == AbilityTypeOneofCase.AdditionalDamageToHeavyInAttack) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AdditionalDamageToHeavyInAttack);
      }
      if (abilityTypeCase_ == AbilityTypeOneofCase.ChangeStat) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChangeStat);
      }
      if (abilityTypeCase_ == AbilityTypeOneofCase.AttackOverlord) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AttackOverlord);
      }
      if (abilityTypeCase_ == AbilityTypeOneofCase.ReplaceUnitsWithTypeOnStrongerOnes) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReplaceUnitsWithTypeOnStrongerOnes);
      }
      if (abilityTypeCase_ == AbilityTypeOneofCase.DealDamageToThisAndAdjacentUnits) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DealDamageToThisAndAdjacentUnits);
      }
      if (abilityTypeCase_ == AbilityTypeOneofCase.DevourZombieAndCombineStats) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DevourZombieAndCombineStats);
      }
      if (IsActive != false) {
        size += 1 + 1;
      }
      if (Trigger != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Trigger);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardAbilityInstance other) {
      if (other == null) {
        return;
      }
      if (other.IsActive != false) {
        IsActive = other.IsActive;
      }
      if (other.Trigger != 0) {
        Trigger = other.Trigger;
      }
      switch (other.AbilityTypeCase) {
        case AbilityTypeOneofCase.Rage:
          if (Rage == null) {
            Rage = new global::Loom.ZombieBattleground.Protobuf.CardAbilityRage();
          }
          Rage.MergeFrom(other.Rage);
          break;
        case AbilityTypeOneofCase.PriorityAttack:
          if (PriorityAttack == null) {
            PriorityAttack = new global::Loom.ZombieBattleground.Protobuf.CardAbilityPriorityAttack();
          }
          PriorityAttack.MergeFrom(other.PriorityAttack);
          break;
        case AbilityTypeOneofCase.Reanimate:
          if (Reanimate == null) {
            Reanimate = new global::Loom.ZombieBattleground.Protobuf.CardAbilityReanimate();
          }
          Reanimate.MergeFrom(other.Reanimate);
          break;
        case AbilityTypeOneofCase.AdditionalDamageToHeavyInAttack:
          if (AdditionalDamageToHeavyInAttack == null) {
            AdditionalDamageToHeavyInAttack = new global::Loom.ZombieBattleground.Protobuf.CardAbilityAdditionalDamageToHeavyInAttack();
          }
          AdditionalDamageToHeavyInAttack.MergeFrom(other.AdditionalDamageToHeavyInAttack);
          break;
        case AbilityTypeOneofCase.ChangeStat:
          if (ChangeStat == null) {
            ChangeStat = new global::Loom.ZombieBattleground.Protobuf.CardAbilityChangeStat();
          }
          ChangeStat.MergeFrom(other.ChangeStat);
          break;
        case AbilityTypeOneofCase.AttackOverlord:
          if (AttackOverlord == null) {
            AttackOverlord = new global::Loom.ZombieBattleground.Protobuf.CardAbilityAttackOverlord();
          }
          AttackOverlord.MergeFrom(other.AttackOverlord);
          break;
        case AbilityTypeOneofCase.ReplaceUnitsWithTypeOnStrongerOnes:
          if (ReplaceUnitsWithTypeOnStrongerOnes == null) {
            ReplaceUnitsWithTypeOnStrongerOnes = new global::Loom.ZombieBattleground.Protobuf.CardAbilityReplaceUnitsWithTypeOnStrongerOnes();
          }
          ReplaceUnitsWithTypeOnStrongerOnes.MergeFrom(other.ReplaceUnitsWithTypeOnStrongerOnes);
          break;
        case AbilityTypeOneofCase.DealDamageToThisAndAdjacentUnits:
          if (DealDamageToThisAndAdjacentUnits == null) {
            DealDamageToThisAndAdjacentUnits = new global::Loom.ZombieBattleground.Protobuf.CardAbilityDealDamageToThisAndAdjacentUnits();
          }
          DealDamageToThisAndAdjacentUnits.MergeFrom(other.DealDamageToThisAndAdjacentUnits);
          break;
        case AbilityTypeOneofCase.DevourZombieAndCombineStats:
          if (DevourZombieAndCombineStats == null) {
            DevourZombieAndCombineStats = new global::Loom.ZombieBattleground.Protobuf.CardAbilityDevourZombieAndCombineStats();
          }
          DevourZombieAndCombineStats.MergeFrom(other.DevourZombieAndCombineStats);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Loom.ZombieBattleground.Protobuf.CardAbilityRage subBuilder = new global::Loom.ZombieBattleground.Protobuf.CardAbilityRage();
            if (abilityTypeCase_ == AbilityTypeOneofCase.Rage) {
              subBuilder.MergeFrom(Rage);
            }
            input.ReadMessage(subBuilder);
            Rage = subBuilder;
            break;
          }
          case 18: {
            global::Loom.ZombieBattleground.Protobuf.CardAbilityPriorityAttack subBuilder = new global::Loom.ZombieBattleground.Protobuf.CardAbilityPriorityAttack();
            if (abilityTypeCase_ == AbilityTypeOneofCase.PriorityAttack) {
              subBuilder.MergeFrom(PriorityAttack);
            }
            input.ReadMessage(subBuilder);
            PriorityAttack = subBuilder;
            break;
          }
          case 24: {
            IsActive = input.ReadBool();
            break;
          }
          case 32: {
            trigger_ = (global::Loom.ZombieBattleground.Protobuf.AbilityTrigger.Types.Enum) input.ReadEnum();
            break;
          }
          case 42: {
            global::Loom.ZombieBattleground.Protobuf.CardAbilityReanimate subBuilder = new global::Loom.ZombieBattleground.Protobuf.CardAbilityReanimate();
            if (abilityTypeCase_ == AbilityTypeOneofCase.Reanimate) {
              subBuilder.MergeFrom(Reanimate);
            }
            input.ReadMessage(subBuilder);
            Reanimate = subBuilder;
            break;
          }
          case 50: {
            global::Loom.ZombieBattleground.Protobuf.CardAbilityAdditionalDamageToHeavyInAttack subBuilder = new global::Loom.ZombieBattleground.Protobuf.CardAbilityAdditionalDamageToHeavyInAttack();
            if (abilityTypeCase_ == AbilityTypeOneofCase.AdditionalDamageToHeavyInAttack) {
              subBuilder.MergeFrom(AdditionalDamageToHeavyInAttack);
            }
            input.ReadMessage(subBuilder);
            AdditionalDamageToHeavyInAttack = subBuilder;
            break;
          }
          case 58: {
            global::Loom.ZombieBattleground.Protobuf.CardAbilityChangeStat subBuilder = new global::Loom.ZombieBattleground.Protobuf.CardAbilityChangeStat();
            if (abilityTypeCase_ == AbilityTypeOneofCase.ChangeStat) {
              subBuilder.MergeFrom(ChangeStat);
            }
            input.ReadMessage(subBuilder);
            ChangeStat = subBuilder;
            break;
          }
          case 66: {
            global::Loom.ZombieBattleground.Protobuf.CardAbilityAttackOverlord subBuilder = new global::Loom.ZombieBattleground.Protobuf.CardAbilityAttackOverlord();
            if (abilityTypeCase_ == AbilityTypeOneofCase.AttackOverlord) {
              subBuilder.MergeFrom(AttackOverlord);
            }
            input.ReadMessage(subBuilder);
            AttackOverlord = subBuilder;
            break;
          }
          case 74: {
            global::Loom.ZombieBattleground.Protobuf.CardAbilityReplaceUnitsWithTypeOnStrongerOnes subBuilder = new global::Loom.ZombieBattleground.Protobuf.CardAbilityReplaceUnitsWithTypeOnStrongerOnes();
            if (abilityTypeCase_ == AbilityTypeOneofCase.ReplaceUnitsWithTypeOnStrongerOnes) {
              subBuilder.MergeFrom(ReplaceUnitsWithTypeOnStrongerOnes);
            }
            input.ReadMessage(subBuilder);
            ReplaceUnitsWithTypeOnStrongerOnes = subBuilder;
            break;
          }
          case 82: {
            global::Loom.ZombieBattleground.Protobuf.CardAbilityDealDamageToThisAndAdjacentUnits subBuilder = new global::Loom.ZombieBattleground.Protobuf.CardAbilityDealDamageToThisAndAdjacentUnits();
            if (abilityTypeCase_ == AbilityTypeOneofCase.DealDamageToThisAndAdjacentUnits) {
              subBuilder.MergeFrom(DealDamageToThisAndAdjacentUnits);
            }
            input.ReadMessage(subBuilder);
            DealDamageToThisAndAdjacentUnits = subBuilder;
            break;
          }
          case 90: {
            global::Loom.ZombieBattleground.Protobuf.CardAbilityDevourZombieAndCombineStats subBuilder = new global::Loom.ZombieBattleground.Protobuf.CardAbilityDevourZombieAndCombineStats();
            if (abilityTypeCase_ == AbilityTypeOneofCase.DevourZombieAndCombineStats) {
              subBuilder.MergeFrom(DevourZombieAndCombineStats);
            }
            input.ReadMessage(subBuilder);
            DevourZombieAndCombineStats = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardInstance : pb::IMessage<CardInstance> {
    private static readonly pb::MessageParser<CardInstance> _parser = new pb::MessageParser<CardInstance>(() => new CardInstance());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardInstance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardInstance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardInstance(CardInstance other) : this() {
      prototype_ = other.prototype_ != null ? other.prototype_.Clone() : null;
      instanceId_ = other.instanceId_ != null ? other.instanceId_.Clone() : null;
      instance_ = other.instance_ != null ? other.instance_.Clone() : null;
      owner_ = other.owner_;
      abilitiesInstancesInitialized_ = other.abilitiesInstancesInitialized_;
      abilitiesInstances_ = other.abilitiesInstances_.Clone();
      zone_ = other.zone_;
      ownerIndex_ = other.ownerIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardInstance Clone() {
      return new CardInstance(this);
    }

    /// <summary>Field number for the "prototype" field.</summary>
    public const int PrototypeFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.Card prototype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Card Prototype {
      get { return prototype_; }
      set {
        prototype_ = value;
      }
    }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.InstanceId instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.InstanceId InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "instance" field.</summary>
    public const int InstanceFieldNumber = 3;
    private global::Loom.ZombieBattleground.Protobuf.CardInstanceSpecificData instance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardInstanceSpecificData Instance {
      get { return instance_; }
      set {
        instance_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 4;
    private string owner_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Owner {
      get { return owner_; }
      set {
        owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "abilitiesInstancesInitialized" field.</summary>
    public const int AbilitiesInstancesInitializedFieldNumber = 5;
    private bool abilitiesInstancesInitialized_;
    /// <summary>
    /// FIXME: this really shouldn't be in Protobuf
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AbilitiesInstancesInitialized {
      get { return abilitiesInstancesInitialized_; }
      set {
        abilitiesInstancesInitialized_ = value;
      }
    }

    /// <summary>Field number for the "abilitiesInstances" field.</summary>
    public const int AbilitiesInstancesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardAbilityInstance> _repeated_abilitiesInstances_codec
        = pb::FieldCodec.ForMessage(50, global::Loom.ZombieBattleground.Protobuf.CardAbilityInstance.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardAbilityInstance> abilitiesInstances_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardAbilityInstance>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardAbilityInstance> AbilitiesInstances {
      get { return abilitiesInstances_; }
    }

    /// <summary>Field number for the "zone" field.</summary>
    public const int ZoneFieldNumber = 7;
    private global::Loom.ZombieBattleground.Protobuf.Zone.Types.type zone_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Zone.Types.type Zone {
      get { return zone_; }
      set {
        zone_ = value;
      }
    }

    /// <summary>Field number for the "ownerIndex" field.</summary>
    public const int OwnerIndexFieldNumber = 8;
    private int ownerIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OwnerIndex {
      get { return ownerIndex_; }
      set {
        ownerIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardInstance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardInstance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Prototype, other.Prototype)) return false;
      if (!object.Equals(InstanceId, other.InstanceId)) return false;
      if (!object.Equals(Instance, other.Instance)) return false;
      if (Owner != other.Owner) return false;
      if (AbilitiesInstancesInitialized != other.AbilitiesInstancesInitialized) return false;
      if(!abilitiesInstances_.Equals(other.abilitiesInstances_)) return false;
      if (Zone != other.Zone) return false;
      if (OwnerIndex != other.OwnerIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (prototype_ != null) hash ^= Prototype.GetHashCode();
      if (instanceId_ != null) hash ^= InstanceId.GetHashCode();
      if (instance_ != null) hash ^= Instance.GetHashCode();
      if (Owner.Length != 0) hash ^= Owner.GetHashCode();
      if (AbilitiesInstancesInitialized != false) hash ^= AbilitiesInstancesInitialized.GetHashCode();
      hash ^= abilitiesInstances_.GetHashCode();
      if (Zone != 0) hash ^= Zone.GetHashCode();
      if (OwnerIndex != 0) hash ^= OwnerIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (prototype_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Prototype);
      }
      if (instanceId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(InstanceId);
      }
      if (instance_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Instance);
      }
      if (Owner.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Owner);
      }
      if (AbilitiesInstancesInitialized != false) {
        output.WriteRawTag(40);
        output.WriteBool(AbilitiesInstancesInitialized);
      }
      abilitiesInstances_.WriteTo(output, _repeated_abilitiesInstances_codec);
      if (Zone != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Zone);
      }
      if (OwnerIndex != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(OwnerIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (prototype_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prototype);
      }
      if (instanceId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InstanceId);
      }
      if (instance_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Instance);
      }
      if (Owner.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
      }
      if (AbilitiesInstancesInitialized != false) {
        size += 1 + 1;
      }
      size += abilitiesInstances_.CalculateSize(_repeated_abilitiesInstances_codec);
      if (Zone != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Zone);
      }
      if (OwnerIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OwnerIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardInstance other) {
      if (other == null) {
        return;
      }
      if (other.prototype_ != null) {
        if (prototype_ == null) {
          prototype_ = new global::Loom.ZombieBattleground.Protobuf.Card();
        }
        Prototype.MergeFrom(other.Prototype);
      }
      if (other.instanceId_ != null) {
        if (instanceId_ == null) {
          instanceId_ = new global::Loom.ZombieBattleground.Protobuf.InstanceId();
        }
        InstanceId.MergeFrom(other.InstanceId);
      }
      if (other.instance_ != null) {
        if (instance_ == null) {
          instance_ = new global::Loom.ZombieBattleground.Protobuf.CardInstanceSpecificData();
        }
        Instance.MergeFrom(other.Instance);
      }
      if (other.Owner.Length != 0) {
        Owner = other.Owner;
      }
      if (other.AbilitiesInstancesInitialized != false) {
        AbilitiesInstancesInitialized = other.AbilitiesInstancesInitialized;
      }
      abilitiesInstances_.Add(other.abilitiesInstances_);
      if (other.Zone != 0) {
        Zone = other.Zone;
      }
      if (other.OwnerIndex != 0) {
        OwnerIndex = other.OwnerIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (prototype_ == null) {
              prototype_ = new global::Loom.ZombieBattleground.Protobuf.Card();
            }
            input.ReadMessage(prototype_);
            break;
          }
          case 18: {
            if (instanceId_ == null) {
              instanceId_ = new global::Loom.ZombieBattleground.Protobuf.InstanceId();
            }
            input.ReadMessage(instanceId_);
            break;
          }
          case 26: {
            if (instance_ == null) {
              instance_ = new global::Loom.ZombieBattleground.Protobuf.CardInstanceSpecificData();
            }
            input.ReadMessage(instance_);
            break;
          }
          case 34: {
            Owner = input.ReadString();
            break;
          }
          case 40: {
            AbilitiesInstancesInitialized = input.ReadBool();
            break;
          }
          case 50: {
            abilitiesInstances_.AddEntriesFrom(input, _repeated_abilitiesInstances_codec);
            break;
          }
          case 56: {
            zone_ = (global::Loom.ZombieBattleground.Protobuf.Zone.Types.type) input.ReadEnum();
            break;
          }
          case 64: {
            OwnerIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataIdOwner : pb::IMessage<DataIdOwner> {
    private static readonly pb::MessageParser<DataIdOwner> _parser = new pb::MessageParser<DataIdOwner>(() => new DataIdOwner());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataIdOwner> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataIdOwner() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataIdOwner(DataIdOwner other) : this() {
      dataId_ = other.dataId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataIdOwner Clone() {
      return new DataIdOwner(this);
    }

    /// <summary>Field number for the "dataId" field.</summary>
    public const int DataIdFieldNumber = 1;
    private int dataId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DataId {
      get { return dataId_; }
      set {
        dataId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataIdOwner);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataIdOwner other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DataId != other.DataId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DataId != 0) hash ^= DataId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DataId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DataId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DataId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataIdOwner other) {
      if (other == null) {
        return;
      }
      if (other.DataId != 0) {
        DataId = other.DataId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DataId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// (interface IDeck)
  /// </summary>
  public sealed partial class CardDeck : pb::IMessage<CardDeck> {
    private static readonly pb::MessageParser<CardDeck> _parser = new pb::MessageParser<CardDeck>(() => new CardDeck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardDeck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardDeck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardDeck(CardDeck other) : this() {
      cards_ = other.cards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardDeck Clone() {
      return new CardDeck(this);
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Card> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.Card.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card> cards_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardDeck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardDeck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cards_.Equals(other.cards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cards_.WriteTo(output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardDeck other) {
      if (other == null) {
        return;
      }
      cards_.Add(other.cards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InstanceId : pb::IMessage<InstanceId> {
    private static readonly pb::MessageParser<InstanceId> _parser = new pb::MessageParser<InstanceId>(() => new InstanceId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InstanceId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstanceId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstanceId(InstanceId other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstanceId Clone() {
      return new InstanceId(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InstanceId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InstanceId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InstanceId other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OverlordSkillMatchInstance : pb::IMessage<OverlordSkillMatchInstance> {
    private static readonly pb::MessageParser<OverlordSkillMatchInstance> _parser = new pb::MessageParser<OverlordSkillMatchInstance>(() => new OverlordSkillMatchInstance());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OverlordSkillMatchInstance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordSkillMatchInstance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordSkillMatchInstance(OverlordSkillMatchInstance other) : this() {
      prototype_ = other.prototype_ != null ? other.prototype_.Clone() : null;
      cooldown_ = other.cooldown_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordSkillMatchInstance Clone() {
      return new OverlordSkillMatchInstance(this);
    }

    /// <summary>Field number for the "prototype" field.</summary>
    public const int PrototypeFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.OverlordSkillPrototype prototype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.OverlordSkillPrototype Prototype {
      get { return prototype_; }
      set {
        prototype_ = value;
      }
    }

    /// <summary>Field number for the "cooldown" field.</summary>
    public const int CooldownFieldNumber = 2;
    private int cooldown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cooldown {
      get { return cooldown_; }
      set {
        cooldown_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OverlordSkillMatchInstance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OverlordSkillMatchInstance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Prototype, other.Prototype)) return false;
      if (Cooldown != other.Cooldown) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (prototype_ != null) hash ^= Prototype.GetHashCode();
      if (Cooldown != 0) hash ^= Cooldown.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (prototype_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Prototype);
      }
      if (Cooldown != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Cooldown);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (prototype_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prototype);
      }
      if (Cooldown != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cooldown);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OverlordSkillMatchInstance other) {
      if (other == null) {
        return;
      }
      if (other.prototype_ != null) {
        if (prototype_ == null) {
          prototype_ = new global::Loom.ZombieBattleground.Protobuf.OverlordSkillPrototype();
        }
        Prototype.MergeFrom(other.Prototype);
      }
      if (other.Cooldown != 0) {
        Cooldown = other.Cooldown;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (prototype_ == null) {
              prototype_ = new global::Loom.ZombieBattleground.Protobuf.OverlordSkillPrototype();
            }
            input.ReadMessage(prototype_);
            break;
          }
          case 16: {
            Cooldown = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerActionLeaveMatch : pb::IMessage<PlayerActionLeaveMatch> {
    private static readonly pb::MessageParser<PlayerActionLeaveMatch> _parser = new pb::MessageParser<PlayerActionLeaveMatch>(() => new PlayerActionLeaveMatch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerActionLeaveMatch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionLeaveMatch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionLeaveMatch(PlayerActionLeaveMatch other) : this() {
      winner_ = other.winner_;
      reason_ = other.reason_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionLeaveMatch Clone() {
      return new PlayerActionLeaveMatch(this);
    }

    /// <summary>Field number for the "winner" field.</summary>
    public const int WinnerFieldNumber = 1;
    private string winner_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Winner {
      get { return winner_; }
      set {
        winner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.PlayerActionLeaveMatch.Types.Reason reason_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerActionLeaveMatch.Types.Reason Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerActionLeaveMatch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerActionLeaveMatch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Winner != other.Winner) return false;
      if (Reason != other.Reason) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Winner.Length != 0) hash ^= Winner.GetHashCode();
      if (Reason != 0) hash ^= Reason.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Winner.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Winner);
      }
      if (Reason != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Reason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Winner.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Winner);
      }
      if (Reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Reason);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerActionLeaveMatch other) {
      if (other == null) {
        return;
      }
      if (other.Winner.Length != 0) {
        Winner = other.Winner;
      }
      if (other.Reason != 0) {
        Reason = other.Reason;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Winner = input.ReadString();
            break;
          }
          case 16: {
            reason_ = (global::Loom.ZombieBattleground.Protobuf.PlayerActionLeaveMatch.Types.Reason) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PlayerActionLeaveMatch message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Reason {
        [pbr::OriginalName("None")] None = 0,
        [pbr::OriginalName("PlayerLeave")] PlayerLeave = 1,
        [pbr::OriginalName("KeepAliveTimeout")] KeepAliveTimeout = 2,
      }

    }
    #endregion

  }

  public sealed partial class PlayerActionCardPlay : pb::IMessage<PlayerActionCardPlay> {
    private static readonly pb::MessageParser<PlayerActionCardPlay> _parser = new pb::MessageParser<PlayerActionCardPlay>(() => new PlayerActionCardPlay());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerActionCardPlay> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionCardPlay() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionCardPlay(PlayerActionCardPlay other) : this() {
      card_ = other.card_ != null ? other.card_.Clone() : null;
      position_ = other.position_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionCardPlay Clone() {
      return new PlayerActionCardPlay(this);
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.InstanceId card_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.InstanceId Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private int position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerActionCardPlay);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerActionCardPlay other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Card, other.Card)) return false;
      if (Position != other.Position) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (card_ != null) hash ^= Card.GetHashCode();
      if (Position != 0) hash ^= Position.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (card_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Card);
      }
      if (Position != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Position);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (card_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerActionCardPlay other) {
      if (other == null) {
        return;
      }
      if (other.card_ != null) {
        if (card_ == null) {
          card_ = new global::Loom.ZombieBattleground.Protobuf.InstanceId();
        }
        Card.MergeFrom(other.Card);
      }
      if (other.Position != 0) {
        Position = other.Position;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (card_ == null) {
              card_ = new global::Loom.ZombieBattleground.Protobuf.InstanceId();
            }
            input.ReadMessage(card_);
            break;
          }
          case 16: {
            Position = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerActionRankBuff : pb::IMessage<PlayerActionRankBuff> {
    private static readonly pb::MessageParser<PlayerActionRankBuff> _parser = new pb::MessageParser<PlayerActionRankBuff>(() => new PlayerActionRankBuff());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerActionRankBuff> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionRankBuff() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionRankBuff(PlayerActionRankBuff other) : this() {
      card_ = other.card_ != null ? other.card_.Clone() : null;
      targets_ = other.targets_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionRankBuff Clone() {
      return new PlayerActionRankBuff(this);
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.InstanceId card_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.InstanceId Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    /// <summary>Field number for the "targets" field.</summary>
    public const int TargetsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Unit> _repeated_targets_codec
        = pb::FieldCodec.ForMessage(18, global::Loom.ZombieBattleground.Protobuf.Unit.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Unit> targets_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Unit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Unit> Targets {
      get { return targets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerActionRankBuff);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerActionRankBuff other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Card, other.Card)) return false;
      if(!targets_.Equals(other.targets_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (card_ != null) hash ^= Card.GetHashCode();
      hash ^= targets_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (card_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Card);
      }
      targets_.WriteTo(output, _repeated_targets_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (card_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
      }
      size += targets_.CalculateSize(_repeated_targets_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerActionRankBuff other) {
      if (other == null) {
        return;
      }
      if (other.card_ != null) {
        if (card_ == null) {
          card_ = new global::Loom.ZombieBattleground.Protobuf.InstanceId();
        }
        Card.MergeFrom(other.Card);
      }
      targets_.Add(other.targets_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (card_ == null) {
              card_ = new global::Loom.ZombieBattleground.Protobuf.InstanceId();
            }
            input.ReadMessage(card_);
            break;
          }
          case 18: {
            targets_.AddEntriesFrom(input, _repeated_targets_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerActionCardAttack : pb::IMessage<PlayerActionCardAttack> {
    private static readonly pb::MessageParser<PlayerActionCardAttack> _parser = new pb::MessageParser<PlayerActionCardAttack>(() => new PlayerActionCardAttack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerActionCardAttack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionCardAttack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionCardAttack(PlayerActionCardAttack other) : this() {
      attacker_ = other.attacker_ != null ? other.attacker_.Clone() : null;
      target_ = other.target_ != null ? other.target_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionCardAttack Clone() {
      return new PlayerActionCardAttack(this);
    }

    /// <summary>Field number for the "attacker" field.</summary>
    public const int AttackerFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.InstanceId attacker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.InstanceId Attacker {
      get { return attacker_; }
      set {
        attacker_ = value;
      }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.Unit target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Unit Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerActionCardAttack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerActionCardAttack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Attacker, other.Attacker)) return false;
      if (!object.Equals(Target, other.Target)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (attacker_ != null) hash ^= Attacker.GetHashCode();
      if (target_ != null) hash ^= Target.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (attacker_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Attacker);
      }
      if (target_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Target);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (attacker_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attacker);
      }
      if (target_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerActionCardAttack other) {
      if (other == null) {
        return;
      }
      if (other.attacker_ != null) {
        if (attacker_ == null) {
          attacker_ = new global::Loom.ZombieBattleground.Protobuf.InstanceId();
        }
        Attacker.MergeFrom(other.Attacker);
      }
      if (other.target_ != null) {
        if (target_ == null) {
          target_ = new global::Loom.ZombieBattleground.Protobuf.Unit();
        }
        Target.MergeFrom(other.Target);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (attacker_ == null) {
              attacker_ = new global::Loom.ZombieBattleground.Protobuf.InstanceId();
            }
            input.ReadMessage(attacker_);
            break;
          }
          case 18: {
            if (target_ == null) {
              target_ = new global::Loom.ZombieBattleground.Protobuf.Unit();
            }
            input.ReadMessage(target_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerActionCardAbilityUsed : pb::IMessage<PlayerActionCardAbilityUsed> {
    private static readonly pb::MessageParser<PlayerActionCardAbilityUsed> _parser = new pb::MessageParser<PlayerActionCardAbilityUsed>(() => new PlayerActionCardAbilityUsed());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerActionCardAbilityUsed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionCardAbilityUsed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionCardAbilityUsed(PlayerActionCardAbilityUsed other) : this() {
      card_ = other.card_ != null ? other.card_.Clone() : null;
      targets_ = other.targets_.Clone();
      abilityType_ = other.abilityType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionCardAbilityUsed Clone() {
      return new PlayerActionCardAbilityUsed(this);
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.InstanceId card_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.InstanceId Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    /// <summary>Field number for the "targets" field.</summary>
    public const int TargetsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Unit> _repeated_targets_codec
        = pb::FieldCodec.ForMessage(26, global::Loom.ZombieBattleground.Protobuf.Unit.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Unit> targets_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Unit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Unit> Targets {
      get { return targets_; }
    }

    /// <summary>Field number for the "AbilityType" field.</summary>
    public const int AbilityTypeFieldNumber = 4;
    private global::Loom.ZombieBattleground.Protobuf.AbilityType.Types.Enum abilityType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.AbilityType.Types.Enum AbilityType {
      get { return abilityType_; }
      set {
        abilityType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerActionCardAbilityUsed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerActionCardAbilityUsed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Card, other.Card)) return false;
      if(!targets_.Equals(other.targets_)) return false;
      if (AbilityType != other.AbilityType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (card_ != null) hash ^= Card.GetHashCode();
      hash ^= targets_.GetHashCode();
      if (AbilityType != 0) hash ^= AbilityType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (card_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Card);
      }
      targets_.WriteTo(output, _repeated_targets_codec);
      if (AbilityType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) AbilityType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (card_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
      }
      size += targets_.CalculateSize(_repeated_targets_codec);
      if (AbilityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AbilityType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerActionCardAbilityUsed other) {
      if (other == null) {
        return;
      }
      if (other.card_ != null) {
        if (card_ == null) {
          card_ = new global::Loom.ZombieBattleground.Protobuf.InstanceId();
        }
        Card.MergeFrom(other.Card);
      }
      targets_.Add(other.targets_);
      if (other.AbilityType != 0) {
        AbilityType = other.AbilityType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (card_ == null) {
              card_ = new global::Loom.ZombieBattleground.Protobuf.InstanceId();
            }
            input.ReadMessage(card_);
            break;
          }
          case 26: {
            targets_.AddEntriesFrom(input, _repeated_targets_codec);
            break;
          }
          case 32: {
            abilityType_ = (global::Loom.ZombieBattleground.Protobuf.AbilityType.Types.Enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerActionOverlordSkillUsed : pb::IMessage<PlayerActionOverlordSkillUsed> {
    private static readonly pb::MessageParser<PlayerActionOverlordSkillUsed> _parser = new pb::MessageParser<PlayerActionOverlordSkillUsed>(() => new PlayerActionOverlordSkillUsed());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerActionOverlordSkillUsed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionOverlordSkillUsed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionOverlordSkillUsed(PlayerActionOverlordSkillUsed other) : this() {
      skillId_ = other.skillId_;
      target_ = other.target_ != null ? other.target_.Clone() : null;
      targets_ = other.targets_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionOverlordSkillUsed Clone() {
      return new PlayerActionOverlordSkillUsed(this);
    }

    /// <summary>Field number for the "SkillId" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private long skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.Unit target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Unit Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    /// <summary>Field number for the "targets" field.</summary>
    public const int TargetsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Unit> _repeated_targets_codec
        = pb::FieldCodec.ForMessage(26, global::Loom.ZombieBattleground.Protobuf.Unit.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Unit> targets_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Unit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Unit> Targets {
      get { return targets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerActionOverlordSkillUsed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerActionOverlordSkillUsed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SkillId != other.SkillId) return false;
      if (!object.Equals(Target, other.Target)) return false;
      if(!targets_.Equals(other.targets_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SkillId != 0L) hash ^= SkillId.GetHashCode();
      if (target_ != null) hash ^= Target.GetHashCode();
      hash ^= targets_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SkillId);
      }
      if (target_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Target);
      }
      targets_.WriteTo(output, _repeated_targets_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SkillId);
      }
      if (target_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      size += targets_.CalculateSize(_repeated_targets_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerActionOverlordSkillUsed other) {
      if (other == null) {
        return;
      }
      if (other.SkillId != 0L) {
        SkillId = other.SkillId;
      }
      if (other.target_ != null) {
        if (target_ == null) {
          target_ = new global::Loom.ZombieBattleground.Protobuf.Unit();
        }
        Target.MergeFrom(other.Target);
      }
      targets_.Add(other.targets_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SkillId = input.ReadInt64();
            break;
          }
          case 18: {
            if (target_ == null) {
              target_ = new global::Loom.ZombieBattleground.Protobuf.Unit();
            }
            input.ReadMessage(target_);
            break;
          }
          case 26: {
            targets_.AddEntriesFrom(input, _repeated_targets_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerActionEndTurn : pb::IMessage<PlayerActionEndTurn> {
    private static readonly pb::MessageParser<PlayerActionEndTurn> _parser = new pb::MessageParser<PlayerActionEndTurn>(() => new PlayerActionEndTurn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerActionEndTurn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionEndTurn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionEndTurn(PlayerActionEndTurn other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionEndTurn Clone() {
      return new PlayerActionEndTurn(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerActionEndTurn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerActionEndTurn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerActionEndTurn other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class PlayerActionMulligan : pb::IMessage<PlayerActionMulligan> {
    private static readonly pb::MessageParser<PlayerActionMulligan> _parser = new pb::MessageParser<PlayerActionMulligan>(() => new PlayerActionMulligan());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerActionMulligan> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionMulligan() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionMulligan(PlayerActionMulligan other) : this() {
      mulliganedCards_ = other.mulliganedCards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionMulligan Clone() {
      return new PlayerActionMulligan(this);
    }

    /// <summary>Field number for the "mulliganedCards" field.</summary>
    public const int MulliganedCardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.InstanceId> _repeated_mulliganedCards_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.InstanceId.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.InstanceId> mulliganedCards_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.InstanceId>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.InstanceId> MulliganedCards {
      get { return mulliganedCards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerActionMulligan);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerActionMulligan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!mulliganedCards_.Equals(other.mulliganedCards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= mulliganedCards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mulliganedCards_.WriteTo(output, _repeated_mulliganedCards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mulliganedCards_.CalculateSize(_repeated_mulliganedCards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerActionMulligan other) {
      if (other == null) {
        return;
      }
      mulliganedCards_.Add(other.mulliganedCards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            mulliganedCards_.AddEntriesFrom(input, _repeated_mulliganedCards_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerActionCheatDestroyCardsOnBoard : pb::IMessage<PlayerActionCheatDestroyCardsOnBoard> {
    private static readonly pb::MessageParser<PlayerActionCheatDestroyCardsOnBoard> _parser = new pb::MessageParser<PlayerActionCheatDestroyCardsOnBoard>(() => new PlayerActionCheatDestroyCardsOnBoard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerActionCheatDestroyCardsOnBoard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionCheatDestroyCardsOnBoard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionCheatDestroyCardsOnBoard(PlayerActionCheatDestroyCardsOnBoard other) : this() {
      destroyedCards_ = other.destroyedCards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionCheatDestroyCardsOnBoard Clone() {
      return new PlayerActionCheatDestroyCardsOnBoard(this);
    }

    /// <summary>Field number for the "destroyedCards" field.</summary>
    public const int DestroyedCardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.InstanceId> _repeated_destroyedCards_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.InstanceId.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.InstanceId> destroyedCards_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.InstanceId>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.InstanceId> DestroyedCards {
      get { return destroyedCards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerActionCheatDestroyCardsOnBoard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerActionCheatDestroyCardsOnBoard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!destroyedCards_.Equals(other.destroyedCards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= destroyedCards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      destroyedCards_.WriteTo(output, _repeated_destroyedCards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += destroyedCards_.CalculateSize(_repeated_destroyedCards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerActionCheatDestroyCardsOnBoard other) {
      if (other == null) {
        return;
      }
      destroyedCards_.Add(other.destroyedCards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            destroyedCards_.AddEntriesFrom(input, _repeated_destroyedCards_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StartGameAction : pb::IMessage<StartGameAction> {
    private static readonly pb::MessageParser<StartGameAction> _parser = new pb::MessageParser<StartGameAction>(() => new StartGameAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartGameAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartGameAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartGameAction(StartGameAction other) : this() {
      playerStates_ = other.playerStates_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartGameAction Clone() {
      return new StartGameAction(this);
    }

    /// <summary>Field number for the "playerStates" field.</summary>
    public const int PlayerStatesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.PlayerState> _repeated_playerStates_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.PlayerState.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerState> playerStates_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerState>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerState> PlayerStates {
      get { return playerStates_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartGameAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartGameAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!playerStates_.Equals(other.playerStates_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= playerStates_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      playerStates_.WriteTo(output, _repeated_playerStates_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerStates_.CalculateSize(_repeated_playerStates_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartGameAction other) {
      if (other == null) {
        return;
      }
      playerStates_.Add(other.playerStates_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            playerStates_.AddEntriesFrom(input, _repeated_playerStates_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Unit : pb::IMessage<Unit> {
    private static readonly pb::MessageParser<Unit> _parser = new pb::MessageParser<Unit>(() => new Unit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Unit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Unit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Unit(Unit other) : this() {
      instanceId_ = other.instanceId_ != null ? other.instanceId_.Clone() : null;
      parameter_ = other.parameter_ != null ? other.parameter_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Unit Clone() {
      return new Unit(this);
    }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.InstanceId instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.InstanceId InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "Parameter" field.</summary>
    public const int ParameterFieldNumber = 3;
    private global::Loom.ZombieBattleground.Protobuf.Parameter parameter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Parameter Parameter {
      get { return parameter_; }
      set {
        parameter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Unit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Unit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(InstanceId, other.InstanceId)) return false;
      if (!object.Equals(Parameter, other.Parameter)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (instanceId_ != null) hash ^= InstanceId.GetHashCode();
      if (parameter_ != null) hash ^= Parameter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (instanceId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(InstanceId);
      }
      if (parameter_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Parameter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (instanceId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InstanceId);
      }
      if (parameter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Parameter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Unit other) {
      if (other == null) {
        return;
      }
      if (other.instanceId_ != null) {
        if (instanceId_ == null) {
          instanceId_ = new global::Loom.ZombieBattleground.Protobuf.InstanceId();
        }
        InstanceId.MergeFrom(other.InstanceId);
      }
      if (other.parameter_ != null) {
        if (parameter_ == null) {
          parameter_ = new global::Loom.ZombieBattleground.Protobuf.Parameter();
        }
        Parameter.MergeFrom(other.Parameter);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (instanceId_ == null) {
              instanceId_ = new global::Loom.ZombieBattleground.Protobuf.InstanceId();
            }
            input.ReadMessage(instanceId_);
            break;
          }
          case 26: {
            if (parameter_ == null) {
              parameter_ = new global::Loom.ZombieBattleground.Protobuf.Parameter();
            }
            input.ReadMessage(parameter_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Parameter : pb::IMessage<Parameter> {
    private static readonly pb::MessageParser<Parameter> _parser = new pb::MessageParser<Parameter>(() => new Parameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Parameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parameter(Parameter other) : this() {
      damage_ = other.damage_;
      defense_ = other.defense_;
      cardName_ = other.cardName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parameter Clone() {
      return new Parameter(this);
    }

    /// <summary>Field number for the "Damage" field.</summary>
    public const int DamageFieldNumber = 1;
    private int damage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "Defense" field.</summary>
    public const int DefenseFieldNumber = 2;
    private int defense_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Defense {
      get { return defense_; }
      set {
        defense_ = value;
      }
    }

    /// <summary>Field number for the "CardName" field.</summary>
    public const int CardNameFieldNumber = 3;
    private string cardName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CardName {
      get { return cardName_; }
      set {
        cardName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Parameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Parameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Damage != other.Damage) return false;
      if (Defense != other.Defense) return false;
      if (CardName != other.CardName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Damage != 0) hash ^= Damage.GetHashCode();
      if (Defense != 0) hash ^= Defense.GetHashCode();
      if (CardName.Length != 0) hash ^= CardName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Damage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Damage);
      }
      if (Defense != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Defense);
      }
      if (CardName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CardName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Damage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
      }
      if (Defense != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Defense);
      }
      if (CardName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CardName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Parameter other) {
      if (other == null) {
        return;
      }
      if (other.Damage != 0) {
        Damage = other.Damage;
      }
      if (other.Defense != 0) {
        Defense = other.Defense;
      }
      if (other.CardName.Length != 0) {
        CardName = other.CardName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Damage = input.ReadInt32();
            break;
          }
          case 16: {
            Defense = input.ReadInt32();
            break;
          }
          case 26: {
            CardName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameReplay : pb::IMessage<GameReplay> {
    private static readonly pb::MessageParser<GameReplay> _parser = new pb::MessageParser<GameReplay>(() => new GameReplay());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameReplay> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameReplay() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameReplay(GameReplay other) : this() {
      actions_ = other.actions_.Clone();
      blocks_ = other.blocks_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameReplay Clone() {
      return new GameReplay(this);
    }

    /// <summary>Field number for the "actions" field.</summary>
    public const int ActionsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.PlayerAction> _repeated_actions_codec
        = pb::FieldCodec.ForMessage(42, global::Loom.ZombieBattleground.Protobuf.PlayerAction.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerAction> actions_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerAction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerAction> Actions {
      get { return actions_; }
    }

    /// <summary>Field number for the "blocks" field.</summary>
    public const int BlocksFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.HistoryData> _repeated_blocks_codec
        = pb::FieldCodec.ForMessage(50, global::Loom.ZombieBattleground.Protobuf.HistoryData.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.HistoryData> blocks_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.HistoryData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.HistoryData> Blocks {
      get { return blocks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameReplay);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameReplay other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!actions_.Equals(other.actions_)) return false;
      if(!blocks_.Equals(other.blocks_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= actions_.GetHashCode();
      hash ^= blocks_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      actions_.WriteTo(output, _repeated_actions_codec);
      blocks_.WriteTo(output, _repeated_blocks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += actions_.CalculateSize(_repeated_actions_codec);
      size += blocks_.CalculateSize(_repeated_blocks_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameReplay other) {
      if (other == null) {
        return;
      }
      actions_.Add(other.actions_);
      blocks_.Add(other.blocks_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 42: {
            actions_.AddEntriesFrom(input, _repeated_actions_codec);
            break;
          }
          case 50: {
            blocks_.AddEntriesFrom(input, _repeated_blocks_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Player : pb::IMessage<Player> {
    private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Player> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player(Player other) : this() {
      id_ = other.id_;
      deck_ = other.deck_ != null ? other.deck_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player Clone() {
      return new Player(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deck" field.</summary>
    public const int DeckFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.Deck deck_;
    /// <summary>
    /// TODO Change to card instance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Deck Deck {
      get { return deck_; }
      set {
        deck_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Player);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Player other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Deck, other.Deck)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (deck_ != null) hash ^= Deck.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (deck_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Deck);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (deck_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deck);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Player other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.deck_ != null) {
        if (deck_ == null) {
          deck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
        }
        Deck.MergeFrom(other.Deck);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (deck_ == null) {
              deck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
            }
            input.ReadMessage(deck_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class History : pb::IMessage<History> {
    private static readonly pb::MessageParser<History> _parser = new pb::MessageParser<History>(() => new History());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<History> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public History() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public History(History other) : this() {
      list_ = other.list_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public History Clone() {
      return new History(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.HistoryData> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.HistoryData.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.HistoryData> list_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.HistoryData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.HistoryData> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as History);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(History other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(History other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HistoryData : pb::IMessage<HistoryData> {
    private static readonly pb::MessageParser<HistoryData> _parser = new pb::MessageParser<HistoryData>(() => new HistoryData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HistoryData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryData(HistoryData other) : this() {
      switch (other.DataCase) {
        case DataOneofCase.CreateGame:
          CreateGame = other.CreateGame.Clone();
          break;
        case DataOneofCase.FullInstance:
          FullInstance = other.FullInstance.Clone();
          break;
        case DataOneofCase.ShowInstance:
          ShowInstance = other.ShowInstance.Clone();
          break;
        case DataOneofCase.HideInstance:
          HideInstance = other.HideInstance.Clone();
          break;
        case DataOneofCase.ChangeInstance:
          ChangeInstance = other.ChangeInstance.Clone();
          break;
        case DataOneofCase.EndGame:
          EndGame = other.EndGame.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryData Clone() {
      return new HistoryData(this);
    }

    /// <summary>Field number for the "createGame" field.</summary>
    public const int CreateGameFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.HistoryCreateGame CreateGame {
      get { return dataCase_ == DataOneofCase.CreateGame ? (global::Loom.ZombieBattleground.Protobuf.HistoryCreateGame) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.CreateGame;
      }
    }

    /// <summary>Field number for the "fullInstance" field.</summary>
    public const int FullInstanceFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.HistoryFullInstance FullInstance {
      get { return dataCase_ == DataOneofCase.FullInstance ? (global::Loom.ZombieBattleground.Protobuf.HistoryFullInstance) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.FullInstance;
      }
    }

    /// <summary>Field number for the "showInstance" field.</summary>
    public const int ShowInstanceFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.HistoryInstance ShowInstance {
      get { return dataCase_ == DataOneofCase.ShowInstance ? (global::Loom.ZombieBattleground.Protobuf.HistoryInstance) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.ShowInstance;
      }
    }

    /// <summary>Field number for the "hideInstance" field.</summary>
    public const int HideInstanceFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.HistoryHide HideInstance {
      get { return dataCase_ == DataOneofCase.HideInstance ? (global::Loom.ZombieBattleground.Protobuf.HistoryHide) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.HideInstance;
      }
    }

    /// <summary>Field number for the "changeInstance" field.</summary>
    public const int ChangeInstanceFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.HistoryInstance ChangeInstance {
      get { return dataCase_ == DataOneofCase.ChangeInstance ? (global::Loom.ZombieBattleground.Protobuf.HistoryInstance) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.ChangeInstance;
      }
    }

    /// <summary>Field number for the "endGame" field.</summary>
    public const int EndGameFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.HistoryEndGame EndGame {
      get { return dataCase_ == DataOneofCase.EndGame ? (global::Loom.ZombieBattleground.Protobuf.HistoryEndGame) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.EndGame;
      }
    }

    private object data_;
    /// <summary>Enum of possible cases for the "data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      CreateGame = 1,
      FullInstance = 2,
      ShowInstance = 3,
      HideInstance = 4,
      ChangeInstance = 5,
      EndGame = 6,
    }
    private DataOneofCase dataCase_ = DataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HistoryData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HistoryData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CreateGame, other.CreateGame)) return false;
      if (!object.Equals(FullInstance, other.FullInstance)) return false;
      if (!object.Equals(ShowInstance, other.ShowInstance)) return false;
      if (!object.Equals(HideInstance, other.HideInstance)) return false;
      if (!object.Equals(ChangeInstance, other.ChangeInstance)) return false;
      if (!object.Equals(EndGame, other.EndGame)) return false;
      if (DataCase != other.DataCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dataCase_ == DataOneofCase.CreateGame) hash ^= CreateGame.GetHashCode();
      if (dataCase_ == DataOneofCase.FullInstance) hash ^= FullInstance.GetHashCode();
      if (dataCase_ == DataOneofCase.ShowInstance) hash ^= ShowInstance.GetHashCode();
      if (dataCase_ == DataOneofCase.HideInstance) hash ^= HideInstance.GetHashCode();
      if (dataCase_ == DataOneofCase.ChangeInstance) hash ^= ChangeInstance.GetHashCode();
      if (dataCase_ == DataOneofCase.EndGame) hash ^= EndGame.GetHashCode();
      hash ^= (int) dataCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dataCase_ == DataOneofCase.CreateGame) {
        output.WriteRawTag(10);
        output.WriteMessage(CreateGame);
      }
      if (dataCase_ == DataOneofCase.FullInstance) {
        output.WriteRawTag(18);
        output.WriteMessage(FullInstance);
      }
      if (dataCase_ == DataOneofCase.ShowInstance) {
        output.WriteRawTag(26);
        output.WriteMessage(ShowInstance);
      }
      if (dataCase_ == DataOneofCase.HideInstance) {
        output.WriteRawTag(34);
        output.WriteMessage(HideInstance);
      }
      if (dataCase_ == DataOneofCase.ChangeInstance) {
        output.WriteRawTag(42);
        output.WriteMessage(ChangeInstance);
      }
      if (dataCase_ == DataOneofCase.EndGame) {
        output.WriteRawTag(50);
        output.WriteMessage(EndGame);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dataCase_ == DataOneofCase.CreateGame) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateGame);
      }
      if (dataCase_ == DataOneofCase.FullInstance) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FullInstance);
      }
      if (dataCase_ == DataOneofCase.ShowInstance) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShowInstance);
      }
      if (dataCase_ == DataOneofCase.HideInstance) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HideInstance);
      }
      if (dataCase_ == DataOneofCase.ChangeInstance) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChangeInstance);
      }
      if (dataCase_ == DataOneofCase.EndGame) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndGame);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HistoryData other) {
      if (other == null) {
        return;
      }
      switch (other.DataCase) {
        case DataOneofCase.CreateGame:
          if (CreateGame == null) {
            CreateGame = new global::Loom.ZombieBattleground.Protobuf.HistoryCreateGame();
          }
          CreateGame.MergeFrom(other.CreateGame);
          break;
        case DataOneofCase.FullInstance:
          if (FullInstance == null) {
            FullInstance = new global::Loom.ZombieBattleground.Protobuf.HistoryFullInstance();
          }
          FullInstance.MergeFrom(other.FullInstance);
          break;
        case DataOneofCase.ShowInstance:
          if (ShowInstance == null) {
            ShowInstance = new global::Loom.ZombieBattleground.Protobuf.HistoryInstance();
          }
          ShowInstance.MergeFrom(other.ShowInstance);
          break;
        case DataOneofCase.HideInstance:
          if (HideInstance == null) {
            HideInstance = new global::Loom.ZombieBattleground.Protobuf.HistoryHide();
          }
          HideInstance.MergeFrom(other.HideInstance);
          break;
        case DataOneofCase.ChangeInstance:
          if (ChangeInstance == null) {
            ChangeInstance = new global::Loom.ZombieBattleground.Protobuf.HistoryInstance();
          }
          ChangeInstance.MergeFrom(other.ChangeInstance);
          break;
        case DataOneofCase.EndGame:
          if (EndGame == null) {
            EndGame = new global::Loom.ZombieBattleground.Protobuf.HistoryEndGame();
          }
          EndGame.MergeFrom(other.EndGame);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Loom.ZombieBattleground.Protobuf.HistoryCreateGame subBuilder = new global::Loom.ZombieBattleground.Protobuf.HistoryCreateGame();
            if (dataCase_ == DataOneofCase.CreateGame) {
              subBuilder.MergeFrom(CreateGame);
            }
            input.ReadMessage(subBuilder);
            CreateGame = subBuilder;
            break;
          }
          case 18: {
            global::Loom.ZombieBattleground.Protobuf.HistoryFullInstance subBuilder = new global::Loom.ZombieBattleground.Protobuf.HistoryFullInstance();
            if (dataCase_ == DataOneofCase.FullInstance) {
              subBuilder.MergeFrom(FullInstance);
            }
            input.ReadMessage(subBuilder);
            FullInstance = subBuilder;
            break;
          }
          case 26: {
            global::Loom.ZombieBattleground.Protobuf.HistoryInstance subBuilder = new global::Loom.ZombieBattleground.Protobuf.HistoryInstance();
            if (dataCase_ == DataOneofCase.ShowInstance) {
              subBuilder.MergeFrom(ShowInstance);
            }
            input.ReadMessage(subBuilder);
            ShowInstance = subBuilder;
            break;
          }
          case 34: {
            global::Loom.ZombieBattleground.Protobuf.HistoryHide subBuilder = new global::Loom.ZombieBattleground.Protobuf.HistoryHide();
            if (dataCase_ == DataOneofCase.HideInstance) {
              subBuilder.MergeFrom(HideInstance);
            }
            input.ReadMessage(subBuilder);
            HideInstance = subBuilder;
            break;
          }
          case 42: {
            global::Loom.ZombieBattleground.Protobuf.HistoryInstance subBuilder = new global::Loom.ZombieBattleground.Protobuf.HistoryInstance();
            if (dataCase_ == DataOneofCase.ChangeInstance) {
              subBuilder.MergeFrom(ChangeInstance);
            }
            input.ReadMessage(subBuilder);
            ChangeInstance = subBuilder;
            break;
          }
          case 50: {
            global::Loom.ZombieBattleground.Protobuf.HistoryEndGame subBuilder = new global::Loom.ZombieBattleground.Protobuf.HistoryEndGame();
            if (dataCase_ == DataOneofCase.EndGame) {
              subBuilder.MergeFrom(EndGame);
            }
            input.ReadMessage(subBuilder);
            EndGame = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class HistoryCreateGame : pb::IMessage<HistoryCreateGame> {
    private static readonly pb::MessageParser<HistoryCreateGame> _parser = new pb::MessageParser<HistoryCreateGame>(() => new HistoryCreateGame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HistoryCreateGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryCreateGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryCreateGame(HistoryCreateGame other) : this() {
      gameId_ = other.gameId_;
      players_ = other.players_.Clone();
      randomSeed_ = other.randomSeed_;
      version_ = other.version_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryCreateGame Clone() {
      return new HistoryCreateGame(this);
    }

    /// <summary>Field number for the "gameId" field.</summary>
    public const int GameIdFieldNumber = 1;
    private long gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Player> _repeated_players_codec
        = pb::FieldCodec.ForMessage(18, global::Loom.ZombieBattleground.Protobuf.Player.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Player> players_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Player> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "randomSeed" field.</summary>
    public const int RandomSeedFieldNumber = 3;
    private long randomSeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RandomSeed {
      get { return randomSeed_; }
      set {
        randomSeed_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 4;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HistoryCreateGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HistoryCreateGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameId != other.GameId) return false;
      if(!players_.Equals(other.players_)) return false;
      if (RandomSeed != other.RandomSeed) return false;
      if (Version != other.Version) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameId != 0L) hash ^= GameId.GetHashCode();
      hash ^= players_.GetHashCode();
      if (RandomSeed != 0L) hash ^= RandomSeed.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(GameId);
      }
      players_.WriteTo(output, _repeated_players_codec);
      if (RandomSeed != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(RandomSeed);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GameId);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      if (RandomSeed != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RandomSeed);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HistoryCreateGame other) {
      if (other == null) {
        return;
      }
      if (other.GameId != 0L) {
        GameId = other.GameId;
      }
      players_.Add(other.players_);
      if (other.RandomSeed != 0L) {
        RandomSeed = other.RandomSeed;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GameId = input.ReadInt64();
            break;
          }
          case 18: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 24: {
            RandomSeed = input.ReadInt64();
            break;
          }
          case 34: {
            Version = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HistoryFullInstance : pb::IMessage<HistoryFullInstance> {
    private static readonly pb::MessageParser<HistoryFullInstance> _parser = new pb::MessageParser<HistoryFullInstance>(() => new HistoryFullInstance());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HistoryFullInstance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryFullInstance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryFullInstance(HistoryFullInstance other) : this() {
      instanceId_ = other.instanceId_ != null ? other.instanceId_.Clone() : null;
      damage_ = other.damage_;
      defense_ = other.defense_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryFullInstance Clone() {
      return new HistoryFullInstance(this);
    }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.InstanceId instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.InstanceId InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 2;
    private int damage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "defense" field.</summary>
    public const int DefenseFieldNumber = 3;
    private int defense_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Defense {
      get { return defense_; }
      set {
        defense_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HistoryFullInstance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HistoryFullInstance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(InstanceId, other.InstanceId)) return false;
      if (Damage != other.Damage) return false;
      if (Defense != other.Defense) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (instanceId_ != null) hash ^= InstanceId.GetHashCode();
      if (Damage != 0) hash ^= Damage.GetHashCode();
      if (Defense != 0) hash ^= Defense.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (instanceId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(InstanceId);
      }
      if (Damage != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Damage);
      }
      if (Defense != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Defense);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (instanceId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InstanceId);
      }
      if (Damage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
      }
      if (Defense != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Defense);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HistoryFullInstance other) {
      if (other == null) {
        return;
      }
      if (other.instanceId_ != null) {
        if (instanceId_ == null) {
          instanceId_ = new global::Loom.ZombieBattleground.Protobuf.InstanceId();
        }
        InstanceId.MergeFrom(other.InstanceId);
      }
      if (other.Damage != 0) {
        Damage = other.Damage;
      }
      if (other.Defense != 0) {
        Defense = other.Defense;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (instanceId_ == null) {
              instanceId_ = new global::Loom.ZombieBattleground.Protobuf.InstanceId();
            }
            input.ReadMessage(instanceId_);
            break;
          }
          case 16: {
            Damage = input.ReadInt32();
            break;
          }
          case 24: {
            Defense = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HistoryInstance : pb::IMessage<HistoryInstance> {
    private static readonly pb::MessageParser<HistoryInstance> _parser = new pb::MessageParser<HistoryInstance>(() => new HistoryInstance());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HistoryInstance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryInstance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryInstance(HistoryInstance other) : this() {
      instanceId_ = other.instanceId_ != null ? other.instanceId_.Clone() : null;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryInstance Clone() {
      return new HistoryInstance(this);
    }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.InstanceId instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.InstanceId InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HistoryInstance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HistoryInstance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(InstanceId, other.InstanceId)) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (instanceId_ != null) hash ^= InstanceId.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (instanceId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(InstanceId);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (instanceId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InstanceId);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HistoryInstance other) {
      if (other == null) {
        return;
      }
      if (other.instanceId_ != null) {
        if (instanceId_ == null) {
          instanceId_ = new global::Loom.ZombieBattleground.Protobuf.InstanceId();
        }
        InstanceId.MergeFrom(other.InstanceId);
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (instanceId_ == null) {
              instanceId_ = new global::Loom.ZombieBattleground.Protobuf.InstanceId();
            }
            input.ReadMessage(instanceId_);
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the HistoryInstance message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum change {
        [pbr::OriginalName("Damage")] Damage = 0,
        [pbr::OriginalName("Defense")] Defense = 1,
      }

    }
    #endregion

  }

  public sealed partial class HistoryHide : pb::IMessage<HistoryHide> {
    private static readonly pb::MessageParser<HistoryHide> _parser = new pb::MessageParser<HistoryHide>(() => new HistoryHide());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HistoryHide> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryHide() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryHide(HistoryHide other) : this() {
      instanceId_ = other.instanceId_ != null ? other.instanceId_.Clone() : null;
      zone_ = other.zone_ != null ? other.zone_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryHide Clone() {
      return new HistoryHide(this);
    }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.InstanceId instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.InstanceId InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "zone" field.</summary>
    public const int ZoneFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.Zone zone_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Zone Zone {
      get { return zone_; }
      set {
        zone_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HistoryHide);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HistoryHide other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(InstanceId, other.InstanceId)) return false;
      if (!object.Equals(Zone, other.Zone)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (instanceId_ != null) hash ^= InstanceId.GetHashCode();
      if (zone_ != null) hash ^= Zone.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (instanceId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(InstanceId);
      }
      if (zone_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Zone);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (instanceId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InstanceId);
      }
      if (zone_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Zone);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HistoryHide other) {
      if (other == null) {
        return;
      }
      if (other.instanceId_ != null) {
        if (instanceId_ == null) {
          instanceId_ = new global::Loom.ZombieBattleground.Protobuf.InstanceId();
        }
        InstanceId.MergeFrom(other.InstanceId);
      }
      if (other.zone_ != null) {
        if (zone_ == null) {
          zone_ = new global::Loom.ZombieBattleground.Protobuf.Zone();
        }
        Zone.MergeFrom(other.Zone);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (instanceId_ == null) {
              instanceId_ = new global::Loom.ZombieBattleground.Protobuf.InstanceId();
            }
            input.ReadMessage(instanceId_);
            break;
          }
          case 18: {
            if (zone_ == null) {
              zone_ = new global::Loom.ZombieBattleground.Protobuf.Zone();
            }
            input.ReadMessage(zone_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HistoryEndGame : pb::IMessage<HistoryEndGame> {
    private static readonly pb::MessageParser<HistoryEndGame> _parser = new pb::MessageParser<HistoryEndGame>(() => new HistoryEndGame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HistoryEndGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryEndGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryEndGame(HistoryEndGame other) : this() {
      matchId_ = other.matchId_;
      userId_ = other.userId_;
      winnerId_ = other.winnerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryEndGame Clone() {
      return new HistoryEndGame(this);
    }

    /// <summary>Field number for the "matchId" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private long matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MatchId {
      get { return matchId_; }
      set {
        matchId_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "winnerId" field.</summary>
    public const int WinnerIdFieldNumber = 3;
    private string winnerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WinnerId {
      get { return winnerId_; }
      set {
        winnerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HistoryEndGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HistoryEndGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (UserId != other.UserId) return false;
      if (WinnerId != other.WinnerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId != 0L) hash ^= MatchId.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (WinnerId.Length != 0) hash ^= WinnerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MatchId);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserId);
      }
      if (WinnerId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WinnerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchId);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (WinnerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WinnerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HistoryEndGame other) {
      if (other == null) {
        return;
      }
      if (other.MatchId != 0L) {
        MatchId = other.MatchId;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.WinnerId.Length != 0) {
        WinnerId = other.WinnerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadInt64();
            break;
          }
          case 18: {
            UserId = input.ReadString();
            break;
          }
          case 26: {
            WinnerId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DefaultDecksDataContainer : pb::IMessage<DefaultDecksDataContainer> {
    private static readonly pb::MessageParser<DefaultDecksDataContainer> _parser = new pb::MessageParser<DefaultDecksDataContainer>(() => new DefaultDecksDataContainer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DefaultDecksDataContainer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[90]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefaultDecksDataContainer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefaultDecksDataContainer(DefaultDecksDataContainer other) : this() {
      defaultDecks_ = other.defaultDecks_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefaultDecksDataContainer Clone() {
      return new DefaultDecksDataContainer(this);
    }

    /// <summary>Field number for the "defaultDecks" field.</summary>
    public const int DefaultDecksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Deck> _repeated_defaultDecks_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.Deck.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck> defaultDecks_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck> DefaultDecks {
      get { return defaultDecks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DefaultDecksDataContainer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DefaultDecksDataContainer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!defaultDecks_.Equals(other.defaultDecks_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= defaultDecks_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      defaultDecks_.WriteTo(output, _repeated_defaultDecks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += defaultDecks_.CalculateSize(_repeated_defaultDecks_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DefaultDecksDataContainer other) {
      if (other == null) {
        return;
      }
      defaultDecks_.Add(other.defaultDecks_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            defaultDecks_.AddEntriesFrom(input, _repeated_defaultDecks_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DefaultCollectionDataContainer : pb::IMessage<DefaultCollectionDataContainer> {
    private static readonly pb::MessageParser<DefaultCollectionDataContainer> _parser = new pb::MessageParser<DefaultCollectionDataContainer>(() => new DefaultCollectionDataContainer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DefaultCollectionDataContainer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[91]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefaultCollectionDataContainer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefaultCollectionDataContainer(DefaultCollectionDataContainer other) : this() {
      defaultCollection_ = other.defaultCollection_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefaultCollectionDataContainer Clone() {
      return new DefaultCollectionDataContainer(this);
    }

    /// <summary>Field number for the "defaultCollection" field.</summary>
    public const int DefaultCollectionFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardCollectionCard> _repeated_defaultCollection_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.CardCollectionCard.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollectionCard> defaultCollection_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollectionCard>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollectionCard> DefaultCollection {
      get { return defaultCollection_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DefaultCollectionDataContainer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DefaultCollectionDataContainer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!defaultCollection_.Equals(other.defaultCollection_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= defaultCollection_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      defaultCollection_.WriteTo(output, _repeated_defaultCollection_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += defaultCollection_.CalculateSize(_repeated_defaultCollection_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DefaultCollectionDataContainer other) {
      if (other == null) {
        return;
      }
      defaultCollection_.Add(other.defaultCollection_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            defaultCollection_.AddEntriesFrom(input, _repeated_defaultCollection_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardLibraryDataContainer : pb::IMessage<CardLibraryDataContainer> {
    private static readonly pb::MessageParser<CardLibraryDataContainer> _parser = new pb::MessageParser<CardLibraryDataContainer>(() => new CardLibraryDataContainer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardLibraryDataContainer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[92]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardLibraryDataContainer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardLibraryDataContainer(CardLibraryDataContainer other) : this() {
      cards_ = other.cards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardLibraryDataContainer Clone() {
      return new CardLibraryDataContainer(this);
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Card> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.Card.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card> cards_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardLibraryDataContainer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardLibraryDataContainer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cards_.Equals(other.cards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cards_.WriteTo(output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardLibraryDataContainer other) {
      if (other == null) {
        return;
      }
      cards_.Add(other.cards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class OverlordPrototypesDataContainer : pb::IMessage<OverlordPrototypesDataContainer> {
    private static readonly pb::MessageParser<OverlordPrototypesDataContainer> _parser = new pb::MessageParser<OverlordPrototypesDataContainer>(() => new OverlordPrototypesDataContainer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OverlordPrototypesDataContainer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[93]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordPrototypesDataContainer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordPrototypesDataContainer(OverlordPrototypesDataContainer other) : this() {
      overlords_ = other.overlords_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordPrototypesDataContainer Clone() {
      return new OverlordPrototypesDataContainer(this);
    }

    /// <summary>Field number for the "overlords" field.</summary>
    public const int OverlordsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.OverlordPrototype> _repeated_overlords_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.OverlordPrototype.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.OverlordPrototype> overlords_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.OverlordPrototype>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.OverlordPrototype> Overlords {
      get { return overlords_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OverlordPrototypesDataContainer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OverlordPrototypesDataContainer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!overlords_.Equals(other.overlords_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= overlords_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      overlords_.WriteTo(output, _repeated_overlords_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += overlords_.CalculateSize(_repeated_overlords_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OverlordPrototypesDataContainer other) {
      if (other == null) {
        return;
      }
      overlords_.Add(other.overlords_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            overlords_.AddEntriesFrom(input, _repeated_overlords_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIDecksDataContainer : pb::IMessage<AIDecksDataContainer> {
    private static readonly pb::MessageParser<AIDecksDataContainer> _parser = new pb::MessageParser<AIDecksDataContainer>(() => new AIDecksDataContainer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIDecksDataContainer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[94]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIDecksDataContainer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIDecksDataContainer(AIDecksDataContainer other) : this() {
      aiDecks_ = other.aiDecks_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIDecksDataContainer Clone() {
      return new AIDecksDataContainer(this);
    }

    /// <summary>Field number for the "aiDecks" field.</summary>
    public const int AiDecksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.AIDeck> _repeated_aiDecks_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.AIDeck.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AIDeck> aiDecks_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AIDeck>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AIDeck> AiDecks {
      get { return aiDecks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIDecksDataContainer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIDecksDataContainer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!aiDecks_.Equals(other.aiDecks_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= aiDecks_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      aiDecks_.WriteTo(output, _repeated_aiDecks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += aiDecks_.CalculateSize(_repeated_aiDecks_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIDecksDataContainer other) {
      if (other == null) {
        return;
      }
      aiDecks_.Add(other.aiDecks_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            aiDecks_.AddEntriesFrom(input, _repeated_aiDecks_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class OverlordLevelingDataContainer : pb::IMessage<OverlordLevelingDataContainer> {
    private static readonly pb::MessageParser<OverlordLevelingDataContainer> _parser = new pb::MessageParser<OverlordLevelingDataContainer>(() => new OverlordLevelingDataContainer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OverlordLevelingDataContainer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[95]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordLevelingDataContainer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordLevelingDataContainer(OverlordLevelingDataContainer other) : this() {
      overlordLeveling_ = other.overlordLeveling_ != null ? other.overlordLeveling_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordLevelingDataContainer Clone() {
      return new OverlordLevelingDataContainer(this);
    }

    /// <summary>Field number for the "overlordLeveling" field.</summary>
    public const int OverlordLevelingFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.OverlordLevelingData overlordLeveling_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.OverlordLevelingData OverlordLeveling {
      get { return overlordLeveling_; }
      set {
        overlordLeveling_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OverlordLevelingDataContainer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OverlordLevelingDataContainer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(OverlordLeveling, other.OverlordLeveling)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (overlordLeveling_ != null) hash ^= OverlordLeveling.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (overlordLeveling_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(OverlordLeveling);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (overlordLeveling_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OverlordLeveling);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OverlordLevelingDataContainer other) {
      if (other == null) {
        return;
      }
      if (other.overlordLeveling_ != null) {
        if (overlordLeveling_ == null) {
          overlordLeveling_ = new global::Loom.ZombieBattleground.Protobuf.OverlordLevelingData();
        }
        OverlordLeveling.MergeFrom(other.OverlordLeveling);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (overlordLeveling_ == null) {
              overlordLeveling_ = new global::Loom.ZombieBattleground.Protobuf.OverlordLevelingData();
            }
            input.ReadMessage(overlordLeveling_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataWipeConfiguration : pb::IMessage<DataWipeConfiguration> {
    private static readonly pb::MessageParser<DataWipeConfiguration> _parser = new pb::MessageParser<DataWipeConfiguration>(() => new DataWipeConfiguration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataWipeConfiguration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[96]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataWipeConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataWipeConfiguration(DataWipeConfiguration other) : this() {
      version_ = other.version_;
      wipeDecks_ = other.wipeDecks_;
      wipeOverlordUserInstances_ = other.wipeOverlordUserInstances_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataWipeConfiguration Clone() {
      return new DataWipeConfiguration(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "wipeDecks" field.</summary>
    public const int WipeDecksFieldNumber = 2;
    private bool wipeDecks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WipeDecks {
      get { return wipeDecks_; }
      set {
        wipeDecks_ = value;
      }
    }

    /// <summary>Field number for the "wipeOverlordUserInstances" field.</summary>
    public const int WipeOverlordUserInstancesFieldNumber = 3;
    private bool wipeOverlordUserInstances_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WipeOverlordUserInstances {
      get { return wipeOverlordUserInstances_; }
      set {
        wipeOverlordUserInstances_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataWipeConfiguration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataWipeConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (WipeDecks != other.WipeDecks) return false;
      if (WipeOverlordUserInstances != other.WipeOverlordUserInstances) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (WipeDecks != false) hash ^= WipeDecks.GetHashCode();
      if (WipeOverlordUserInstances != false) hash ^= WipeOverlordUserInstances.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      if (WipeDecks != false) {
        output.WriteRawTag(16);
        output.WriteBool(WipeDecks);
      }
      if (WipeOverlordUserInstances != false) {
        output.WriteRawTag(24);
        output.WriteBool(WipeOverlordUserInstances);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (WipeDecks != false) {
        size += 1 + 1;
      }
      if (WipeOverlordUserInstances != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataWipeConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.WipeDecks != false) {
        WipeDecks = other.WipeDecks;
      }
      if (other.WipeOverlordUserInstances != false) {
        WipeOverlordUserInstances = other.WipeOverlordUserInstances;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
          case 16: {
            WipeDecks = input.ReadBool();
            break;
          }
          case 24: {
            WipeOverlordUserInstances = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataWipeConfigurationList : pb::IMessage<DataWipeConfigurationList> {
    private static readonly pb::MessageParser<DataWipeConfigurationList> _parser = new pb::MessageParser<DataWipeConfigurationList>(() => new DataWipeConfigurationList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataWipeConfigurationList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[97]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataWipeConfigurationList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataWipeConfigurationList(DataWipeConfigurationList other) : this() {
      configurations_ = other.configurations_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataWipeConfigurationList Clone() {
      return new DataWipeConfigurationList(this);
    }

    /// <summary>Field number for the "configurations" field.</summary>
    public const int ConfigurationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.DataWipeConfiguration> _repeated_configurations_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.DataWipeConfiguration.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.DataWipeConfiguration> configurations_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.DataWipeConfiguration>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.DataWipeConfiguration> Configurations {
      get { return configurations_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataWipeConfigurationList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataWipeConfigurationList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!configurations_.Equals(other.configurations_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= configurations_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      configurations_.WriteTo(output, _repeated_configurations_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += configurations_.CalculateSize(_repeated_configurations_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataWipeConfigurationList other) {
      if (other == null) {
        return;
      }
      configurations_.Add(other.configurations_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            configurations_.AddEntriesFrom(input, _repeated_configurations_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataWipeConfigurationContainer : pb::IMessage<DataWipeConfigurationContainer> {
    private static readonly pb::MessageParser<DataWipeConfigurationContainer> _parser = new pb::MessageParser<DataWipeConfigurationContainer>(() => new DataWipeConfigurationContainer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataWipeConfigurationContainer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[98]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataWipeConfigurationContainer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataWipeConfigurationContainer(DataWipeConfigurationContainer other) : this() {
      dataWipeConfiguration_ = other.dataWipeConfiguration_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataWipeConfigurationContainer Clone() {
      return new DataWipeConfigurationContainer(this);
    }

    /// <summary>Field number for the "dataWipeConfiguration" field.</summary>
    public const int DataWipeConfigurationFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.DataWipeConfiguration> _repeated_dataWipeConfiguration_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.DataWipeConfiguration.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.DataWipeConfiguration> dataWipeConfiguration_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.DataWipeConfiguration>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.DataWipeConfiguration> DataWipeConfiguration {
      get { return dataWipeConfiguration_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataWipeConfigurationContainer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataWipeConfigurationContainer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dataWipeConfiguration_.Equals(other.dataWipeConfiguration_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= dataWipeConfiguration_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      dataWipeConfiguration_.WriteTo(output, _repeated_dataWipeConfiguration_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dataWipeConfiguration_.CalculateSize(_repeated_dataWipeConfiguration_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataWipeConfigurationContainer other) {
      if (other == null) {
        return;
      }
      dataWipeConfiguration_.Add(other.dataWipeConfiguration_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dataWipeConfiguration_.AddEntriesFrom(input, _repeated_dataWipeConfiguration_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserPersistentData : pb::IMessage<UserPersistentData> {
    private static readonly pb::MessageParser<UserPersistentData> _parser = new pb::MessageParser<UserPersistentData>(() => new UserPersistentData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserPersistentData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[99]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserPersistentData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserPersistentData(UserPersistentData other) : this() {
      address_ = other.address_ != null ? other.address_.Clone() : null;
      executedDataWipesVersions_ = other.executedDataWipesVersions_.Clone();
      lastFullCardCollectionSyncPlasmachainBlockHeight_ = other.lastFullCardCollectionSyncPlasmachainBlockHeight_;
      lastAutoCardCollectionSyncPlasmachainBlockHeight_ = other.lastAutoCardCollectionSyncPlasmachainBlockHeight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserPersistentData Clone() {
      return new UserPersistentData(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private global::Loom.Client.Protobuf.Address address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.Client.Protobuf.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "executedDataWipesVersions" field.</summary>
    public const int ExecutedDataWipesVersionsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_executedDataWipesVersions_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> executedDataWipesVersions_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ExecutedDataWipesVersions {
      get { return executedDataWipesVersions_; }
    }

    /// <summary>Field number for the "lastFullCardCollectionSyncPlasmachainBlockHeight" field.</summary>
    public const int LastFullCardCollectionSyncPlasmachainBlockHeightFieldNumber = 3;
    private ulong lastFullCardCollectionSyncPlasmachainBlockHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LastFullCardCollectionSyncPlasmachainBlockHeight {
      get { return lastFullCardCollectionSyncPlasmachainBlockHeight_; }
      set {
        lastFullCardCollectionSyncPlasmachainBlockHeight_ = value;
      }
    }

    /// <summary>Field number for the "lastAutoCardCollectionSyncPlasmachainBlockHeight" field.</summary>
    public const int LastAutoCardCollectionSyncPlasmachainBlockHeightFieldNumber = 4;
    private ulong lastAutoCardCollectionSyncPlasmachainBlockHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LastAutoCardCollectionSyncPlasmachainBlockHeight {
      get { return lastAutoCardCollectionSyncPlasmachainBlockHeight_; }
      set {
        lastAutoCardCollectionSyncPlasmachainBlockHeight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserPersistentData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserPersistentData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Address, other.Address)) return false;
      if(!executedDataWipesVersions_.Equals(other.executedDataWipesVersions_)) return false;
      if (LastFullCardCollectionSyncPlasmachainBlockHeight != other.LastFullCardCollectionSyncPlasmachainBlockHeight) return false;
      if (LastAutoCardCollectionSyncPlasmachainBlockHeight != other.LastAutoCardCollectionSyncPlasmachainBlockHeight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (address_ != null) hash ^= Address.GetHashCode();
      hash ^= executedDataWipesVersions_.GetHashCode();
      if (LastFullCardCollectionSyncPlasmachainBlockHeight != 0UL) hash ^= LastFullCardCollectionSyncPlasmachainBlockHeight.GetHashCode();
      if (LastAutoCardCollectionSyncPlasmachainBlockHeight != 0UL) hash ^= LastAutoCardCollectionSyncPlasmachainBlockHeight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (address_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Address);
      }
      executedDataWipesVersions_.WriteTo(output, _repeated_executedDataWipesVersions_codec);
      if (LastFullCardCollectionSyncPlasmachainBlockHeight != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(LastFullCardCollectionSyncPlasmachainBlockHeight);
      }
      if (LastAutoCardCollectionSyncPlasmachainBlockHeight != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(LastAutoCardCollectionSyncPlasmachainBlockHeight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      size += executedDataWipesVersions_.CalculateSize(_repeated_executedDataWipesVersions_codec);
      if (LastFullCardCollectionSyncPlasmachainBlockHeight != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LastFullCardCollectionSyncPlasmachainBlockHeight);
      }
      if (LastAutoCardCollectionSyncPlasmachainBlockHeight != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LastAutoCardCollectionSyncPlasmachainBlockHeight);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserPersistentData other) {
      if (other == null) {
        return;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          address_ = new global::Loom.Client.Protobuf.Address();
        }
        Address.MergeFrom(other.Address);
      }
      executedDataWipesVersions_.Add(other.executedDataWipesVersions_);
      if (other.LastFullCardCollectionSyncPlasmachainBlockHeight != 0UL) {
        LastFullCardCollectionSyncPlasmachainBlockHeight = other.LastFullCardCollectionSyncPlasmachainBlockHeight;
      }
      if (other.LastAutoCardCollectionSyncPlasmachainBlockHeight != 0UL) {
        LastAutoCardCollectionSyncPlasmachainBlockHeight = other.LastAutoCardCollectionSyncPlasmachainBlockHeight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (address_ == null) {
              address_ = new global::Loom.Client.Protobuf.Address();
            }
            input.ReadMessage(address_);
            break;
          }
          case 18: {
            executedDataWipesVersions_.AddEntriesFrom(input, _repeated_executedDataWipesVersions_codec);
            break;
          }
          case 24: {
            LastFullCardCollectionSyncPlasmachainBlockHeight = input.ReadUInt64();
            break;
          }
          case 32: {
            LastAutoCardCollectionSyncPlasmachainBlockHeight = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotificationEndMatch : pb::IMessage<NotificationEndMatch> {
    private static readonly pb::MessageParser<NotificationEndMatch> _parser = new pb::MessageParser<NotificationEndMatch>(() => new NotificationEndMatch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotificationEndMatch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[100]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotificationEndMatch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotificationEndMatch(NotificationEndMatch other) : this() {
      overlordId_ = other.overlordId_;
      oldLevel_ = other.oldLevel_;
      oldExperience_ = other.oldExperience_;
      newLevel_ = other.newLevel_;
      newExperience_ = other.newExperience_;
      rewards_ = other.rewards_.Clone();
      isWin_ = other.isWin_;
      deckId_ = other.deckId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotificationEndMatch Clone() {
      return new NotificationEndMatch(this);
    }

    /// <summary>Field number for the "overlordId" field.</summary>
    public const int OverlordIdFieldNumber = 1;
    private long overlordId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OverlordId {
      get { return overlordId_; }
      set {
        overlordId_ = value;
      }
    }

    /// <summary>Field number for the "oldLevel" field.</summary>
    public const int OldLevelFieldNumber = 2;
    private int oldLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OldLevel {
      get { return oldLevel_; }
      set {
        oldLevel_ = value;
      }
    }

    /// <summary>Field number for the "oldExperience" field.</summary>
    public const int OldExperienceFieldNumber = 3;
    private long oldExperience_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OldExperience {
      get { return oldExperience_; }
      set {
        oldExperience_ = value;
      }
    }

    /// <summary>Field number for the "newLevel" field.</summary>
    public const int NewLevelFieldNumber = 4;
    private int newLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewLevel {
      get { return newLevel_; }
      set {
        newLevel_ = value;
      }
    }

    /// <summary>Field number for the "newExperience" field.</summary>
    public const int NewExperienceFieldNumber = 5;
    private long newExperience_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NewExperience {
      get { return newExperience_; }
      set {
        newExperience_ = value;
      }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.LevelReward> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(50, global::Loom.ZombieBattleground.Protobuf.LevelReward.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.LevelReward> rewards_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.LevelReward>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.LevelReward> Rewards {
      get { return rewards_; }
    }

    /// <summary>Field number for the "isWin" field.</summary>
    public const int IsWinFieldNumber = 7;
    private bool isWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWin {
      get { return isWin_; }
      set {
        isWin_ = value;
      }
    }

    /// <summary>Field number for the "deckId" field.</summary>
    public const int DeckIdFieldNumber = 8;
    private long deckId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DeckId {
      get { return deckId_; }
      set {
        deckId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotificationEndMatch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotificationEndMatch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OverlordId != other.OverlordId) return false;
      if (OldLevel != other.OldLevel) return false;
      if (OldExperience != other.OldExperience) return false;
      if (NewLevel != other.NewLevel) return false;
      if (NewExperience != other.NewExperience) return false;
      if(!rewards_.Equals(other.rewards_)) return false;
      if (IsWin != other.IsWin) return false;
      if (DeckId != other.DeckId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OverlordId != 0L) hash ^= OverlordId.GetHashCode();
      if (OldLevel != 0) hash ^= OldLevel.GetHashCode();
      if (OldExperience != 0L) hash ^= OldExperience.GetHashCode();
      if (NewLevel != 0) hash ^= NewLevel.GetHashCode();
      if (NewExperience != 0L) hash ^= NewExperience.GetHashCode();
      hash ^= rewards_.GetHashCode();
      if (IsWin != false) hash ^= IsWin.GetHashCode();
      if (DeckId != 0L) hash ^= DeckId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OverlordId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(OverlordId);
      }
      if (OldLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OldLevel);
      }
      if (OldExperience != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(OldExperience);
      }
      if (NewLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NewLevel);
      }
      if (NewExperience != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(NewExperience);
      }
      rewards_.WriteTo(output, _repeated_rewards_codec);
      if (IsWin != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsWin);
      }
      if (DeckId != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(DeckId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OverlordId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OverlordId);
      }
      if (OldLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OldLevel);
      }
      if (OldExperience != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OldExperience);
      }
      if (NewLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewLevel);
      }
      if (NewExperience != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NewExperience);
      }
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      if (IsWin != false) {
        size += 1 + 1;
      }
      if (DeckId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DeckId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotificationEndMatch other) {
      if (other == null) {
        return;
      }
      if (other.OverlordId != 0L) {
        OverlordId = other.OverlordId;
      }
      if (other.OldLevel != 0) {
        OldLevel = other.OldLevel;
      }
      if (other.OldExperience != 0L) {
        OldExperience = other.OldExperience;
      }
      if (other.NewLevel != 0) {
        NewLevel = other.NewLevel;
      }
      if (other.NewExperience != 0L) {
        NewExperience = other.NewExperience;
      }
      rewards_.Add(other.rewards_);
      if (other.IsWin != false) {
        IsWin = other.IsWin;
      }
      if (other.DeckId != 0L) {
        DeckId = other.DeckId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OverlordId = input.ReadInt64();
            break;
          }
          case 16: {
            OldLevel = input.ReadInt32();
            break;
          }
          case 24: {
            OldExperience = input.ReadInt64();
            break;
          }
          case 32: {
            NewLevel = input.ReadInt32();
            break;
          }
          case 40: {
            NewExperience = input.ReadInt64();
            break;
          }
          case 50: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
          case 56: {
            IsWin = input.ReadBool();
            break;
          }
          case 64: {
            DeckId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotificationType : pb::IMessage<NotificationType> {
    private static readonly pb::MessageParser<NotificationType> _parser = new pb::MessageParser<NotificationType>(() => new NotificationType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotificationType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[101]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotificationType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotificationType(NotificationType other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotificationType Clone() {
      return new NotificationType(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotificationType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotificationType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotificationType other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NotificationType message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Enum {
        [pbr::OriginalName("EndMatch")] EndMatch = 0,
      }

    }
    #endregion

  }

  public sealed partial class Notification : pb::IMessage<Notification> {
    private static readonly pb::MessageParser<Notification> _parser = new pb::MessageParser<Notification>(() => new Notification());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[102]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notification() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notification(Notification other) : this() {
      id_ = other.id_;
      createdAt_ = other.createdAt_;
      seen_ = other.seen_;
      type_ = other.type_;
      switch (other.NotificationCase) {
        case NotificationOneofCase.EndMatch:
          EndMatch = other.EndMatch.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notification Clone() {
      return new Notification(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "createdAt" field.</summary>
    public const int CreatedAtFieldNumber = 2;
    private long createdAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "seen" field.</summary>
    public const int SeenFieldNumber = 3;
    private bool seen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Seen {
      get { return seen_; }
      set {
        seen_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::Loom.ZombieBattleground.Protobuf.NotificationType.Types.Enum type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.NotificationType.Types.Enum Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "endMatch" field.</summary>
    public const int EndMatchFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.NotificationEndMatch EndMatch {
      get { return notificationCase_ == NotificationOneofCase.EndMatch ? (global::Loom.ZombieBattleground.Protobuf.NotificationEndMatch) notification_ : null; }
      set {
        notification_ = value;
        notificationCase_ = value == null ? NotificationOneofCase.None : NotificationOneofCase.EndMatch;
      }
    }

    private object notification_;
    /// <summary>Enum of possible cases for the "Notification" oneof.</summary>
    public enum NotificationOneofCase {
      None = 0,
      EndMatch = 10,
    }
    private NotificationOneofCase notificationCase_ = NotificationOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotificationOneofCase NotificationCase {
      get { return notificationCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNotification() {
      notificationCase_ = NotificationOneofCase.None;
      notification_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notification other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (CreatedAt != other.CreatedAt) return false;
      if (Seen != other.Seen) return false;
      if (Type != other.Type) return false;
      if (!object.Equals(EndMatch, other.EndMatch)) return false;
      if (NotificationCase != other.NotificationCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (CreatedAt != 0L) hash ^= CreatedAt.GetHashCode();
      if (Seen != false) hash ^= Seen.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (notificationCase_ == NotificationOneofCase.EndMatch) hash ^= EndMatch.GetHashCode();
      hash ^= (int) notificationCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (CreatedAt != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CreatedAt);
      }
      if (Seen != false) {
        output.WriteRawTag(24);
        output.WriteBool(Seen);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (notificationCase_ == NotificationOneofCase.EndMatch) {
        output.WriteRawTag(82);
        output.WriteMessage(EndMatch);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (CreatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAt);
      }
      if (Seen != false) {
        size += 1 + 1;
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (notificationCase_ == NotificationOneofCase.EndMatch) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndMatch);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notification other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.CreatedAt != 0L) {
        CreatedAt = other.CreatedAt;
      }
      if (other.Seen != false) {
        Seen = other.Seen;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      switch (other.NotificationCase) {
        case NotificationOneofCase.EndMatch:
          if (EndMatch == null) {
            EndMatch = new global::Loom.ZombieBattleground.Protobuf.NotificationEndMatch();
          }
          EndMatch.MergeFrom(other.EndMatch);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            CreatedAt = input.ReadInt64();
            break;
          }
          case 24: {
            Seen = input.ReadBool();
            break;
          }
          case 32: {
            type_ = (global::Loom.ZombieBattleground.Protobuf.NotificationType.Types.Enum) input.ReadEnum();
            break;
          }
          case 82: {
            global::Loom.ZombieBattleground.Protobuf.NotificationEndMatch subBuilder = new global::Loom.ZombieBattleground.Protobuf.NotificationEndMatch();
            if (notificationCase_ == NotificationOneofCase.EndMatch) {
              subBuilder.MergeFrom(EndMatch);
            }
            input.ReadMessage(subBuilder);
            EndMatch = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotificationList : pb::IMessage<NotificationList> {
    private static readonly pb::MessageParser<NotificationList> _parser = new pb::MessageParser<NotificationList>(() => new NotificationList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotificationList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[103]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotificationList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotificationList(NotificationList other) : this() {
      notifications_ = other.notifications_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotificationList Clone() {
      return new NotificationList(this);
    }

    /// <summary>Field number for the "notifications" field.</summary>
    public const int NotificationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Notification> _repeated_notifications_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.Notification.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Notification> notifications_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Notification>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Notification> Notifications {
      get { return notifications_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotificationList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotificationList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!notifications_.Equals(other.notifications_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= notifications_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      notifications_.WriteTo(output, _repeated_notifications_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += notifications_.CalculateSize(_repeated_notifications_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotificationList other) {
      if (other == null) {
        return;
      }
      notifications_.Add(other.notifications_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            notifications_.AddEntriesFrom(input, _repeated_notifications_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserIdContainer : pb::IMessage<UserIdContainer> {
    private static readonly pb::MessageParser<UserIdContainer> _parser = new pb::MessageParser<UserIdContainer>(() => new UserIdContainer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserIdContainer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[104]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserIdContainer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserIdContainer(UserIdContainer other) : this() {
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserIdContainer Clone() {
      return new UserIdContainer(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserIdContainer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserIdContainer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserIdContainer other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MintingTransactionReceipt : pb::IMessage<MintingTransactionReceipt> {
    private static readonly pb::MessageParser<MintingTransactionReceipt> _parser = new pb::MessageParser<MintingTransactionReceipt>(() => new MintingTransactionReceipt());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MintingTransactionReceipt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[105]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MintingTransactionReceipt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MintingTransactionReceipt(MintingTransactionReceipt other) : this() {
      verifyHash_ = other.verifyHash_ != null ? other.verifyHash_.Clone() : null;
      userId_ = other.userId_ != null ? other.userId_.Clone() : null;
      booster_ = other.booster_;
      super_ = other.super_;
      air_ = other.air_;
      earth_ = other.earth_;
      fire_ = other.fire_;
      life_ = other.life_;
      toxic_ = other.toxic_;
      water_ = other.water_;
      small_ = other.small_;
      minion_ = other.minion_;
      binance_ = other.binance_;
      txId_ = other.txId_ != null ? other.txId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MintingTransactionReceipt Clone() {
      return new MintingTransactionReceipt(this);
    }

    /// <summary>Field number for the "verifyHash" field.</summary>
    public const int VerifyHashFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.MintingTransactionReceipt.Types.VerifySignResult verifyHash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.MintingTransactionReceipt.Types.VerifySignResult VerifyHash {
      get { return verifyHash_; }
      set {
        verifyHash_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private global::Loom.Client.Protobuf.BigUInt userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.Client.Protobuf.BigUInt UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "booster" field.</summary>
    public const int BoosterFieldNumber = 3;
    private ulong booster_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Booster {
      get { return booster_; }
      set {
        booster_ = value;
      }
    }

    /// <summary>Field number for the "super" field.</summary>
    public const int SuperFieldNumber = 10;
    private ulong super_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Super {
      get { return super_; }
      set {
        super_ = value;
      }
    }

    /// <summary>Field number for the "air" field.</summary>
    public const int AirFieldNumber = 4;
    private ulong air_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Air {
      get { return air_; }
      set {
        air_ = value;
      }
    }

    /// <summary>Field number for the "earth" field.</summary>
    public const int EarthFieldNumber = 5;
    private ulong earth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Earth {
      get { return earth_; }
      set {
        earth_ = value;
      }
    }

    /// <summary>Field number for the "fire" field.</summary>
    public const int FireFieldNumber = 6;
    private ulong fire_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Fire {
      get { return fire_; }
      set {
        fire_ = value;
      }
    }

    /// <summary>Field number for the "life" field.</summary>
    public const int LifeFieldNumber = 7;
    private ulong life_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Life {
      get { return life_; }
      set {
        life_ = value;
      }
    }

    /// <summary>Field number for the "toxic" field.</summary>
    public const int ToxicFieldNumber = 8;
    private ulong toxic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Toxic {
      get { return toxic_; }
      set {
        toxic_ = value;
      }
    }

    /// <summary>Field number for the "water" field.</summary>
    public const int WaterFieldNumber = 9;
    private ulong water_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Water {
      get { return water_; }
      set {
        water_ = value;
      }
    }

    /// <summary>Field number for the "small" field.</summary>
    public const int SmallFieldNumber = 11;
    private ulong small_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Small {
      get { return small_; }
      set {
        small_ = value;
      }
    }

    /// <summary>Field number for the "minion" field.</summary>
    public const int MinionFieldNumber = 12;
    private ulong minion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Minion {
      get { return minion_; }
      set {
        minion_ = value;
      }
    }

    /// <summary>Field number for the "binance" field.</summary>
    public const int BinanceFieldNumber = 13;
    private ulong binance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Binance {
      get { return binance_; }
      set {
        binance_ = value;
      }
    }

    /// <summary>Field number for the "txId" field.</summary>
    public const int TxIdFieldNumber = 14;
    private global::Loom.Client.Protobuf.BigUInt txId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.Client.Protobuf.BigUInt TxId {
      get { return txId_; }
      set {
        txId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MintingTransactionReceipt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MintingTransactionReceipt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(VerifyHash, other.VerifyHash)) return false;
      if (!object.Equals(UserId, other.UserId)) return false;
      if (Booster != other.Booster) return false;
      if (Super != other.Super) return false;
      if (Air != other.Air) return false;
      if (Earth != other.Earth) return false;
      if (Fire != other.Fire) return false;
      if (Life != other.Life) return false;
      if (Toxic != other.Toxic) return false;
      if (Water != other.Water) return false;
      if (Small != other.Small) return false;
      if (Minion != other.Minion) return false;
      if (Binance != other.Binance) return false;
      if (!object.Equals(TxId, other.TxId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (verifyHash_ != null) hash ^= VerifyHash.GetHashCode();
      if (userId_ != null) hash ^= UserId.GetHashCode();
      if (Booster != 0UL) hash ^= Booster.GetHashCode();
      if (Super != 0UL) hash ^= Super.GetHashCode();
      if (Air != 0UL) hash ^= Air.GetHashCode();
      if (Earth != 0UL) hash ^= Earth.GetHashCode();
      if (Fire != 0UL) hash ^= Fire.GetHashCode();
      if (Life != 0UL) hash ^= Life.GetHashCode();
      if (Toxic != 0UL) hash ^= Toxic.GetHashCode();
      if (Water != 0UL) hash ^= Water.GetHashCode();
      if (Small != 0UL) hash ^= Small.GetHashCode();
      if (Minion != 0UL) hash ^= Minion.GetHashCode();
      if (Binance != 0UL) hash ^= Binance.GetHashCode();
      if (txId_ != null) hash ^= TxId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (verifyHash_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(VerifyHash);
      }
      if (userId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserId);
      }
      if (Booster != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Booster);
      }
      if (Air != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Air);
      }
      if (Earth != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Earth);
      }
      if (Fire != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(Fire);
      }
      if (Life != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(Life);
      }
      if (Toxic != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(Toxic);
      }
      if (Water != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(Water);
      }
      if (Super != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(Super);
      }
      if (Small != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(Small);
      }
      if (Minion != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(Minion);
      }
      if (Binance != 0UL) {
        output.WriteRawTag(104);
        output.WriteUInt64(Binance);
      }
      if (txId_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(TxId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (verifyHash_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VerifyHash);
      }
      if (userId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserId);
      }
      if (Booster != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Booster);
      }
      if (Super != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Super);
      }
      if (Air != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Air);
      }
      if (Earth != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Earth);
      }
      if (Fire != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Fire);
      }
      if (Life != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Life);
      }
      if (Toxic != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Toxic);
      }
      if (Water != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Water);
      }
      if (Small != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Small);
      }
      if (Minion != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Minion);
      }
      if (Binance != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Binance);
      }
      if (txId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TxId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MintingTransactionReceipt other) {
      if (other == null) {
        return;
      }
      if (other.verifyHash_ != null) {
        if (verifyHash_ == null) {
          verifyHash_ = new global::Loom.ZombieBattleground.Protobuf.MintingTransactionReceipt.Types.VerifySignResult();
        }
        VerifyHash.MergeFrom(other.VerifyHash);
      }
      if (other.userId_ != null) {
        if (userId_ == null) {
          userId_ = new global::Loom.Client.Protobuf.BigUInt();
        }
        UserId.MergeFrom(other.UserId);
      }
      if (other.Booster != 0UL) {
        Booster = other.Booster;
      }
      if (other.Super != 0UL) {
        Super = other.Super;
      }
      if (other.Air != 0UL) {
        Air = other.Air;
      }
      if (other.Earth != 0UL) {
        Earth = other.Earth;
      }
      if (other.Fire != 0UL) {
        Fire = other.Fire;
      }
      if (other.Life != 0UL) {
        Life = other.Life;
      }
      if (other.Toxic != 0UL) {
        Toxic = other.Toxic;
      }
      if (other.Water != 0UL) {
        Water = other.Water;
      }
      if (other.Small != 0UL) {
        Small = other.Small;
      }
      if (other.Minion != 0UL) {
        Minion = other.Minion;
      }
      if (other.Binance != 0UL) {
        Binance = other.Binance;
      }
      if (other.txId_ != null) {
        if (txId_ == null) {
          txId_ = new global::Loom.Client.Protobuf.BigUInt();
        }
        TxId.MergeFrom(other.TxId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (verifyHash_ == null) {
              verifyHash_ = new global::Loom.ZombieBattleground.Protobuf.MintingTransactionReceipt.Types.VerifySignResult();
            }
            input.ReadMessage(verifyHash_);
            break;
          }
          case 18: {
            if (userId_ == null) {
              userId_ = new global::Loom.Client.Protobuf.BigUInt();
            }
            input.ReadMessage(userId_);
            break;
          }
          case 24: {
            Booster = input.ReadUInt64();
            break;
          }
          case 32: {
            Air = input.ReadUInt64();
            break;
          }
          case 40: {
            Earth = input.ReadUInt64();
            break;
          }
          case 48: {
            Fire = input.ReadUInt64();
            break;
          }
          case 56: {
            Life = input.ReadUInt64();
            break;
          }
          case 64: {
            Toxic = input.ReadUInt64();
            break;
          }
          case 72: {
            Water = input.ReadUInt64();
            break;
          }
          case 80: {
            Super = input.ReadUInt64();
            break;
          }
          case 88: {
            Small = input.ReadUInt64();
            break;
          }
          case 96: {
            Minion = input.ReadUInt64();
            break;
          }
          case 104: {
            Binance = input.ReadUInt64();
            break;
          }
          case 114: {
            if (txId_ == null) {
              txId_ = new global::Loom.Client.Protobuf.BigUInt();
            }
            input.ReadMessage(txId_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MintingTransactionReceipt message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class VerifySignResult : pb::IMessage<VerifySignResult> {
        private static readonly pb::MessageParser<VerifySignResult> _parser = new pb::MessageParser<VerifySignResult>(() => new VerifySignResult());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<VerifySignResult> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Loom.ZombieBattleground.Protobuf.MintingTransactionReceipt.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VerifySignResult() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VerifySignResult(VerifySignResult other) : this() {
          hash_ = other.hash_;
          signature_ = other.signature_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VerifySignResult Clone() {
          return new VerifySignResult(this);
        }

        /// <summary>Field number for the "hash" field.</summary>
        public const int HashFieldNumber = 1;
        private pb::ByteString hash_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Hash {
          get { return hash_; }
          set {
            hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "signature" field.</summary>
        public const int SignatureFieldNumber = 2;
        private pb::ByteString signature_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Signature {
          get { return signature_; }
          set {
            signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as VerifySignResult);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(VerifySignResult other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Hash != other.Hash) return false;
          if (Signature != other.Signature) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Hash.Length != 0) hash ^= Hash.GetHashCode();
          if (Signature.Length != 0) hash ^= Signature.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Hash.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(Hash);
          }
          if (Signature.Length != 0) {
            output.WriteRawTag(18);
            output.WriteBytes(Signature);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Hash.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
          }
          if (Signature.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(VerifySignResult other) {
          if (other == null) {
            return;
          }
          if (other.Hash.Length != 0) {
            Hash = other.Hash;
          }
          if (other.Signature.Length != 0) {
            Signature = other.Signature;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Hash = input.ReadBytes();
                break;
              }
              case 18: {
                Signature = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class MintingTransactionReceiptCollection : pb::IMessage<MintingTransactionReceiptCollection> {
    private static readonly pb::MessageParser<MintingTransactionReceiptCollection> _parser = new pb::MessageParser<MintingTransactionReceiptCollection>(() => new MintingTransactionReceiptCollection());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MintingTransactionReceiptCollection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[106]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MintingTransactionReceiptCollection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MintingTransactionReceiptCollection(MintingTransactionReceiptCollection other) : this() {
      receipts_ = other.receipts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MintingTransactionReceiptCollection Clone() {
      return new MintingTransactionReceiptCollection(this);
    }

    /// <summary>Field number for the "receipts" field.</summary>
    public const int ReceiptsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.MintingTransactionReceipt> _repeated_receipts_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.MintingTransactionReceipt.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.MintingTransactionReceipt> receipts_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.MintingTransactionReceipt>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.MintingTransactionReceipt> Receipts {
      get { return receipts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MintingTransactionReceiptCollection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MintingTransactionReceiptCollection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!receipts_.Equals(other.receipts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= receipts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      receipts_.WriteTo(output, _repeated_receipts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += receipts_.CalculateSize(_repeated_receipts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MintingTransactionReceiptCollection other) {
      if (other == null) {
        return;
      }
      receipts_.Add(other.receipts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            receipts_.AddEntriesFrom(input, _repeated_receipts_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardAmountChangeItemsContainer : pb::IMessage<CardAmountChangeItemsContainer> {
    private static readonly pb::MessageParser<CardAmountChangeItemsContainer> _parser = new pb::MessageParser<CardAmountChangeItemsContainer>(() => new CardAmountChangeItemsContainer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardAmountChangeItemsContainer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[107]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAmountChangeItemsContainer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAmountChangeItemsContainer(CardAmountChangeItemsContainer other) : this() {
      cardAmountChanges_ = other.cardAmountChanges_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAmountChangeItemsContainer Clone() {
      return new CardAmountChangeItemsContainer(this);
    }

    /// <summary>Field number for the "cardAmountChanges" field.</summary>
    public const int CardAmountChangesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardAmountChangeItem> _repeated_cardAmountChanges_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.CardAmountChangeItem.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardAmountChangeItem> cardAmountChanges_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardAmountChangeItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardAmountChangeItem> CardAmountChanges {
      get { return cardAmountChanges_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardAmountChangeItemsContainer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardAmountChangeItemsContainer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cardAmountChanges_.Equals(other.cardAmountChanges_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cardAmountChanges_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cardAmountChanges_.WriteTo(output, _repeated_cardAmountChanges_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cardAmountChanges_.CalculateSize(_repeated_cardAmountChanges_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardAmountChangeItemsContainer other) {
      if (other == null) {
        return;
      }
      cardAmountChanges_.Add(other.cardAmountChanges_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cardAmountChanges_.AddEntriesFrom(input, _repeated_cardAmountChanges_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardAmountChangeItem : pb::IMessage<CardAmountChangeItem> {
    private static readonly pb::MessageParser<CardAmountChangeItem> _parser = new pb::MessageParser<CardAmountChangeItem>(() => new CardAmountChangeItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardAmountChangeItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbDataReflection.Descriptor.MessageTypes[108]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAmountChangeItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAmountChangeItem(CardAmountChangeItem other) : this() {
      cardKey_ = other.cardKey_ != null ? other.cardKey_.Clone() : null;
      amountChange_ = other.amountChange_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAmountChangeItem Clone() {
      return new CardAmountChangeItem(this);
    }

    /// <summary>Field number for the "cardKey" field.</summary>
    public const int CardKeyFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.CardKey cardKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardKey CardKey {
      get { return cardKey_; }
      set {
        cardKey_ = value;
      }
    }

    /// <summary>Field number for the "amountChange" field.</summary>
    public const int AmountChangeFieldNumber = 2;
    private long amountChange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmountChange {
      get { return amountChange_; }
      set {
        amountChange_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardAmountChangeItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardAmountChangeItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CardKey, other.CardKey)) return false;
      if (AmountChange != other.AmountChange) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cardKey_ != null) hash ^= CardKey.GetHashCode();
      if (AmountChange != 0L) hash ^= AmountChange.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (cardKey_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CardKey);
      }
      if (AmountChange != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(AmountChange);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cardKey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardKey);
      }
      if (AmountChange != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmountChange);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardAmountChangeItem other) {
      if (other == null) {
        return;
      }
      if (other.cardKey_ != null) {
        if (cardKey_ == null) {
          cardKey_ = new global::Loom.ZombieBattleground.Protobuf.CardKey();
        }
        CardKey.MergeFrom(other.CardKey);
      }
      if (other.AmountChange != 0L) {
        AmountChange = other.AmountChange;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (cardKey_ == null) {
              cardKey_ = new global::Loom.ZombieBattleground.Protobuf.CardKey();
            }
            input.ReadMessage(cardKey_);
            break;
          }
          case 16: {
            AmountChange = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
