// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: github.com/loomnetwork/gamechain/types/zb/zb.proto-cs
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Loom.Google.Protobuf;
using pbc = global::Loom.Google.Protobuf.Collections;
using pbr = global::Loom.Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Loom.ZombieBattleground.Protobuf {

  /// <summary>Holder for reflection information generated from github.com/loomnetwork/gamechain/types/zb/zb.proto-cs</summary>
  public static partial class ZbReflection {

    #region Descriptor
    /// <summary>File descriptor for github.com/loomnetwork/gamechain/types/zb/zb.proto-cs</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ZbReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjVnaXRodWIuY29tL2xvb21uZXR3b3JrL2dhbWVjaGFpbi90eXBlcy96Yi96",
            "Yi5wcm90by1jcxowZ2l0aHViLmNvbS9sb29tbmV0d29yay9nby1sb29tL3R5",
            "cGVzL3R5cGVzLnByb3RvIusBCgdBY2NvdW50Eg8KB3VzZXJfaWQYASABKAkS",
            "HQoVcGhvbmVfbnVtYmVyX3ZlcmlmaWVkGAIgASgIEhcKD3Jld2FyZF9yZWRl",
            "ZW1lZBgDIAEoCBIWCg5pc19raWNrc3RhcnRlchgEIAEoCBINCgVpbWFnZRgF",
            "IAEoCRIaChJlbWFpbF9ub3RpZmljYXRpb24YBiABKAgSEQoJZWxvX3Njb3Jl",
            "GAcgASgDEhQKDGN1cnJlbnRfdGllchgIIAEoBRIcChRnYW1lX21lbWJlcnNo",
            "aXBfdGllchgJIAEoBRINCgVvd25lchgKIAEoDCKtAQoERGVjaxIKCgJpZBgB",
            "IAEoAxIMCgRuYW1lGAIgASgJEg8KB2hlcm9faWQYAyABKAMSGAoFY2FyZHMY",
            "BCADKAsyCS5EZWNrQ2FyZBIuCg1wcmltYXJ5X3NraWxsGAUgASgOMhcuT3Zl",
            "cmxvcmRTa2lsbEtpbmQuRW51bRIwCg9zZWNvbmRhcnlfc2tpbGwYBiABKA4y",
            "Fy5PdmVybG9yZFNraWxsS2luZC5FbnVtIqADCgRDYXJkEg8KB21vdWxkSWQY",
            "ASABKAMSHAoEa2luZBgCIAEoDjIOLkNhcmRLaW5kLkVudW0SHgoDc2V0GAMg",
            "ASgOMhEuQ2FyZFNldFR5cGUuRW51bRIMCgRuYW1lGAQgASgJEhMKC2Rlc2Ny",
            "aXB0aW9uGAUgASgJEhMKC2ZsYXZvcl90ZXh0GAYgASgJEg8KB3BpY3R1cmUY",
            "ByABKAkSIAoEcmFuaxgIIAEoDjISLkNyZWF0dXJlUmFuay5FbnVtEiAKBHR5",
            "cGUYCSABKA4yEi5DcmVhdHVyZVR5cGUuRW51bRINCgVmcmFtZRgLIAEoCRIO",
            "CgZhdHRhY2sYDCABKAUSDwoHZGVmZW5zZRgNIAEoBRIPCgdnb29Db3N0GA4g",
            "ASgFEiUKDmNhcmRfdmlld19pbmZvGBAgASgLMg0uQ2FyZFZpZXdJbmZvEh8K",
            "CWFiaWxpdGllcxgRIAMoCzIMLkNhcmRBYmlsaXR5EjMKEHVuaXF1ZV9hbmlt",
            "YXRpb24YEiABKA4yGS5VbmlxdWVBbmltYXRpb25UeXBlLkVudW0ijgEKGENh",
            "cmRJbnN0YW5jZVNwZWNpZmljRGF0YRIOCgZhdHRhY2sYASABKAUSDwoHZGVm",
            "ZW5zZRgCIAEoBRIgCgR0eXBlGAMgASgOMhIuQ3JlYXR1cmVUeXBlLkVudW0S",
            "HgoDc2V0GAQgASgOMhEuQ2FyZFNldFR5cGUuRW51bRIPCgdnb29Db3N0GAUg",
            "ASgFIk0KDENhcmRWaWV3SW5mbxIfCghwb3NpdGlvbhgBIAEoCzINLlZlY3Rv",
            "cjNGbG9hdBIcCgVzY2FsZRgCIAEoCzINLlZlY3RvcjNGbG9hdCIvCgxWZWN0",
            "b3IzRmxvYXQSCQoBeBgBIAEoAhIJCgF5GAIgASgCEgkKAXoYAyABKAIiIgoK",
            "VmVjdG9yMkludBIJCgF4GAEgASgFEgkKAXkYAiABKAUiQAoEUmVjdBIdCghw",
            "b3NpdGlvbhgBIAEoCzILLlZlY3RvcjJJbnQSGQoEc2l6ZRgCIAEoCzILLlZl",
            "Y3RvcjJJbnQiIAoIQ2FyZExpc3QSFAoFY2FyZHMYASADKAsyBS5DYXJkIjcK",
            "EkNhcmRDb2xsZWN0aW9uQ2FyZBIRCgljYXJkX25hbWUYASABKAkSDgoGYW1v",
            "dW50GAIgASgDIi0KCERlY2tDYXJkEhEKCWNhcmRfbmFtZRgBIAEoCRIOCgZh",
            "bW91bnQYAiABKAMiIwoLQ2FyZExpYnJhcnkSFAoFY2FyZHMYASADKAsyBS5D",
            "YXJkIqkCCgRIZXJvEg8KB2hlcm9faWQYASABKAMSDAoEaWNvbhgCIAEoCRIM",
            "CgRuYW1lGAMgASgJEhkKEXNob3J0X2Rlc2NyaXB0aW9uGAQgASgJEhgKEGxv",
            "bmdfZGVzY3JpcHRpb24YBSABKAkSIgoHZWxlbWVudBgGIAEoDjIRLkNhcmRT",
            "ZXRUeXBlLkVudW0SEgoKZXhwZXJpZW5jZRgHIAEoAxINCgVsZXZlbBgIIAEo",
            "AxIWCgZza2lsbHMYCSADKAsyBi5Ta2lsbBIuCg1wcmltYXJ5X3NraWxsGAog",
            "ASgOMhcuT3ZlcmxvcmRTa2lsbEtpbmQuRW51bRIwCg9zZWNvbmRhcnlfc2tp",
            "bGwYCyABKA4yFy5PdmVybG9yZFNraWxsS2luZC5FbnVtIiQKEUxpc3RIZXJv",
            "ZXNSZXF1ZXN0Eg8KB3VzZXJfaWQYASABKAkiKwoSTGlzdEhlcm9lc1Jlc3Bv",
            "bnNlEhUKBmhlcm9lcxgBIAMoCzIFLkhlcm8iUAoYQWRkSGVyb0V4cGVyaWVu",
            "Y2VSZXF1ZXN0Eg8KB3VzZXJfaWQYASABKAkSDwoHaGVyb19pZBgCIAEoAxIS",
            "CgpleHBlcmllbmNlGAMgASgDIkAKGUFkZEhlcm9FeHBlcmllbmNlUmVzcG9u",
            "c2USDwoHaGVyb19pZBgBIAEoAxISCgpleHBlcmllbmNlGAIgASgDIjIKDkdl",
            "dEhlcm9SZXF1ZXN0Eg8KB3VzZXJfaWQYASABKAkSDwoHaGVyb19pZBgCIAEo",
            "AyImCg9HZXRIZXJvUmVzcG9uc2USEwoEaGVybxgBIAEoCzIFLkhlcm8iOAoU",
            "R2V0SGVyb1NraWxsc1JlcXVlc3QSDwoHdXNlcl9pZBgBIAEoCRIPCgdoZXJv",
            "X2lkGAIgASgDIkAKFUdldEhlcm9Ta2lsbHNSZXNwb25zZRIPCgdoZXJvX2lk",
            "GAEgASgDEhYKBnNraWxscxgCIAMoCzIGLlNraWxsIqcDCgVTa2lsbBINCgV0",
            "aXRsZRgBIAEoCRImCgVza2lsbBgCIAEoDjIXLk92ZXJsb3JkU2tpbGxLaW5k",
            "LkVudW0SEQoJaWNvbl9wYXRoGAMgASgJEhMKC2Rlc2NyaXB0aW9uGAQgASgJ",
            "EjIKDXNraWxsX3RhcmdldHMYBSADKA4yGy5PdmVybG9yZEFiaWxpdHlUYXJn",
            "ZXQuRW51bRI4Chd0YXJnZXRVbml0U3BlY2lhbFN0YXR1cxgGIAEoDjIXLlVu",
            "aXRTcGVjaWFsU3RhdHVzLkVudW0SKgoPZWxlbWVudF90YXJnZXRzGAcgAygO",
            "MhEuQ2FyZFNldFR5cGUuRW51bRINCgV2YWx1ZRgIIAEoBRIQCghjb29sZG93",
            "bhgJIAEoBRIYChBpbml0aWFsX2Nvb2xkb3duGAogASgFEg4KBmF0dGFjaxgL",
            "IAEoBRINCgVjb3VudBgMIAEoBRIKCgJpZBgNIAEoAxIQCgh1bmxvY2tlZBgO",
            "IAEoCBIZChFjYW5fc2VsZWN0X3RhcmdldBgPIAEoCBISCgp1bml0U3RhdHVz",
            "GBAgASgJIiEKCEhlcm9MaXN0EhUKBmhlcm9lcxgBIAMoCzIFLkhlcm8iOAoS",
            "Q2FyZENvbGxlY3Rpb25MaXN0EiIKBWNhcmRzGAEgAygLMhMuQ2FyZENvbGxl",
            "Y3Rpb25DYXJkIiAKCERlY2tMaXN0EhQKBWRlY2tzGAEgAygLMgUuRGVjayKI",
            "AQoGQUlUeXBlIn4KBEVudW0SDQoJVU5ERUZJTkVEEAASDAoIQkxJVFpfQUkQ",
            "ARIOCgpERUZFTlNFX0FJEAISDAoITUlYRURfQUkQAxISCg5NSVhFRF9CTElU",
            "Wl9BSRAEEhEKDVRJTUVfQkxJVFpfQUkQBRIUChBNSVhFRF9ERUZFTlNFX0FJ",
            "EAYiOQoGQUlEZWNrEhMKBGRlY2sYASABKAsyBS5EZWNrEhoKBHR5cGUYAiAB",
            "KA4yDC5BSVR5cGUuRW51bSIkCgpBSURlY2tMaXN0EhYKBWRlY2tzGAEgAygL",
            "MgcuQUlEZWNrIs8BCgtJbml0UmVxdWVzdBIcCg1kZWZhdWx0X2RlY2tzGAEg",
            "AygLMgUuRGVjaxIvChJkZWZhdWx0X2NvbGxlY3Rpb24YAiADKAsyEy5DYXJk",
            "Q29sbGVjdGlvbkNhcmQSFAoFY2FyZHMYAyADKAsyBS5DYXJkEhUKBmhlcm9l",
            "cxgEIAMoCzIFLkhlcm8SGQoIYWlfZGVja3MYBSADKAsyBy5BSURlY2sSDwoH",
            "dmVyc2lvbhgGIAEoCRIYCgZvcmFjbGUYByABKAsyCC5BZGRyZXNzIkoKDFVw",
            "ZGF0ZU9yYWNsZRIcCgpuZXdfb3JhY2xlGAEgASgLMgguQWRkcmVzcxIcCgpv",
            "bGRfb3JhY2xlGAIgASgLMgguQWRkcmVzcyLpAQoRVXBkYXRlSW5pdFJlcXVl",
            "c3QSHAoNZGVmYXVsdF9kZWNrcxgBIAMoCzIFLkRlY2sSLwoSZGVmYXVsdF9j",
            "b2xsZWN0aW9uGAIgAygLMhMuQ2FyZENvbGxlY3Rpb25DYXJkEhQKBWNhcmRz",
            "GAMgAygLMgUuQ2FyZBIVCgZoZXJvZXMYBCADKAsyBS5IZXJvEhkKCGFpX2Rl",
            "Y2tzGAUgAygLMgcuQUlEZWNrEg8KB3ZlcnNpb24YBiABKAkSGAoGb3JhY2xl",
            "GAcgASgLMgguQWRkcmVzcxISCgpvbGRWZXJzaW9uGAggASgJIiEKDkdldElu",
            "aXRSZXF1ZXN0Eg8KB3ZlcnNpb24YASABKAki8gEKD0dldEluaXRSZXNwb25z",
            "ZRIcCg1kZWZhdWx0X2RlY2tzGAEgAygLMgUuRGVjaxIvChJkZWZhdWx0X2Nv",
            "bGxlY3Rpb24YAiADKAsyEy5DYXJkQ29sbGVjdGlvbkNhcmQSFAoFY2FyZHMY",
            "AyADKAsyBS5DYXJkEhUKBmhlcm9lcxgEIAMoCzIFLkhlcm8SHQoOZGVmYXVs",
            "dF9oZXJvZXMYBSADKAsyBS5IZXJvEhkKCGFpX2RlY2tzGAYgAygLMgcuQUlE",
            "ZWNrEg8KB3ZlcnNpb24YByABKAkSGAoGb3JhY2xlGAggASgLMgguQWRkcmVz",
            "cyI+ChVVcGRhdGVDYXJkTGlzdFJlcXVlc3QSFAoFY2FyZHMYASADKAsyBS5D",
            "YXJkEg8KB3ZlcnNpb24YAiABKAkiJQoSR2V0Q2FyZExpc3RSZXF1ZXN0Eg8K",
            "B3ZlcnNpb24YASABKAkiKwoTR2V0Q2FyZExpc3RSZXNwb25zZRIUCgVjYXJk",
            "cxgBIAMoCzIFLkNhcmQi+gEKFFVwc2VydEFjY291bnRSZXF1ZXN0Eg8KB3Vz",
            "ZXJfaWQYASABKAkSHQoVcGhvbmVfbnVtYmVyX3ZlcmlmaWVkGAIgASgIEhcK",
            "D3Jld2FyZF9yZWRlZW1lZBgDIAEoCBIWCg5pc19raWNrc3RhcnRlchgEIAEo",
            "CBINCgVpbWFnZRgFIAEoCRIaChJlbWFpbF9ub3RpZmljYXRpb24YBiABKAgS",
            "EQoJZWxvX3Njb3JlGAcgASgDEhQKDGN1cnJlbnRfdGllchgIIAEoBRIcChRn",
            "YW1lX21lbWJlcnNoaXBfdGllchgJIAEoBRIPCgd2ZXJzaW9uGAogASgJIiQK",
            "EUdldEFjY291bnRSZXF1ZXN0Eg8KB3VzZXJfaWQYASABKAkiMgoOR2V0RGVj",
            "a1JlcXVlc3QSDwoHdXNlcl9pZBgBIAEoCRIPCgdkZWNrX2lkGAIgASgDIiYK",
            "D0dldERlY2tSZXNwb25zZRITCgRkZWNrGAIgASgLMgUuRGVjayJKChFDcmVh",
            "dGVEZWNrUmVxdWVzdBIPCgd1c2VyX2lkGAEgASgJEhMKBGRlY2sYAiABKAsy",
            "BS5EZWNrEg8KB3ZlcnNpb24YBCABKAkiJQoSQ3JlYXRlRGVja1Jlc3BvbnNl",
            "Eg8KB2RlY2tfaWQYASABKAMiNQoRRGVsZXRlRGVja1JlcXVlc3QSDwoHdXNl",
            "cl9pZBgBIAEoCRIPCgdkZWNrX2lkGAIgASgDIkgKD0VkaXREZWNrUmVxdWVz",
            "dBIPCgd1c2VyX2lkGAEgASgJEhMKBGRlY2sYAiABKAsyBS5EZWNrEg8KB3Zl",
            "cnNpb24YBCABKAkiNgoNRGVja3NSZXNwb25zZRIPCgd1c2VyX2lkGAEgASgJ",
            "EhQKBWRlY2tzGAIgAygLMgUuRGVjayIjChBMaXN0RGVja3NSZXF1ZXN0Eg8K",
            "B3VzZXJfaWQYASABKAkiKQoRTGlzdERlY2tzUmVzcG9uc2USFAoFZGVja3MY",
            "ASADKAsyBS5EZWNrIjwKEVNldEFJRGVja3NSZXF1ZXN0Eg8KB3ZlcnNpb24Y",
            "ASABKAkSFgoFZGVja3MYAiADKAsyBy5BSURlY2siJAoRR2V0QUlEZWNrc1Jl",
            "cXVlc3QSDwoHdmVyc2lvbhgBIAEoCSIsChJHZXRBSURlY2tzUmVzcG9uc2US",
            "FgoFZGVja3MYASADKAsyBy5BSURlY2siKQoWTGlzdENhcmRMaWJyYXJ5UmVx",
            "dWVzdBIPCgd2ZXJzaW9uGAEgASgJIi8KF0xpc3RDYXJkTGlicmFyeVJlc3Bv",
            "bnNlEhQKBWNhcmRzGAEgAygLMgUuQ2FyZCIpChZMaXN0SGVyb0xpYnJhcnlS",
            "ZXF1ZXN0Eg8KB3ZlcnNpb24YASABKAkiMAoXTGlzdEhlcm9MaWJyYXJ5UmVz",
            "cG9uc2USFQoGaGVyb2VzGAEgAygLMgUuSGVybyJCChhVcGRhdGVIZXJvTGli",
            "cmFyeVJlcXVlc3QSDwoHdmVyc2lvbhgBIAEoCRIVCgZoZXJvZXMYAiADKAsy",
            "BS5IZXJvIhsKGVVwZGF0ZUhlcm9MaWJyYXJ5UmVzcG9uc2UiJwoUR2V0Q29s",
            "bGVjdGlvblJlcXVlc3QSDwoHdXNlcl9pZBgBIAEoCSI7ChVHZXRDb2xsZWN0",
            "aW9uUmVzcG9uc2USIgoFY2FyZHMYASADKAsyEy5DYXJkQ29sbGVjdGlvbkNh",
            "cmQi5AMKC1BsYXllclN0YXRlEgoKAmlkGAEgASgJEi0KDWN1cnJlbnRBY3Rp",
            "b24YAiABKA4yFi5QbGF5ZXJBY3Rpb25UeXBlLkVudW0SKwoQb3ZlcmxvcmRJ",
            "bnN0YW5jZRgDIAEoCzIRLk92ZXJsb3JkSW5zdGFuY2USIgoLY2FyZHNJbkhh",
            "bmQYBCADKAsyDS5DYXJkSW5zdGFuY2USIgoLY2FyZHNJblBsYXkYBSADKAsy",
            "DS5DYXJkSW5zdGFuY2USIgoLY2FyZHNJbkRlY2sYBiADKAsyDS5DYXJkSW5z",
            "dGFuY2USEwoEZGVjaxgHIAEoCzIFLkRlY2sSDwoHZGVmZW5zZRgIIAEoBRIS",
            "CgpjdXJyZW50R29vGAkgASgFEhAKCGdvb1ZpYWxzGAogASgFEhQKDGhhc0Ry",
            "YXduQ2FyZBgLIAEoCBInChBjYXJkc0luR3JhdmV5YXJkGAwgAygLMg0uQ2Fy",
            "ZEluc3RhbmNlEh8KF2luaXRpYWxDYXJkc0luSGFuZENvdW50GA0gASgFEhYK",
            "Dm1heENhcmRzSW5QbGF5GA4gASgFEhYKDm1heENhcmRzSW5IYW5kGA8gASgF",
            "EhMKC21heEdvb1ZpYWxzGBAgASgFEhAKCHR1cm5UaW1lGBEgASgFIkwKEklu",
            "aXRpYWxQbGF5ZXJTdGF0ZRIKCgJpZBgBIAEoCRIVCg1tYXRjaEFjY2VwdGVk",
            "GAIgASgIEhMKBGRlY2sYAyABKAsyBS5EZWNrItoCCgVNYXRjaBIKCgJpZBgB",
            "IAEoAxIOCgZ0b3BpY3MYAiADKAkSKQoMcGxheWVyU3RhdGVzGAMgAygLMhMu",
            "SW5pdGlhbFBsYXllclN0YXRlEh0KBnN0YXR1cxgEIAEoDjINLk1hdGNoLlN0",
            "YXR1cxIPCgd2ZXJzaW9uGAUgASgJEhIKCnJhbmRvbVNlZWQYBiABKAMSIAoO",
            "Y3VzdG9tR2FtZUFkZHIYByABKAsyCC5BZGRyZXNzEhEKCWNyZWF0ZWRBdBgI",
            "IAEoAxIbChN1c2VCYWNrZW5kR2FtZUxvZ2ljGAkgASgIInQKBlN0YXR1cxIL",
            "CgdDcmVhdGVkEAASDAoITWF0Y2hpbmcQARILCgdTdGFydGVkEAISCwoHUGxh",
            "eWluZxADEg4KClBsYXllckxlZnQQBBIJCgVFbmRlZBAFEgwKCFRpbWVkb3V0",
            "EAYSDAoIQ2FuY2VsZWQQByI2ChNNYXRjaE1ha2luZ0luZm9MaXN0Eh8KBWlu",
            "Zm9zGAEgAygLMhAuTWF0Y2hNYWtpbmdJbmZvIjYKD01hdGNoTWFraW5nSW5m",
            "bxIOCgZ1c2VySWQYASABKAkSEwoEZGVjaxgCIAEoCzIFLkRlY2si0wEKEFBs",
            "YXllckFjdGlvblR5cGUivgEKBEVudW0SCAoETm9uZRAAEgsKB0VuZFR1cm4Q",
            "ARIMCghNdWxsaWdhbhACEgwKCERyYXdDYXJkEAMSDAoIQ2FyZFBsYXkQBBIO",
            "CgpDYXJkQXR0YWNrEAUSEwoPQ2FyZEFiaWxpdHlVc2VkEAYSFQoRT3Zlcmxv",
            "cmRTa2lsbFVzZWQQBxIMCghDb2luVG9zcxAIEg0KCUluaXRIYW5kcxAJEg4K",
            "CkxlYXZlTWF0Y2gQChIMCghSYW5rQnVmZhALIsAECgxQbGF5ZXJBY3Rpb24S",
            "KgoKYWN0aW9uVHlwZRgBIAEoDjIWLlBsYXllckFjdGlvblR5cGUuRW51bRIQ",
            "CghwbGF5ZXJJZBgCIAEoCRItCgpjYXJkQXR0YWNrGAMgASgLMhcuUGxheWVy",
            "QWN0aW9uQ2FyZEF0dGFja0gAEikKCGRyYXdDYXJkGAQgASgLMhUuUGxheWVy",
            "QWN0aW9uRHJhd0NhcmRIABInCgdlbmRUdXJuGAUgASgLMhQuUGxheWVyQWN0",
            "aW9uRW5kVHVybkgAEikKCG11bGxpZ2FuGAYgASgLMhUuUGxheWVyQWN0aW9u",
            "TXVsbGlnYW5IABIpCghjYXJkUGxheRgHIAEoCzIVLlBsYXllckFjdGlvbkNh",
            "cmRQbGF5SAASNwoPY2FyZEFiaWxpdHlVc2VkGAggASgLMhwuUGxheWVyQWN0",
            "aW9uQ2FyZEFiaWxpdHlVc2VkSAASOwoRb3ZlcmxvcmRTa2lsbFVzZWQYCSAB",
            "KAsyHi5QbGF5ZXJBY3Rpb25PdmVybG9yZFNraWxsVXNlZEgAEi0KCmxlYXZl",
            "TWF0Y2gYDCABKAsyFy5QbGF5ZXJBY3Rpb25MZWF2ZU1hdGNoSAASKQoIcmFu",
            "a0J1ZmYYDSABKAsyFS5QbGF5ZXJBY3Rpb25SYW5rQnVmZkgAEiwKDmFjdGlv",
            "bk91dGNvbWVzGA4gAygLMhQuUGxheWVyQWN0aW9uT3V0Y29tZRIRCgljcmVh",
            "dGVkQXQYDyABKANCCAoGYWN0aW9uImgKEVBsYXllckFjdGlvbkV2ZW50EiMK",
            "DHBsYXllckFjdGlvbhgBIAEoCzINLlBsYXllckFjdGlvbhIVCgVtYXRjaBgC",
            "IAEoCzIGLk1hdGNoEhcKBWJsb2NrGAMgASgLMgguSGlzdG9yeSKwAQoNUGxh",
            "eWVyUHJvZmlsZRIOCgZ1c2VySWQYASABKAkSDgoGZGVja0lkGAIgASgDEg8K",
            "B3ZlcnNpb24YAyABKAkSHAoKY3VzdG9tR2FtZRgFIAEoCzIILkFkZHJlc3MS",
            "EQoJdXBkYXRlZEF0GAYgASgDEgwKBHRhZ3MYByADKAkSEgoKcmFuZG9tU2Vl",
            "ZBgIIAEoAxIbChN1c2VCYWNrZW5kR2FtZUxvZ2ljGAkgASgIIjQKClBsYXll",
            "clBvb2wSJgoOcGxheWVyUHJvZmlsZXMYASADKAsyDi5QbGF5ZXJQcm9maWxl",
            "Ih8KCk1hdGNoQ291bnQSEQoJY3VycmVudElkGAEgASgDIqkBChlSZWdpc3Rl",
            "clBsYXllclBvb2xSZXF1ZXN0Eg4KBnVzZXJJZBgBIAEoCRIOCgZkZWNrSWQY",
            "AiABKAMSDwoHdmVyc2lvbhgDIAEoCRIcCgpjdXN0b21HYW1lGAQgASgLMggu",
            "QWRkcmVzcxISCgpyYW5kb21TZWVkGAUgASgDEgwKBHRhZ3MYBiADKAkSGwoT",
            "dXNlQmFja2VuZEdhbWVMb2dpYxgHIAEoCCIcChpSZWdpc3RlclBsYXllclBv",
            "b2xSZXNwb25zZSITChFQbGF5ZXJQb29sUmVxdWVzdCIvChJQbGF5ZXJQb29s",
            "UmVzcG9uc2USGQoEcG9vbBgBIAEoCzILLlBsYXllclBvb2wiMAoQRmluZE1h",
            "dGNoUmVxdWVzdBIOCgZ1c2VySWQYASABKAkSDAoEdGFncxgCIAMoCSIqChFG",
            "aW5kTWF0Y2hSZXNwb25zZRIVCgVtYXRjaBgBIAEoCzIGLk1hdGNoIjUKEkFj",
            "Y2VwdE1hdGNoUmVxdWVzdBIOCgZ1c2VySWQYASABKAkSDwoHbWF0Y2hJZBgC",
            "IAEoAyJFChNBY2NlcHRNYXRjaFJlc3BvbnNlEhUKBW1hdGNoGAEgASgLMgYu",
            "TWF0Y2gSFwoFYmxvY2sYAiABKAsyCC5IaXN0b3J5Ip0BChVEZWJ1Z0ZpbmRN",
            "YXRjaFJlcXVlc3QSDgoGdXNlcklkGAEgASgJEg4KBmRlY2tJZBgCIAEoAxIP",
            "Cgd2ZXJzaW9uGAMgASgJEhIKCnJhbmRvbVNlZWQYBCABKAMSHAoKY3VzdG9t",
            "R2FtZRgFIAEoCzIILkFkZHJlc3MSEwoEZGVjaxgGIAEoCzIFLkRlY2sSDAoE",
            "dGFncxgHIAMoCSJHChZDYW5jZWxGaW5kTWF0Y2hSZXF1ZXN0Eg4KBnVzZXJJ",
            "ZBgBIAEoCRIPCgdtYXRjaElkGAIgASgDEgwKBHRhZ3MYAyADKAkiGQoXQ2Fu",
            "Y2VsRmluZE1hdGNoUmVzcG9uc2UiIgoPR2V0TWF0Y2hSZXF1ZXN0Eg8KB21h",
            "dGNoSWQYASABKAMiKQoQR2V0TWF0Y2hSZXNwb25zZRIVCgVtYXRjaBgBIAEo",
            "CzIGLk1hdGNoIigKD1NldE1hdGNoUmVxdWVzdBIVCgVtYXRjaBgBIAEoCzIG",
            "Lk1hdGNoIiYKE0dldEdhbWVTdGF0ZVJlcXVlc3QSDwoHbWF0Y2hJZBgBIAEo",
            "AyI1ChRHZXRHYW1lU3RhdGVSZXNwb25zZRIdCglnYW1lU3RhdGUYASABKAsy",
            "Ci5HYW1lU3RhdGUiNAoTU2V0R2FtZVN0YXRlUmVxdWVzdBIdCglnYW1lU3Rh",
            "dGUYASABKAsyCi5HYW1lU3RhdGUiSwoTUGxheWVyQWN0aW9uUmVxdWVzdBIP",
            "CgdtYXRjaElkGAEgASgDEiMKDHBsYXllckFjdGlvbhgCIAEoCzINLlBsYXll",
            "ckFjdGlvbiItChRQbGF5ZXJBY3Rpb25SZXNwb25zZRIVCgVtYXRjaBgBIAEo",
            "CzIGLk1hdGNoIlIKGUJ1bmRsZVBsYXllckFjdGlvblJlcXVlc3QSDwoHbWF0",
            "Y2hJZBgBIAEoAxIkCg1wbGF5ZXJBY3Rpb25zGAIgAygLMg0uUGxheWVyQWN0",
            "aW9uInEKGkJ1bmRsZVBsYXllckFjdGlvblJlc3BvbnNlEh0KCWdhbWVTdGF0",
            "ZRgBIAEoCzIKLkdhbWVTdGF0ZRIVCgVtYXRjaBgCIAEoCzIGLk1hdGNoEh0K",
            "B2hpc3RvcnkYAyADKAsyDC5IaXN0b3J5RGF0YSJECg9FbmRNYXRjaFJlcXVl",
            "c3QSDwoHbWF0Y2hJZBgBIAEoAxIOCgZ1c2VySWQYAiABKAkSEAoId2lubmVy",
            "SWQYAyABKAkiMQoQRW5kTWF0Y2hSZXNwb25zZRIdCglnYW1lU3RhdGUYASAB",
            "KAsyCi5HYW1lU3RhdGUiKQoWQ2hlY2tHYW1lU3RhdHVzUmVxdWVzdBIPCgdt",
            "YXRjaElkGAEgASgDIhkKF0NoZWNrR2FtZVN0YXR1c1Jlc3BvbnNlIqUBCghH",
            "YW1lTW9kZRIKCgJJRBgBIAEoCRIMCgRuYW1lGAIgASgJEhMKC2Rlc2NyaXB0",
            "aW9uGAMgASgJEg8KB3ZlcnNpb24YBCABKAkSJQoOZ2FtZV9tb2RlX3R5cGUY",
            "BSABKA4yDS5HYW1lTW9kZVR5cGUSGQoHYWRkcmVzcxgGIAEoCzIILkFkZHJl",
            "c3MSFwoFT3duZXIYByABKAsyCC5BZGRyZXNzIi0KDEdhbWVNb2RlTGlzdBId",
            "CgpnYW1lX21vZGVzGAEgAygLMgkuR2FtZU1vZGUijQEKD0dhbWVNb2RlUmVx",
            "dWVzdBIMCgRuYW1lGAEgASgJEhMKC2Rlc2NyaXB0aW9uGAIgASgJEg8KB3Zl",
            "cnNpb24YAyABKAkSDwoHYWRkcmVzcxgEIAEoCRIlCg5nYW1lX21vZGVfdHlw",
            "ZRgFIAEoDjINLkdhbWVNb2RlVHlwZRIOCgZvcmFjbGUYBiABKAkinwEKFVVw",
            "ZGF0ZUdhbWVNb2RlUmVxdWVzdBIKCgJJRBgBIAEoCRIMCgRuYW1lGAIgASgJ",
            "EhMKC2Rlc2NyaXB0aW9uGAMgASgJEg8KB3ZlcnNpb24YBCABKAkSDwoHYWRk",
            "cmVzcxgFIAEoCRIlCg5nYW1lX21vZGVfdHlwZRgGIAEoDjINLkdhbWVNb2Rl",
            "VHlwZRIOCgZvcmFjbGUYByABKAkiMwoVRGVsZXRlR2FtZU1vZGVSZXF1ZXN0",
            "EgoKAklEGAEgASgJEg4KBm9yYWNsZRgCIAEoCSIgChJHZXRHYW1lTW9kZVJl",
            "cXVlc3QSCgoCSUQYASABKAkiFgoUTGlzdEdhbWVNb2Rlc1JlcXVlc3QiPQog",
            "R2V0Q3VzdG9tR2FtZU1vZGVDdXN0b21VaVJlcXVlc3QSGQoHYWRkcmVzcxgB",
            "IAEoCzIILkFkZHJlc3MiVwohR2V0Q3VzdG9tR2FtZU1vZGVDdXN0b21VaVJl",
            "c3BvbnNlEjIKCnVpRWxlbWVudHMYASADKAsyHi5DdXN0b21HYW1lTW9kZUN1",
            "c3RvbVVpRWxlbWVudCJQCiFDYWxsQ3VzdG9tR2FtZU1vZGVGdW5jdGlvblJl",
            "cXVlc3QSGQoHYWRkcmVzcxgBIAEoCzIILkFkZHJlc3MSEAoIY2FsbERhdGEY",
            "AiABKAwiOgooU3RhdGljQ2FsbEN1c3RvbUdhbWVNb2RlRnVuY3Rpb25SZXNw",
            "b25zZRIOCgZvdXRwdXQYASABKAwiKwobQ3VzdG9tR2FtZU1vZGVDdXN0b21V",
            "aUxhYmVsEgwKBHRleHQYASABKAkiPwocQ3VzdG9tR2FtZU1vZGVDdXN0b21V",
            "aUJ1dHRvbhINCgV0aXRsZRgBIAEoCRIQCghjYWxsRGF0YRgCIAEoDCKhAQod",
            "Q3VzdG9tR2FtZU1vZGVDdXN0b21VaUVsZW1lbnQSEwoEcmVjdBgBIAEoCzIF",
            "LlJlY3QSLQoFbGFiZWwYAiABKAsyHC5DdXN0b21HYW1lTW9kZUN1c3RvbVVp",
            "TGFiZWxIABIvCgZidXR0b24YAyABKAsyHS5DdXN0b21HYW1lTW9kZUN1c3Rv",
            "bVVpQnV0dG9uSABCCwoJdWlFbGVtZW50Ik8KE1VuaXF1ZUFuaW1hdGlvblR5",
            "cGUiOAoERW51bRIICgROb25lEAASEwoPU2hhbW1hbm5BcnJpdmFsEAESEQoN",
            "WlZpcnVzQXJyaXZhbBACIrYBChFDYXJkQWJpbGl0eVRhcmdldCKgAQoERW51",
            "bRIICgROT05FEAASCgoGUExBWUVSEAESDwoLUExBWUVSX0NBUkQQAhIUChBQ",
            "TEFZRVJfQUxMX0NBUkRTEAMSDAoIT1BQT05FTlQQBBIRCg1PUFBPTkVOVF9D",
            "QVJEEAUSFgoST1BQT05FTlRfQUxMX0NBUkRTEAYSDQoJQUxMX0NBUkRTEAcS",
            "BwoDQUxMEAgSCgoGSVRTRUxGEAkipQEKFU92ZXJsb3JkQWJpbGl0eVRhcmdl",
            "dCKLAQoERW51bRIICgROT05FEAASCgoGUExBWUVSEAESDwoLUExBWUVSX0NB",
            "UkQQAhIUChBQTEFZRVJfQUxMX0NBUkRTEAMSDAoIT1BQT05FTlQQBBIRCg1P",
            "UFBPTkVOVF9DQVJEEAUSFgoST1BQT05FTlRfQUxMX0NBUkRTEAYSDQoJQUxM",
            "X0NBUkRTEAci6wIKG0dhbWVNZWNoYW5pY0Rlc2NyaXB0aW9uVHlwZSLLAgoE",
            "RW51bRINCglVTkRFRklORUQQABIKCgZBVFRBQ0sQARIJCgVERUFUSBACEgsK",
            "B0RFTEFZRUQQAxILCgdERVNUUk9ZEAQSCgoGREVWT1VSEAUSDAoIRElTVFJB",
            "Q1QQBhIHCgNFTkQQBxIJCgVFTlRSWRAIEgkKBUZFUkFMEAkSCQoFRkxBU0gQ",
            "ChIKCgZGUkVFWkUQCxIJCgVHVUFSRBAMEgkKBUhFQVZZEA0SDAoIT1ZFUkZM",
            "T1cQDhIICgRSQUdFEA8SDQoJUkVBTklNQVRFEBASCwoHU0hBVFRFUhAREgkK",
            "BVNXSU5HEBISCAoEVFVSThATEg4KCkdPVF9EQU1BR0UQFBIOCgpBVF9ERUZF",
            "TlNFEBUSCwoHSU5fSEFORBAWEg0KCUtJTExfVU5JVBAXEg0KCVBFUk1BTkVO",
            "VBAYEgkKBUJMSVRaEBkiOAoRQXR0YWNrUmVzdHJpY3Rpb24iIwoERW51bRIH",
            "CgNBTlkQABISCg5PTkxZX0RJRkZFUkVOVBABIrABChNDYXJkQWJpbGl0eUJ1",
            "ZmZUeXBlIpgBCgRFbnVtEggKBE5PTkUQABIJCgVHVUFSRBABEgsKB0RFRkVO",
            "Q0UQAhIJCgVIRUFWWRADEgoKBldFQVBPThAEEggKBFJVU0gQBRIKCgZBVFRB",
            "Q0sQBhIKCgZGUkVFWkUQBxIKCgZEQU1BR0UQCBINCglIRUFMX0FMTFkQCRIL",
            "CgdERVNUUk9ZEAoSDQoJUkVBTklNQVRFEAsiSQoXQ2FyZEFiaWxpdHlBY3Rp",
            "dml0eVR5cGUiLgoERW51bRINCglVTkRFRklORUQQABILCgdQQVNTSVZFEAES",
            "CgoGQUNUSVZFEAIirAEKEkNhcmRBYmlsaXR5VHJpZ2dlciKVAQoERW51bRIN",
            "CglVTkRFRklORUQQABIICgRUVVJOEAESCQoFRU5UUlkQAhIHCgNFTkQQAxIK",
            "CgZBVFRBQ0sQBBIJCgVERUFUSBAFEg0KCVBFUk1BTkVOVBAGEg4KCkdPVF9E",
            "QU1BR0UQBxIOCgpBVF9ERUZFTkNFEAgSCwoHSU5fSEFORBAJEg0KCUtJTExf",
            "VU5JVBAKItkCChFDYXJkQWJpbGl0eUVmZmVjdCLDAgoERW51bRIICgROT05F",
            "EAASFgoSTUFTU0lWRV9XQVRFUl9XQVZFEAESEAoMTUFTU0lWRV9GSVJFEAIS",
            "FQoRTUFTU0lWRV9MSUdIVE5JTkcQAxIVChFNQVNTSVZFX1RPWElDX0FMTBAE",
            "Eg8KC1RBUkdFVF9ST0NLEAUSDwoLVEFSR0VUX0ZJUkUQBhIPCgtUQVJHRVRf",
            "TElGRRAHEhAKDFRBUkdFVF9UT1hJQxAIEhAKDFRBUkdFVF9XQVRFUhAJEhsK",
            "F1RBUkdFVF9BREpVU1RNRU5UU19CT01CEAoSEAoMU1RVTl9GUkVFWkVTEAsS",
            "GgoWU1RVTl9PUl9EQU1BR0VfRlJFRVpFUxAMEhoKFlRBUkdFVF9BREpVU1RN",
            "RU5UU19BSVIQDRIRCg1IRUFMX0RJUkVDVExZEA4SCAoESEVBTBAPItsTCg9D",
            "YXJkQWJpbGl0eVR5cGUixxMKBEVudW0SDQoJVU5ERUZJTkVEEAASCAoESEVB",
            "TBABEhUKEU1PRElGSUNBVE9SX1NUQVRTEAISDwoLQ0hBTkdFX1NUQVQQAxII",
            "CgRTVFVOEAQSHgoaU1RVTl9PUl9EQU1BR0VfQURKVVNUTUVOVFMQBRIJCgVT",
            "UFVSVBAGEhAKDEFERF9HT09fVklBTBAHEhMKD0FERF9HT09fQ0FSUklFUhAI",
            "EgcKA0RPVBAJEgoKBlNVTU1PThAKEhAKDFNQRUxMX0FUVEFDSxALEhIKDk1B",
            "U1NJVkVfREFNQUdFEAwSHQoZREFNQUdFX1RBUkdFVF9BREpVU1RNRU5UUxAN",
            "EhEKDURBTUFHRV9UQVJHRVQQDhIPCgtDQVJEX1JFVFVSThAPEgoKBldFQVBP",
            "ThAQEiQKIENIQU5HRV9TVEFUX09GX0NSRUFUVVJFU19CWV9UWVBFEBESIwof",
            "QVRUQUNLX05VTUJFUl9PRl9USU1FU19QRVJfVFVSThASEg0KCURSQVdfQ0FS",
            "RBATEiQKIERFVk9VUl9aT01CSUVTX0FORF9DT01CSU5FX1NUQVRTEBQSGAoU",
            "REVTVFJPWV9VTklUX0JZX1RZUEUQFRIeChpMT1dFUl9DT1NUX09GX0NBUkRf",
            "SU5fSEFORBAWEhAKDE9WRVJGTE9XX0dPTxAXEgwKCExPU0VfR09PEBgSGQoV",
            "RElTQUJMRV9ORVhUX1RVUk5fR09PEBkSCAoEUkFHRRAaEhAKDEZSRUVaRV9V",
            "TklUUxAbEhwKGFRBS0VfREFNQUdFX1JBTkRPTV9FTkVNWRAcEhsKF1RBS0Vf",
            "Q09OVFJPTF9FTkVNWV9VTklUEB0SCQoFR1VBUkQQHhIXChNERVNUUk9ZX0ZS",
            "T1pFTl9VTklUEB8SIQodVVNFX0FMTF9HT09fVE9fSU5DUkVBU0VfU1RBVFMQ",
            "IBIWChJGSVJTVF9VTklUX0lOX1BMQVkQIRIoCiRBTExZX1VOSVRTX09GX1RZ",
            "UEVfSU5fUExBWV9HRVRfU1RBVFMQIhImCiJEQU1BR0VfRU5FTVlfVU5JVFNf",
            "QU5EX0ZSRUVaRV9USEVNECMSKQolUkVUVVJOX1VOSVRTX09OX0JPQVJEX1RP",
            "X09XTkVSU19ERUNLUxAkEikKJVRBS0VfVU5JVF9UWVBFX1RPX0FESkFDRU5U",
            "X0FMTFlfVU5JVFMQJRIkCiBFTkVNWV9USEFUX0FUVEFDS1NfQkVDT01FX0ZS",
            "T1pFThAmEh8KG1RBS0VfVU5JVF9UWVBFX1RPX0FMTFlfVU5JVBAnEigKJFJF",
            "VklWRV9ESUVEX1VOSVRTX09GX1RZUEVfRlJPTV9NQVRDSBAoEiIKHkNIQU5H",
            "RV9TVEFUX1VOVElMTF9FTkRfT0ZfVFVSThApEhMKD0FUVEFDS19PVkVSTE9S",
            "RBAqEhwKGEFESkFDRU5UX1VOSVRTX0dFVF9IRUFWWRArEiAKHEZSRUVaRV9O",
            "VU1CRVJfT0ZfUkFORE9NX0FMTFkQLBIcChhBRERfQ0FSRF9CWV9OQU1FX1RP",
            "X0hBTkQQLRIqCiZERUFMX0RBTUFHRV9UT19USElTX0FORF9BREpBQ0VOVF9V",
            "TklUUxAuEgkKBVNXSU5HEC8SMgouVEFLRV9ERUZFTlNFX0lGX09WRVJMT1JE",
            "X0hBU19MRVNTX0RFRkVOU0VfVEhBThAwEjIKLkdBSU5fTlVNQkVSX09GX0xJ",
            "RkVfRk9SX0VBQ0hfREFNQUdFX1RISVNfREVBTFMQMRIoCiRBRERJVElPTkFM",
            "X0RBTUFHRV9UT19IRUFWWV9JTl9BVFRBQ0sQMhIPCgtVTklUX1dFQVBPThAz",
            "EiYKIlRBS0VfREFNQUdFX0FUX0VORF9PRl9UVVJOX1RPX1RISVMQNBIiCh5E",
            "RUxBWUVEX0xPU0VfSEVBVllfR0FJTl9BVFRBQ0sQNRIXChNERUxBWUVEX0dB",
            "SU5fQVRUQUNLEDYSEgoOUkVBTklNQVRFX1VOSVQQNxITCg9QUklPUklUWV9B",
            "VFRBQ0sQOBIkCiBERVNUUk9ZX1RBUkdFVF9VTklUX0FGVEVSX0FUVEFDSxA5",
            "EiMKH0NPU1RTX0xFU1NfSUZfQ0FSRF9UWVBFX0lOX0hBTkQQOhIpCiVSRVRV",
            "Uk5fVU5JVFNfT05fQk9BUkRfVE9fT1dORVJTX0hBTkRTEDsSLAooUkVQTEFD",
            "RV9VTklUU19XSVRIX1RZUEVfT05fU1RST05HRVJfT05FUxA8Eh4KGlJFU1RP",
            "UkVfREVGX1JBTkRPTUxZX1NQTElUED0SHAoYQURKQUNFTlRfVU5JVFNfR0VU",
            "X0dVQVJEED4SGQoVU1VNTU9OX1VOSVRfRlJPTV9IQU5EED8SHgoaREFNQUdF",
            "X0FORF9ESVNUUkFDVF9UQVJHRVQQQBInCiNEUkFXX0NBUkRfSUZfREFNQUdF",
            "RF9aT01CSUVfSU5fUExBWRBBEi8KK1RBS0VfU1RBVF9JRl9PVkVSTE9SRF9I",
            "QVNfTEVTU19ERUZFTlNFX1RIQU4QQhIpCiVEQU1BR0VfT1ZFUkxPUkRfT05f",
            "Q09VTlRfSVRFTVNfUExBWUVEEEMSHQoZU0hVRkZMRV9USElTX0NBUkRfVE9f",
            "REVDSxBEEikKJVRBS0VfREVGRU5TRV9UT19PVkVSTE9SRF9XSVRIX0RFRkVO",
            "U0UQRRImCiJQVVRfUkFORE9NX1VOSVRfRlJPTV9ERUNLX09OX0JPQVJEEEYS",
            "DAoIRElTVFJBQ1QQRxInCiNEQU1BR0VfVEFSR0VUX0ZSRUVaRV9JVF9JRl9T",
            "VVJWSVZFUxBIEhgKFERFU1RST1lfVU5JVF9CWV9DT1NUEEkSKAokREFNQUdF",
            "X0VORU1ZX09SX1JFU1RPUkVfREVGRU5TRV9BTExZEEoSFwoTVEFLRV9TV0lO",
            "R19UT19VTklUUxBLEi0KKURFTEFZRURfUExBQ0VfQ09QSUVTX0lOX1BMQVlf",
            "REVTVFJPWV9VTklUEEwSGwoXQURKQUNFTlRfVU5JVFNfR0VUX1NUQVQQTRId",
            "ChlFWFRSQV9HT09fSUZfVU5JVF9JTl9QTEFZEE4SEQoNREVTVFJPWV9VTklU",
            "UxBPEiEKHURFQUxfREFNQUdFX1RPX1VOSVRfQU5EX1NXSU5HEFASGwoXU0VU",
            "X0FUVEFDS19BVkFJTEFCSUxJVFkQURIXChNDSE9PU0FCTEVfQUJJTElUSUVT",
            "EFISIwofQ09TVFNfTEVTU19JRl9UWVBFX0NBUkRfSU5fUExBWRBTEgwKCEdB",
            "SU5fR09PEFQSCQoFQkxJVFoQVRIYChREUkFXX0NBUkRfQllfRkFDVElPThBW",
            "IrQCChVDYXJkQWJpbGl0eVN1YlRyaWdnZXIimgIKBEVudW0SCAoETm9uZRAA",
            "EhYKEk9ubHlUaGlzVW5pdEluUGxheRABEhsKF0FsbE90aGVyQWxseVVuaXRz",
            "SW5QbGF5EAISFgoSQWxsQWxseVVuaXRzSW5QbGF5EAMSDgoKUmFuZG9tVW5p",
            "dBAEEhcKE0FsbEVuZW15VW5pdHNJblBsYXkQBRIfChtBbGxBbGx5VW5pdHNC",
            "eUZhY3Rpb25JblBsYXkQBhIeChpGb3JFYWNoRmFjdGlvbk9mVW5pdEluSGFu",
            "ZBAHEh8KG0lmSGFzVW5pdHNXaXRoRmFjdGlvbkluUGxheRAIEh4KGkFsbHlV",
            "bml0c0J5RmFjdGlvblRoYXRDb3N0EAkSEAoMWW91ck92ZXJsb3JkEAoiOgoI",
            "Q2FyZEtpbmQiLgoERW51bRINCglVTkRFRklORUQQABIMCghDUkVBVFVSRRAB",
            "EgkKBVNQRUxMEAIiSQoQQWZmZWN0T2JqZWN0VHlwZSI1CgRFbnVtEggKBE5P",
            "TkUQABIKCgZQTEFZRVIQARINCglDSEFSQUNURVIQAhIICgRDQVJEEAMiWgoM",
            "Q3JlYXR1cmVSYW5rIkoKBEVudW0SDQoJVU5ERUZJTkVEEAASCgoGTUlOSU9O",
            "EAESCwoHT0ZGSUNFUhACEg0KCUNPTU1BTkRFUhADEgsKB0dFTkVSQUwQBCJC",
            "CgxDcmVhdHVyZVR5cGUiMgoERW51bRIICgROT05FEAASCgoGV0FMS0VSEAES",
            "CQoFRkVSQUwQAhIJCgVIRUFWWRADInMKC0NhcmRTZXRUeXBlImQKBEVudW0S",
            "CAoETk9ORRAAEggKBEZJUkUQARIJCgVXQVRFUhACEgkKBUVBUlRIEAMSBwoD",
            "QUlSEAQSCAoETElGRRAFEgkKBVRPWElDEAYSCAoESVRFTRAHEgoKBk9USEVS",
            "UxAIIvIBCglHYW1lU3RhdGUSCgoCaWQYASABKAMSDwoHaXNFbmRlZBgCIAEo",
            "CBIaChJjdXJyZW50UGxheWVySW5kZXgYAyABKAUSIgoMcGxheWVyU3RhdGVz",
            "GAQgAygLMgwuUGxheWVyU3RhdGUSGgoSY3VycmVudEFjdGlvbkluZGV4GAUg",
            "ASgDEiQKDXBsYXllckFjdGlvbnMYBiADKAsyDS5QbGF5ZXJBY3Rpb24SEgoK",
            "cmFuZG9tU2VlZBgHIAEoAxIOCgZ3aW5uZXIYCCABKAkSDwoHdmVyc2lvbhgJ",
            "IAEoCRIRCgljcmVhdGVkQXQYCiABKAMiTwoUQ2FyZENob29zYWJsZUFiaWxp",
            "dHkSEwoLZGVzY3JpcHRpb24YASABKAkSIgoMYWJpbGl0eV9kYXRhGAIgASgL",
            "MgwuQ2FyZEFiaWxpdHkiyQgKC0NhcmRBYmlsaXR5EiMKBHR5cGUYASABKA4y",
            "FS5DYXJkQWJpbGl0eVR5cGUuRW51bRIzCgxhY3Rpdml0eVR5cGUYAiABKA4y",
            "HS5DYXJkQWJpbGl0eUFjdGl2aXR5VHlwZS5FbnVtEikKB3RyaWdnZXIYAyAB",
            "KA4yGC5DYXJkQWJpbGl0eVRyaWdnZXIuRW51bRIsCgt0YXJnZXRUeXBlcxgE",
            "IAMoDjIXLkNhcmRBYmlsaXR5VGFyZ2V0LkVudW0SHAoEc3RhdBgFIAEoDjIO",
            "LlN0YXRUeXBlLkVudW0SHgoDc2V0GAYgASgOMhEuQ2FyZFNldFR5cGUuRW51",
            "bRInCgZlZmZlY3QYByABKA4yFy5DYXJkQWJpbGl0eUVmZmVjdC5FbnVtEjIK",
            "EWF0dGFja1Jlc3RyaWN0aW9uGAggASgOMhcuQXR0YWNrUmVzdHJpY3Rpb24u",
            "RW51bRIqCg50YXJnZXRDYXJkVHlwZRgJIAEoDjISLkNyZWF0dXJlVHlwZS5F",
            "bnVtEjgKF3RhcmdldFVuaXRTcGVjaWFsU3RhdHVzGAogASgOMhcuVW5pdFNw",
            "ZWNpYWxTdGF0dXMuRW51bRIqCg50YXJnZXRVbml0VHlwZRgLIAEoDjISLkNy",
            "ZWF0dXJlVHlwZS5FbnVtEg0KBXZhbHVlGAwgASgFEg4KBmF0dGFjaxgNIAEo",
            "BRIPCgdkZWZlbnNlGA4gASgFEgwKBG5hbWUYDyABKAkSDQoFdHVybnMYECAB",
            "KAUSDQoFY291bnQYESABKAUSDQoFZGVsYXkYEiABKAUSOgoTVmlzdWFsRWZm",
            "ZWN0c1RvUGxheRgTIAMoCzIdLkNhcmRBYmlsaXR5LlZpc3VhbEVmZmVjdElu",
            "Zm8SRgobZ2FtZU1lY2hhbmljRGVzY3JpcHRpb25UeXBlGBQgASgOMiEuR2Ft",
            "ZU1lY2hhbmljRGVzY3JpcHRpb25UeXBlLkVudW0SJQoKdGFyZ2V0X3NldBgV",
            "IAEoDjIRLkNhcmRTZXRUeXBlLkVudW0SMAoLc3ViX3RyaWdnZXIYFiABKA4y",
            "Gy5DYXJkQWJpbGl0eVN1YlRyaWdnZXIuRW51bRIyChNjaG9vc2FibGVfYWJp",
            "bGl0aWVzGBcgAygLMhUuQ2FyZENob29zYWJsZUFiaWxpdHkSEAoIZGVmZW5z",
            "ZTIYGCABKAUSDAoEY29zdBgZIAEoBRq9AQoQVmlzdWFsRWZmZWN0SW5mbxI8",
            "CgRUeXBlGAEgASgOMi4uQ2FyZEFiaWxpdHkuVmlzdWFsRWZmZWN0SW5mby5W",
            "aXN1YWxFZmZlY3RUeXBlEgwKBFBhdGgYAiABKAkiXQoQVmlzdWFsRWZmZWN0",
            "VHlwZRINCglVbmRlZmluZWQQABIKCgZJbXBhY3QQARIKCgZNb3ZpbmcQAhIQ",
            "CgxJbXBhY3RfSGVhdnkQAxIQCgxJbXBhY3RfRmVyYWwQBCI6Cg9DYXJkQWJp",
            "bGl0eVJhZ2USEwoLYWRkZWRBdHRhY2sYASABKAUSEgoKd2FzQXBwbGllZBgC",
            "IAEoCCJRChlDYXJkQWJpbGl0eVByaW9yaXR5QXR0YWNrEhoKEmF0dGFja2Vy",
            "T2xkRGVmZW5zZRgBIAEoBRIYChB0YXJnZXRPbGREZWZlbnNlGAIgASgFIrsC",
            "ChNQbGF5ZXJBY3Rpb25PdXRjb21lEjsKBHJhZ2UYASABKAsyKy5QbGF5ZXJB",
            "Y3Rpb25PdXRjb21lLkNhcmRBYmlsaXR5UmFnZU91dGNvbWVIABJPCg5wcmlv",
            "cml0eUF0dGFjaxgCIAEoCzI1LlBsYXllckFjdGlvbk91dGNvbWUuQ2FyZEFi",
            "aWxpdHlQcmlvcml0eUF0dGFja091dGNvbWVIABo/ChZDYXJkQWJpbGl0eVJh",
            "Z2VPdXRjb21lEhIKCmluc3RhbmNlSWQYASABKAUSEQoJbmV3QXR0YWNrGAIg",
            "ASgFGkoKIENhcmRBYmlsaXR5UHJpb3JpdHlBdHRhY2tPdXRjb21lEhIKCmlu",
            "c3RhbmNlSWQYASABKAUSEgoKbmV3RGVmZW5zZRgCIAEoBUIJCgdPdXRjb21l",
            "InwKE0NhcmRBYmlsaXR5SW5zdGFuY2USIAoEcmFnZRgBIAEoCzIQLkNhcmRB",
            "YmlsaXR5UmFnZUgAEjQKDnByaW9yaXR5QXR0YWNrGAIgASgLMhouQ2FyZEFi",
            "aWxpdHlQcmlvcml0eUF0dGFja0gAQg0KC0FiaWxpdHlUeXBlItEBCgxDYXJk",
            "SW5zdGFuY2USGAoJcHJvdG90eXBlGAEgASgLMgUuQ2FyZBISCgppbnN0YW5j",
            "ZUlkGAIgASgFEisKCGluc3RhbmNlGAMgASgLMhkuQ2FyZEluc3RhbmNlU3Bl",
            "Y2lmaWNEYXRhEg0KBW93bmVyGAQgASgJEiUKHWFiaWxpdGllc0luc3RhbmNl",
            "c0luaXRpYWxpemVkGAUgASgIEjAKEmFiaWxpdGllc0luc3RhbmNlcxgGIAMo",
            "CzIULkNhcmRBYmlsaXR5SW5zdGFuY2UiHQoLRGF0YUlkT3duZXISDgoGZGF0",
            "YUlkGAEgASgFIiAKCENhcmREZWNrEhQKBWNhcmRzGAEgAygLMgUuQ2FyZCIl",
            "Cg9JbnN0YW5jZUlkT3duZXISEgoKaW5zdGFuY2VJZBgBIAEoBSLUAQoQT3Zl",
            "cmxvcmRJbnN0YW5jZRISCgppbnN0YW5jZUlkGAEgASgFEiUKCXByb3RvdHlw",
            "ZRgCIAEoCzISLk92ZXJsb3JkUHJvdG90eXBlEioKCmZpcnN0U2tpbGwYAyAB",
            "KAsyFi5PdmVybG9yZFNraWxsSW5zdGFuY2USKwoLc2Vjb25kU2tpbGwYBCAB",
            "KAsyFi5PdmVybG9yZFNraWxsSW5zdGFuY2USDwoHZGVmZW5zZRgFIAEoBRIL",
            "CgNnb28YBiABKAUSDgoGbWF4R29vGAcgASgFIuIBChFPdmVybG9yZFByb3Rv",
            "dHlwZRIOCgZoZXJvSWQYASABKAUSDAoEaWNvbhgCIAEoCRIMCgRuYW1lGAMg",
            "ASgJEhgKEHNob3J0RGVzY3JpcHRpb24YBCABKAkSFwoPbG9uZ0Rlc2NyaXB0",
            "aW9uGAUgASgJEhIKCmV4cGVyaWVuY2UYBiABKAUSDQoFbGV2ZWwYByABKAUS",
            "IgoHZWxlbWVudBgIIAEoDjIRLkNhcmRTZXRUeXBlLkVudW0SJwoGc2tpbGxz",
            "GAkgAygLMhcuT3ZlcmxvcmRTa2lsbFByb3RvdHlwZSJVChVPdmVybG9yZFNr",
            "aWxsSW5zdGFuY2USKgoJcHJvdG90eXBlGAEgASgLMhcuT3ZlcmxvcmRTa2ls",
            "bFByb3RvdHlwZRIQCghjb29sZG93bhgCIAEoBSLFAgoWT3ZlcmxvcmRTa2ls",
            "bFByb3RvdHlwZRINCgV0aXRsZRgBIAEoCRINCgVza2lsbBgCIAEoCRIQCghp",
            "Y29uUGF0aBgDIAEoCRITCgtkZXNjcmlwdGlvbhgEIAEoCRIQCghjb29sZG93",
            "bhgFIAEoBRIXCg9pbml0aWFsQ29vbGRvd24YBiABKAUSEQoJcGFyYW1ldGVy",
            "GAcgASgFEg4KBmF0dGFjaxgIIAEoBRIyChFvdmVybG9yZFNraWxsS2luZBgJ",
            "IAEoDjIXLk92ZXJsb3JkU2tpbGxLaW5kLkVudW0SNQoQc2tpbGxUYXJnZXRU",
            "eXBlcxgKIAMoDjIbLk92ZXJsb3JkQWJpbGl0eVRhcmdldC5FbnVtEi0KEmVs",
            "ZW1lbnRUYXJnZXRUeXBlcxgLIAMoDjIRLkNhcmRTZXRUeXBlLkVudW0iGAoW",
            "UGxheWVyQWN0aW9uTGVhdmVNYXRjaCJFChRQbGF5ZXJBY3Rpb25DYXJkUGxh",
            "eRIbCgRjYXJkGAEgASgLMg0uQ2FyZEluc3RhbmNlEhAKCHBvc2l0aW9uGAIg",
            "ASgFIksKFFBsYXllckFjdGlvblJhbmtCdWZmEhsKBGNhcmQYASABKAsyDS5D",
            "YXJkSW5zdGFuY2USFgoHdGFyZ2V0cxgCIAMoCzIFLlVuaXQiggEKFlBsYXll",
            "ckFjdGlvbkNhcmRBdHRhY2sSHwoIYXR0YWNrZXIYASABKAsyDS5DYXJkSW5z",
            "dGFuY2USMAoQYWZmZWN0T2JqZWN0VHlwZRgCIAEoDjIWLkFmZmVjdE9iamVj",
            "dFR5cGUuRW51bRIVCgZ0YXJnZXQYAyABKAsyBS5Vbml0IokBChtQbGF5ZXJB",
            "Y3Rpb25DYXJkQWJpbGl0eVVzZWQSGwoEY2FyZBgBIAEoCzINLkNhcmRJbnN0",
            "YW5jZRIgCghjYXJkS2luZBgCIAEoDjIOLkNhcmRLaW5kLkVudW0SFgoHdGFy",
            "Z2V0cxgDIAMoCzIFLlVuaXQSEwoLQWJpbGl0eVR5cGUYBCABKAkieQodUGxh",
            "eWVyQWN0aW9uT3ZlcmxvcmRTa2lsbFVzZWQSDwoHU2tpbGxJZBgBIAEoAxIw",
            "ChBhZmZlY3RPYmplY3RUeXBlGAIgASgOMhYuQWZmZWN0T2JqZWN0VHlwZS5F",
            "bnVtEhUKBnRhcmdldBgDIAEoCzIFLlVuaXQiOwoUUGxheWVyQWN0aW9uRHJh",
            "d0NhcmQSIwoMY2FyZEluc3RhbmNlGAIgASgLMg0uQ2FyZEluc3RhbmNlIhUK",
            "E1BsYXllckFjdGlvbkVuZFR1cm4iPgoUUGxheWVyQWN0aW9uTXVsbGlnYW4S",
            "JgoPbXVsbGlnYW5lZENhcmRzGAEgAygLMg0uQ2FyZEluc3RhbmNlIjUKD1N0",
            "YXJ0R2FtZUFjdGlvbhIiCgxwbGF5ZXJTdGF0ZXMYASADKAsyDC5QbGF5ZXJT",
            "dGF0ZSJrCgRVbml0EhIKCmluc3RhbmNlSWQYASABKAUSMAoQYWZmZWN0T2Jq",
            "ZWN0VHlwZRgCIAEoDjIWLkFmZmVjdE9iamVjdFR5cGUuRW51bRIdCglQYXJh",
            "bWV0ZXIYAyABKAsyCi5QYXJhbWV0ZXIiPgoJUGFyYW1ldGVyEg4KBkF0dGFj",
            "axgBIAEoBRIPCgdEZWZlbnNlGAIgASgFEhAKCENhcmROYW1lGAMgASgJIswD",
            "ChFPdmVybG9yZFNraWxsS2luZCK2AwoERW51bRIICgROT05FEAASCAoEUFVT",
            "SBABEggKBERSQVcQAhIPCgtXSU5EX1NISUVMRBADEgwKCExFVklUQVRFEAQS",
            "CwoHUkVUUkVBVBAFEgoKBkhBUkRFThAGEg4KClNUT05FX1NLSU4QBxILCgdG",
            "T1JUSUZZEAgSCwoHUEhBTEFOWBAJEgwKCEZPUlRSRVNTEAoSDQoJRklSRV9C",
            "T0xUEAsSCgoGUkFCSUVTEAwSDAoIRklSRUJBTEwQDRIPCgtNQVNTX1JBQklF",
            "UxAOEhEKDU1FVEVPUl9TSE9XRVIQDxIRCg1IRUFMSU5HX1RPVUNIEBASCAoE",
            "TUVORBAREg0KCVJFU1NVUkVDVBASEgsKB0VOSEFOQ0UQExINCglSRUFOSU1B",
            "VEUQFBIPCgtQT0lTT05fREFSVBAVEg8KC1RPWElDX1BPV0VSEBYSDAoIQlJF",
            "QUtPVVQQFxIKCgZJTkZFQ1QQGBIMCghFUElERU1JQxAZEgoKBkZSRUVaRRAa",
            "EgwKCElDRV9CT0xUEBsSDAoISUNFX1dBTEwQHBILCgdTSEFUVEVSEB0SDAoI",
            "QkxJWlpBUkQQHiI5CghTdGF0VHlwZSItCgRFbnVtEg0KCVVOREVGSU5FRBAA",
            "EgoKBkhFQUxUSBABEgoKBkRBTUFHRRACIjEKEVVuaXRTcGVjaWFsU3RhdHVz",
            "IhwKBEVudW0SCAoETk9ORRAAEgoKBkZST1pFThABIkoKCkdhbWVSZXBsYXkS",
            "HgoHYWN0aW9ucxgFIAMoCzINLlBsYXllckFjdGlvbhIcCgZibG9ja3MYBiAD",
            "KAsyDC5IaXN0b3J5RGF0YSIpCgZQbGF5ZXISCgoCaWQYASABKAkSEwoEZGVj",
            "axgCIAEoCzIFLkRlY2siaQoEWm9uZSJhCgR0eXBlEggKBFBMQVkQABIICgRE",
            "RUNLEAESCAoESEFORBACEg0KCUdSQVZFWUFSRBADEhIKDlJFTU9WRUZST01H",
            "QU1FEAQSDAoIU0VUQVNJREUQBRIKCgZTRUNSRVQQBiIlCgdIaXN0b3J5EhoK",
            "BGxpc3QYASADKAsyDC5IaXN0b3J5RGF0YSKNAgoLSGlzdG9yeURhdGESKAoK",
            "Y3JlYXRlR2FtZRgBIAEoCzISLkhpc3RvcnlDcmVhdGVHYW1lSAASLAoMZnVs",
            "bEluc3RhbmNlGAIgASgLMhQuSGlzdG9yeUZ1bGxJbnN0YW5jZUgAEigKDHNo",
            "b3dJbnN0YW5jZRgDIAEoCzIQLkhpc3RvcnlJbnN0YW5jZUgAEiQKDGhpZGVJ",
            "bnN0YW5jZRgEIAEoCzIMLkhpc3RvcnlIaWRlSAASKgoOY2hhbmdlSW5zdGFu",
            "Y2UYBSABKAsyEC5IaXN0b3J5SW5zdGFuY2VIABIiCgdlbmRHYW1lGAYgASgL",
            "Mg8uSGlzdG9yeUVuZEdhbWVIAEIGCgRkYXRhImIKEUhpc3RvcnlDcmVhdGVH",
            "YW1lEg4KBmdhbWVJZBgBIAEoAxIYCgdwbGF5ZXJzGAIgAygLMgcuUGxheWVy",
            "EhIKCnJhbmRvbVNlZWQYAyABKAMSDwoHdmVyc2lvbhgEIAEoCSJKChNIaXN0",
            "b3J5RnVsbEluc3RhbmNlEhIKCmluc3RhbmNlSWQYASABKAUSDgoGYXR0YWNr",
            "GAIgASgFEg8KB2RlZmVuc2UYAyABKAUiVwoPSGlzdG9yeUluc3RhbmNlEhIK",
            "Cmluc3RhbmNlSWQYASABKAUSDQoFdmFsdWUYAiABKAUiIQoGY2hhbmdlEgoK",
            "BkF0dGFjaxAAEgsKB0RlZmVuc2UQASI2CgtIaXN0b3J5SGlkZRISCgppbnN0",
            "YW5jZUlkGAEgASgFEhMKBHpvbmUYAiABKAsyBS5ab25lIkMKDkhpc3RvcnlF",
            "bmRHYW1lEg8KB21hdGNoSWQYASABKAMSDgoGdXNlcklkGAIgASgJEhAKCHdp",
            "bm5lcklkGAMgASgJKicKDEdhbWVNb2RlVHlwZRINCglDb21tdW5pdHkQABII",
            "CgRMb29tEAEqOAoaT3ZlcmxvcmRTa2lsbFNlbGVjdGlvblR5cGUSCwoHUHJp",
            "bWFyeRAAEg0KCVNlY29uZGFyeRABQiOqAiBMb29tLlpvbWJpZUJhdHRsZWdy",
            "b3VuZC5Qcm90b2J1ZmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Loom.Client.Protobuf.TypesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Loom.ZombieBattleground.Protobuf.GameModeType), typeof(global::Loom.ZombieBattleground.Protobuf.OverlordSkillSelectionType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.Account), global::Loom.ZombieBattleground.Protobuf.Account.Parser, new[]{ "UserId", "PhoneNumberVerified", "RewardRedeemed", "IsKickstarter", "Image", "EmailNotification", "EloScore", "CurrentTier", "GameMembershipTier", "Owner" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.Deck), global::Loom.ZombieBattleground.Protobuf.Deck.Parser, new[]{ "Id", "Name", "HeroId", "Cards", "PrimarySkill", "SecondarySkill" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.Card), global::Loom.ZombieBattleground.Protobuf.Card.Parser, new[]{ "MouldId", "Kind", "Set", "Name", "Description", "FlavorText", "Picture", "Rank", "Type", "Frame", "Attack", "Defense", "GooCost", "CardViewInfo", "Abilities", "UniqueAnimation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardInstanceSpecificData), global::Loom.ZombieBattleground.Protobuf.CardInstanceSpecificData.Parser, new[]{ "Attack", "Defense", "Type", "Set", "GooCost" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardViewInfo), global::Loom.ZombieBattleground.Protobuf.CardViewInfo.Parser, new[]{ "Position", "Scale" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.Vector3Float), global::Loom.ZombieBattleground.Protobuf.Vector3Float.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.Vector2Int), global::Loom.ZombieBattleground.Protobuf.Vector2Int.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.Rect), global::Loom.ZombieBattleground.Protobuf.Rect.Parser, new[]{ "Position", "Size" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardList), global::Loom.ZombieBattleground.Protobuf.CardList.Parser, new[]{ "Cards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardCollectionCard), global::Loom.ZombieBattleground.Protobuf.CardCollectionCard.Parser, new[]{ "CardName", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.DeckCard), global::Loom.ZombieBattleground.Protobuf.DeckCard.Parser, new[]{ "CardName", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardLibrary), global::Loom.ZombieBattleground.Protobuf.CardLibrary.Parser, new[]{ "Cards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.Hero), global::Loom.ZombieBattleground.Protobuf.Hero.Parser, new[]{ "HeroId", "Icon", "Name", "ShortDescription", "LongDescription", "Element", "Experience", "Level", "Skills", "PrimarySkill", "SecondarySkill" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.ListHeroesRequest), global::Loom.ZombieBattleground.Protobuf.ListHeroesRequest.Parser, new[]{ "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.ListHeroesResponse), global::Loom.ZombieBattleground.Protobuf.ListHeroesResponse.Parser, new[]{ "Heroes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.AddHeroExperienceRequest), global::Loom.ZombieBattleground.Protobuf.AddHeroExperienceRequest.Parser, new[]{ "UserId", "HeroId", "Experience" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.AddHeroExperienceResponse), global::Loom.ZombieBattleground.Protobuf.AddHeroExperienceResponse.Parser, new[]{ "HeroId", "Experience" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GetHeroRequest), global::Loom.ZombieBattleground.Protobuf.GetHeroRequest.Parser, new[]{ "UserId", "HeroId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GetHeroResponse), global::Loom.ZombieBattleground.Protobuf.GetHeroResponse.Parser, new[]{ "Hero" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GetHeroSkillsRequest), global::Loom.ZombieBattleground.Protobuf.GetHeroSkillsRequest.Parser, new[]{ "UserId", "HeroId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GetHeroSkillsResponse), global::Loom.ZombieBattleground.Protobuf.GetHeroSkillsResponse.Parser, new[]{ "HeroId", "Skills" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.Skill), global::Loom.ZombieBattleground.Protobuf.Skill.Parser, new[]{ "Title", "Skill_", "IconPath", "Description", "SkillTargets", "TargetUnitSpecialStatus", "ElementTargets", "Value", "Cooldown", "InitialCooldown", "Attack", "Count", "Id", "Unlocked", "CanSelectTarget", "UnitStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.HeroList), global::Loom.ZombieBattleground.Protobuf.HeroList.Parser, new[]{ "Heroes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardCollectionList), global::Loom.ZombieBattleground.Protobuf.CardCollectionList.Parser, new[]{ "Cards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.DeckList), global::Loom.ZombieBattleground.Protobuf.DeckList.Parser, new[]{ "Decks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.AIType), global::Loom.ZombieBattleground.Protobuf.AIType.Parser, null, null, new[]{ typeof(global::Loom.ZombieBattleground.Protobuf.AIType.Types.Enum) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.AIDeck), global::Loom.ZombieBattleground.Protobuf.AIDeck.Parser, new[]{ "Deck", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.AIDeckList), global::Loom.ZombieBattleground.Protobuf.AIDeckList.Parser, new[]{ "Decks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.InitRequest), global::Loom.ZombieBattleground.Protobuf.InitRequest.Parser, new[]{ "DefaultDecks", "DefaultCollection", "Cards", "Heroes", "AiDecks", "Version", "Oracle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.UpdateOracle), global::Loom.ZombieBattleground.Protobuf.UpdateOracle.Parser, new[]{ "NewOracle", "OldOracle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.UpdateInitRequest), global::Loom.ZombieBattleground.Protobuf.UpdateInitRequest.Parser, new[]{ "DefaultDecks", "DefaultCollection", "Cards", "Heroes", "AiDecks", "Version", "Oracle", "OldVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GetInitRequest), global::Loom.ZombieBattleground.Protobuf.GetInitRequest.Parser, new[]{ "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GetInitResponse), global::Loom.ZombieBattleground.Protobuf.GetInitResponse.Parser, new[]{ "DefaultDecks", "DefaultCollection", "Cards", "Heroes", "DefaultHeroes", "AiDecks", "Version", "Oracle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.UpdateCardListRequest), global::Loom.ZombieBattleground.Protobuf.UpdateCardListRequest.Parser, new[]{ "Cards", "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GetCardListRequest), global::Loom.ZombieBattleground.Protobuf.GetCardListRequest.Parser, new[]{ "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GetCardListResponse), global::Loom.ZombieBattleground.Protobuf.GetCardListResponse.Parser, new[]{ "Cards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.UpsertAccountRequest), global::Loom.ZombieBattleground.Protobuf.UpsertAccountRequest.Parser, new[]{ "UserId", "PhoneNumberVerified", "RewardRedeemed", "IsKickstarter", "Image", "EmailNotification", "EloScore", "CurrentTier", "GameMembershipTier", "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GetAccountRequest), global::Loom.ZombieBattleground.Protobuf.GetAccountRequest.Parser, new[]{ "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GetDeckRequest), global::Loom.ZombieBattleground.Protobuf.GetDeckRequest.Parser, new[]{ "UserId", "DeckId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GetDeckResponse), global::Loom.ZombieBattleground.Protobuf.GetDeckResponse.Parser, new[]{ "Deck" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CreateDeckRequest), global::Loom.ZombieBattleground.Protobuf.CreateDeckRequest.Parser, new[]{ "UserId", "Deck", "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CreateDeckResponse), global::Loom.ZombieBattleground.Protobuf.CreateDeckResponse.Parser, new[]{ "DeckId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.DeleteDeckRequest), global::Loom.ZombieBattleground.Protobuf.DeleteDeckRequest.Parser, new[]{ "UserId", "DeckId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.EditDeckRequest), global::Loom.ZombieBattleground.Protobuf.EditDeckRequest.Parser, new[]{ "UserId", "Deck", "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.DecksResponse), global::Loom.ZombieBattleground.Protobuf.DecksResponse.Parser, new[]{ "UserId", "Decks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.ListDecksRequest), global::Loom.ZombieBattleground.Protobuf.ListDecksRequest.Parser, new[]{ "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.ListDecksResponse), global::Loom.ZombieBattleground.Protobuf.ListDecksResponse.Parser, new[]{ "Decks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.SetAIDecksRequest), global::Loom.ZombieBattleground.Protobuf.SetAIDecksRequest.Parser, new[]{ "Version", "Decks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GetAIDecksRequest), global::Loom.ZombieBattleground.Protobuf.GetAIDecksRequest.Parser, new[]{ "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GetAIDecksResponse), global::Loom.ZombieBattleground.Protobuf.GetAIDecksResponse.Parser, new[]{ "Decks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.ListCardLibraryRequest), global::Loom.ZombieBattleground.Protobuf.ListCardLibraryRequest.Parser, new[]{ "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.ListCardLibraryResponse), global::Loom.ZombieBattleground.Protobuf.ListCardLibraryResponse.Parser, new[]{ "Cards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.ListHeroLibraryRequest), global::Loom.ZombieBattleground.Protobuf.ListHeroLibraryRequest.Parser, new[]{ "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.ListHeroLibraryResponse), global::Loom.ZombieBattleground.Protobuf.ListHeroLibraryResponse.Parser, new[]{ "Heroes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.UpdateHeroLibraryRequest), global::Loom.ZombieBattleground.Protobuf.UpdateHeroLibraryRequest.Parser, new[]{ "Version", "Heroes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.UpdateHeroLibraryResponse), global::Loom.ZombieBattleground.Protobuf.UpdateHeroLibraryResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GetCollectionRequest), global::Loom.ZombieBattleground.Protobuf.GetCollectionRequest.Parser, new[]{ "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GetCollectionResponse), global::Loom.ZombieBattleground.Protobuf.GetCollectionResponse.Parser, new[]{ "Cards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerState), global::Loom.ZombieBattleground.Protobuf.PlayerState.Parser, new[]{ "Id", "CurrentAction", "OverlordInstance", "CardsInHand", "CardsInPlay", "CardsInDeck", "Deck", "Defense", "CurrentGoo", "GooVials", "HasDrawnCard", "CardsInGraveyard", "InitialCardsInHandCount", "MaxCardsInPlay", "MaxCardsInHand", "MaxGooVials", "TurnTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.InitialPlayerState), global::Loom.ZombieBattleground.Protobuf.InitialPlayerState.Parser, new[]{ "Id", "MatchAccepted", "Deck" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.Match), global::Loom.ZombieBattleground.Protobuf.Match.Parser, new[]{ "Id", "Topics", "PlayerStates", "Status", "Version", "RandomSeed", "CustomGameAddr", "CreatedAt", "UseBackendGameLogic" }, null, new[]{ typeof(global::Loom.ZombieBattleground.Protobuf.Match.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.MatchMakingInfoList), global::Loom.ZombieBattleground.Protobuf.MatchMakingInfoList.Parser, new[]{ "Infos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.MatchMakingInfo), global::Loom.ZombieBattleground.Protobuf.MatchMakingInfo.Parser, new[]{ "UserId", "Deck" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionType), global::Loom.ZombieBattleground.Protobuf.PlayerActionType.Parser, null, null, new[]{ typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionType.Types.Enum) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerAction), global::Loom.ZombieBattleground.Protobuf.PlayerAction.Parser, new[]{ "ActionType", "PlayerId", "CardAttack", "DrawCard", "EndTurn", "Mulligan", "CardPlay", "CardAbilityUsed", "OverlordSkillUsed", "LeaveMatch", "RankBuff", "ActionOutcomes", "CreatedAt" }, new[]{ "Action" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionEvent), global::Loom.ZombieBattleground.Protobuf.PlayerActionEvent.Parser, new[]{ "PlayerAction", "Match", "Block" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerProfile), global::Loom.ZombieBattleground.Protobuf.PlayerProfile.Parser, new[]{ "UserId", "DeckId", "Version", "CustomGame", "UpdatedAt", "Tags", "RandomSeed", "UseBackendGameLogic" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerPool), global::Loom.ZombieBattleground.Protobuf.PlayerPool.Parser, new[]{ "PlayerProfiles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.MatchCount), global::Loom.ZombieBattleground.Protobuf.MatchCount.Parser, new[]{ "CurrentId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.RegisterPlayerPoolRequest), global::Loom.ZombieBattleground.Protobuf.RegisterPlayerPoolRequest.Parser, new[]{ "UserId", "DeckId", "Version", "CustomGame", "RandomSeed", "Tags", "UseBackendGameLogic" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.RegisterPlayerPoolResponse), global::Loom.ZombieBattleground.Protobuf.RegisterPlayerPoolResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerPoolRequest), global::Loom.ZombieBattleground.Protobuf.PlayerPoolRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerPoolResponse), global::Loom.ZombieBattleground.Protobuf.PlayerPoolResponse.Parser, new[]{ "Pool" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.FindMatchRequest), global::Loom.ZombieBattleground.Protobuf.FindMatchRequest.Parser, new[]{ "UserId", "Tags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.FindMatchResponse), global::Loom.ZombieBattleground.Protobuf.FindMatchResponse.Parser, new[]{ "Match" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.AcceptMatchRequest), global::Loom.ZombieBattleground.Protobuf.AcceptMatchRequest.Parser, new[]{ "UserId", "MatchId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.AcceptMatchResponse), global::Loom.ZombieBattleground.Protobuf.AcceptMatchResponse.Parser, new[]{ "Match", "Block" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.DebugFindMatchRequest), global::Loom.ZombieBattleground.Protobuf.DebugFindMatchRequest.Parser, new[]{ "UserId", "DeckId", "Version", "RandomSeed", "CustomGame", "Deck", "Tags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CancelFindMatchRequest), global::Loom.ZombieBattleground.Protobuf.CancelFindMatchRequest.Parser, new[]{ "UserId", "MatchId", "Tags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CancelFindMatchResponse), global::Loom.ZombieBattleground.Protobuf.CancelFindMatchResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GetMatchRequest), global::Loom.ZombieBattleground.Protobuf.GetMatchRequest.Parser, new[]{ "MatchId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GetMatchResponse), global::Loom.ZombieBattleground.Protobuf.GetMatchResponse.Parser, new[]{ "Match" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.SetMatchRequest), global::Loom.ZombieBattleground.Protobuf.SetMatchRequest.Parser, new[]{ "Match" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GetGameStateRequest), global::Loom.ZombieBattleground.Protobuf.GetGameStateRequest.Parser, new[]{ "MatchId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GetGameStateResponse), global::Loom.ZombieBattleground.Protobuf.GetGameStateResponse.Parser, new[]{ "GameState" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.SetGameStateRequest), global::Loom.ZombieBattleground.Protobuf.SetGameStateRequest.Parser, new[]{ "GameState" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionRequest), global::Loom.ZombieBattleground.Protobuf.PlayerActionRequest.Parser, new[]{ "MatchId", "PlayerAction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionResponse), global::Loom.ZombieBattleground.Protobuf.PlayerActionResponse.Parser, new[]{ "Match" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.BundlePlayerActionRequest), global::Loom.ZombieBattleground.Protobuf.BundlePlayerActionRequest.Parser, new[]{ "MatchId", "PlayerActions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.BundlePlayerActionResponse), global::Loom.ZombieBattleground.Protobuf.BundlePlayerActionResponse.Parser, new[]{ "GameState", "Match", "History" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.EndMatchRequest), global::Loom.ZombieBattleground.Protobuf.EndMatchRequest.Parser, new[]{ "MatchId", "UserId", "WinnerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.EndMatchResponse), global::Loom.ZombieBattleground.Protobuf.EndMatchResponse.Parser, new[]{ "GameState" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CheckGameStatusRequest), global::Loom.ZombieBattleground.Protobuf.CheckGameStatusRequest.Parser, new[]{ "MatchId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CheckGameStatusResponse), global::Loom.ZombieBattleground.Protobuf.CheckGameStatusResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GameMode), global::Loom.ZombieBattleground.Protobuf.GameMode.Parser, new[]{ "ID", "Name", "Description", "Version", "GameModeType", "Address", "Owner" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GameModeList), global::Loom.ZombieBattleground.Protobuf.GameModeList.Parser, new[]{ "GameModes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GameModeRequest), global::Loom.ZombieBattleground.Protobuf.GameModeRequest.Parser, new[]{ "Name", "Description", "Version", "Address", "GameModeType", "Oracle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.UpdateGameModeRequest), global::Loom.ZombieBattleground.Protobuf.UpdateGameModeRequest.Parser, new[]{ "ID", "Name", "Description", "Version", "Address", "GameModeType", "Oracle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.DeleteGameModeRequest), global::Loom.ZombieBattleground.Protobuf.DeleteGameModeRequest.Parser, new[]{ "ID", "Oracle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GetGameModeRequest), global::Loom.ZombieBattleground.Protobuf.GetGameModeRequest.Parser, new[]{ "ID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.ListGameModesRequest), global::Loom.ZombieBattleground.Protobuf.ListGameModesRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GetCustomGameModeCustomUiRequest), global::Loom.ZombieBattleground.Protobuf.GetCustomGameModeCustomUiRequest.Parser, new[]{ "Address" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GetCustomGameModeCustomUiResponse), global::Loom.ZombieBattleground.Protobuf.GetCustomGameModeCustomUiResponse.Parser, new[]{ "UiElements" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CallCustomGameModeFunctionRequest), global::Loom.ZombieBattleground.Protobuf.CallCustomGameModeFunctionRequest.Parser, new[]{ "Address", "CallData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.StaticCallCustomGameModeFunctionResponse), global::Loom.ZombieBattleground.Protobuf.StaticCallCustomGameModeFunctionResponse.Parser, new[]{ "Output" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CustomGameModeCustomUiLabel), global::Loom.ZombieBattleground.Protobuf.CustomGameModeCustomUiLabel.Parser, new[]{ "Text" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CustomGameModeCustomUiButton), global::Loom.ZombieBattleground.Protobuf.CustomGameModeCustomUiButton.Parser, new[]{ "Title", "CallData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CustomGameModeCustomUiElement), global::Loom.ZombieBattleground.Protobuf.CustomGameModeCustomUiElement.Parser, new[]{ "Rect", "Label", "Button" }, new[]{ "UiElement" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.UniqueAnimationType), global::Loom.ZombieBattleground.Protobuf.UniqueAnimationType.Parser, null, null, new[]{ typeof(global::Loom.ZombieBattleground.Protobuf.UniqueAnimationType.Types.Enum) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardAbilityTarget), global::Loom.ZombieBattleground.Protobuf.CardAbilityTarget.Parser, null, null, new[]{ typeof(global::Loom.ZombieBattleground.Protobuf.CardAbilityTarget.Types.Enum) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.OverlordAbilityTarget), global::Loom.ZombieBattleground.Protobuf.OverlordAbilityTarget.Parser, null, null, new[]{ typeof(global::Loom.ZombieBattleground.Protobuf.OverlordAbilityTarget.Types.Enum) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GameMechanicDescriptionType), global::Loom.ZombieBattleground.Protobuf.GameMechanicDescriptionType.Parser, null, null, new[]{ typeof(global::Loom.ZombieBattleground.Protobuf.GameMechanicDescriptionType.Types.Enum) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.AttackRestriction), global::Loom.ZombieBattleground.Protobuf.AttackRestriction.Parser, null, null, new[]{ typeof(global::Loom.ZombieBattleground.Protobuf.AttackRestriction.Types.Enum) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardAbilityBuffType), global::Loom.ZombieBattleground.Protobuf.CardAbilityBuffType.Parser, null, null, new[]{ typeof(global::Loom.ZombieBattleground.Protobuf.CardAbilityBuffType.Types.Enum) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardAbilityActivityType), global::Loom.ZombieBattleground.Protobuf.CardAbilityActivityType.Parser, null, null, new[]{ typeof(global::Loom.ZombieBattleground.Protobuf.CardAbilityActivityType.Types.Enum) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardAbilityTrigger), global::Loom.ZombieBattleground.Protobuf.CardAbilityTrigger.Parser, null, null, new[]{ typeof(global::Loom.ZombieBattleground.Protobuf.CardAbilityTrigger.Types.Enum) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardAbilityEffect), global::Loom.ZombieBattleground.Protobuf.CardAbilityEffect.Parser, null, null, new[]{ typeof(global::Loom.ZombieBattleground.Protobuf.CardAbilityEffect.Types.Enum) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardAbilityType), global::Loom.ZombieBattleground.Protobuf.CardAbilityType.Parser, null, null, new[]{ typeof(global::Loom.ZombieBattleground.Protobuf.CardAbilityType.Types.Enum) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardAbilitySubTrigger), global::Loom.ZombieBattleground.Protobuf.CardAbilitySubTrigger.Parser, null, null, new[]{ typeof(global::Loom.ZombieBattleground.Protobuf.CardAbilitySubTrigger.Types.Enum) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardKind), global::Loom.ZombieBattleground.Protobuf.CardKind.Parser, null, null, new[]{ typeof(global::Loom.ZombieBattleground.Protobuf.CardKind.Types.Enum) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.AffectObjectType), global::Loom.ZombieBattleground.Protobuf.AffectObjectType.Parser, null, null, new[]{ typeof(global::Loom.ZombieBattleground.Protobuf.AffectObjectType.Types.Enum) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CreatureRank), global::Loom.ZombieBattleground.Protobuf.CreatureRank.Parser, null, null, new[]{ typeof(global::Loom.ZombieBattleground.Protobuf.CreatureRank.Types.Enum) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CreatureType), global::Loom.ZombieBattleground.Protobuf.CreatureType.Parser, null, null, new[]{ typeof(global::Loom.ZombieBattleground.Protobuf.CreatureType.Types.Enum) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardSetType), global::Loom.ZombieBattleground.Protobuf.CardSetType.Parser, null, null, new[]{ typeof(global::Loom.ZombieBattleground.Protobuf.CardSetType.Types.Enum) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GameState), global::Loom.ZombieBattleground.Protobuf.GameState.Parser, new[]{ "Id", "IsEnded", "CurrentPlayerIndex", "PlayerStates", "CurrentActionIndex", "PlayerActions", "RandomSeed", "Winner", "Version", "CreatedAt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardChoosableAbility), global::Loom.ZombieBattleground.Protobuf.CardChoosableAbility.Parser, new[]{ "Description", "AbilityData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardAbility), global::Loom.ZombieBattleground.Protobuf.CardAbility.Parser, new[]{ "Type", "ActivityType", "Trigger", "TargetTypes", "Stat", "Set", "Effect", "AttackRestriction", "TargetCardType", "TargetUnitSpecialStatus", "TargetUnitType", "Value", "Attack", "Defense", "Name", "Turns", "Count", "Delay", "VisualEffectsToPlay", "GameMechanicDescriptionType", "TargetSet", "SubTrigger", "ChoosableAbilities", "Defense2", "Cost" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardAbility.Types.VisualEffectInfo), global::Loom.ZombieBattleground.Protobuf.CardAbility.Types.VisualEffectInfo.Parser, new[]{ "Type", "Path" }, null, new[]{ typeof(global::Loom.ZombieBattleground.Protobuf.CardAbility.Types.VisualEffectInfo.Types.VisualEffectType) }, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardAbilityRage), global::Loom.ZombieBattleground.Protobuf.CardAbilityRage.Parser, new[]{ "AddedAttack", "WasApplied" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardAbilityPriorityAttack), global::Loom.ZombieBattleground.Protobuf.CardAbilityPriorityAttack.Parser, new[]{ "AttackerOldDefense", "TargetOldDefense" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome), global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Parser, new[]{ "Rage", "PriorityAttack" }, new[]{ "Outcome" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityRageOutcome), global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityRageOutcome.Parser, new[]{ "InstanceId", "NewAttack" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityPriorityAttackOutcome), global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityPriorityAttackOutcome.Parser, new[]{ "InstanceId", "NewDefense" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardAbilityInstance), global::Loom.ZombieBattleground.Protobuf.CardAbilityInstance.Parser, new[]{ "Rage", "PriorityAttack" }, new[]{ "AbilityType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardInstance), global::Loom.ZombieBattleground.Protobuf.CardInstance.Parser, new[]{ "Prototype", "InstanceId", "Instance", "Owner", "AbilitiesInstancesInitialized", "AbilitiesInstances" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.DataIdOwner), global::Loom.ZombieBattleground.Protobuf.DataIdOwner.Parser, new[]{ "DataId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardDeck), global::Loom.ZombieBattleground.Protobuf.CardDeck.Parser, new[]{ "Cards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.InstanceIdOwner), global::Loom.ZombieBattleground.Protobuf.InstanceIdOwner.Parser, new[]{ "InstanceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.OverlordInstance), global::Loom.ZombieBattleground.Protobuf.OverlordInstance.Parser, new[]{ "InstanceId", "Prototype", "FirstSkill", "SecondSkill", "Defense", "Goo", "MaxGoo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.OverlordPrototype), global::Loom.ZombieBattleground.Protobuf.OverlordPrototype.Parser, new[]{ "HeroId", "Icon", "Name", "ShortDescription", "LongDescription", "Experience", "Level", "Element", "Skills" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.OverlordSkillInstance), global::Loom.ZombieBattleground.Protobuf.OverlordSkillInstance.Parser, new[]{ "Prototype", "Cooldown" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.OverlordSkillPrototype), global::Loom.ZombieBattleground.Protobuf.OverlordSkillPrototype.Parser, new[]{ "Title", "Skill", "IconPath", "Description", "Cooldown", "InitialCooldown", "Parameter", "Attack", "OverlordSkillKind", "SkillTargetTypes", "ElementTargetTypes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionLeaveMatch), global::Loom.ZombieBattleground.Protobuf.PlayerActionLeaveMatch.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionCardPlay), global::Loom.ZombieBattleground.Protobuf.PlayerActionCardPlay.Parser, new[]{ "Card", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionRankBuff), global::Loom.ZombieBattleground.Protobuf.PlayerActionRankBuff.Parser, new[]{ "Card", "Targets" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAttack), global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAttack.Parser, new[]{ "Attacker", "AffectObjectType", "Target" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAbilityUsed), global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAbilityUsed.Parser, new[]{ "Card", "CardKind", "Targets", "AbilityType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionOverlordSkillUsed), global::Loom.ZombieBattleground.Protobuf.PlayerActionOverlordSkillUsed.Parser, new[]{ "SkillId", "AffectObjectType", "Target" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionDrawCard), global::Loom.ZombieBattleground.Protobuf.PlayerActionDrawCard.Parser, new[]{ "CardInstance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionEndTurn), global::Loom.ZombieBattleground.Protobuf.PlayerActionEndTurn.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionMulligan), global::Loom.ZombieBattleground.Protobuf.PlayerActionMulligan.Parser, new[]{ "MulliganedCards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.StartGameAction), global::Loom.ZombieBattleground.Protobuf.StartGameAction.Parser, new[]{ "PlayerStates" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.Unit), global::Loom.ZombieBattleground.Protobuf.Unit.Parser, new[]{ "InstanceId", "AffectObjectType", "Parameter" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.Parameter), global::Loom.ZombieBattleground.Protobuf.Parameter.Parser, new[]{ "Attack", "Defense", "CardName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.OverlordSkillKind), global::Loom.ZombieBattleground.Protobuf.OverlordSkillKind.Parser, null, null, new[]{ typeof(global::Loom.ZombieBattleground.Protobuf.OverlordSkillKind.Types.Enum) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.StatType), global::Loom.ZombieBattleground.Protobuf.StatType.Parser, null, null, new[]{ typeof(global::Loom.ZombieBattleground.Protobuf.StatType.Types.Enum) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.UnitSpecialStatus), global::Loom.ZombieBattleground.Protobuf.UnitSpecialStatus.Parser, null, null, new[]{ typeof(global::Loom.ZombieBattleground.Protobuf.UnitSpecialStatus.Types.Enum) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GameReplay), global::Loom.ZombieBattleground.Protobuf.GameReplay.Parser, new[]{ "Actions", "Blocks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.Player), global::Loom.ZombieBattleground.Protobuf.Player.Parser, new[]{ "Id", "Deck" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.Zone), global::Loom.ZombieBattleground.Protobuf.Zone.Parser, null, null, new[]{ typeof(global::Loom.ZombieBattleground.Protobuf.Zone.Types.type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.History), global::Loom.ZombieBattleground.Protobuf.History.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.HistoryData), global::Loom.ZombieBattleground.Protobuf.HistoryData.Parser, new[]{ "CreateGame", "FullInstance", "ShowInstance", "HideInstance", "ChangeInstance", "EndGame" }, new[]{ "Data" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.HistoryCreateGame), global::Loom.ZombieBattleground.Protobuf.HistoryCreateGame.Parser, new[]{ "GameId", "Players", "RandomSeed", "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.HistoryFullInstance), global::Loom.ZombieBattleground.Protobuf.HistoryFullInstance.Parser, new[]{ "InstanceId", "Attack", "Defense" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.HistoryInstance), global::Loom.ZombieBattleground.Protobuf.HistoryInstance.Parser, new[]{ "InstanceId", "Value" }, null, new[]{ typeof(global::Loom.ZombieBattleground.Protobuf.HistoryInstance.Types.change) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.HistoryHide), global::Loom.ZombieBattleground.Protobuf.HistoryHide.Parser, new[]{ "InstanceId", "Zone" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.HistoryEndGame), global::Loom.ZombieBattleground.Protobuf.HistoryEndGame.Parser, new[]{ "MatchId", "UserId", "WinnerId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum GameModeType {
    [pbr::OriginalName("Community")] Community = 0,
    [pbr::OriginalName("Loom")] Loom = 1,
  }

  public enum OverlordSkillSelectionType {
    [pbr::OriginalName("Primary")] Primary = 0,
    [pbr::OriginalName("Secondary")] Secondary = 1,
  }

  #endregion

  #region Messages
  public sealed partial class Account : pb::IMessage<Account> {
    private static readonly pb::MessageParser<Account> _parser = new pb::MessageParser<Account>(() => new Account());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Account> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account(Account other) : this() {
      userId_ = other.userId_;
      phoneNumberVerified_ = other.phoneNumberVerified_;
      rewardRedeemed_ = other.rewardRedeemed_;
      isKickstarter_ = other.isKickstarter_;
      image_ = other.image_;
      emailNotification_ = other.emailNotification_;
      eloScore_ = other.eloScore_;
      currentTier_ = other.currentTier_;
      gameMembershipTier_ = other.gameMembershipTier_;
      owner_ = other.owner_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account Clone() {
      return new Account(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "phone_number_verified" field.</summary>
    public const int PhoneNumberVerifiedFieldNumber = 2;
    private bool phoneNumberVerified_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PhoneNumberVerified {
      get { return phoneNumberVerified_; }
      set {
        phoneNumberVerified_ = value;
      }
    }

    /// <summary>Field number for the "reward_redeemed" field.</summary>
    public const int RewardRedeemedFieldNumber = 3;
    private bool rewardRedeemed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RewardRedeemed {
      get { return rewardRedeemed_; }
      set {
        rewardRedeemed_ = value;
      }
    }

    /// <summary>Field number for the "is_kickstarter" field.</summary>
    public const int IsKickstarterFieldNumber = 4;
    private bool isKickstarter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsKickstarter {
      get { return isKickstarter_; }
      set {
        isKickstarter_ = value;
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 5;
    private string image_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Image {
      get { return image_; }
      set {
        image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "email_notification" field.</summary>
    public const int EmailNotificationFieldNumber = 6;
    private bool emailNotification_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EmailNotification {
      get { return emailNotification_; }
      set {
        emailNotification_ = value;
      }
    }

    /// <summary>Field number for the "elo_score" field.</summary>
    public const int EloScoreFieldNumber = 7;
    private long eloScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EloScore {
      get { return eloScore_; }
      set {
        eloScore_ = value;
      }
    }

    /// <summary>Field number for the "current_tier" field.</summary>
    public const int CurrentTierFieldNumber = 8;
    private int currentTier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentTier {
      get { return currentTier_; }
      set {
        currentTier_ = value;
      }
    }

    /// <summary>Field number for the "game_membership_tier" field.</summary>
    public const int GameMembershipTierFieldNumber = 9;
    private int gameMembershipTier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameMembershipTier {
      get { return gameMembershipTier_; }
      set {
        gameMembershipTier_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 10;
    private pb::ByteString owner_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Owner {
      get { return owner_; }
      set {
        owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Account);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Account other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (PhoneNumberVerified != other.PhoneNumberVerified) return false;
      if (RewardRedeemed != other.RewardRedeemed) return false;
      if (IsKickstarter != other.IsKickstarter) return false;
      if (Image != other.Image) return false;
      if (EmailNotification != other.EmailNotification) return false;
      if (EloScore != other.EloScore) return false;
      if (CurrentTier != other.CurrentTier) return false;
      if (GameMembershipTier != other.GameMembershipTier) return false;
      if (Owner != other.Owner) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (PhoneNumberVerified != false) hash ^= PhoneNumberVerified.GetHashCode();
      if (RewardRedeemed != false) hash ^= RewardRedeemed.GetHashCode();
      if (IsKickstarter != false) hash ^= IsKickstarter.GetHashCode();
      if (Image.Length != 0) hash ^= Image.GetHashCode();
      if (EmailNotification != false) hash ^= EmailNotification.GetHashCode();
      if (EloScore != 0L) hash ^= EloScore.GetHashCode();
      if (CurrentTier != 0) hash ^= CurrentTier.GetHashCode();
      if (GameMembershipTier != 0) hash ^= GameMembershipTier.GetHashCode();
      if (Owner.Length != 0) hash ^= Owner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (PhoneNumberVerified != false) {
        output.WriteRawTag(16);
        output.WriteBool(PhoneNumberVerified);
      }
      if (RewardRedeemed != false) {
        output.WriteRawTag(24);
        output.WriteBool(RewardRedeemed);
      }
      if (IsKickstarter != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsKickstarter);
      }
      if (Image.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Image);
      }
      if (EmailNotification != false) {
        output.WriteRawTag(48);
        output.WriteBool(EmailNotification);
      }
      if (EloScore != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(EloScore);
      }
      if (CurrentTier != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CurrentTier);
      }
      if (GameMembershipTier != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(GameMembershipTier);
      }
      if (Owner.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (PhoneNumberVerified != false) {
        size += 1 + 1;
      }
      if (RewardRedeemed != false) {
        size += 1 + 1;
      }
      if (IsKickstarter != false) {
        size += 1 + 1;
      }
      if (Image.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Image);
      }
      if (EmailNotification != false) {
        size += 1 + 1;
      }
      if (EloScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EloScore);
      }
      if (CurrentTier != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentTier);
      }
      if (GameMembershipTier != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameMembershipTier);
      }
      if (Owner.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Owner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Account other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.PhoneNumberVerified != false) {
        PhoneNumberVerified = other.PhoneNumberVerified;
      }
      if (other.RewardRedeemed != false) {
        RewardRedeemed = other.RewardRedeemed;
      }
      if (other.IsKickstarter != false) {
        IsKickstarter = other.IsKickstarter;
      }
      if (other.Image.Length != 0) {
        Image = other.Image;
      }
      if (other.EmailNotification != false) {
        EmailNotification = other.EmailNotification;
      }
      if (other.EloScore != 0L) {
        EloScore = other.EloScore;
      }
      if (other.CurrentTier != 0) {
        CurrentTier = other.CurrentTier;
      }
      if (other.GameMembershipTier != 0) {
        GameMembershipTier = other.GameMembershipTier;
      }
      if (other.Owner.Length != 0) {
        Owner = other.Owner;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 16: {
            PhoneNumberVerified = input.ReadBool();
            break;
          }
          case 24: {
            RewardRedeemed = input.ReadBool();
            break;
          }
          case 32: {
            IsKickstarter = input.ReadBool();
            break;
          }
          case 42: {
            Image = input.ReadString();
            break;
          }
          case 48: {
            EmailNotification = input.ReadBool();
            break;
          }
          case 56: {
            EloScore = input.ReadInt64();
            break;
          }
          case 64: {
            CurrentTier = input.ReadInt32();
            break;
          }
          case 72: {
            GameMembershipTier = input.ReadInt32();
            break;
          }
          case 82: {
            Owner = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Deck : pb::IMessage<Deck> {
    private static readonly pb::MessageParser<Deck> _parser = new pb::MessageParser<Deck>(() => new Deck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Deck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Deck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Deck(Deck other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      heroId_ = other.heroId_;
      cards_ = other.cards_.Clone();
      primarySkill_ = other.primarySkill_;
      secondarySkill_ = other.secondarySkill_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Deck Clone() {
      return new Deck(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 3;
    private long heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.DeckCard> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(34, global::Loom.ZombieBattleground.Protobuf.DeckCard.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.DeckCard> cards_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.DeckCard>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.DeckCard> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "primary_skill" field.</summary>
    public const int PrimarySkillFieldNumber = 5;
    private global::Loom.ZombieBattleground.Protobuf.OverlordSkillKind.Types.Enum primarySkill_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.OverlordSkillKind.Types.Enum PrimarySkill {
      get { return primarySkill_; }
      set {
        primarySkill_ = value;
      }
    }

    /// <summary>Field number for the "secondary_skill" field.</summary>
    public const int SecondarySkillFieldNumber = 6;
    private global::Loom.ZombieBattleground.Protobuf.OverlordSkillKind.Types.Enum secondarySkill_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.OverlordSkillKind.Types.Enum SecondarySkill {
      get { return secondarySkill_; }
      set {
        secondarySkill_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Deck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Deck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (HeroId != other.HeroId) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if (PrimarySkill != other.PrimarySkill) return false;
      if (SecondarySkill != other.SecondarySkill) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (HeroId != 0L) hash ^= HeroId.GetHashCode();
      hash ^= cards_.GetHashCode();
      if (PrimarySkill != 0) hash ^= PrimarySkill.GetHashCode();
      if (SecondarySkill != 0) hash ^= SecondarySkill.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HeroId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(HeroId);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      if (PrimarySkill != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) PrimarySkill);
      }
      if (SecondarySkill != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) SecondarySkill);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (PrimarySkill != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PrimarySkill);
      }
      if (SecondarySkill != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SecondarySkill);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Deck other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.HeroId != 0L) {
        HeroId = other.HeroId;
      }
      cards_.Add(other.cards_);
      if (other.PrimarySkill != 0) {
        PrimarySkill = other.PrimarySkill;
      }
      if (other.SecondarySkill != 0) {
        SecondarySkill = other.SecondarySkill;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            HeroId = input.ReadInt64();
            break;
          }
          case 34: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 40: {
            primarySkill_ = (global::Loom.ZombieBattleground.Protobuf.OverlordSkillKind.Types.Enum) input.ReadEnum();
            break;
          }
          case 48: {
            secondarySkill_ = (global::Loom.ZombieBattleground.Protobuf.OverlordSkillKind.Types.Enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Card : pb::IMessage<Card> {
    private static readonly pb::MessageParser<Card> _parser = new pb::MessageParser<Card>(() => new Card());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Card> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Card() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Card(Card other) : this() {
      mouldId_ = other.mouldId_;
      kind_ = other.kind_;
      set_ = other.set_;
      name_ = other.name_;
      description_ = other.description_;
      flavorText_ = other.flavorText_;
      picture_ = other.picture_;
      rank_ = other.rank_;
      type_ = other.type_;
      frame_ = other.frame_;
      attack_ = other.attack_;
      defense_ = other.defense_;
      gooCost_ = other.gooCost_;
      cardViewInfo_ = other.cardViewInfo_ != null ? other.cardViewInfo_.Clone() : null;
      abilities_ = other.abilities_.Clone();
      uniqueAnimation_ = other.uniqueAnimation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Card Clone() {
      return new Card(this);
    }

    /// <summary>Field number for the "mouldId" field.</summary>
    public const int MouldIdFieldNumber = 1;
    private long mouldId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MouldId {
      get { return mouldId_; }
      set {
        mouldId_ = value;
      }
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.CardKind.Types.Enum kind_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardKind.Types.Enum Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    /// <summary>Field number for the "set" field.</summary>
    public const int SetFieldNumber = 3;
    private global::Loom.ZombieBattleground.Protobuf.CardSetType.Types.Enum set_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardSetType.Types.Enum Set {
      get { return set_; }
      set {
        set_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "flavor_text" field.</summary>
    public const int FlavorTextFieldNumber = 6;
    private string flavorText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FlavorText {
      get { return flavorText_; }
      set {
        flavorText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "picture" field.</summary>
    public const int PictureFieldNumber = 7;
    private string picture_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Picture {
      get { return picture_; }
      set {
        picture_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 8;
    private global::Loom.ZombieBattleground.Protobuf.CreatureRank.Types.Enum rank_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CreatureRank.Types.Enum Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 9;
    private global::Loom.ZombieBattleground.Protobuf.CreatureType.Types.Enum type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CreatureType.Types.Enum Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 11;
    private string frame_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Frame {
      get { return frame_; }
      set {
        frame_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "attack" field.</summary>
    public const int AttackFieldNumber = 12;
    private int attack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Attack {
      get { return attack_; }
      set {
        attack_ = value;
      }
    }

    /// <summary>Field number for the "defense" field.</summary>
    public const int DefenseFieldNumber = 13;
    private int defense_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Defense {
      get { return defense_; }
      set {
        defense_ = value;
      }
    }

    /// <summary>Field number for the "gooCost" field.</summary>
    public const int GooCostFieldNumber = 14;
    private int gooCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GooCost {
      get { return gooCost_; }
      set {
        gooCost_ = value;
      }
    }

    /// <summary>Field number for the "card_view_info" field.</summary>
    public const int CardViewInfoFieldNumber = 16;
    private global::Loom.ZombieBattleground.Protobuf.CardViewInfo cardViewInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardViewInfo CardViewInfo {
      get { return cardViewInfo_; }
      set {
        cardViewInfo_ = value;
      }
    }

    /// <summary>Field number for the "abilities" field.</summary>
    public const int AbilitiesFieldNumber = 17;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardAbility> _repeated_abilities_codec
        = pb::FieldCodec.ForMessage(138, global::Loom.ZombieBattleground.Protobuf.CardAbility.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardAbility> abilities_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardAbility>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardAbility> Abilities {
      get { return abilities_; }
    }

    /// <summary>Field number for the "unique_animation" field.</summary>
    public const int UniqueAnimationFieldNumber = 18;
    private global::Loom.ZombieBattleground.Protobuf.UniqueAnimationType.Types.Enum uniqueAnimation_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.UniqueAnimationType.Types.Enum UniqueAnimation {
      get { return uniqueAnimation_; }
      set {
        uniqueAnimation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Card);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Card other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MouldId != other.MouldId) return false;
      if (Kind != other.Kind) return false;
      if (Set != other.Set) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (FlavorText != other.FlavorText) return false;
      if (Picture != other.Picture) return false;
      if (Rank != other.Rank) return false;
      if (Type != other.Type) return false;
      if (Frame != other.Frame) return false;
      if (Attack != other.Attack) return false;
      if (Defense != other.Defense) return false;
      if (GooCost != other.GooCost) return false;
      if (!object.Equals(CardViewInfo, other.CardViewInfo)) return false;
      if(!abilities_.Equals(other.abilities_)) return false;
      if (UniqueAnimation != other.UniqueAnimation) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MouldId != 0L) hash ^= MouldId.GetHashCode();
      if (Kind != 0) hash ^= Kind.GetHashCode();
      if (Set != 0) hash ^= Set.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (FlavorText.Length != 0) hash ^= FlavorText.GetHashCode();
      if (Picture.Length != 0) hash ^= Picture.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Frame.Length != 0) hash ^= Frame.GetHashCode();
      if (Attack != 0) hash ^= Attack.GetHashCode();
      if (Defense != 0) hash ^= Defense.GetHashCode();
      if (GooCost != 0) hash ^= GooCost.GetHashCode();
      if (cardViewInfo_ != null) hash ^= CardViewInfo.GetHashCode();
      hash ^= abilities_.GetHashCode();
      if (UniqueAnimation != 0) hash ^= UniqueAnimation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MouldId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MouldId);
      }
      if (Kind != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Kind);
      }
      if (Set != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Set);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      if (FlavorText.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(FlavorText);
      }
      if (Picture.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Picture);
      }
      if (Rank != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Rank);
      }
      if (Type != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Type);
      }
      if (Frame.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Frame);
      }
      if (Attack != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Attack);
      }
      if (Defense != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Defense);
      }
      if (GooCost != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(GooCost);
      }
      if (cardViewInfo_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(CardViewInfo);
      }
      abilities_.WriteTo(output, _repeated_abilities_codec);
      if (UniqueAnimation != 0) {
        output.WriteRawTag(144, 1);
        output.WriteEnum((int) UniqueAnimation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MouldId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MouldId);
      }
      if (Kind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      if (Set != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Set);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (FlavorText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FlavorText);
      }
      if (Picture.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Picture);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Rank);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Frame.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Frame);
      }
      if (Attack != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Attack);
      }
      if (Defense != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Defense);
      }
      if (GooCost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GooCost);
      }
      if (cardViewInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CardViewInfo);
      }
      size += abilities_.CalculateSize(_repeated_abilities_codec);
      if (UniqueAnimation != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UniqueAnimation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Card other) {
      if (other == null) {
        return;
      }
      if (other.MouldId != 0L) {
        MouldId = other.MouldId;
      }
      if (other.Kind != 0) {
        Kind = other.Kind;
      }
      if (other.Set != 0) {
        Set = other.Set;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.FlavorText.Length != 0) {
        FlavorText = other.FlavorText;
      }
      if (other.Picture.Length != 0) {
        Picture = other.Picture;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Frame.Length != 0) {
        Frame = other.Frame;
      }
      if (other.Attack != 0) {
        Attack = other.Attack;
      }
      if (other.Defense != 0) {
        Defense = other.Defense;
      }
      if (other.GooCost != 0) {
        GooCost = other.GooCost;
      }
      if (other.cardViewInfo_ != null) {
        if (cardViewInfo_ == null) {
          cardViewInfo_ = new global::Loom.ZombieBattleground.Protobuf.CardViewInfo();
        }
        CardViewInfo.MergeFrom(other.CardViewInfo);
      }
      abilities_.Add(other.abilities_);
      if (other.UniqueAnimation != 0) {
        UniqueAnimation = other.UniqueAnimation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MouldId = input.ReadInt64();
            break;
          }
          case 16: {
            kind_ = (global::Loom.ZombieBattleground.Protobuf.CardKind.Types.Enum) input.ReadEnum();
            break;
          }
          case 24: {
            set_ = (global::Loom.ZombieBattleground.Protobuf.CardSetType.Types.Enum) input.ReadEnum();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 50: {
            FlavorText = input.ReadString();
            break;
          }
          case 58: {
            Picture = input.ReadString();
            break;
          }
          case 64: {
            rank_ = (global::Loom.ZombieBattleground.Protobuf.CreatureRank.Types.Enum) input.ReadEnum();
            break;
          }
          case 72: {
            type_ = (global::Loom.ZombieBattleground.Protobuf.CreatureType.Types.Enum) input.ReadEnum();
            break;
          }
          case 90: {
            Frame = input.ReadString();
            break;
          }
          case 96: {
            Attack = input.ReadInt32();
            break;
          }
          case 104: {
            Defense = input.ReadInt32();
            break;
          }
          case 112: {
            GooCost = input.ReadInt32();
            break;
          }
          case 130: {
            if (cardViewInfo_ == null) {
              cardViewInfo_ = new global::Loom.ZombieBattleground.Protobuf.CardViewInfo();
            }
            input.ReadMessage(cardViewInfo_);
            break;
          }
          case 138: {
            abilities_.AddEntriesFrom(input, _repeated_abilities_codec);
            break;
          }
          case 144: {
            uniqueAnimation_ = (global::Loom.ZombieBattleground.Protobuf.UniqueAnimationType.Types.Enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardInstanceSpecificData : pb::IMessage<CardInstanceSpecificData> {
    private static readonly pb::MessageParser<CardInstanceSpecificData> _parser = new pb::MessageParser<CardInstanceSpecificData>(() => new CardInstanceSpecificData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardInstanceSpecificData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardInstanceSpecificData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardInstanceSpecificData(CardInstanceSpecificData other) : this() {
      attack_ = other.attack_;
      defense_ = other.defense_;
      type_ = other.type_;
      set_ = other.set_;
      gooCost_ = other.gooCost_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardInstanceSpecificData Clone() {
      return new CardInstanceSpecificData(this);
    }

    /// <summary>Field number for the "attack" field.</summary>
    public const int AttackFieldNumber = 1;
    private int attack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Attack {
      get { return attack_; }
      set {
        attack_ = value;
      }
    }

    /// <summary>Field number for the "defense" field.</summary>
    public const int DefenseFieldNumber = 2;
    private int defense_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Defense {
      get { return defense_; }
      set {
        defense_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::Loom.ZombieBattleground.Protobuf.CreatureType.Types.Enum type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CreatureType.Types.Enum Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "set" field.</summary>
    public const int SetFieldNumber = 4;
    private global::Loom.ZombieBattleground.Protobuf.CardSetType.Types.Enum set_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardSetType.Types.Enum Set {
      get { return set_; }
      set {
        set_ = value;
      }
    }

    /// <summary>Field number for the "gooCost" field.</summary>
    public const int GooCostFieldNumber = 5;
    private int gooCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GooCost {
      get { return gooCost_; }
      set {
        gooCost_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardInstanceSpecificData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardInstanceSpecificData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Attack != other.Attack) return false;
      if (Defense != other.Defense) return false;
      if (Type != other.Type) return false;
      if (Set != other.Set) return false;
      if (GooCost != other.GooCost) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Attack != 0) hash ^= Attack.GetHashCode();
      if (Defense != 0) hash ^= Defense.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Set != 0) hash ^= Set.GetHashCode();
      if (GooCost != 0) hash ^= GooCost.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Attack != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Attack);
      }
      if (Defense != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Defense);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (Set != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Set);
      }
      if (GooCost != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(GooCost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Attack != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Attack);
      }
      if (Defense != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Defense);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Set != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Set);
      }
      if (GooCost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GooCost);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardInstanceSpecificData other) {
      if (other == null) {
        return;
      }
      if (other.Attack != 0) {
        Attack = other.Attack;
      }
      if (other.Defense != 0) {
        Defense = other.Defense;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Set != 0) {
        Set = other.Set;
      }
      if (other.GooCost != 0) {
        GooCost = other.GooCost;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Attack = input.ReadInt32();
            break;
          }
          case 16: {
            Defense = input.ReadInt32();
            break;
          }
          case 24: {
            type_ = (global::Loom.ZombieBattleground.Protobuf.CreatureType.Types.Enum) input.ReadEnum();
            break;
          }
          case 32: {
            set_ = (global::Loom.ZombieBattleground.Protobuf.CardSetType.Types.Enum) input.ReadEnum();
            break;
          }
          case 40: {
            GooCost = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardViewInfo : pb::IMessage<CardViewInfo> {
    private static readonly pb::MessageParser<CardViewInfo> _parser = new pb::MessageParser<CardViewInfo>(() => new CardViewInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardViewInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardViewInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardViewInfo(CardViewInfo other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      scale_ = other.scale_ != null ? other.scale_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardViewInfo Clone() {
      return new CardViewInfo(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.Vector3Float position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Vector3Float Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.Vector3Float scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Vector3Float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardViewInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardViewInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Scale, other.Scale)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (scale_ != null) hash ^= Scale.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (scale_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Scale);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (scale_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scale);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardViewInfo other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Loom.ZombieBattleground.Protobuf.Vector3Float();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.scale_ != null) {
        if (scale_ == null) {
          scale_ = new global::Loom.ZombieBattleground.Protobuf.Vector3Float();
        }
        Scale.MergeFrom(other.Scale);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              position_ = new global::Loom.ZombieBattleground.Protobuf.Vector3Float();
            }
            input.ReadMessage(position_);
            break;
          }
          case 18: {
            if (scale_ == null) {
              scale_ = new global::Loom.ZombieBattleground.Protobuf.Vector3Float();
            }
            input.ReadMessage(scale_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vector3Float : pb::IMessage<Vector3Float> {
    private static readonly pb::MessageParser<Vector3Float> _parser = new pb::MessageParser<Vector3Float>(() => new Vector3Float());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector3Float> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3Float() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3Float(Vector3Float other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3Float Clone() {
      return new Vector3Float(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector3Float);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector3Float other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector3Float other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vector2Int : pb::IMessage<Vector2Int> {
    private static readonly pb::MessageParser<Vector2Int> _parser = new pb::MessageParser<Vector2Int>(() => new Vector2Int());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector2Int> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2Int() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2Int(Vector2Int other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2Int Clone() {
      return new Vector2Int(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector2Int);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector2Int other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector2Int other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Rect : pb::IMessage<Rect> {
    private static readonly pb::MessageParser<Rect> _parser = new pb::MessageParser<Rect>(() => new Rect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Rect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rect(Rect other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      size_ = other.size_ != null ? other.size_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rect Clone() {
      return new Rect(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.Vector2Int position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Vector2Int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.Vector2Int size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Vector2Int Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Rect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Rect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Size, other.Size)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (size_ != null) hash ^= Size.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (size_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Size);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (size_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Size);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Rect other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Loom.ZombieBattleground.Protobuf.Vector2Int();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.size_ != null) {
        if (size_ == null) {
          size_ = new global::Loom.ZombieBattleground.Protobuf.Vector2Int();
        }
        Size.MergeFrom(other.Size);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              position_ = new global::Loom.ZombieBattleground.Protobuf.Vector2Int();
            }
            input.ReadMessage(position_);
            break;
          }
          case 18: {
            if (size_ == null) {
              size_ = new global::Loom.ZombieBattleground.Protobuf.Vector2Int();
            }
            input.ReadMessage(size_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardList : pb::IMessage<CardList> {
    private static readonly pb::MessageParser<CardList> _parser = new pb::MessageParser<CardList>(() => new CardList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardList(CardList other) : this() {
      cards_ = other.cards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardList Clone() {
      return new CardList(this);
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Card> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.Card.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card> cards_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cards_.Equals(other.cards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cards_.WriteTo(output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardList other) {
      if (other == null) {
        return;
      }
      cards_.Add(other.cards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardCollectionCard : pb::IMessage<CardCollectionCard> {
    private static readonly pb::MessageParser<CardCollectionCard> _parser = new pb::MessageParser<CardCollectionCard>(() => new CardCollectionCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardCollectionCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardCollectionCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardCollectionCard(CardCollectionCard other) : this() {
      cardName_ = other.cardName_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardCollectionCard Clone() {
      return new CardCollectionCard(this);
    }

    /// <summary>Field number for the "card_name" field.</summary>
    public const int CardNameFieldNumber = 1;
    private string cardName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CardName {
      get { return cardName_; }
      set {
        cardName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardCollectionCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardCollectionCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CardName != other.CardName) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CardName.Length != 0) hash ^= CardName.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CardName);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CardName);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardCollectionCard other) {
      if (other == null) {
        return;
      }
      if (other.CardName.Length != 0) {
        CardName = other.CardName;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CardName = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeckCard : pb::IMessage<DeckCard> {
    private static readonly pb::MessageParser<DeckCard> _parser = new pb::MessageParser<DeckCard>(() => new DeckCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeckCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeckCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeckCard(DeckCard other) : this() {
      cardName_ = other.cardName_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeckCard Clone() {
      return new DeckCard(this);
    }

    /// <summary>Field number for the "card_name" field.</summary>
    public const int CardNameFieldNumber = 1;
    private string cardName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CardName {
      get { return cardName_; }
      set {
        cardName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeckCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeckCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CardName != other.CardName) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CardName.Length != 0) hash ^= CardName.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CardName);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CardName);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeckCard other) {
      if (other == null) {
        return;
      }
      if (other.CardName.Length != 0) {
        CardName = other.CardName;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CardName = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardLibrary : pb::IMessage<CardLibrary> {
    private static readonly pb::MessageParser<CardLibrary> _parser = new pb::MessageParser<CardLibrary>(() => new CardLibrary());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardLibrary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardLibrary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardLibrary(CardLibrary other) : this() {
      cards_ = other.cards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardLibrary Clone() {
      return new CardLibrary(this);
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Card> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.Card.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card> cards_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardLibrary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardLibrary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cards_.Equals(other.cards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cards_.WriteTo(output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardLibrary other) {
      if (other == null) {
        return;
      }
      cards_.Add(other.cards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Hero : pb::IMessage<Hero> {
    private static readonly pb::MessageParser<Hero> _parser = new pb::MessageParser<Hero>(() => new Hero());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Hero> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hero() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hero(Hero other) : this() {
      heroId_ = other.heroId_;
      icon_ = other.icon_;
      name_ = other.name_;
      shortDescription_ = other.shortDescription_;
      longDescription_ = other.longDescription_;
      element_ = other.element_;
      experience_ = other.experience_;
      level_ = other.level_;
      skills_ = other.skills_.Clone();
      primarySkill_ = other.primarySkill_;
      secondarySkill_ = other.secondarySkill_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hero Clone() {
      return new Hero(this);
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private long heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 2;
    private string icon_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "short_description" field.</summary>
    public const int ShortDescriptionFieldNumber = 4;
    private string shortDescription_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShortDescription {
      get { return shortDescription_; }
      set {
        shortDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "long_description" field.</summary>
    public const int LongDescriptionFieldNumber = 5;
    private string longDescription_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LongDescription {
      get { return longDescription_; }
      set {
        longDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "element" field.</summary>
    public const int ElementFieldNumber = 6;
    private global::Loom.ZombieBattleground.Protobuf.CardSetType.Types.Enum element_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardSetType.Types.Enum Element {
      get { return element_; }
      set {
        element_ = value;
      }
    }

    /// <summary>Field number for the "experience" field.</summary>
    public const int ExperienceFieldNumber = 7;
    private long experience_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Experience {
      get { return experience_; }
      set {
        experience_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 8;
    private long level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "skills" field.</summary>
    public const int SkillsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Skill> _repeated_skills_codec
        = pb::FieldCodec.ForMessage(74, global::Loom.ZombieBattleground.Protobuf.Skill.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Skill> skills_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Skill>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Skill> Skills {
      get { return skills_; }
    }

    /// <summary>Field number for the "primary_skill" field.</summary>
    public const int PrimarySkillFieldNumber = 10;
    private global::Loom.ZombieBattleground.Protobuf.OverlordSkillKind.Types.Enum primarySkill_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.OverlordSkillKind.Types.Enum PrimarySkill {
      get { return primarySkill_; }
      set {
        primarySkill_ = value;
      }
    }

    /// <summary>Field number for the "secondary_skill" field.</summary>
    public const int SecondarySkillFieldNumber = 11;
    private global::Loom.ZombieBattleground.Protobuf.OverlordSkillKind.Types.Enum secondarySkill_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.OverlordSkillKind.Types.Enum SecondarySkill {
      get { return secondarySkill_; }
      set {
        secondarySkill_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Hero);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Hero other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeroId != other.HeroId) return false;
      if (Icon != other.Icon) return false;
      if (Name != other.Name) return false;
      if (ShortDescription != other.ShortDescription) return false;
      if (LongDescription != other.LongDescription) return false;
      if (Element != other.Element) return false;
      if (Experience != other.Experience) return false;
      if (Level != other.Level) return false;
      if(!skills_.Equals(other.skills_)) return false;
      if (PrimarySkill != other.PrimarySkill) return false;
      if (SecondarySkill != other.SecondarySkill) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeroId != 0L) hash ^= HeroId.GetHashCode();
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ShortDescription.Length != 0) hash ^= ShortDescription.GetHashCode();
      if (LongDescription.Length != 0) hash ^= LongDescription.GetHashCode();
      if (Element != 0) hash ^= Element.GetHashCode();
      if (Experience != 0L) hash ^= Experience.GetHashCode();
      if (Level != 0L) hash ^= Level.GetHashCode();
      hash ^= skills_.GetHashCode();
      if (PrimarySkill != 0) hash ^= PrimarySkill.GetHashCode();
      if (SecondarySkill != 0) hash ^= SecondarySkill.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(HeroId);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Icon);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (ShortDescription.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ShortDescription);
      }
      if (LongDescription.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LongDescription);
      }
      if (Element != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Element);
      }
      if (Experience != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Experience);
      }
      if (Level != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Level);
      }
      skills_.WriteTo(output, _repeated_skills_codec);
      if (PrimarySkill != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) PrimarySkill);
      }
      if (SecondarySkill != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) SecondarySkill);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ShortDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShortDescription);
      }
      if (LongDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LongDescription);
      }
      if (Element != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Element);
      }
      if (Experience != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Experience);
      }
      if (Level != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Level);
      }
      size += skills_.CalculateSize(_repeated_skills_codec);
      if (PrimarySkill != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PrimarySkill);
      }
      if (SecondarySkill != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SecondarySkill);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Hero other) {
      if (other == null) {
        return;
      }
      if (other.HeroId != 0L) {
        HeroId = other.HeroId;
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ShortDescription.Length != 0) {
        ShortDescription = other.ShortDescription;
      }
      if (other.LongDescription.Length != 0) {
        LongDescription = other.LongDescription;
      }
      if (other.Element != 0) {
        Element = other.Element;
      }
      if (other.Experience != 0L) {
        Experience = other.Experience;
      }
      if (other.Level != 0L) {
        Level = other.Level;
      }
      skills_.Add(other.skills_);
      if (other.PrimarySkill != 0) {
        PrimarySkill = other.PrimarySkill;
      }
      if (other.SecondarySkill != 0) {
        SecondarySkill = other.SecondarySkill;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HeroId = input.ReadInt64();
            break;
          }
          case 18: {
            Icon = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            ShortDescription = input.ReadString();
            break;
          }
          case 42: {
            LongDescription = input.ReadString();
            break;
          }
          case 48: {
            element_ = (global::Loom.ZombieBattleground.Protobuf.CardSetType.Types.Enum) input.ReadEnum();
            break;
          }
          case 56: {
            Experience = input.ReadInt64();
            break;
          }
          case 64: {
            Level = input.ReadInt64();
            break;
          }
          case 74: {
            skills_.AddEntriesFrom(input, _repeated_skills_codec);
            break;
          }
          case 80: {
            primarySkill_ = (global::Loom.ZombieBattleground.Protobuf.OverlordSkillKind.Types.Enum) input.ReadEnum();
            break;
          }
          case 88: {
            secondarySkill_ = (global::Loom.ZombieBattleground.Protobuf.OverlordSkillKind.Types.Enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListHeroesRequest : pb::IMessage<ListHeroesRequest> {
    private static readonly pb::MessageParser<ListHeroesRequest> _parser = new pb::MessageParser<ListHeroesRequest>(() => new ListHeroesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListHeroesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListHeroesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListHeroesRequest(ListHeroesRequest other) : this() {
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListHeroesRequest Clone() {
      return new ListHeroesRequest(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListHeroesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListHeroesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListHeroesRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListHeroesResponse : pb::IMessage<ListHeroesResponse> {
    private static readonly pb::MessageParser<ListHeroesResponse> _parser = new pb::MessageParser<ListHeroesResponse>(() => new ListHeroesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListHeroesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListHeroesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListHeroesResponse(ListHeroesResponse other) : this() {
      heroes_ = other.heroes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListHeroesResponse Clone() {
      return new ListHeroesResponse(this);
    }

    /// <summary>Field number for the "heroes" field.</summary>
    public const int HeroesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Hero> _repeated_heroes_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.Hero.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero> heroes_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero> Heroes {
      get { return heroes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListHeroesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListHeroesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!heroes_.Equals(other.heroes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= heroes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      heroes_.WriteTo(output, _repeated_heroes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += heroes_.CalculateSize(_repeated_heroes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListHeroesResponse other) {
      if (other == null) {
        return;
      }
      heroes_.Add(other.heroes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            heroes_.AddEntriesFrom(input, _repeated_heroes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddHeroExperienceRequest : pb::IMessage<AddHeroExperienceRequest> {
    private static readonly pb::MessageParser<AddHeroExperienceRequest> _parser = new pb::MessageParser<AddHeroExperienceRequest>(() => new AddHeroExperienceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddHeroExperienceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddHeroExperienceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddHeroExperienceRequest(AddHeroExperienceRequest other) : this() {
      userId_ = other.userId_;
      heroId_ = other.heroId_;
      experience_ = other.experience_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddHeroExperienceRequest Clone() {
      return new AddHeroExperienceRequest(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 2;
    private long heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "experience" field.</summary>
    public const int ExperienceFieldNumber = 3;
    private long experience_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Experience {
      get { return experience_; }
      set {
        experience_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddHeroExperienceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddHeroExperienceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (HeroId != other.HeroId) return false;
      if (Experience != other.Experience) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (HeroId != 0L) hash ^= HeroId.GetHashCode();
      if (Experience != 0L) hash ^= Experience.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (HeroId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(HeroId);
      }
      if (Experience != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Experience);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (HeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
      }
      if (Experience != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Experience);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddHeroExperienceRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.HeroId != 0L) {
        HeroId = other.HeroId;
      }
      if (other.Experience != 0L) {
        Experience = other.Experience;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 16: {
            HeroId = input.ReadInt64();
            break;
          }
          case 24: {
            Experience = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddHeroExperienceResponse : pb::IMessage<AddHeroExperienceResponse> {
    private static readonly pb::MessageParser<AddHeroExperienceResponse> _parser = new pb::MessageParser<AddHeroExperienceResponse>(() => new AddHeroExperienceResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddHeroExperienceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddHeroExperienceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddHeroExperienceResponse(AddHeroExperienceResponse other) : this() {
      heroId_ = other.heroId_;
      experience_ = other.experience_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddHeroExperienceResponse Clone() {
      return new AddHeroExperienceResponse(this);
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private long heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "experience" field.</summary>
    public const int ExperienceFieldNumber = 2;
    private long experience_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Experience {
      get { return experience_; }
      set {
        experience_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddHeroExperienceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddHeroExperienceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeroId != other.HeroId) return false;
      if (Experience != other.Experience) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeroId != 0L) hash ^= HeroId.GetHashCode();
      if (Experience != 0L) hash ^= Experience.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(HeroId);
      }
      if (Experience != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Experience);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
      }
      if (Experience != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Experience);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddHeroExperienceResponse other) {
      if (other == null) {
        return;
      }
      if (other.HeroId != 0L) {
        HeroId = other.HeroId;
      }
      if (other.Experience != 0L) {
        Experience = other.Experience;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HeroId = input.ReadInt64();
            break;
          }
          case 16: {
            Experience = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetHeroRequest : pb::IMessage<GetHeroRequest> {
    private static readonly pb::MessageParser<GetHeroRequest> _parser = new pb::MessageParser<GetHeroRequest>(() => new GetHeroRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetHeroRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetHeroRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetHeroRequest(GetHeroRequest other) : this() {
      userId_ = other.userId_;
      heroId_ = other.heroId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetHeroRequest Clone() {
      return new GetHeroRequest(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 2;
    private long heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetHeroRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetHeroRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (HeroId != other.HeroId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (HeroId != 0L) hash ^= HeroId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (HeroId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(HeroId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (HeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetHeroRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.HeroId != 0L) {
        HeroId = other.HeroId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 16: {
            HeroId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetHeroResponse : pb::IMessage<GetHeroResponse> {
    private static readonly pb::MessageParser<GetHeroResponse> _parser = new pb::MessageParser<GetHeroResponse>(() => new GetHeroResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetHeroResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetHeroResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetHeroResponse(GetHeroResponse other) : this() {
      hero_ = other.hero_ != null ? other.hero_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetHeroResponse Clone() {
      return new GetHeroResponse(this);
    }

    /// <summary>Field number for the "hero" field.</summary>
    public const int HeroFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.Hero hero_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Hero Hero {
      get { return hero_; }
      set {
        hero_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetHeroResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetHeroResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Hero, other.Hero)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (hero_ != null) hash ^= Hero.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (hero_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Hero);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (hero_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hero);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetHeroResponse other) {
      if (other == null) {
        return;
      }
      if (other.hero_ != null) {
        if (hero_ == null) {
          hero_ = new global::Loom.ZombieBattleground.Protobuf.Hero();
        }
        Hero.MergeFrom(other.Hero);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (hero_ == null) {
              hero_ = new global::Loom.ZombieBattleground.Protobuf.Hero();
            }
            input.ReadMessage(hero_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetHeroSkillsRequest : pb::IMessage<GetHeroSkillsRequest> {
    private static readonly pb::MessageParser<GetHeroSkillsRequest> _parser = new pb::MessageParser<GetHeroSkillsRequest>(() => new GetHeroSkillsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetHeroSkillsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetHeroSkillsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetHeroSkillsRequest(GetHeroSkillsRequest other) : this() {
      userId_ = other.userId_;
      heroId_ = other.heroId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetHeroSkillsRequest Clone() {
      return new GetHeroSkillsRequest(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 2;
    private long heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetHeroSkillsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetHeroSkillsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (HeroId != other.HeroId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (HeroId != 0L) hash ^= HeroId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (HeroId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(HeroId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (HeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetHeroSkillsRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.HeroId != 0L) {
        HeroId = other.HeroId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 16: {
            HeroId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetHeroSkillsResponse : pb::IMessage<GetHeroSkillsResponse> {
    private static readonly pb::MessageParser<GetHeroSkillsResponse> _parser = new pb::MessageParser<GetHeroSkillsResponse>(() => new GetHeroSkillsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetHeroSkillsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetHeroSkillsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetHeroSkillsResponse(GetHeroSkillsResponse other) : this() {
      heroId_ = other.heroId_;
      skills_ = other.skills_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetHeroSkillsResponse Clone() {
      return new GetHeroSkillsResponse(this);
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private long heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "skills" field.</summary>
    public const int SkillsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Skill> _repeated_skills_codec
        = pb::FieldCodec.ForMessage(18, global::Loom.ZombieBattleground.Protobuf.Skill.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Skill> skills_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Skill>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Skill> Skills {
      get { return skills_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetHeroSkillsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetHeroSkillsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeroId != other.HeroId) return false;
      if(!skills_.Equals(other.skills_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeroId != 0L) hash ^= HeroId.GetHashCode();
      hash ^= skills_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(HeroId);
      }
      skills_.WriteTo(output, _repeated_skills_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
      }
      size += skills_.CalculateSize(_repeated_skills_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetHeroSkillsResponse other) {
      if (other == null) {
        return;
      }
      if (other.HeroId != 0L) {
        HeroId = other.HeroId;
      }
      skills_.Add(other.skills_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HeroId = input.ReadInt64();
            break;
          }
          case 18: {
            skills_.AddEntriesFrom(input, _repeated_skills_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Skill : pb::IMessage<Skill> {
    private static readonly pb::MessageParser<Skill> _parser = new pb::MessageParser<Skill>(() => new Skill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Skill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Skill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Skill(Skill other) : this() {
      title_ = other.title_;
      skill_ = other.skill_;
      iconPath_ = other.iconPath_;
      description_ = other.description_;
      skillTargets_ = other.skillTargets_.Clone();
      targetUnitSpecialStatus_ = other.targetUnitSpecialStatus_;
      elementTargets_ = other.elementTargets_.Clone();
      value_ = other.value_;
      cooldown_ = other.cooldown_;
      initialCooldown_ = other.initialCooldown_;
      attack_ = other.attack_;
      count_ = other.count_;
      id_ = other.id_;
      unlocked_ = other.unlocked_;
      canSelectTarget_ = other.canSelectTarget_;
      unitStatus_ = other.unitStatus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Skill Clone() {
      return new Skill(this);
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 1;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "skill" field.</summary>
    public const int Skill_FieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.OverlordSkillKind.Types.Enum skill_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.OverlordSkillKind.Types.Enum Skill_ {
      get { return skill_; }
      set {
        skill_ = value;
      }
    }

    /// <summary>Field number for the "icon_path" field.</summary>
    public const int IconPathFieldNumber = 3;
    private string iconPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IconPath {
      get { return iconPath_; }
      set {
        iconPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "skill_targets" field.</summary>
    public const int SkillTargetsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.OverlordAbilityTarget.Types.Enum> _repeated_skillTargets_codec
        = pb::FieldCodec.ForEnum(42, x => (int) x, x => (global::Loom.ZombieBattleground.Protobuf.OverlordAbilityTarget.Types.Enum) x);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.OverlordAbilityTarget.Types.Enum> skillTargets_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.OverlordAbilityTarget.Types.Enum>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.OverlordAbilityTarget.Types.Enum> SkillTargets {
      get { return skillTargets_; }
    }

    /// <summary>Field number for the "targetUnitSpecialStatus" field.</summary>
    public const int TargetUnitSpecialStatusFieldNumber = 6;
    private global::Loom.ZombieBattleground.Protobuf.UnitSpecialStatus.Types.Enum targetUnitSpecialStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.UnitSpecialStatus.Types.Enum TargetUnitSpecialStatus {
      get { return targetUnitSpecialStatus_; }
      set {
        targetUnitSpecialStatus_ = value;
      }
    }

    /// <summary>Field number for the "element_targets" field.</summary>
    public const int ElementTargetsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardSetType.Types.Enum> _repeated_elementTargets_codec
        = pb::FieldCodec.ForEnum(58, x => (int) x, x => (global::Loom.ZombieBattleground.Protobuf.CardSetType.Types.Enum) x);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardSetType.Types.Enum> elementTargets_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardSetType.Types.Enum>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardSetType.Types.Enum> ElementTargets {
      get { return elementTargets_; }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 8;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "cooldown" field.</summary>
    public const int CooldownFieldNumber = 9;
    private int cooldown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cooldown {
      get { return cooldown_; }
      set {
        cooldown_ = value;
      }
    }

    /// <summary>Field number for the "initial_cooldown" field.</summary>
    public const int InitialCooldownFieldNumber = 10;
    private int initialCooldown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InitialCooldown {
      get { return initialCooldown_; }
      set {
        initialCooldown_ = value;
      }
    }

    /// <summary>Field number for the "attack" field.</summary>
    public const int AttackFieldNumber = 11;
    private int attack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Attack {
      get { return attack_; }
      set {
        attack_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 12;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 13;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "unlocked" field.</summary>
    public const int UnlockedFieldNumber = 14;
    private bool unlocked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Unlocked {
      get { return unlocked_; }
      set {
        unlocked_ = value;
      }
    }

    /// <summary>Field number for the "can_select_target" field.</summary>
    public const int CanSelectTargetFieldNumber = 15;
    private bool canSelectTarget_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanSelectTarget {
      get { return canSelectTarget_; }
      set {
        canSelectTarget_ = value;
      }
    }

    /// <summary>Field number for the "unitStatus" field.</summary>
    public const int UnitStatusFieldNumber = 16;
    private string unitStatus_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnitStatus {
      get { return unitStatus_; }
      set {
        unitStatus_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Skill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Skill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Title != other.Title) return false;
      if (Skill_ != other.Skill_) return false;
      if (IconPath != other.IconPath) return false;
      if (Description != other.Description) return false;
      if(!skillTargets_.Equals(other.skillTargets_)) return false;
      if (TargetUnitSpecialStatus != other.TargetUnitSpecialStatus) return false;
      if(!elementTargets_.Equals(other.elementTargets_)) return false;
      if (Value != other.Value) return false;
      if (Cooldown != other.Cooldown) return false;
      if (InitialCooldown != other.InitialCooldown) return false;
      if (Attack != other.Attack) return false;
      if (Count != other.Count) return false;
      if (Id != other.Id) return false;
      if (Unlocked != other.Unlocked) return false;
      if (CanSelectTarget != other.CanSelectTarget) return false;
      if (UnitStatus != other.UnitStatus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Skill_ != 0) hash ^= Skill_.GetHashCode();
      if (IconPath.Length != 0) hash ^= IconPath.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= skillTargets_.GetHashCode();
      if (TargetUnitSpecialStatus != 0) hash ^= TargetUnitSpecialStatus.GetHashCode();
      hash ^= elementTargets_.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (Cooldown != 0) hash ^= Cooldown.GetHashCode();
      if (InitialCooldown != 0) hash ^= InitialCooldown.GetHashCode();
      if (Attack != 0) hash ^= Attack.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Unlocked != false) hash ^= Unlocked.GetHashCode();
      if (CanSelectTarget != false) hash ^= CanSelectTarget.GetHashCode();
      if (UnitStatus.Length != 0) hash ^= UnitStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Title.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Title);
      }
      if (Skill_ != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Skill_);
      }
      if (IconPath.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(IconPath);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      skillTargets_.WriteTo(output, _repeated_skillTargets_codec);
      if (TargetUnitSpecialStatus != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) TargetUnitSpecialStatus);
      }
      elementTargets_.WriteTo(output, _repeated_elementTargets_codec);
      if (Value != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Value);
      }
      if (Cooldown != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Cooldown);
      }
      if (InitialCooldown != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(InitialCooldown);
      }
      if (Attack != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Attack);
      }
      if (Count != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Count);
      }
      if (Id != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(Id);
      }
      if (Unlocked != false) {
        output.WriteRawTag(112);
        output.WriteBool(Unlocked);
      }
      if (CanSelectTarget != false) {
        output.WriteRawTag(120);
        output.WriteBool(CanSelectTarget);
      }
      if (UnitStatus.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(UnitStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Skill_ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Skill_);
      }
      if (IconPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IconPath);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += skillTargets_.CalculateSize(_repeated_skillTargets_codec);
      if (TargetUnitSpecialStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TargetUnitSpecialStatus);
      }
      size += elementTargets_.CalculateSize(_repeated_elementTargets_codec);
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (Cooldown != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cooldown);
      }
      if (InitialCooldown != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InitialCooldown);
      }
      if (Attack != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Attack);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Unlocked != false) {
        size += 1 + 1;
      }
      if (CanSelectTarget != false) {
        size += 1 + 1;
      }
      if (UnitStatus.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UnitStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Skill other) {
      if (other == null) {
        return;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Skill_ != 0) {
        Skill_ = other.Skill_;
      }
      if (other.IconPath.Length != 0) {
        IconPath = other.IconPath;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      skillTargets_.Add(other.skillTargets_);
      if (other.TargetUnitSpecialStatus != 0) {
        TargetUnitSpecialStatus = other.TargetUnitSpecialStatus;
      }
      elementTargets_.Add(other.elementTargets_);
      if (other.Value != 0) {
        Value = other.Value;
      }
      if (other.Cooldown != 0) {
        Cooldown = other.Cooldown;
      }
      if (other.InitialCooldown != 0) {
        InitialCooldown = other.InitialCooldown;
      }
      if (other.Attack != 0) {
        Attack = other.Attack;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Unlocked != false) {
        Unlocked = other.Unlocked;
      }
      if (other.CanSelectTarget != false) {
        CanSelectTarget = other.CanSelectTarget;
      }
      if (other.UnitStatus.Length != 0) {
        UnitStatus = other.UnitStatus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Title = input.ReadString();
            break;
          }
          case 16: {
            skill_ = (global::Loom.ZombieBattleground.Protobuf.OverlordSkillKind.Types.Enum) input.ReadEnum();
            break;
          }
          case 26: {
            IconPath = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42:
          case 40: {
            skillTargets_.AddEntriesFrom(input, _repeated_skillTargets_codec);
            break;
          }
          case 48: {
            targetUnitSpecialStatus_ = (global::Loom.ZombieBattleground.Protobuf.UnitSpecialStatus.Types.Enum) input.ReadEnum();
            break;
          }
          case 58:
          case 56: {
            elementTargets_.AddEntriesFrom(input, _repeated_elementTargets_codec);
            break;
          }
          case 64: {
            Value = input.ReadInt32();
            break;
          }
          case 72: {
            Cooldown = input.ReadInt32();
            break;
          }
          case 80: {
            InitialCooldown = input.ReadInt32();
            break;
          }
          case 88: {
            Attack = input.ReadInt32();
            break;
          }
          case 96: {
            Count = input.ReadInt32();
            break;
          }
          case 104: {
            Id = input.ReadInt64();
            break;
          }
          case 112: {
            Unlocked = input.ReadBool();
            break;
          }
          case 120: {
            CanSelectTarget = input.ReadBool();
            break;
          }
          case 130: {
            UnitStatus = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeroList : pb::IMessage<HeroList> {
    private static readonly pb::MessageParser<HeroList> _parser = new pb::MessageParser<HeroList>(() => new HeroList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroList(HeroList other) : this() {
      heroes_ = other.heroes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroList Clone() {
      return new HeroList(this);
    }

    /// <summary>Field number for the "heroes" field.</summary>
    public const int HeroesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Hero> _repeated_heroes_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.Hero.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero> heroes_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero> Heroes {
      get { return heroes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeroList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeroList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!heroes_.Equals(other.heroes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= heroes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      heroes_.WriteTo(output, _repeated_heroes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += heroes_.CalculateSize(_repeated_heroes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeroList other) {
      if (other == null) {
        return;
      }
      heroes_.Add(other.heroes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            heroes_.AddEntriesFrom(input, _repeated_heroes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardCollectionList : pb::IMessage<CardCollectionList> {
    private static readonly pb::MessageParser<CardCollectionList> _parser = new pb::MessageParser<CardCollectionList>(() => new CardCollectionList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardCollectionList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardCollectionList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardCollectionList(CardCollectionList other) : this() {
      cards_ = other.cards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardCollectionList Clone() {
      return new CardCollectionList(this);
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardCollectionCard> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.CardCollectionCard.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollectionCard> cards_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollectionCard>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollectionCard> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardCollectionList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardCollectionList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cards_.Equals(other.cards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cards_.WriteTo(output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardCollectionList other) {
      if (other == null) {
        return;
      }
      cards_.Add(other.cards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeckList : pb::IMessage<DeckList> {
    private static readonly pb::MessageParser<DeckList> _parser = new pb::MessageParser<DeckList>(() => new DeckList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeckList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeckList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeckList(DeckList other) : this() {
      decks_ = other.decks_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeckList Clone() {
      return new DeckList(this);
    }

    /// <summary>Field number for the "decks" field.</summary>
    public const int DecksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Deck> _repeated_decks_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.Deck.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck> decks_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck> Decks {
      get { return decks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeckList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeckList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!decks_.Equals(other.decks_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= decks_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      decks_.WriteTo(output, _repeated_decks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += decks_.CalculateSize(_repeated_decks_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeckList other) {
      if (other == null) {
        return;
      }
      decks_.Add(other.decks_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            decks_.AddEntriesFrom(input, _repeated_decks_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIType : pb::IMessage<AIType> {
    private static readonly pb::MessageParser<AIType> _parser = new pb::MessageParser<AIType>(() => new AIType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIType(AIType other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIType Clone() {
      return new AIType(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIType other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AIType message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Enum {
        [pbr::OriginalName("UNDEFINED")] Undefined = 0,
        [pbr::OriginalName("BLITZ_AI")] BlitzAi = 1,
        [pbr::OriginalName("DEFENSE_AI")] DefenseAi = 2,
        [pbr::OriginalName("MIXED_AI")] MixedAi = 3,
        [pbr::OriginalName("MIXED_BLITZ_AI")] MixedBlitzAi = 4,
        [pbr::OriginalName("TIME_BLITZ_AI")] TimeBlitzAi = 5,
        [pbr::OriginalName("MIXED_DEFENSE_AI")] MixedDefenseAi = 6,
      }

    }
    #endregion

  }

  public sealed partial class AIDeck : pb::IMessage<AIDeck> {
    private static readonly pb::MessageParser<AIDeck> _parser = new pb::MessageParser<AIDeck>(() => new AIDeck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIDeck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIDeck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIDeck(AIDeck other) : this() {
      deck_ = other.deck_ != null ? other.deck_.Clone() : null;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIDeck Clone() {
      return new AIDeck(this);
    }

    /// <summary>Field number for the "deck" field.</summary>
    public const int DeckFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.Deck deck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Deck Deck {
      get { return deck_; }
      set {
        deck_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.AIType.Types.Enum type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.AIType.Types.Enum Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIDeck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIDeck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Deck, other.Deck)) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (deck_ != null) hash ^= Deck.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (deck_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Deck);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (deck_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deck);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIDeck other) {
      if (other == null) {
        return;
      }
      if (other.deck_ != null) {
        if (deck_ == null) {
          deck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
        }
        Deck.MergeFrom(other.Deck);
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (deck_ == null) {
              deck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
            }
            input.ReadMessage(deck_);
            break;
          }
          case 16: {
            type_ = (global::Loom.ZombieBattleground.Protobuf.AIType.Types.Enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIDeckList : pb::IMessage<AIDeckList> {
    private static readonly pb::MessageParser<AIDeckList> _parser = new pb::MessageParser<AIDeckList>(() => new AIDeckList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIDeckList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIDeckList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIDeckList(AIDeckList other) : this() {
      decks_ = other.decks_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIDeckList Clone() {
      return new AIDeckList(this);
    }

    /// <summary>Field number for the "decks" field.</summary>
    public const int DecksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.AIDeck> _repeated_decks_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.AIDeck.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AIDeck> decks_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AIDeck>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AIDeck> Decks {
      get { return decks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIDeckList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIDeckList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!decks_.Equals(other.decks_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= decks_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      decks_.WriteTo(output, _repeated_decks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += decks_.CalculateSize(_repeated_decks_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIDeckList other) {
      if (other == null) {
        return;
      }
      decks_.Add(other.decks_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            decks_.AddEntriesFrom(input, _repeated_decks_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InitRequest : pb::IMessage<InitRequest> {
    private static readonly pb::MessageParser<InitRequest> _parser = new pb::MessageParser<InitRequest>(() => new InitRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitRequest(InitRequest other) : this() {
      defaultDecks_ = other.defaultDecks_.Clone();
      defaultCollection_ = other.defaultCollection_.Clone();
      cards_ = other.cards_.Clone();
      heroes_ = other.heroes_.Clone();
      aiDecks_ = other.aiDecks_.Clone();
      version_ = other.version_;
      oracle_ = other.oracle_ != null ? other.oracle_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitRequest Clone() {
      return new InitRequest(this);
    }

    /// <summary>Field number for the "default_decks" field.</summary>
    public const int DefaultDecksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Deck> _repeated_defaultDecks_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.Deck.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck> defaultDecks_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck> DefaultDecks {
      get { return defaultDecks_; }
    }

    /// <summary>Field number for the "default_collection" field.</summary>
    public const int DefaultCollectionFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardCollectionCard> _repeated_defaultCollection_codec
        = pb::FieldCodec.ForMessage(18, global::Loom.ZombieBattleground.Protobuf.CardCollectionCard.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollectionCard> defaultCollection_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollectionCard>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollectionCard> DefaultCollection {
      get { return defaultCollection_; }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Card> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(26, global::Loom.ZombieBattleground.Protobuf.Card.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card> cards_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "heroes" field.</summary>
    public const int HeroesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Hero> _repeated_heroes_codec
        = pb::FieldCodec.ForMessage(34, global::Loom.ZombieBattleground.Protobuf.Hero.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero> heroes_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero> Heroes {
      get { return heroes_; }
    }

    /// <summary>Field number for the "ai_decks" field.</summary>
    public const int AiDecksFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.AIDeck> _repeated_aiDecks_codec
        = pb::FieldCodec.ForMessage(42, global::Loom.ZombieBattleground.Protobuf.AIDeck.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AIDeck> aiDecks_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AIDeck>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AIDeck> AiDecks {
      get { return aiDecks_; }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 6;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "oracle" field.</summary>
    public const int OracleFieldNumber = 7;
    private global::Loom.Client.Protobuf.Address oracle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.Client.Protobuf.Address Oracle {
      get { return oracle_; }
      set {
        oracle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!defaultDecks_.Equals(other.defaultDecks_)) return false;
      if(!defaultCollection_.Equals(other.defaultCollection_)) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if(!heroes_.Equals(other.heroes_)) return false;
      if(!aiDecks_.Equals(other.aiDecks_)) return false;
      if (Version != other.Version) return false;
      if (!object.Equals(Oracle, other.Oracle)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= defaultDecks_.GetHashCode();
      hash ^= defaultCollection_.GetHashCode();
      hash ^= cards_.GetHashCode();
      hash ^= heroes_.GetHashCode();
      hash ^= aiDecks_.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (oracle_ != null) hash ^= Oracle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      defaultDecks_.WriteTo(output, _repeated_defaultDecks_codec);
      defaultCollection_.WriteTo(output, _repeated_defaultCollection_codec);
      cards_.WriteTo(output, _repeated_cards_codec);
      heroes_.WriteTo(output, _repeated_heroes_codec);
      aiDecks_.WriteTo(output, _repeated_aiDecks_codec);
      if (Version.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Version);
      }
      if (oracle_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Oracle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += defaultDecks_.CalculateSize(_repeated_defaultDecks_codec);
      size += defaultCollection_.CalculateSize(_repeated_defaultCollection_codec);
      size += cards_.CalculateSize(_repeated_cards_codec);
      size += heroes_.CalculateSize(_repeated_heroes_codec);
      size += aiDecks_.CalculateSize(_repeated_aiDecks_codec);
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (oracle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Oracle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitRequest other) {
      if (other == null) {
        return;
      }
      defaultDecks_.Add(other.defaultDecks_);
      defaultCollection_.Add(other.defaultCollection_);
      cards_.Add(other.cards_);
      heroes_.Add(other.heroes_);
      aiDecks_.Add(other.aiDecks_);
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.oracle_ != null) {
        if (oracle_ == null) {
          oracle_ = new global::Loom.Client.Protobuf.Address();
        }
        Oracle.MergeFrom(other.Oracle);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            defaultDecks_.AddEntriesFrom(input, _repeated_defaultDecks_codec);
            break;
          }
          case 18: {
            defaultCollection_.AddEntriesFrom(input, _repeated_defaultCollection_codec);
            break;
          }
          case 26: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 34: {
            heroes_.AddEntriesFrom(input, _repeated_heroes_codec);
            break;
          }
          case 42: {
            aiDecks_.AddEntriesFrom(input, _repeated_aiDecks_codec);
            break;
          }
          case 50: {
            Version = input.ReadString();
            break;
          }
          case 58: {
            if (oracle_ == null) {
              oracle_ = new global::Loom.Client.Protobuf.Address();
            }
            input.ReadMessage(oracle_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateOracle : pb::IMessage<UpdateOracle> {
    private static readonly pb::MessageParser<UpdateOracle> _parser = new pb::MessageParser<UpdateOracle>(() => new UpdateOracle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateOracle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateOracle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateOracle(UpdateOracle other) : this() {
      newOracle_ = other.newOracle_ != null ? other.newOracle_.Clone() : null;
      oldOracle_ = other.oldOracle_ != null ? other.oldOracle_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateOracle Clone() {
      return new UpdateOracle(this);
    }

    /// <summary>Field number for the "new_oracle" field.</summary>
    public const int NewOracleFieldNumber = 1;
    private global::Loom.Client.Protobuf.Address newOracle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.Client.Protobuf.Address NewOracle {
      get { return newOracle_; }
      set {
        newOracle_ = value;
      }
    }

    /// <summary>Field number for the "old_oracle" field.</summary>
    public const int OldOracleFieldNumber = 2;
    private global::Loom.Client.Protobuf.Address oldOracle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.Client.Protobuf.Address OldOracle {
      get { return oldOracle_; }
      set {
        oldOracle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateOracle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateOracle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(NewOracle, other.NewOracle)) return false;
      if (!object.Equals(OldOracle, other.OldOracle)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (newOracle_ != null) hash ^= NewOracle.GetHashCode();
      if (oldOracle_ != null) hash ^= OldOracle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (newOracle_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(NewOracle);
      }
      if (oldOracle_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OldOracle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (newOracle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewOracle);
      }
      if (oldOracle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OldOracle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateOracle other) {
      if (other == null) {
        return;
      }
      if (other.newOracle_ != null) {
        if (newOracle_ == null) {
          newOracle_ = new global::Loom.Client.Protobuf.Address();
        }
        NewOracle.MergeFrom(other.NewOracle);
      }
      if (other.oldOracle_ != null) {
        if (oldOracle_ == null) {
          oldOracle_ = new global::Loom.Client.Protobuf.Address();
        }
        OldOracle.MergeFrom(other.OldOracle);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (newOracle_ == null) {
              newOracle_ = new global::Loom.Client.Protobuf.Address();
            }
            input.ReadMessage(newOracle_);
            break;
          }
          case 18: {
            if (oldOracle_ == null) {
              oldOracle_ = new global::Loom.Client.Protobuf.Address();
            }
            input.ReadMessage(oldOracle_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateInitRequest : pb::IMessage<UpdateInitRequest> {
    private static readonly pb::MessageParser<UpdateInitRequest> _parser = new pb::MessageParser<UpdateInitRequest>(() => new UpdateInitRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateInitRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateInitRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateInitRequest(UpdateInitRequest other) : this() {
      defaultDecks_ = other.defaultDecks_.Clone();
      defaultCollection_ = other.defaultCollection_.Clone();
      cards_ = other.cards_.Clone();
      heroes_ = other.heroes_.Clone();
      aiDecks_ = other.aiDecks_.Clone();
      version_ = other.version_;
      oracle_ = other.oracle_ != null ? other.oracle_.Clone() : null;
      oldVersion_ = other.oldVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateInitRequest Clone() {
      return new UpdateInitRequest(this);
    }

    /// <summary>Field number for the "default_decks" field.</summary>
    public const int DefaultDecksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Deck> _repeated_defaultDecks_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.Deck.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck> defaultDecks_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck> DefaultDecks {
      get { return defaultDecks_; }
    }

    /// <summary>Field number for the "default_collection" field.</summary>
    public const int DefaultCollectionFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardCollectionCard> _repeated_defaultCollection_codec
        = pb::FieldCodec.ForMessage(18, global::Loom.ZombieBattleground.Protobuf.CardCollectionCard.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollectionCard> defaultCollection_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollectionCard>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollectionCard> DefaultCollection {
      get { return defaultCollection_; }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Card> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(26, global::Loom.ZombieBattleground.Protobuf.Card.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card> cards_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "heroes" field.</summary>
    public const int HeroesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Hero> _repeated_heroes_codec
        = pb::FieldCodec.ForMessage(34, global::Loom.ZombieBattleground.Protobuf.Hero.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero> heroes_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero> Heroes {
      get { return heroes_; }
    }

    /// <summary>Field number for the "ai_decks" field.</summary>
    public const int AiDecksFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.AIDeck> _repeated_aiDecks_codec
        = pb::FieldCodec.ForMessage(42, global::Loom.ZombieBattleground.Protobuf.AIDeck.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AIDeck> aiDecks_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AIDeck>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AIDeck> AiDecks {
      get { return aiDecks_; }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 6;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "oracle" field.</summary>
    public const int OracleFieldNumber = 7;
    private global::Loom.Client.Protobuf.Address oracle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.Client.Protobuf.Address Oracle {
      get { return oracle_; }
      set {
        oracle_ = value;
      }
    }

    /// <summary>Field number for the "oldVersion" field.</summary>
    public const int OldVersionFieldNumber = 8;
    private string oldVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OldVersion {
      get { return oldVersion_; }
      set {
        oldVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateInitRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateInitRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!defaultDecks_.Equals(other.defaultDecks_)) return false;
      if(!defaultCollection_.Equals(other.defaultCollection_)) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if(!heroes_.Equals(other.heroes_)) return false;
      if(!aiDecks_.Equals(other.aiDecks_)) return false;
      if (Version != other.Version) return false;
      if (!object.Equals(Oracle, other.Oracle)) return false;
      if (OldVersion != other.OldVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= defaultDecks_.GetHashCode();
      hash ^= defaultCollection_.GetHashCode();
      hash ^= cards_.GetHashCode();
      hash ^= heroes_.GetHashCode();
      hash ^= aiDecks_.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (oracle_ != null) hash ^= Oracle.GetHashCode();
      if (OldVersion.Length != 0) hash ^= OldVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      defaultDecks_.WriteTo(output, _repeated_defaultDecks_codec);
      defaultCollection_.WriteTo(output, _repeated_defaultCollection_codec);
      cards_.WriteTo(output, _repeated_cards_codec);
      heroes_.WriteTo(output, _repeated_heroes_codec);
      aiDecks_.WriteTo(output, _repeated_aiDecks_codec);
      if (Version.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Version);
      }
      if (oracle_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Oracle);
      }
      if (OldVersion.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(OldVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += defaultDecks_.CalculateSize(_repeated_defaultDecks_codec);
      size += defaultCollection_.CalculateSize(_repeated_defaultCollection_codec);
      size += cards_.CalculateSize(_repeated_cards_codec);
      size += heroes_.CalculateSize(_repeated_heroes_codec);
      size += aiDecks_.CalculateSize(_repeated_aiDecks_codec);
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (oracle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Oracle);
      }
      if (OldVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OldVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateInitRequest other) {
      if (other == null) {
        return;
      }
      defaultDecks_.Add(other.defaultDecks_);
      defaultCollection_.Add(other.defaultCollection_);
      cards_.Add(other.cards_);
      heroes_.Add(other.heroes_);
      aiDecks_.Add(other.aiDecks_);
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.oracle_ != null) {
        if (oracle_ == null) {
          oracle_ = new global::Loom.Client.Protobuf.Address();
        }
        Oracle.MergeFrom(other.Oracle);
      }
      if (other.OldVersion.Length != 0) {
        OldVersion = other.OldVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            defaultDecks_.AddEntriesFrom(input, _repeated_defaultDecks_codec);
            break;
          }
          case 18: {
            defaultCollection_.AddEntriesFrom(input, _repeated_defaultCollection_codec);
            break;
          }
          case 26: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 34: {
            heroes_.AddEntriesFrom(input, _repeated_heroes_codec);
            break;
          }
          case 42: {
            aiDecks_.AddEntriesFrom(input, _repeated_aiDecks_codec);
            break;
          }
          case 50: {
            Version = input.ReadString();
            break;
          }
          case 58: {
            if (oracle_ == null) {
              oracle_ = new global::Loom.Client.Protobuf.Address();
            }
            input.ReadMessage(oracle_);
            break;
          }
          case 66: {
            OldVersion = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetInitRequest : pb::IMessage<GetInitRequest> {
    private static readonly pb::MessageParser<GetInitRequest> _parser = new pb::MessageParser<GetInitRequest>(() => new GetInitRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetInitRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInitRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInitRequest(GetInitRequest other) : this() {
      version_ = other.version_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInitRequest Clone() {
      return new GetInitRequest(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetInitRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetInitRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetInitRequest other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetInitResponse : pb::IMessage<GetInitResponse> {
    private static readonly pb::MessageParser<GetInitResponse> _parser = new pb::MessageParser<GetInitResponse>(() => new GetInitResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetInitResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInitResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInitResponse(GetInitResponse other) : this() {
      defaultDecks_ = other.defaultDecks_.Clone();
      defaultCollection_ = other.defaultCollection_.Clone();
      cards_ = other.cards_.Clone();
      heroes_ = other.heroes_.Clone();
      defaultHeroes_ = other.defaultHeroes_.Clone();
      aiDecks_ = other.aiDecks_.Clone();
      version_ = other.version_;
      oracle_ = other.oracle_ != null ? other.oracle_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInitResponse Clone() {
      return new GetInitResponse(this);
    }

    /// <summary>Field number for the "default_decks" field.</summary>
    public const int DefaultDecksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Deck> _repeated_defaultDecks_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.Deck.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck> defaultDecks_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck> DefaultDecks {
      get { return defaultDecks_; }
    }

    /// <summary>Field number for the "default_collection" field.</summary>
    public const int DefaultCollectionFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardCollectionCard> _repeated_defaultCollection_codec
        = pb::FieldCodec.ForMessage(18, global::Loom.ZombieBattleground.Protobuf.CardCollectionCard.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollectionCard> defaultCollection_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollectionCard>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollectionCard> DefaultCollection {
      get { return defaultCollection_; }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Card> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(26, global::Loom.ZombieBattleground.Protobuf.Card.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card> cards_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "heroes" field.</summary>
    public const int HeroesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Hero> _repeated_heroes_codec
        = pb::FieldCodec.ForMessage(34, global::Loom.ZombieBattleground.Protobuf.Hero.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero> heroes_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero> Heroes {
      get { return heroes_; }
    }

    /// <summary>Field number for the "default_heroes" field.</summary>
    public const int DefaultHeroesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Hero> _repeated_defaultHeroes_codec
        = pb::FieldCodec.ForMessage(42, global::Loom.ZombieBattleground.Protobuf.Hero.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero> defaultHeroes_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero> DefaultHeroes {
      get { return defaultHeroes_; }
    }

    /// <summary>Field number for the "ai_decks" field.</summary>
    public const int AiDecksFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.AIDeck> _repeated_aiDecks_codec
        = pb::FieldCodec.ForMessage(50, global::Loom.ZombieBattleground.Protobuf.AIDeck.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AIDeck> aiDecks_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AIDeck>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AIDeck> AiDecks {
      get { return aiDecks_; }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 7;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "oracle" field.</summary>
    public const int OracleFieldNumber = 8;
    private global::Loom.Client.Protobuf.Address oracle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.Client.Protobuf.Address Oracle {
      get { return oracle_; }
      set {
        oracle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetInitResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetInitResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!defaultDecks_.Equals(other.defaultDecks_)) return false;
      if(!defaultCollection_.Equals(other.defaultCollection_)) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if(!heroes_.Equals(other.heroes_)) return false;
      if(!defaultHeroes_.Equals(other.defaultHeroes_)) return false;
      if(!aiDecks_.Equals(other.aiDecks_)) return false;
      if (Version != other.Version) return false;
      if (!object.Equals(Oracle, other.Oracle)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= defaultDecks_.GetHashCode();
      hash ^= defaultCollection_.GetHashCode();
      hash ^= cards_.GetHashCode();
      hash ^= heroes_.GetHashCode();
      hash ^= defaultHeroes_.GetHashCode();
      hash ^= aiDecks_.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (oracle_ != null) hash ^= Oracle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      defaultDecks_.WriteTo(output, _repeated_defaultDecks_codec);
      defaultCollection_.WriteTo(output, _repeated_defaultCollection_codec);
      cards_.WriteTo(output, _repeated_cards_codec);
      heroes_.WriteTo(output, _repeated_heroes_codec);
      defaultHeroes_.WriteTo(output, _repeated_defaultHeroes_codec);
      aiDecks_.WriteTo(output, _repeated_aiDecks_codec);
      if (Version.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Version);
      }
      if (oracle_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Oracle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += defaultDecks_.CalculateSize(_repeated_defaultDecks_codec);
      size += defaultCollection_.CalculateSize(_repeated_defaultCollection_codec);
      size += cards_.CalculateSize(_repeated_cards_codec);
      size += heroes_.CalculateSize(_repeated_heroes_codec);
      size += defaultHeroes_.CalculateSize(_repeated_defaultHeroes_codec);
      size += aiDecks_.CalculateSize(_repeated_aiDecks_codec);
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (oracle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Oracle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetInitResponse other) {
      if (other == null) {
        return;
      }
      defaultDecks_.Add(other.defaultDecks_);
      defaultCollection_.Add(other.defaultCollection_);
      cards_.Add(other.cards_);
      heroes_.Add(other.heroes_);
      defaultHeroes_.Add(other.defaultHeroes_);
      aiDecks_.Add(other.aiDecks_);
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.oracle_ != null) {
        if (oracle_ == null) {
          oracle_ = new global::Loom.Client.Protobuf.Address();
        }
        Oracle.MergeFrom(other.Oracle);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            defaultDecks_.AddEntriesFrom(input, _repeated_defaultDecks_codec);
            break;
          }
          case 18: {
            defaultCollection_.AddEntriesFrom(input, _repeated_defaultCollection_codec);
            break;
          }
          case 26: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 34: {
            heroes_.AddEntriesFrom(input, _repeated_heroes_codec);
            break;
          }
          case 42: {
            defaultHeroes_.AddEntriesFrom(input, _repeated_defaultHeroes_codec);
            break;
          }
          case 50: {
            aiDecks_.AddEntriesFrom(input, _repeated_aiDecks_codec);
            break;
          }
          case 58: {
            Version = input.ReadString();
            break;
          }
          case 66: {
            if (oracle_ == null) {
              oracle_ = new global::Loom.Client.Protobuf.Address();
            }
            input.ReadMessage(oracle_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateCardListRequest : pb::IMessage<UpdateCardListRequest> {
    private static readonly pb::MessageParser<UpdateCardListRequest> _parser = new pb::MessageParser<UpdateCardListRequest>(() => new UpdateCardListRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateCardListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCardListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCardListRequest(UpdateCardListRequest other) : this() {
      cards_ = other.cards_.Clone();
      version_ = other.version_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCardListRequest Clone() {
      return new UpdateCardListRequest(this);
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Card> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.Card.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card> cards_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateCardListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateCardListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cards_.Equals(other.cards_)) return false;
      if (Version != other.Version) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cards_.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cards_.WriteTo(output, _repeated_cards_codec);
      if (Version.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateCardListRequest other) {
      if (other == null) {
        return;
      }
      cards_.Add(other.cards_);
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 18: {
            Version = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetCardListRequest : pb::IMessage<GetCardListRequest> {
    private static readonly pb::MessageParser<GetCardListRequest> _parser = new pb::MessageParser<GetCardListRequest>(() => new GetCardListRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetCardListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCardListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCardListRequest(GetCardListRequest other) : this() {
      version_ = other.version_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCardListRequest Clone() {
      return new GetCardListRequest(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetCardListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetCardListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetCardListRequest other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetCardListResponse : pb::IMessage<GetCardListResponse> {
    private static readonly pb::MessageParser<GetCardListResponse> _parser = new pb::MessageParser<GetCardListResponse>(() => new GetCardListResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetCardListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCardListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCardListResponse(GetCardListResponse other) : this() {
      cards_ = other.cards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCardListResponse Clone() {
      return new GetCardListResponse(this);
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Card> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.Card.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card> cards_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetCardListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetCardListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cards_.Equals(other.cards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cards_.WriteTo(output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetCardListResponse other) {
      if (other == null) {
        return;
      }
      cards_.Add(other.cards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpsertAccountRequest : pb::IMessage<UpsertAccountRequest> {
    private static readonly pb::MessageParser<UpsertAccountRequest> _parser = new pb::MessageParser<UpsertAccountRequest>(() => new UpsertAccountRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpsertAccountRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpsertAccountRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpsertAccountRequest(UpsertAccountRequest other) : this() {
      userId_ = other.userId_;
      phoneNumberVerified_ = other.phoneNumberVerified_;
      rewardRedeemed_ = other.rewardRedeemed_;
      isKickstarter_ = other.isKickstarter_;
      image_ = other.image_;
      emailNotification_ = other.emailNotification_;
      eloScore_ = other.eloScore_;
      currentTier_ = other.currentTier_;
      gameMembershipTier_ = other.gameMembershipTier_;
      version_ = other.version_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpsertAccountRequest Clone() {
      return new UpsertAccountRequest(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "phone_number_verified" field.</summary>
    public const int PhoneNumberVerifiedFieldNumber = 2;
    private bool phoneNumberVerified_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PhoneNumberVerified {
      get { return phoneNumberVerified_; }
      set {
        phoneNumberVerified_ = value;
      }
    }

    /// <summary>Field number for the "reward_redeemed" field.</summary>
    public const int RewardRedeemedFieldNumber = 3;
    private bool rewardRedeemed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RewardRedeemed {
      get { return rewardRedeemed_; }
      set {
        rewardRedeemed_ = value;
      }
    }

    /// <summary>Field number for the "is_kickstarter" field.</summary>
    public const int IsKickstarterFieldNumber = 4;
    private bool isKickstarter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsKickstarter {
      get { return isKickstarter_; }
      set {
        isKickstarter_ = value;
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 5;
    private string image_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Image {
      get { return image_; }
      set {
        image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "email_notification" field.</summary>
    public const int EmailNotificationFieldNumber = 6;
    private bool emailNotification_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EmailNotification {
      get { return emailNotification_; }
      set {
        emailNotification_ = value;
      }
    }

    /// <summary>Field number for the "elo_score" field.</summary>
    public const int EloScoreFieldNumber = 7;
    private long eloScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EloScore {
      get { return eloScore_; }
      set {
        eloScore_ = value;
      }
    }

    /// <summary>Field number for the "current_tier" field.</summary>
    public const int CurrentTierFieldNumber = 8;
    private int currentTier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentTier {
      get { return currentTier_; }
      set {
        currentTier_ = value;
      }
    }

    /// <summary>Field number for the "game_membership_tier" field.</summary>
    public const int GameMembershipTierFieldNumber = 9;
    private int gameMembershipTier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameMembershipTier {
      get { return gameMembershipTier_; }
      set {
        gameMembershipTier_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 10;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpsertAccountRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpsertAccountRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (PhoneNumberVerified != other.PhoneNumberVerified) return false;
      if (RewardRedeemed != other.RewardRedeemed) return false;
      if (IsKickstarter != other.IsKickstarter) return false;
      if (Image != other.Image) return false;
      if (EmailNotification != other.EmailNotification) return false;
      if (EloScore != other.EloScore) return false;
      if (CurrentTier != other.CurrentTier) return false;
      if (GameMembershipTier != other.GameMembershipTier) return false;
      if (Version != other.Version) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (PhoneNumberVerified != false) hash ^= PhoneNumberVerified.GetHashCode();
      if (RewardRedeemed != false) hash ^= RewardRedeemed.GetHashCode();
      if (IsKickstarter != false) hash ^= IsKickstarter.GetHashCode();
      if (Image.Length != 0) hash ^= Image.GetHashCode();
      if (EmailNotification != false) hash ^= EmailNotification.GetHashCode();
      if (EloScore != 0L) hash ^= EloScore.GetHashCode();
      if (CurrentTier != 0) hash ^= CurrentTier.GetHashCode();
      if (GameMembershipTier != 0) hash ^= GameMembershipTier.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (PhoneNumberVerified != false) {
        output.WriteRawTag(16);
        output.WriteBool(PhoneNumberVerified);
      }
      if (RewardRedeemed != false) {
        output.WriteRawTag(24);
        output.WriteBool(RewardRedeemed);
      }
      if (IsKickstarter != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsKickstarter);
      }
      if (Image.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Image);
      }
      if (EmailNotification != false) {
        output.WriteRawTag(48);
        output.WriteBool(EmailNotification);
      }
      if (EloScore != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(EloScore);
      }
      if (CurrentTier != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CurrentTier);
      }
      if (GameMembershipTier != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(GameMembershipTier);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (PhoneNumberVerified != false) {
        size += 1 + 1;
      }
      if (RewardRedeemed != false) {
        size += 1 + 1;
      }
      if (IsKickstarter != false) {
        size += 1 + 1;
      }
      if (Image.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Image);
      }
      if (EmailNotification != false) {
        size += 1 + 1;
      }
      if (EloScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EloScore);
      }
      if (CurrentTier != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentTier);
      }
      if (GameMembershipTier != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameMembershipTier);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpsertAccountRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.PhoneNumberVerified != false) {
        PhoneNumberVerified = other.PhoneNumberVerified;
      }
      if (other.RewardRedeemed != false) {
        RewardRedeemed = other.RewardRedeemed;
      }
      if (other.IsKickstarter != false) {
        IsKickstarter = other.IsKickstarter;
      }
      if (other.Image.Length != 0) {
        Image = other.Image;
      }
      if (other.EmailNotification != false) {
        EmailNotification = other.EmailNotification;
      }
      if (other.EloScore != 0L) {
        EloScore = other.EloScore;
      }
      if (other.CurrentTier != 0) {
        CurrentTier = other.CurrentTier;
      }
      if (other.GameMembershipTier != 0) {
        GameMembershipTier = other.GameMembershipTier;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 16: {
            PhoneNumberVerified = input.ReadBool();
            break;
          }
          case 24: {
            RewardRedeemed = input.ReadBool();
            break;
          }
          case 32: {
            IsKickstarter = input.ReadBool();
            break;
          }
          case 42: {
            Image = input.ReadString();
            break;
          }
          case 48: {
            EmailNotification = input.ReadBool();
            break;
          }
          case 56: {
            EloScore = input.ReadInt64();
            break;
          }
          case 64: {
            CurrentTier = input.ReadInt32();
            break;
          }
          case 72: {
            GameMembershipTier = input.ReadInt32();
            break;
          }
          case 82: {
            Version = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetAccountRequest : pb::IMessage<GetAccountRequest> {
    private static readonly pb::MessageParser<GetAccountRequest> _parser = new pb::MessageParser<GetAccountRequest>(() => new GetAccountRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAccountRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountRequest(GetAccountRequest other) : this() {
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountRequest Clone() {
      return new GetAccountRequest(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAccountRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAccountRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAccountRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetDeckRequest : pb::IMessage<GetDeckRequest> {
    private static readonly pb::MessageParser<GetDeckRequest> _parser = new pb::MessageParser<GetDeckRequest>(() => new GetDeckRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetDeckRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeckRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeckRequest(GetDeckRequest other) : this() {
      userId_ = other.userId_;
      deckId_ = other.deckId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeckRequest Clone() {
      return new GetDeckRequest(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deck_id" field.</summary>
    public const int DeckIdFieldNumber = 2;
    private long deckId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DeckId {
      get { return deckId_; }
      set {
        deckId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetDeckRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetDeckRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (DeckId != other.DeckId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (DeckId != 0L) hash ^= DeckId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (DeckId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(DeckId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (DeckId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DeckId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetDeckRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.DeckId != 0L) {
        DeckId = other.DeckId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 16: {
            DeckId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetDeckResponse : pb::IMessage<GetDeckResponse> {
    private static readonly pb::MessageParser<GetDeckResponse> _parser = new pb::MessageParser<GetDeckResponse>(() => new GetDeckResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetDeckResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeckResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeckResponse(GetDeckResponse other) : this() {
      deck_ = other.deck_ != null ? other.deck_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeckResponse Clone() {
      return new GetDeckResponse(this);
    }

    /// <summary>Field number for the "deck" field.</summary>
    public const int DeckFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.Deck deck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Deck Deck {
      get { return deck_; }
      set {
        deck_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetDeckResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetDeckResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Deck, other.Deck)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (deck_ != null) hash ^= Deck.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (deck_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Deck);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (deck_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deck);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetDeckResponse other) {
      if (other == null) {
        return;
      }
      if (other.deck_ != null) {
        if (deck_ == null) {
          deck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
        }
        Deck.MergeFrom(other.Deck);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            if (deck_ == null) {
              deck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
            }
            input.ReadMessage(deck_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateDeckRequest : pb::IMessage<CreateDeckRequest> {
    private static readonly pb::MessageParser<CreateDeckRequest> _parser = new pb::MessageParser<CreateDeckRequest>(() => new CreateDeckRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateDeckRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDeckRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDeckRequest(CreateDeckRequest other) : this() {
      userId_ = other.userId_;
      deck_ = other.deck_ != null ? other.deck_.Clone() : null;
      version_ = other.version_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDeckRequest Clone() {
      return new CreateDeckRequest(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deck" field.</summary>
    public const int DeckFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.Deck deck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Deck Deck {
      get { return deck_; }
      set {
        deck_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 4;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateDeckRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateDeckRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (!object.Equals(Deck, other.Deck)) return false;
      if (Version != other.Version) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (deck_ != null) hash ^= Deck.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (deck_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Deck);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (deck_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deck);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateDeckRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.deck_ != null) {
        if (deck_ == null) {
          deck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
        }
        Deck.MergeFrom(other.Deck);
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            if (deck_ == null) {
              deck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
            }
            input.ReadMessage(deck_);
            break;
          }
          case 34: {
            Version = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateDeckResponse : pb::IMessage<CreateDeckResponse> {
    private static readonly pb::MessageParser<CreateDeckResponse> _parser = new pb::MessageParser<CreateDeckResponse>(() => new CreateDeckResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateDeckResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDeckResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDeckResponse(CreateDeckResponse other) : this() {
      deckId_ = other.deckId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDeckResponse Clone() {
      return new CreateDeckResponse(this);
    }

    /// <summary>Field number for the "deck_id" field.</summary>
    public const int DeckIdFieldNumber = 1;
    private long deckId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DeckId {
      get { return deckId_; }
      set {
        deckId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateDeckResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateDeckResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeckId != other.DeckId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeckId != 0L) hash ^= DeckId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeckId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(DeckId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeckId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DeckId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateDeckResponse other) {
      if (other == null) {
        return;
      }
      if (other.DeckId != 0L) {
        DeckId = other.DeckId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DeckId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteDeckRequest : pb::IMessage<DeleteDeckRequest> {
    private static readonly pb::MessageParser<DeleteDeckRequest> _parser = new pb::MessageParser<DeleteDeckRequest>(() => new DeleteDeckRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteDeckRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDeckRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDeckRequest(DeleteDeckRequest other) : this() {
      userId_ = other.userId_;
      deckId_ = other.deckId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDeckRequest Clone() {
      return new DeleteDeckRequest(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deck_id" field.</summary>
    public const int DeckIdFieldNumber = 2;
    private long deckId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DeckId {
      get { return deckId_; }
      set {
        deckId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteDeckRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteDeckRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (DeckId != other.DeckId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (DeckId != 0L) hash ^= DeckId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (DeckId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(DeckId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (DeckId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DeckId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteDeckRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.DeckId != 0L) {
        DeckId = other.DeckId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 16: {
            DeckId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EditDeckRequest : pb::IMessage<EditDeckRequest> {
    private static readonly pb::MessageParser<EditDeckRequest> _parser = new pb::MessageParser<EditDeckRequest>(() => new EditDeckRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EditDeckRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditDeckRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditDeckRequest(EditDeckRequest other) : this() {
      userId_ = other.userId_;
      deck_ = other.deck_ != null ? other.deck_.Clone() : null;
      version_ = other.version_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditDeckRequest Clone() {
      return new EditDeckRequest(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deck" field.</summary>
    public const int DeckFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.Deck deck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Deck Deck {
      get { return deck_; }
      set {
        deck_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 4;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EditDeckRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EditDeckRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (!object.Equals(Deck, other.Deck)) return false;
      if (Version != other.Version) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (deck_ != null) hash ^= Deck.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (deck_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Deck);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (deck_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deck);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EditDeckRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.deck_ != null) {
        if (deck_ == null) {
          deck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
        }
        Deck.MergeFrom(other.Deck);
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            if (deck_ == null) {
              deck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
            }
            input.ReadMessage(deck_);
            break;
          }
          case 34: {
            Version = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DecksResponse : pb::IMessage<DecksResponse> {
    private static readonly pb::MessageParser<DecksResponse> _parser = new pb::MessageParser<DecksResponse>(() => new DecksResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DecksResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecksResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecksResponse(DecksResponse other) : this() {
      userId_ = other.userId_;
      decks_ = other.decks_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecksResponse Clone() {
      return new DecksResponse(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "decks" field.</summary>
    public const int DecksFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Deck> _repeated_decks_codec
        = pb::FieldCodec.ForMessage(18, global::Loom.ZombieBattleground.Protobuf.Deck.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck> decks_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck> Decks {
      get { return decks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DecksResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DecksResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if(!decks_.Equals(other.decks_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      hash ^= decks_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      decks_.WriteTo(output, _repeated_decks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      size += decks_.CalculateSize(_repeated_decks_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DecksResponse other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      decks_.Add(other.decks_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            decks_.AddEntriesFrom(input, _repeated_decks_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListDecksRequest : pb::IMessage<ListDecksRequest> {
    private static readonly pb::MessageParser<ListDecksRequest> _parser = new pb::MessageParser<ListDecksRequest>(() => new ListDecksRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListDecksRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDecksRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDecksRequest(ListDecksRequest other) : this() {
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDecksRequest Clone() {
      return new ListDecksRequest(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListDecksRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListDecksRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListDecksRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListDecksResponse : pb::IMessage<ListDecksResponse> {
    private static readonly pb::MessageParser<ListDecksResponse> _parser = new pb::MessageParser<ListDecksResponse>(() => new ListDecksResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListDecksResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDecksResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDecksResponse(ListDecksResponse other) : this() {
      decks_ = other.decks_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDecksResponse Clone() {
      return new ListDecksResponse(this);
    }

    /// <summary>Field number for the "decks" field.</summary>
    public const int DecksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Deck> _repeated_decks_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.Deck.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck> decks_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck> Decks {
      get { return decks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListDecksResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListDecksResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!decks_.Equals(other.decks_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= decks_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      decks_.WriteTo(output, _repeated_decks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += decks_.CalculateSize(_repeated_decks_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListDecksResponse other) {
      if (other == null) {
        return;
      }
      decks_.Add(other.decks_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            decks_.AddEntriesFrom(input, _repeated_decks_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetAIDecksRequest : pb::IMessage<SetAIDecksRequest> {
    private static readonly pb::MessageParser<SetAIDecksRequest> _parser = new pb::MessageParser<SetAIDecksRequest>(() => new SetAIDecksRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetAIDecksRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetAIDecksRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetAIDecksRequest(SetAIDecksRequest other) : this() {
      version_ = other.version_;
      decks_ = other.decks_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetAIDecksRequest Clone() {
      return new SetAIDecksRequest(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "decks" field.</summary>
    public const int DecksFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.AIDeck> _repeated_decks_codec
        = pb::FieldCodec.ForMessage(18, global::Loom.ZombieBattleground.Protobuf.AIDeck.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AIDeck> decks_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AIDeck>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AIDeck> Decks {
      get { return decks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetAIDecksRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetAIDecksRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if(!decks_.Equals(other.decks_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      hash ^= decks_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      decks_.WriteTo(output, _repeated_decks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      size += decks_.CalculateSize(_repeated_decks_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetAIDecksRequest other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      decks_.Add(other.decks_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
          case 18: {
            decks_.AddEntriesFrom(input, _repeated_decks_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetAIDecksRequest : pb::IMessage<GetAIDecksRequest> {
    private static readonly pb::MessageParser<GetAIDecksRequest> _parser = new pb::MessageParser<GetAIDecksRequest>(() => new GetAIDecksRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAIDecksRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAIDecksRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAIDecksRequest(GetAIDecksRequest other) : this() {
      version_ = other.version_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAIDecksRequest Clone() {
      return new GetAIDecksRequest(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAIDecksRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAIDecksRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAIDecksRequest other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetAIDecksResponse : pb::IMessage<GetAIDecksResponse> {
    private static readonly pb::MessageParser<GetAIDecksResponse> _parser = new pb::MessageParser<GetAIDecksResponse>(() => new GetAIDecksResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAIDecksResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAIDecksResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAIDecksResponse(GetAIDecksResponse other) : this() {
      decks_ = other.decks_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAIDecksResponse Clone() {
      return new GetAIDecksResponse(this);
    }

    /// <summary>Field number for the "decks" field.</summary>
    public const int DecksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.AIDeck> _repeated_decks_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.AIDeck.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AIDeck> decks_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AIDeck>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AIDeck> Decks {
      get { return decks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAIDecksResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAIDecksResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!decks_.Equals(other.decks_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= decks_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      decks_.WriteTo(output, _repeated_decks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += decks_.CalculateSize(_repeated_decks_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAIDecksResponse other) {
      if (other == null) {
        return;
      }
      decks_.Add(other.decks_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            decks_.AddEntriesFrom(input, _repeated_decks_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListCardLibraryRequest : pb::IMessage<ListCardLibraryRequest> {
    private static readonly pb::MessageParser<ListCardLibraryRequest> _parser = new pb::MessageParser<ListCardLibraryRequest>(() => new ListCardLibraryRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListCardLibraryRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCardLibraryRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCardLibraryRequest(ListCardLibraryRequest other) : this() {
      version_ = other.version_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCardLibraryRequest Clone() {
      return new ListCardLibraryRequest(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListCardLibraryRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListCardLibraryRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListCardLibraryRequest other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListCardLibraryResponse : pb::IMessage<ListCardLibraryResponse> {
    private static readonly pb::MessageParser<ListCardLibraryResponse> _parser = new pb::MessageParser<ListCardLibraryResponse>(() => new ListCardLibraryResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListCardLibraryResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCardLibraryResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCardLibraryResponse(ListCardLibraryResponse other) : this() {
      cards_ = other.cards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCardLibraryResponse Clone() {
      return new ListCardLibraryResponse(this);
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Card> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.Card.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card> cards_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListCardLibraryResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListCardLibraryResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cards_.Equals(other.cards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cards_.WriteTo(output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListCardLibraryResponse other) {
      if (other == null) {
        return;
      }
      cards_.Add(other.cards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListHeroLibraryRequest : pb::IMessage<ListHeroLibraryRequest> {
    private static readonly pb::MessageParser<ListHeroLibraryRequest> _parser = new pb::MessageParser<ListHeroLibraryRequest>(() => new ListHeroLibraryRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListHeroLibraryRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListHeroLibraryRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListHeroLibraryRequest(ListHeroLibraryRequest other) : this() {
      version_ = other.version_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListHeroLibraryRequest Clone() {
      return new ListHeroLibraryRequest(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListHeroLibraryRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListHeroLibraryRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListHeroLibraryRequest other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListHeroLibraryResponse : pb::IMessage<ListHeroLibraryResponse> {
    private static readonly pb::MessageParser<ListHeroLibraryResponse> _parser = new pb::MessageParser<ListHeroLibraryResponse>(() => new ListHeroLibraryResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListHeroLibraryResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListHeroLibraryResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListHeroLibraryResponse(ListHeroLibraryResponse other) : this() {
      heroes_ = other.heroes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListHeroLibraryResponse Clone() {
      return new ListHeroLibraryResponse(this);
    }

    /// <summary>Field number for the "heroes" field.</summary>
    public const int HeroesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Hero> _repeated_heroes_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.Hero.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero> heroes_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero> Heroes {
      get { return heroes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListHeroLibraryResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListHeroLibraryResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!heroes_.Equals(other.heroes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= heroes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      heroes_.WriteTo(output, _repeated_heroes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += heroes_.CalculateSize(_repeated_heroes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListHeroLibraryResponse other) {
      if (other == null) {
        return;
      }
      heroes_.Add(other.heroes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            heroes_.AddEntriesFrom(input, _repeated_heroes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateHeroLibraryRequest : pb::IMessage<UpdateHeroLibraryRequest> {
    private static readonly pb::MessageParser<UpdateHeroLibraryRequest> _parser = new pb::MessageParser<UpdateHeroLibraryRequest>(() => new UpdateHeroLibraryRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateHeroLibraryRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateHeroLibraryRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateHeroLibraryRequest(UpdateHeroLibraryRequest other) : this() {
      version_ = other.version_;
      heroes_ = other.heroes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateHeroLibraryRequest Clone() {
      return new UpdateHeroLibraryRequest(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "heroes" field.</summary>
    public const int HeroesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Hero> _repeated_heroes_codec
        = pb::FieldCodec.ForMessage(18, global::Loom.ZombieBattleground.Protobuf.Hero.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero> heroes_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero> Heroes {
      get { return heroes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateHeroLibraryRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateHeroLibraryRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if(!heroes_.Equals(other.heroes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      hash ^= heroes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      heroes_.WriteTo(output, _repeated_heroes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      size += heroes_.CalculateSize(_repeated_heroes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateHeroLibraryRequest other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      heroes_.Add(other.heroes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
          case 18: {
            heroes_.AddEntriesFrom(input, _repeated_heroes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateHeroLibraryResponse : pb::IMessage<UpdateHeroLibraryResponse> {
    private static readonly pb::MessageParser<UpdateHeroLibraryResponse> _parser = new pb::MessageParser<UpdateHeroLibraryResponse>(() => new UpdateHeroLibraryResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateHeroLibraryResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateHeroLibraryResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateHeroLibraryResponse(UpdateHeroLibraryResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateHeroLibraryResponse Clone() {
      return new UpdateHeroLibraryResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateHeroLibraryResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateHeroLibraryResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateHeroLibraryResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class GetCollectionRequest : pb::IMessage<GetCollectionRequest> {
    private static readonly pb::MessageParser<GetCollectionRequest> _parser = new pb::MessageParser<GetCollectionRequest>(() => new GetCollectionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetCollectionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCollectionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCollectionRequest(GetCollectionRequest other) : this() {
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCollectionRequest Clone() {
      return new GetCollectionRequest(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetCollectionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetCollectionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetCollectionRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetCollectionResponse : pb::IMessage<GetCollectionResponse> {
    private static readonly pb::MessageParser<GetCollectionResponse> _parser = new pb::MessageParser<GetCollectionResponse>(() => new GetCollectionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetCollectionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCollectionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCollectionResponse(GetCollectionResponse other) : this() {
      cards_ = other.cards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCollectionResponse Clone() {
      return new GetCollectionResponse(this);
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardCollectionCard> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.CardCollectionCard.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollectionCard> cards_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollectionCard>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollectionCard> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetCollectionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetCollectionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cards_.Equals(other.cards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cards_.WriteTo(output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetCollectionResponse other) {
      if (other == null) {
        return;
      }
      cards_.Add(other.cards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerState : pb::IMessage<PlayerState> {
    private static readonly pb::MessageParser<PlayerState> _parser = new pb::MessageParser<PlayerState>(() => new PlayerState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerState(PlayerState other) : this() {
      id_ = other.id_;
      currentAction_ = other.currentAction_;
      overlordInstance_ = other.overlordInstance_ != null ? other.overlordInstance_.Clone() : null;
      cardsInHand_ = other.cardsInHand_.Clone();
      cardsInPlay_ = other.cardsInPlay_.Clone();
      cardsInDeck_ = other.cardsInDeck_.Clone();
      deck_ = other.deck_ != null ? other.deck_.Clone() : null;
      defense_ = other.defense_;
      currentGoo_ = other.currentGoo_;
      gooVials_ = other.gooVials_;
      hasDrawnCard_ = other.hasDrawnCard_;
      cardsInGraveyard_ = other.cardsInGraveyard_.Clone();
      initialCardsInHandCount_ = other.initialCardsInHandCount_;
      maxCardsInPlay_ = other.maxCardsInPlay_;
      maxCardsInHand_ = other.maxCardsInHand_;
      maxGooVials_ = other.maxGooVials_;
      turnTime_ = other.turnTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerState Clone() {
      return new PlayerState(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currentAction" field.</summary>
    public const int CurrentActionFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.PlayerActionType.Types.Enum currentAction_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerActionType.Types.Enum CurrentAction {
      get { return currentAction_; }
      set {
        currentAction_ = value;
      }
    }

    /// <summary>Field number for the "overlordInstance" field.</summary>
    public const int OverlordInstanceFieldNumber = 3;
    private global::Loom.ZombieBattleground.Protobuf.OverlordInstance overlordInstance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.OverlordInstance OverlordInstance {
      get { return overlordInstance_; }
      set {
        overlordInstance_ = value;
      }
    }

    /// <summary>Field number for the "cardsInHand" field.</summary>
    public const int CardsInHandFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardInstance> _repeated_cardsInHand_codec
        = pb::FieldCodec.ForMessage(34, global::Loom.ZombieBattleground.Protobuf.CardInstance.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance> cardsInHand_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance> CardsInHand {
      get { return cardsInHand_; }
    }

    /// <summary>Field number for the "cardsInPlay" field.</summary>
    public const int CardsInPlayFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardInstance> _repeated_cardsInPlay_codec
        = pb::FieldCodec.ForMessage(42, global::Loom.ZombieBattleground.Protobuf.CardInstance.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance> cardsInPlay_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance> CardsInPlay {
      get { return cardsInPlay_; }
    }

    /// <summary>Field number for the "cardsInDeck" field.</summary>
    public const int CardsInDeckFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardInstance> _repeated_cardsInDeck_codec
        = pb::FieldCodec.ForMessage(50, global::Loom.ZombieBattleground.Protobuf.CardInstance.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance> cardsInDeck_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance> CardsInDeck {
      get { return cardsInDeck_; }
    }

    /// <summary>Field number for the "deck" field.</summary>
    public const int DeckFieldNumber = 7;
    private global::Loom.ZombieBattleground.Protobuf.Deck deck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Deck Deck {
      get { return deck_; }
      set {
        deck_ = value;
      }
    }

    /// <summary>Field number for the "defense" field.</summary>
    public const int DefenseFieldNumber = 8;
    private int defense_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Defense {
      get { return defense_; }
      set {
        defense_ = value;
      }
    }

    /// <summary>Field number for the "currentGoo" field.</summary>
    public const int CurrentGooFieldNumber = 9;
    private int currentGoo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentGoo {
      get { return currentGoo_; }
      set {
        currentGoo_ = value;
      }
    }

    /// <summary>Field number for the "gooVials" field.</summary>
    public const int GooVialsFieldNumber = 10;
    private int gooVials_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GooVials {
      get { return gooVials_; }
      set {
        gooVials_ = value;
      }
    }

    /// <summary>Field number for the "hasDrawnCard" field.</summary>
    public const int HasDrawnCardFieldNumber = 11;
    private bool hasDrawnCard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDrawnCard {
      get { return hasDrawnCard_; }
      set {
        hasDrawnCard_ = value;
      }
    }

    /// <summary>Field number for the "cardsInGraveyard" field.</summary>
    public const int CardsInGraveyardFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardInstance> _repeated_cardsInGraveyard_codec
        = pb::FieldCodec.ForMessage(98, global::Loom.ZombieBattleground.Protobuf.CardInstance.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance> cardsInGraveyard_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance> CardsInGraveyard {
      get { return cardsInGraveyard_; }
    }

    /// <summary>Field number for the "initialCardsInHandCount" field.</summary>
    public const int InitialCardsInHandCountFieldNumber = 13;
    private int initialCardsInHandCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InitialCardsInHandCount {
      get { return initialCardsInHandCount_; }
      set {
        initialCardsInHandCount_ = value;
      }
    }

    /// <summary>Field number for the "maxCardsInPlay" field.</summary>
    public const int MaxCardsInPlayFieldNumber = 14;
    private int maxCardsInPlay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxCardsInPlay {
      get { return maxCardsInPlay_; }
      set {
        maxCardsInPlay_ = value;
      }
    }

    /// <summary>Field number for the "maxCardsInHand" field.</summary>
    public const int MaxCardsInHandFieldNumber = 15;
    private int maxCardsInHand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxCardsInHand {
      get { return maxCardsInHand_; }
      set {
        maxCardsInHand_ = value;
      }
    }

    /// <summary>Field number for the "maxGooVials" field.</summary>
    public const int MaxGooVialsFieldNumber = 16;
    private int maxGooVials_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxGooVials {
      get { return maxGooVials_; }
      set {
        maxGooVials_ = value;
      }
    }

    /// <summary>Field number for the "turnTime" field.</summary>
    public const int TurnTimeFieldNumber = 17;
    private int turnTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TurnTime {
      get { return turnTime_; }
      set {
        turnTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (CurrentAction != other.CurrentAction) return false;
      if (!object.Equals(OverlordInstance, other.OverlordInstance)) return false;
      if(!cardsInHand_.Equals(other.cardsInHand_)) return false;
      if(!cardsInPlay_.Equals(other.cardsInPlay_)) return false;
      if(!cardsInDeck_.Equals(other.cardsInDeck_)) return false;
      if (!object.Equals(Deck, other.Deck)) return false;
      if (Defense != other.Defense) return false;
      if (CurrentGoo != other.CurrentGoo) return false;
      if (GooVials != other.GooVials) return false;
      if (HasDrawnCard != other.HasDrawnCard) return false;
      if(!cardsInGraveyard_.Equals(other.cardsInGraveyard_)) return false;
      if (InitialCardsInHandCount != other.InitialCardsInHandCount) return false;
      if (MaxCardsInPlay != other.MaxCardsInPlay) return false;
      if (MaxCardsInHand != other.MaxCardsInHand) return false;
      if (MaxGooVials != other.MaxGooVials) return false;
      if (TurnTime != other.TurnTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (CurrentAction != 0) hash ^= CurrentAction.GetHashCode();
      if (overlordInstance_ != null) hash ^= OverlordInstance.GetHashCode();
      hash ^= cardsInHand_.GetHashCode();
      hash ^= cardsInPlay_.GetHashCode();
      hash ^= cardsInDeck_.GetHashCode();
      if (deck_ != null) hash ^= Deck.GetHashCode();
      if (Defense != 0) hash ^= Defense.GetHashCode();
      if (CurrentGoo != 0) hash ^= CurrentGoo.GetHashCode();
      if (GooVials != 0) hash ^= GooVials.GetHashCode();
      if (HasDrawnCard != false) hash ^= HasDrawnCard.GetHashCode();
      hash ^= cardsInGraveyard_.GetHashCode();
      if (InitialCardsInHandCount != 0) hash ^= InitialCardsInHandCount.GetHashCode();
      if (MaxCardsInPlay != 0) hash ^= MaxCardsInPlay.GetHashCode();
      if (MaxCardsInHand != 0) hash ^= MaxCardsInHand.GetHashCode();
      if (MaxGooVials != 0) hash ^= MaxGooVials.GetHashCode();
      if (TurnTime != 0) hash ^= TurnTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (CurrentAction != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CurrentAction);
      }
      if (overlordInstance_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(OverlordInstance);
      }
      cardsInHand_.WriteTo(output, _repeated_cardsInHand_codec);
      cardsInPlay_.WriteTo(output, _repeated_cardsInPlay_codec);
      cardsInDeck_.WriteTo(output, _repeated_cardsInDeck_codec);
      if (deck_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Deck);
      }
      if (Defense != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Defense);
      }
      if (CurrentGoo != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CurrentGoo);
      }
      if (GooVials != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(GooVials);
      }
      if (HasDrawnCard != false) {
        output.WriteRawTag(88);
        output.WriteBool(HasDrawnCard);
      }
      cardsInGraveyard_.WriteTo(output, _repeated_cardsInGraveyard_codec);
      if (InitialCardsInHandCount != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(InitialCardsInHandCount);
      }
      if (MaxCardsInPlay != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(MaxCardsInPlay);
      }
      if (MaxCardsInHand != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(MaxCardsInHand);
      }
      if (MaxGooVials != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(MaxGooVials);
      }
      if (TurnTime != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(TurnTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (CurrentAction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CurrentAction);
      }
      if (overlordInstance_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OverlordInstance);
      }
      size += cardsInHand_.CalculateSize(_repeated_cardsInHand_codec);
      size += cardsInPlay_.CalculateSize(_repeated_cardsInPlay_codec);
      size += cardsInDeck_.CalculateSize(_repeated_cardsInDeck_codec);
      if (deck_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deck);
      }
      if (Defense != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Defense);
      }
      if (CurrentGoo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentGoo);
      }
      if (GooVials != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GooVials);
      }
      if (HasDrawnCard != false) {
        size += 1 + 1;
      }
      size += cardsInGraveyard_.CalculateSize(_repeated_cardsInGraveyard_codec);
      if (InitialCardsInHandCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InitialCardsInHandCount);
      }
      if (MaxCardsInPlay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxCardsInPlay);
      }
      if (MaxCardsInHand != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxCardsInHand);
      }
      if (MaxGooVials != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxGooVials);
      }
      if (TurnTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TurnTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerState other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.CurrentAction != 0) {
        CurrentAction = other.CurrentAction;
      }
      if (other.overlordInstance_ != null) {
        if (overlordInstance_ == null) {
          overlordInstance_ = new global::Loom.ZombieBattleground.Protobuf.OverlordInstance();
        }
        OverlordInstance.MergeFrom(other.OverlordInstance);
      }
      cardsInHand_.Add(other.cardsInHand_);
      cardsInPlay_.Add(other.cardsInPlay_);
      cardsInDeck_.Add(other.cardsInDeck_);
      if (other.deck_ != null) {
        if (deck_ == null) {
          deck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
        }
        Deck.MergeFrom(other.Deck);
      }
      if (other.Defense != 0) {
        Defense = other.Defense;
      }
      if (other.CurrentGoo != 0) {
        CurrentGoo = other.CurrentGoo;
      }
      if (other.GooVials != 0) {
        GooVials = other.GooVials;
      }
      if (other.HasDrawnCard != false) {
        HasDrawnCard = other.HasDrawnCard;
      }
      cardsInGraveyard_.Add(other.cardsInGraveyard_);
      if (other.InitialCardsInHandCount != 0) {
        InitialCardsInHandCount = other.InitialCardsInHandCount;
      }
      if (other.MaxCardsInPlay != 0) {
        MaxCardsInPlay = other.MaxCardsInPlay;
      }
      if (other.MaxCardsInHand != 0) {
        MaxCardsInHand = other.MaxCardsInHand;
      }
      if (other.MaxGooVials != 0) {
        MaxGooVials = other.MaxGooVials;
      }
      if (other.TurnTime != 0) {
        TurnTime = other.TurnTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            currentAction_ = (global::Loom.ZombieBattleground.Protobuf.PlayerActionType.Types.Enum) input.ReadEnum();
            break;
          }
          case 26: {
            if (overlordInstance_ == null) {
              overlordInstance_ = new global::Loom.ZombieBattleground.Protobuf.OverlordInstance();
            }
            input.ReadMessage(overlordInstance_);
            break;
          }
          case 34: {
            cardsInHand_.AddEntriesFrom(input, _repeated_cardsInHand_codec);
            break;
          }
          case 42: {
            cardsInPlay_.AddEntriesFrom(input, _repeated_cardsInPlay_codec);
            break;
          }
          case 50: {
            cardsInDeck_.AddEntriesFrom(input, _repeated_cardsInDeck_codec);
            break;
          }
          case 58: {
            if (deck_ == null) {
              deck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
            }
            input.ReadMessage(deck_);
            break;
          }
          case 64: {
            Defense = input.ReadInt32();
            break;
          }
          case 72: {
            CurrentGoo = input.ReadInt32();
            break;
          }
          case 80: {
            GooVials = input.ReadInt32();
            break;
          }
          case 88: {
            HasDrawnCard = input.ReadBool();
            break;
          }
          case 98: {
            cardsInGraveyard_.AddEntriesFrom(input, _repeated_cardsInGraveyard_codec);
            break;
          }
          case 104: {
            InitialCardsInHandCount = input.ReadInt32();
            break;
          }
          case 112: {
            MaxCardsInPlay = input.ReadInt32();
            break;
          }
          case 120: {
            MaxCardsInHand = input.ReadInt32();
            break;
          }
          case 128: {
            MaxGooVials = input.ReadInt32();
            break;
          }
          case 136: {
            TurnTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InitialPlayerState : pb::IMessage<InitialPlayerState> {
    private static readonly pb::MessageParser<InitialPlayerState> _parser = new pb::MessageParser<InitialPlayerState>(() => new InitialPlayerState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitialPlayerState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitialPlayerState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitialPlayerState(InitialPlayerState other) : this() {
      id_ = other.id_;
      matchAccepted_ = other.matchAccepted_;
      deck_ = other.deck_ != null ? other.deck_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitialPlayerState Clone() {
      return new InitialPlayerState(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "matchAccepted" field.</summary>
    public const int MatchAcceptedFieldNumber = 2;
    private bool matchAccepted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MatchAccepted {
      get { return matchAccepted_; }
      set {
        matchAccepted_ = value;
      }
    }

    /// <summary>Field number for the "deck" field.</summary>
    public const int DeckFieldNumber = 3;
    private global::Loom.ZombieBattleground.Protobuf.Deck deck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Deck Deck {
      get { return deck_; }
      set {
        deck_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitialPlayerState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitialPlayerState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (MatchAccepted != other.MatchAccepted) return false;
      if (!object.Equals(Deck, other.Deck)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (MatchAccepted != false) hash ^= MatchAccepted.GetHashCode();
      if (deck_ != null) hash ^= Deck.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (MatchAccepted != false) {
        output.WriteRawTag(16);
        output.WriteBool(MatchAccepted);
      }
      if (deck_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Deck);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (MatchAccepted != false) {
        size += 1 + 1;
      }
      if (deck_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deck);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitialPlayerState other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.MatchAccepted != false) {
        MatchAccepted = other.MatchAccepted;
      }
      if (other.deck_ != null) {
        if (deck_ == null) {
          deck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
        }
        Deck.MergeFrom(other.Deck);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            MatchAccepted = input.ReadBool();
            break;
          }
          case 26: {
            if (deck_ == null) {
              deck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
            }
            input.ReadMessage(deck_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Match : pb::IMessage<Match> {
    private static readonly pb::MessageParser<Match> _parser = new pb::MessageParser<Match>(() => new Match());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Match> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match(Match other) : this() {
      id_ = other.id_;
      topics_ = other.topics_.Clone();
      playerStates_ = other.playerStates_.Clone();
      status_ = other.status_;
      version_ = other.version_;
      randomSeed_ = other.randomSeed_;
      customGameAddr_ = other.customGameAddr_ != null ? other.customGameAddr_.Clone() : null;
      createdAt_ = other.createdAt_;
      useBackendGameLogic_ = other.useBackendGameLogic_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match Clone() {
      return new Match(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "topics" field.</summary>
    public const int TopicsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_topics_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> topics_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Topics {
      get { return topics_; }
    }

    /// <summary>Field number for the "playerStates" field.</summary>
    public const int PlayerStatesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.InitialPlayerState> _repeated_playerStates_codec
        = pb::FieldCodec.ForMessage(26, global::Loom.ZombieBattleground.Protobuf.InitialPlayerState.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.InitialPlayerState> playerStates_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.InitialPlayerState>();
    /// <summary>
    /// TODO: this data is not used by the client, but is still sent.
    /// Perhaps we can split Match into MatchMetadata and MatchInitialPlayerState
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.InitialPlayerState> PlayerStates {
      get { return playerStates_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private global::Loom.ZombieBattleground.Protobuf.Match.Types.Status status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Match.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 5;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "randomSeed" field.</summary>
    public const int RandomSeedFieldNumber = 6;
    private long randomSeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RandomSeed {
      get { return randomSeed_; }
      set {
        randomSeed_ = value;
      }
    }

    /// <summary>Field number for the "customGameAddr" field.</summary>
    public const int CustomGameAddrFieldNumber = 7;
    private global::Loom.Client.Protobuf.Address customGameAddr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.Client.Protobuf.Address CustomGameAddr {
      get { return customGameAddr_; }
      set {
        customGameAddr_ = value;
      }
    }

    /// <summary>Field number for the "createdAt" field.</summary>
    public const int CreatedAtFieldNumber = 8;
    private long createdAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "useBackendGameLogic" field.</summary>
    public const int UseBackendGameLogicFieldNumber = 9;
    private bool useBackendGameLogic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseBackendGameLogic {
      get { return useBackendGameLogic_; }
      set {
        useBackendGameLogic_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Match);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Match other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!topics_.Equals(other.topics_)) return false;
      if(!playerStates_.Equals(other.playerStates_)) return false;
      if (Status != other.Status) return false;
      if (Version != other.Version) return false;
      if (RandomSeed != other.RandomSeed) return false;
      if (!object.Equals(CustomGameAddr, other.CustomGameAddr)) return false;
      if (CreatedAt != other.CreatedAt) return false;
      if (UseBackendGameLogic != other.UseBackendGameLogic) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      hash ^= topics_.GetHashCode();
      hash ^= playerStates_.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (RandomSeed != 0L) hash ^= RandomSeed.GetHashCode();
      if (customGameAddr_ != null) hash ^= CustomGameAddr.GetHashCode();
      if (CreatedAt != 0L) hash ^= CreatedAt.GetHashCode();
      if (UseBackendGameLogic != false) hash ^= UseBackendGameLogic.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      topics_.WriteTo(output, _repeated_topics_codec);
      playerStates_.WriteTo(output, _repeated_playerStates_codec);
      if (Status != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Status);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Version);
      }
      if (RandomSeed != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(RandomSeed);
      }
      if (customGameAddr_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(CustomGameAddr);
      }
      if (CreatedAt != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(CreatedAt);
      }
      if (UseBackendGameLogic != false) {
        output.WriteRawTag(72);
        output.WriteBool(UseBackendGameLogic);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      size += topics_.CalculateSize(_repeated_topics_codec);
      size += playerStates_.CalculateSize(_repeated_playerStates_codec);
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (RandomSeed != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RandomSeed);
      }
      if (customGameAddr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CustomGameAddr);
      }
      if (CreatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAt);
      }
      if (UseBackendGameLogic != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Match other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      topics_.Add(other.topics_);
      playerStates_.Add(other.playerStates_);
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.RandomSeed != 0L) {
        RandomSeed = other.RandomSeed;
      }
      if (other.customGameAddr_ != null) {
        if (customGameAddr_ == null) {
          customGameAddr_ = new global::Loom.Client.Protobuf.Address();
        }
        CustomGameAddr.MergeFrom(other.CustomGameAddr);
      }
      if (other.CreatedAt != 0L) {
        CreatedAt = other.CreatedAt;
      }
      if (other.UseBackendGameLogic != false) {
        UseBackendGameLogic = other.UseBackendGameLogic;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            topics_.AddEntriesFrom(input, _repeated_topics_codec);
            break;
          }
          case 26: {
            playerStates_.AddEntriesFrom(input, _repeated_playerStates_codec);
            break;
          }
          case 32: {
            status_ = (global::Loom.ZombieBattleground.Protobuf.Match.Types.Status) input.ReadEnum();
            break;
          }
          case 42: {
            Version = input.ReadString();
            break;
          }
          case 48: {
            RandomSeed = input.ReadInt64();
            break;
          }
          case 58: {
            if (customGameAddr_ == null) {
              customGameAddr_ = new global::Loom.Client.Protobuf.Address();
            }
            input.ReadMessage(customGameAddr_);
            break;
          }
          case 64: {
            CreatedAt = input.ReadInt64();
            break;
          }
          case 72: {
            UseBackendGameLogic = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Match message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        [pbr::OriginalName("Created")] Created = 0,
        [pbr::OriginalName("Matching")] Matching = 1,
        [pbr::OriginalName("Started")] Started = 2,
        [pbr::OriginalName("Playing")] Playing = 3,
        [pbr::OriginalName("PlayerLeft")] PlayerLeft = 4,
        [pbr::OriginalName("Ended")] Ended = 5,
        [pbr::OriginalName("Timedout")] Timedout = 6,
        [pbr::OriginalName("Canceled")] Canceled = 7,
      }

    }
    #endregion

  }

  public sealed partial class MatchMakingInfoList : pb::IMessage<MatchMakingInfoList> {
    private static readonly pb::MessageParser<MatchMakingInfoList> _parser = new pb::MessageParser<MatchMakingInfoList>(() => new MatchMakingInfoList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchMakingInfoList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchMakingInfoList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchMakingInfoList(MatchMakingInfoList other) : this() {
      infos_ = other.infos_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchMakingInfoList Clone() {
      return new MatchMakingInfoList(this);
    }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.MatchMakingInfo> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.MatchMakingInfo.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.MatchMakingInfo> infos_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.MatchMakingInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.MatchMakingInfo> Infos {
      get { return infos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchMakingInfoList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchMakingInfoList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!infos_.Equals(other.infos_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= infos_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      infos_.WriteTo(output, _repeated_infos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += infos_.CalculateSize(_repeated_infos_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchMakingInfoList other) {
      if (other == null) {
        return;
      }
      infos_.Add(other.infos_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MatchMakingInfo : pb::IMessage<MatchMakingInfo> {
    private static readonly pb::MessageParser<MatchMakingInfo> _parser = new pb::MessageParser<MatchMakingInfo>(() => new MatchMakingInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchMakingInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchMakingInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchMakingInfo(MatchMakingInfo other) : this() {
      userId_ = other.userId_;
      deck_ = other.deck_ != null ? other.deck_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchMakingInfo Clone() {
      return new MatchMakingInfo(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deck" field.</summary>
    public const int DeckFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.Deck deck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Deck Deck {
      get { return deck_; }
      set {
        deck_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchMakingInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchMakingInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (!object.Equals(Deck, other.Deck)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (deck_ != null) hash ^= Deck.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (deck_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Deck);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (deck_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deck);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchMakingInfo other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.deck_ != null) {
        if (deck_ == null) {
          deck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
        }
        Deck.MergeFrom(other.Deck);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            if (deck_ == null) {
              deck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
            }
            input.ReadMessage(deck_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerActionType : pb::IMessage<PlayerActionType> {
    private static readonly pb::MessageParser<PlayerActionType> _parser = new pb::MessageParser<PlayerActionType>(() => new PlayerActionType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerActionType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionType(PlayerActionType other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionType Clone() {
      return new PlayerActionType(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerActionType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerActionType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerActionType other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PlayerActionType message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Enum {
        [pbr::OriginalName("None")] None = 0,
        [pbr::OriginalName("EndTurn")] EndTurn = 1,
        [pbr::OriginalName("Mulligan")] Mulligan = 2,
        [pbr::OriginalName("DrawCard")] DrawCard = 3,
        [pbr::OriginalName("CardPlay")] CardPlay = 4,
        [pbr::OriginalName("CardAttack")] CardAttack = 5,
        [pbr::OriginalName("CardAbilityUsed")] CardAbilityUsed = 6,
        [pbr::OriginalName("OverlordSkillUsed")] OverlordSkillUsed = 7,
        [pbr::OriginalName("CoinToss")] CoinToss = 8,
        [pbr::OriginalName("InitHands")] InitHands = 9,
        [pbr::OriginalName("LeaveMatch")] LeaveMatch = 10,
        [pbr::OriginalName("RankBuff")] RankBuff = 11,
      }

    }
    #endregion

  }

  public sealed partial class PlayerAction : pb::IMessage<PlayerAction> {
    private static readonly pb::MessageParser<PlayerAction> _parser = new pb::MessageParser<PlayerAction>(() => new PlayerAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerAction(PlayerAction other) : this() {
      actionType_ = other.actionType_;
      playerId_ = other.playerId_;
      actionOutcomes_ = other.actionOutcomes_.Clone();
      createdAt_ = other.createdAt_;
      switch (other.ActionCase) {
        case ActionOneofCase.CardAttack:
          CardAttack = other.CardAttack.Clone();
          break;
        case ActionOneofCase.DrawCard:
          DrawCard = other.DrawCard.Clone();
          break;
        case ActionOneofCase.EndTurn:
          EndTurn = other.EndTurn.Clone();
          break;
        case ActionOneofCase.Mulligan:
          Mulligan = other.Mulligan.Clone();
          break;
        case ActionOneofCase.CardPlay:
          CardPlay = other.CardPlay.Clone();
          break;
        case ActionOneofCase.CardAbilityUsed:
          CardAbilityUsed = other.CardAbilityUsed.Clone();
          break;
        case ActionOneofCase.OverlordSkillUsed:
          OverlordSkillUsed = other.OverlordSkillUsed.Clone();
          break;
        case ActionOneofCase.LeaveMatch:
          LeaveMatch = other.LeaveMatch.Clone();
          break;
        case ActionOneofCase.RankBuff:
          RankBuff = other.RankBuff.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerAction Clone() {
      return new PlayerAction(this);
    }

    /// <summary>Field number for the "actionType" field.</summary>
    public const int ActionTypeFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.PlayerActionType.Types.Enum actionType_ = 0;
    /// <summary>
    /// not sure we really need this
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerActionType.Types.Enum ActionType {
      get { return actionType_; }
      set {
        actionType_ = value;
      }
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private string playerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cardAttack" field.</summary>
    public const int CardAttackFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAttack CardAttack {
      get { return actionCase_ == ActionOneofCase.CardAttack ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAttack) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.CardAttack;
      }
    }

    /// <summary>Field number for the "drawCard" field.</summary>
    public const int DrawCardFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerActionDrawCard DrawCard {
      get { return actionCase_ == ActionOneofCase.DrawCard ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionDrawCard) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.DrawCard;
      }
    }

    /// <summary>Field number for the "endTurn" field.</summary>
    public const int EndTurnFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerActionEndTurn EndTurn {
      get { return actionCase_ == ActionOneofCase.EndTurn ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionEndTurn) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.EndTurn;
      }
    }

    /// <summary>Field number for the "mulligan" field.</summary>
    public const int MulliganFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerActionMulligan Mulligan {
      get { return actionCase_ == ActionOneofCase.Mulligan ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionMulligan) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.Mulligan;
      }
    }

    /// <summary>Field number for the "cardPlay" field.</summary>
    public const int CardPlayFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerActionCardPlay CardPlay {
      get { return actionCase_ == ActionOneofCase.CardPlay ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionCardPlay) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.CardPlay;
      }
    }

    /// <summary>Field number for the "cardAbilityUsed" field.</summary>
    public const int CardAbilityUsedFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAbilityUsed CardAbilityUsed {
      get { return actionCase_ == ActionOneofCase.CardAbilityUsed ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAbilityUsed) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.CardAbilityUsed;
      }
    }

    /// <summary>Field number for the "overlordSkillUsed" field.</summary>
    public const int OverlordSkillUsedFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerActionOverlordSkillUsed OverlordSkillUsed {
      get { return actionCase_ == ActionOneofCase.OverlordSkillUsed ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionOverlordSkillUsed) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.OverlordSkillUsed;
      }
    }

    /// <summary>Field number for the "leaveMatch" field.</summary>
    public const int LeaveMatchFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerActionLeaveMatch LeaveMatch {
      get { return actionCase_ == ActionOneofCase.LeaveMatch ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionLeaveMatch) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.LeaveMatch;
      }
    }

    /// <summary>Field number for the "rankBuff" field.</summary>
    public const int RankBuffFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerActionRankBuff RankBuff {
      get { return actionCase_ == ActionOneofCase.RankBuff ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionRankBuff) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.RankBuff;
      }
    }

    /// <summary>Field number for the "actionOutcomes" field.</summary>
    public const int ActionOutcomesFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome> _repeated_actionOutcomes_codec
        = pb::FieldCodec.ForMessage(114, global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome> actionOutcomes_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome> ActionOutcomes {
      get { return actionOutcomes_; }
    }

    /// <summary>Field number for the "createdAt" field.</summary>
    public const int CreatedAtFieldNumber = 15;
    private long createdAt_;
    /// <summary>
    /// timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    private object action_;
    /// <summary>Enum of possible cases for the "action" oneof.</summary>
    public enum ActionOneofCase {
      None = 0,
      CardAttack = 3,
      DrawCard = 4,
      EndTurn = 5,
      Mulligan = 6,
      CardPlay = 7,
      CardAbilityUsed = 8,
      OverlordSkillUsed = 9,
      LeaveMatch = 12,
      RankBuff = 13,
    }
    private ActionOneofCase actionCase_ = ActionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionOneofCase ActionCase {
      get { return actionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAction() {
      actionCase_ = ActionOneofCase.None;
      action_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActionType != other.ActionType) return false;
      if (PlayerId != other.PlayerId) return false;
      if (!object.Equals(CardAttack, other.CardAttack)) return false;
      if (!object.Equals(DrawCard, other.DrawCard)) return false;
      if (!object.Equals(EndTurn, other.EndTurn)) return false;
      if (!object.Equals(Mulligan, other.Mulligan)) return false;
      if (!object.Equals(CardPlay, other.CardPlay)) return false;
      if (!object.Equals(CardAbilityUsed, other.CardAbilityUsed)) return false;
      if (!object.Equals(OverlordSkillUsed, other.OverlordSkillUsed)) return false;
      if (!object.Equals(LeaveMatch, other.LeaveMatch)) return false;
      if (!object.Equals(RankBuff, other.RankBuff)) return false;
      if(!actionOutcomes_.Equals(other.actionOutcomes_)) return false;
      if (CreatedAt != other.CreatedAt) return false;
      if (ActionCase != other.ActionCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActionType != 0) hash ^= ActionType.GetHashCode();
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (actionCase_ == ActionOneofCase.CardAttack) hash ^= CardAttack.GetHashCode();
      if (actionCase_ == ActionOneofCase.DrawCard) hash ^= DrawCard.GetHashCode();
      if (actionCase_ == ActionOneofCase.EndTurn) hash ^= EndTurn.GetHashCode();
      if (actionCase_ == ActionOneofCase.Mulligan) hash ^= Mulligan.GetHashCode();
      if (actionCase_ == ActionOneofCase.CardPlay) hash ^= CardPlay.GetHashCode();
      if (actionCase_ == ActionOneofCase.CardAbilityUsed) hash ^= CardAbilityUsed.GetHashCode();
      if (actionCase_ == ActionOneofCase.OverlordSkillUsed) hash ^= OverlordSkillUsed.GetHashCode();
      if (actionCase_ == ActionOneofCase.LeaveMatch) hash ^= LeaveMatch.GetHashCode();
      if (actionCase_ == ActionOneofCase.RankBuff) hash ^= RankBuff.GetHashCode();
      hash ^= actionOutcomes_.GetHashCode();
      if (CreatedAt != 0L) hash ^= CreatedAt.GetHashCode();
      hash ^= (int) actionCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActionType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ActionType);
      }
      if (PlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerId);
      }
      if (actionCase_ == ActionOneofCase.CardAttack) {
        output.WriteRawTag(26);
        output.WriteMessage(CardAttack);
      }
      if (actionCase_ == ActionOneofCase.DrawCard) {
        output.WriteRawTag(34);
        output.WriteMessage(DrawCard);
      }
      if (actionCase_ == ActionOneofCase.EndTurn) {
        output.WriteRawTag(42);
        output.WriteMessage(EndTurn);
      }
      if (actionCase_ == ActionOneofCase.Mulligan) {
        output.WriteRawTag(50);
        output.WriteMessage(Mulligan);
      }
      if (actionCase_ == ActionOneofCase.CardPlay) {
        output.WriteRawTag(58);
        output.WriteMessage(CardPlay);
      }
      if (actionCase_ == ActionOneofCase.CardAbilityUsed) {
        output.WriteRawTag(66);
        output.WriteMessage(CardAbilityUsed);
      }
      if (actionCase_ == ActionOneofCase.OverlordSkillUsed) {
        output.WriteRawTag(74);
        output.WriteMessage(OverlordSkillUsed);
      }
      if (actionCase_ == ActionOneofCase.LeaveMatch) {
        output.WriteRawTag(98);
        output.WriteMessage(LeaveMatch);
      }
      if (actionCase_ == ActionOneofCase.RankBuff) {
        output.WriteRawTag(106);
        output.WriteMessage(RankBuff);
      }
      actionOutcomes_.WriteTo(output, _repeated_actionOutcomes_codec);
      if (CreatedAt != 0L) {
        output.WriteRawTag(120);
        output.WriteInt64(CreatedAt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActionType);
      }
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (actionCase_ == ActionOneofCase.CardAttack) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardAttack);
      }
      if (actionCase_ == ActionOneofCase.DrawCard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DrawCard);
      }
      if (actionCase_ == ActionOneofCase.EndTurn) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTurn);
      }
      if (actionCase_ == ActionOneofCase.Mulligan) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mulligan);
      }
      if (actionCase_ == ActionOneofCase.CardPlay) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardPlay);
      }
      if (actionCase_ == ActionOneofCase.CardAbilityUsed) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardAbilityUsed);
      }
      if (actionCase_ == ActionOneofCase.OverlordSkillUsed) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OverlordSkillUsed);
      }
      if (actionCase_ == ActionOneofCase.LeaveMatch) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeaveMatch);
      }
      if (actionCase_ == ActionOneofCase.RankBuff) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RankBuff);
      }
      size += actionOutcomes_.CalculateSize(_repeated_actionOutcomes_codec);
      if (CreatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerAction other) {
      if (other == null) {
        return;
      }
      if (other.ActionType != 0) {
        ActionType = other.ActionType;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      actionOutcomes_.Add(other.actionOutcomes_);
      if (other.CreatedAt != 0L) {
        CreatedAt = other.CreatedAt;
      }
      switch (other.ActionCase) {
        case ActionOneofCase.CardAttack:
          if (CardAttack == null) {
            CardAttack = new global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAttack();
          }
          CardAttack.MergeFrom(other.CardAttack);
          break;
        case ActionOneofCase.DrawCard:
          if (DrawCard == null) {
            DrawCard = new global::Loom.ZombieBattleground.Protobuf.PlayerActionDrawCard();
          }
          DrawCard.MergeFrom(other.DrawCard);
          break;
        case ActionOneofCase.EndTurn:
          if (EndTurn == null) {
            EndTurn = new global::Loom.ZombieBattleground.Protobuf.PlayerActionEndTurn();
          }
          EndTurn.MergeFrom(other.EndTurn);
          break;
        case ActionOneofCase.Mulligan:
          if (Mulligan == null) {
            Mulligan = new global::Loom.ZombieBattleground.Protobuf.PlayerActionMulligan();
          }
          Mulligan.MergeFrom(other.Mulligan);
          break;
        case ActionOneofCase.CardPlay:
          if (CardPlay == null) {
            CardPlay = new global::Loom.ZombieBattleground.Protobuf.PlayerActionCardPlay();
          }
          CardPlay.MergeFrom(other.CardPlay);
          break;
        case ActionOneofCase.CardAbilityUsed:
          if (CardAbilityUsed == null) {
            CardAbilityUsed = new global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAbilityUsed();
          }
          CardAbilityUsed.MergeFrom(other.CardAbilityUsed);
          break;
        case ActionOneofCase.OverlordSkillUsed:
          if (OverlordSkillUsed == null) {
            OverlordSkillUsed = new global::Loom.ZombieBattleground.Protobuf.PlayerActionOverlordSkillUsed();
          }
          OverlordSkillUsed.MergeFrom(other.OverlordSkillUsed);
          break;
        case ActionOneofCase.LeaveMatch:
          if (LeaveMatch == null) {
            LeaveMatch = new global::Loom.ZombieBattleground.Protobuf.PlayerActionLeaveMatch();
          }
          LeaveMatch.MergeFrom(other.LeaveMatch);
          break;
        case ActionOneofCase.RankBuff:
          if (RankBuff == null) {
            RankBuff = new global::Loom.ZombieBattleground.Protobuf.PlayerActionRankBuff();
          }
          RankBuff.MergeFrom(other.RankBuff);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            actionType_ = (global::Loom.ZombieBattleground.Protobuf.PlayerActionType.Types.Enum) input.ReadEnum();
            break;
          }
          case 18: {
            PlayerId = input.ReadString();
            break;
          }
          case 26: {
            global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAttack subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAttack();
            if (actionCase_ == ActionOneofCase.CardAttack) {
              subBuilder.MergeFrom(CardAttack);
            }
            input.ReadMessage(subBuilder);
            CardAttack = subBuilder;
            break;
          }
          case 34: {
            global::Loom.ZombieBattleground.Protobuf.PlayerActionDrawCard subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionDrawCard();
            if (actionCase_ == ActionOneofCase.DrawCard) {
              subBuilder.MergeFrom(DrawCard);
            }
            input.ReadMessage(subBuilder);
            DrawCard = subBuilder;
            break;
          }
          case 42: {
            global::Loom.ZombieBattleground.Protobuf.PlayerActionEndTurn subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionEndTurn();
            if (actionCase_ == ActionOneofCase.EndTurn) {
              subBuilder.MergeFrom(EndTurn);
            }
            input.ReadMessage(subBuilder);
            EndTurn = subBuilder;
            break;
          }
          case 50: {
            global::Loom.ZombieBattleground.Protobuf.PlayerActionMulligan subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionMulligan();
            if (actionCase_ == ActionOneofCase.Mulligan) {
              subBuilder.MergeFrom(Mulligan);
            }
            input.ReadMessage(subBuilder);
            Mulligan = subBuilder;
            break;
          }
          case 58: {
            global::Loom.ZombieBattleground.Protobuf.PlayerActionCardPlay subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionCardPlay();
            if (actionCase_ == ActionOneofCase.CardPlay) {
              subBuilder.MergeFrom(CardPlay);
            }
            input.ReadMessage(subBuilder);
            CardPlay = subBuilder;
            break;
          }
          case 66: {
            global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAbilityUsed subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAbilityUsed();
            if (actionCase_ == ActionOneofCase.CardAbilityUsed) {
              subBuilder.MergeFrom(CardAbilityUsed);
            }
            input.ReadMessage(subBuilder);
            CardAbilityUsed = subBuilder;
            break;
          }
          case 74: {
            global::Loom.ZombieBattleground.Protobuf.PlayerActionOverlordSkillUsed subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionOverlordSkillUsed();
            if (actionCase_ == ActionOneofCase.OverlordSkillUsed) {
              subBuilder.MergeFrom(OverlordSkillUsed);
            }
            input.ReadMessage(subBuilder);
            OverlordSkillUsed = subBuilder;
            break;
          }
          case 98: {
            global::Loom.ZombieBattleground.Protobuf.PlayerActionLeaveMatch subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionLeaveMatch();
            if (actionCase_ == ActionOneofCase.LeaveMatch) {
              subBuilder.MergeFrom(LeaveMatch);
            }
            input.ReadMessage(subBuilder);
            LeaveMatch = subBuilder;
            break;
          }
          case 106: {
            global::Loom.ZombieBattleground.Protobuf.PlayerActionRankBuff subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionRankBuff();
            if (actionCase_ == ActionOneofCase.RankBuff) {
              subBuilder.MergeFrom(RankBuff);
            }
            input.ReadMessage(subBuilder);
            RankBuff = subBuilder;
            break;
          }
          case 114: {
            actionOutcomes_.AddEntriesFrom(input, _repeated_actionOutcomes_codec);
            break;
          }
          case 120: {
            CreatedAt = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerActionEvent : pb::IMessage<PlayerActionEvent> {
    private static readonly pb::MessageParser<PlayerActionEvent> _parser = new pb::MessageParser<PlayerActionEvent>(() => new PlayerActionEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerActionEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionEvent(PlayerActionEvent other) : this() {
      playerAction_ = other.playerAction_ != null ? other.playerAction_.Clone() : null;
      match_ = other.match_ != null ? other.match_.Clone() : null;
      block_ = other.block_ != null ? other.block_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionEvent Clone() {
      return new PlayerActionEvent(this);
    }

    /// <summary>Field number for the "playerAction" field.</summary>
    public const int PlayerActionFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.PlayerAction playerAction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerAction PlayerAction {
      get { return playerAction_; }
      set {
        playerAction_ = value;
      }
    }

    /// <summary>Field number for the "match" field.</summary>
    public const int MatchFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.Match match_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Match Match {
      get { return match_; }
      set {
        match_ = value;
      }
    }

    /// <summary>Field number for the "block" field.</summary>
    public const int BlockFieldNumber = 3;
    private global::Loom.ZombieBattleground.Protobuf.History block_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.History Block {
      get { return block_; }
      set {
        block_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerActionEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerActionEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerAction, other.PlayerAction)) return false;
      if (!object.Equals(Match, other.Match)) return false;
      if (!object.Equals(Block, other.Block)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerAction_ != null) hash ^= PlayerAction.GetHashCode();
      if (match_ != null) hash ^= Match.GetHashCode();
      if (block_ != null) hash ^= Block.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerAction_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerAction);
      }
      if (match_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Match);
      }
      if (block_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Block);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerAction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerAction);
      }
      if (match_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Match);
      }
      if (block_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Block);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerActionEvent other) {
      if (other == null) {
        return;
      }
      if (other.playerAction_ != null) {
        if (playerAction_ == null) {
          playerAction_ = new global::Loom.ZombieBattleground.Protobuf.PlayerAction();
        }
        PlayerAction.MergeFrom(other.PlayerAction);
      }
      if (other.match_ != null) {
        if (match_ == null) {
          match_ = new global::Loom.ZombieBattleground.Protobuf.Match();
        }
        Match.MergeFrom(other.Match);
      }
      if (other.block_ != null) {
        if (block_ == null) {
          block_ = new global::Loom.ZombieBattleground.Protobuf.History();
        }
        Block.MergeFrom(other.Block);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (playerAction_ == null) {
              playerAction_ = new global::Loom.ZombieBattleground.Protobuf.PlayerAction();
            }
            input.ReadMessage(playerAction_);
            break;
          }
          case 18: {
            if (match_ == null) {
              match_ = new global::Loom.ZombieBattleground.Protobuf.Match();
            }
            input.ReadMessage(match_);
            break;
          }
          case 26: {
            if (block_ == null) {
              block_ = new global::Loom.ZombieBattleground.Protobuf.History();
            }
            input.ReadMessage(block_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerProfile : pb::IMessage<PlayerProfile> {
    private static readonly pb::MessageParser<PlayerProfile> _parser = new pb::MessageParser<PlayerProfile>(() => new PlayerProfile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerProfile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerProfile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerProfile(PlayerProfile other) : this() {
      userId_ = other.userId_;
      deckId_ = other.deckId_;
      version_ = other.version_;
      customGame_ = other.customGame_ != null ? other.customGame_.Clone() : null;
      updatedAt_ = other.updatedAt_;
      tags_ = other.tags_.Clone();
      randomSeed_ = other.randomSeed_;
      useBackendGameLogic_ = other.useBackendGameLogic_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerProfile Clone() {
      return new PlayerProfile(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deckId" field.</summary>
    public const int DeckIdFieldNumber = 2;
    private long deckId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DeckId {
      get { return deckId_; }
      set {
        deckId_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "customGame" field.</summary>
    public const int CustomGameFieldNumber = 5;
    private global::Loom.Client.Protobuf.Address customGame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.Client.Protobuf.Address CustomGame {
      get { return customGame_; }
      set {
        customGame_ = value;
      }
    }

    /// <summary>Field number for the "updatedAt" field.</summary>
    public const int UpdatedAtFieldNumber = 6;
    private long updatedAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpdatedAt {
      get { return updatedAt_; }
      set {
        updatedAt_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_tags_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "randomSeed" field.</summary>
    public const int RandomSeedFieldNumber = 8;
    private long randomSeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RandomSeed {
      get { return randomSeed_; }
      set {
        randomSeed_ = value;
      }
    }

    /// <summary>Field number for the "useBackendGameLogic" field.</summary>
    public const int UseBackendGameLogicFieldNumber = 9;
    private bool useBackendGameLogic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseBackendGameLogic {
      get { return useBackendGameLogic_; }
      set {
        useBackendGameLogic_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerProfile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerProfile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (DeckId != other.DeckId) return false;
      if (Version != other.Version) return false;
      if (!object.Equals(CustomGame, other.CustomGame)) return false;
      if (UpdatedAt != other.UpdatedAt) return false;
      if(!tags_.Equals(other.tags_)) return false;
      if (RandomSeed != other.RandomSeed) return false;
      if (UseBackendGameLogic != other.UseBackendGameLogic) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (DeckId != 0L) hash ^= DeckId.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (customGame_ != null) hash ^= CustomGame.GetHashCode();
      if (UpdatedAt != 0L) hash ^= UpdatedAt.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (RandomSeed != 0L) hash ^= RandomSeed.GetHashCode();
      if (UseBackendGameLogic != false) hash ^= UseBackendGameLogic.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (DeckId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(DeckId);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Version);
      }
      if (customGame_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(CustomGame);
      }
      if (UpdatedAt != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(UpdatedAt);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      if (RandomSeed != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(RandomSeed);
      }
      if (UseBackendGameLogic != false) {
        output.WriteRawTag(72);
        output.WriteBool(UseBackendGameLogic);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (DeckId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DeckId);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (customGame_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CustomGame);
      }
      if (UpdatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpdatedAt);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (RandomSeed != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RandomSeed);
      }
      if (UseBackendGameLogic != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerProfile other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.DeckId != 0L) {
        DeckId = other.DeckId;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.customGame_ != null) {
        if (customGame_ == null) {
          customGame_ = new global::Loom.Client.Protobuf.Address();
        }
        CustomGame.MergeFrom(other.CustomGame);
      }
      if (other.UpdatedAt != 0L) {
        UpdatedAt = other.UpdatedAt;
      }
      tags_.Add(other.tags_);
      if (other.RandomSeed != 0L) {
        RandomSeed = other.RandomSeed;
      }
      if (other.UseBackendGameLogic != false) {
        UseBackendGameLogic = other.UseBackendGameLogic;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 16: {
            DeckId = input.ReadInt64();
            break;
          }
          case 26: {
            Version = input.ReadString();
            break;
          }
          case 42: {
            if (customGame_ == null) {
              customGame_ = new global::Loom.Client.Protobuf.Address();
            }
            input.ReadMessage(customGame_);
            break;
          }
          case 48: {
            UpdatedAt = input.ReadInt64();
            break;
          }
          case 58: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 64: {
            RandomSeed = input.ReadInt64();
            break;
          }
          case 72: {
            UseBackendGameLogic = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerPool : pb::IMessage<PlayerPool> {
    private static readonly pb::MessageParser<PlayerPool> _parser = new pb::MessageParser<PlayerPool>(() => new PlayerPool());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerPool> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPool() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPool(PlayerPool other) : this() {
      playerProfiles_ = other.playerProfiles_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPool Clone() {
      return new PlayerPool(this);
    }

    /// <summary>Field number for the "playerProfiles" field.</summary>
    public const int PlayerProfilesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.PlayerProfile> _repeated_playerProfiles_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.PlayerProfile.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerProfile> playerProfiles_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerProfile>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerProfile> PlayerProfiles {
      get { return playerProfiles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerPool);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerPool other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!playerProfiles_.Equals(other.playerProfiles_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= playerProfiles_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      playerProfiles_.WriteTo(output, _repeated_playerProfiles_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerProfiles_.CalculateSize(_repeated_playerProfiles_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerPool other) {
      if (other == null) {
        return;
      }
      playerProfiles_.Add(other.playerProfiles_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            playerProfiles_.AddEntriesFrom(input, _repeated_playerProfiles_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MatchCount : pb::IMessage<MatchCount> {
    private static readonly pb::MessageParser<MatchCount> _parser = new pb::MessageParser<MatchCount>(() => new MatchCount());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchCount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchCount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchCount(MatchCount other) : this() {
      currentId_ = other.currentId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchCount Clone() {
      return new MatchCount(this);
    }

    /// <summary>Field number for the "currentId" field.</summary>
    public const int CurrentIdFieldNumber = 1;
    private long currentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurrentId {
      get { return currentId_; }
      set {
        currentId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchCount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchCount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentId != other.CurrentId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentId != 0L) hash ^= CurrentId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CurrentId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrentId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchCount other) {
      if (other == null) {
        return;
      }
      if (other.CurrentId != 0L) {
        CurrentId = other.CurrentId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CurrentId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegisterPlayerPoolRequest : pb::IMessage<RegisterPlayerPoolRequest> {
    private static readonly pb::MessageParser<RegisterPlayerPoolRequest> _parser = new pb::MessageParser<RegisterPlayerPoolRequest>(() => new RegisterPlayerPoolRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterPlayerPoolRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterPlayerPoolRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterPlayerPoolRequest(RegisterPlayerPoolRequest other) : this() {
      userId_ = other.userId_;
      deckId_ = other.deckId_;
      version_ = other.version_;
      customGame_ = other.customGame_ != null ? other.customGame_.Clone() : null;
      randomSeed_ = other.randomSeed_;
      tags_ = other.tags_.Clone();
      useBackendGameLogic_ = other.useBackendGameLogic_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterPlayerPoolRequest Clone() {
      return new RegisterPlayerPoolRequest(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deckId" field.</summary>
    public const int DeckIdFieldNumber = 2;
    private long deckId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DeckId {
      get { return deckId_; }
      set {
        deckId_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "customGame" field.</summary>
    public const int CustomGameFieldNumber = 4;
    private global::Loom.Client.Protobuf.Address customGame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.Client.Protobuf.Address CustomGame {
      get { return customGame_; }
      set {
        customGame_ = value;
      }
    }

    /// <summary>Field number for the "randomSeed" field.</summary>
    public const int RandomSeedFieldNumber = 5;
    private long randomSeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RandomSeed {
      get { return randomSeed_; }
      set {
        randomSeed_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_tags_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "useBackendGameLogic" field.</summary>
    public const int UseBackendGameLogicFieldNumber = 7;
    private bool useBackendGameLogic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseBackendGameLogic {
      get { return useBackendGameLogic_; }
      set {
        useBackendGameLogic_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterPlayerPoolRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterPlayerPoolRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (DeckId != other.DeckId) return false;
      if (Version != other.Version) return false;
      if (!object.Equals(CustomGame, other.CustomGame)) return false;
      if (RandomSeed != other.RandomSeed) return false;
      if(!tags_.Equals(other.tags_)) return false;
      if (UseBackendGameLogic != other.UseBackendGameLogic) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (DeckId != 0L) hash ^= DeckId.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (customGame_ != null) hash ^= CustomGame.GetHashCode();
      if (RandomSeed != 0L) hash ^= RandomSeed.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (UseBackendGameLogic != false) hash ^= UseBackendGameLogic.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (DeckId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(DeckId);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Version);
      }
      if (customGame_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CustomGame);
      }
      if (RandomSeed != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(RandomSeed);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      if (UseBackendGameLogic != false) {
        output.WriteRawTag(56);
        output.WriteBool(UseBackendGameLogic);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (DeckId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DeckId);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (customGame_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CustomGame);
      }
      if (RandomSeed != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RandomSeed);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (UseBackendGameLogic != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterPlayerPoolRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.DeckId != 0L) {
        DeckId = other.DeckId;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.customGame_ != null) {
        if (customGame_ == null) {
          customGame_ = new global::Loom.Client.Protobuf.Address();
        }
        CustomGame.MergeFrom(other.CustomGame);
      }
      if (other.RandomSeed != 0L) {
        RandomSeed = other.RandomSeed;
      }
      tags_.Add(other.tags_);
      if (other.UseBackendGameLogic != false) {
        UseBackendGameLogic = other.UseBackendGameLogic;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 16: {
            DeckId = input.ReadInt64();
            break;
          }
          case 26: {
            Version = input.ReadString();
            break;
          }
          case 34: {
            if (customGame_ == null) {
              customGame_ = new global::Loom.Client.Protobuf.Address();
            }
            input.ReadMessage(customGame_);
            break;
          }
          case 40: {
            RandomSeed = input.ReadInt64();
            break;
          }
          case 50: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 56: {
            UseBackendGameLogic = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegisterPlayerPoolResponse : pb::IMessage<RegisterPlayerPoolResponse> {
    private static readonly pb::MessageParser<RegisterPlayerPoolResponse> _parser = new pb::MessageParser<RegisterPlayerPoolResponse>(() => new RegisterPlayerPoolResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterPlayerPoolResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterPlayerPoolResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterPlayerPoolResponse(RegisterPlayerPoolResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterPlayerPoolResponse Clone() {
      return new RegisterPlayerPoolResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterPlayerPoolResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterPlayerPoolResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterPlayerPoolResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// TODO: remove this
  /// </summary>
  public sealed partial class PlayerPoolRequest : pb::IMessage<PlayerPoolRequest> {
    private static readonly pb::MessageParser<PlayerPoolRequest> _parser = new pb::MessageParser<PlayerPoolRequest>(() => new PlayerPoolRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerPoolRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPoolRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPoolRequest(PlayerPoolRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPoolRequest Clone() {
      return new PlayerPoolRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerPoolRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerPoolRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerPoolRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class PlayerPoolResponse : pb::IMessage<PlayerPoolResponse> {
    private static readonly pb::MessageParser<PlayerPoolResponse> _parser = new pb::MessageParser<PlayerPoolResponse>(() => new PlayerPoolResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerPoolResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPoolResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPoolResponse(PlayerPoolResponse other) : this() {
      pool_ = other.pool_ != null ? other.pool_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPoolResponse Clone() {
      return new PlayerPoolResponse(this);
    }

    /// <summary>Field number for the "pool" field.</summary>
    public const int PoolFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.PlayerPool pool_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerPool Pool {
      get { return pool_; }
      set {
        pool_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerPoolResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerPoolResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pool, other.Pool)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pool_ != null) hash ^= Pool.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pool_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pool);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pool_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pool);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerPoolResponse other) {
      if (other == null) {
        return;
      }
      if (other.pool_ != null) {
        if (pool_ == null) {
          pool_ = new global::Loom.ZombieBattleground.Protobuf.PlayerPool();
        }
        Pool.MergeFrom(other.Pool);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (pool_ == null) {
              pool_ = new global::Loom.ZombieBattleground.Protobuf.PlayerPool();
            }
            input.ReadMessage(pool_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FindMatchRequest : pb::IMessage<FindMatchRequest> {
    private static readonly pb::MessageParser<FindMatchRequest> _parser = new pb::MessageParser<FindMatchRequest>(() => new FindMatchRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FindMatchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindMatchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindMatchRequest(FindMatchRequest other) : this() {
      userId_ = other.userId_;
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindMatchRequest Clone() {
      return new FindMatchRequest(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_tags_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FindMatchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FindMatchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if(!tags_.Equals(other.tags_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FindMatchRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FindMatchResponse : pb::IMessage<FindMatchResponse> {
    private static readonly pb::MessageParser<FindMatchResponse> _parser = new pb::MessageParser<FindMatchResponse>(() => new FindMatchResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FindMatchResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindMatchResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindMatchResponse(FindMatchResponse other) : this() {
      match_ = other.match_ != null ? other.match_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindMatchResponse Clone() {
      return new FindMatchResponse(this);
    }

    /// <summary>Field number for the "match" field.</summary>
    public const int MatchFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.Match match_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Match Match {
      get { return match_; }
      set {
        match_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FindMatchResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FindMatchResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Match, other.Match)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (match_ != null) hash ^= Match.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (match_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Match);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (match_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Match);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FindMatchResponse other) {
      if (other == null) {
        return;
      }
      if (other.match_ != null) {
        if (match_ == null) {
          match_ = new global::Loom.ZombieBattleground.Protobuf.Match();
        }
        Match.MergeFrom(other.Match);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (match_ == null) {
              match_ = new global::Loom.ZombieBattleground.Protobuf.Match();
            }
            input.ReadMessage(match_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AcceptMatchRequest : pb::IMessage<AcceptMatchRequest> {
    private static readonly pb::MessageParser<AcceptMatchRequest> _parser = new pb::MessageParser<AcceptMatchRequest>(() => new AcceptMatchRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AcceptMatchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcceptMatchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcceptMatchRequest(AcceptMatchRequest other) : this() {
      userId_ = other.userId_;
      matchId_ = other.matchId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcceptMatchRequest Clone() {
      return new AcceptMatchRequest(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "matchId" field.</summary>
    public const int MatchIdFieldNumber = 2;
    private long matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MatchId {
      get { return matchId_; }
      set {
        matchId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AcceptMatchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AcceptMatchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (MatchId != other.MatchId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (MatchId != 0L) hash ^= MatchId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (MatchId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MatchId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (MatchId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AcceptMatchRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.MatchId != 0L) {
        MatchId = other.MatchId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 16: {
            MatchId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AcceptMatchResponse : pb::IMessage<AcceptMatchResponse> {
    private static readonly pb::MessageParser<AcceptMatchResponse> _parser = new pb::MessageParser<AcceptMatchResponse>(() => new AcceptMatchResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AcceptMatchResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcceptMatchResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcceptMatchResponse(AcceptMatchResponse other) : this() {
      match_ = other.match_ != null ? other.match_.Clone() : null;
      block_ = other.block_ != null ? other.block_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcceptMatchResponse Clone() {
      return new AcceptMatchResponse(this);
    }

    /// <summary>Field number for the "match" field.</summary>
    public const int MatchFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.Match match_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Match Match {
      get { return match_; }
      set {
        match_ = value;
      }
    }

    /// <summary>Field number for the "block" field.</summary>
    public const int BlockFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.History block_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.History Block {
      get { return block_; }
      set {
        block_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AcceptMatchResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AcceptMatchResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Match, other.Match)) return false;
      if (!object.Equals(Block, other.Block)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (match_ != null) hash ^= Match.GetHashCode();
      if (block_ != null) hash ^= Block.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (match_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Match);
      }
      if (block_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Block);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (match_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Match);
      }
      if (block_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Block);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AcceptMatchResponse other) {
      if (other == null) {
        return;
      }
      if (other.match_ != null) {
        if (match_ == null) {
          match_ = new global::Loom.ZombieBattleground.Protobuf.Match();
        }
        Match.MergeFrom(other.Match);
      }
      if (other.block_ != null) {
        if (block_ == null) {
          block_ = new global::Loom.ZombieBattleground.Protobuf.History();
        }
        Block.MergeFrom(other.Block);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (match_ == null) {
              match_ = new global::Loom.ZombieBattleground.Protobuf.Match();
            }
            input.ReadMessage(match_);
            break;
          }
          case 18: {
            if (block_ == null) {
              block_ = new global::Loom.ZombieBattleground.Protobuf.History();
            }
            input.ReadMessage(block_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DebugFindMatchRequest : pb::IMessage<DebugFindMatchRequest> {
    private static readonly pb::MessageParser<DebugFindMatchRequest> _parser = new pb::MessageParser<DebugFindMatchRequest>(() => new DebugFindMatchRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DebugFindMatchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugFindMatchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugFindMatchRequest(DebugFindMatchRequest other) : this() {
      userId_ = other.userId_;
      deckId_ = other.deckId_;
      version_ = other.version_;
      randomSeed_ = other.randomSeed_;
      customGame_ = other.customGame_ != null ? other.customGame_.Clone() : null;
      deck_ = other.deck_ != null ? other.deck_.Clone() : null;
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugFindMatchRequest Clone() {
      return new DebugFindMatchRequest(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deckId" field.</summary>
    public const int DeckIdFieldNumber = 2;
    private long deckId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DeckId {
      get { return deckId_; }
      set {
        deckId_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "randomSeed" field.</summary>
    public const int RandomSeedFieldNumber = 4;
    private long randomSeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RandomSeed {
      get { return randomSeed_; }
      set {
        randomSeed_ = value;
      }
    }

    /// <summary>Field number for the "customGame" field.</summary>
    public const int CustomGameFieldNumber = 5;
    private global::Loom.Client.Protobuf.Address customGame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.Client.Protobuf.Address CustomGame {
      get { return customGame_; }
      set {
        customGame_ = value;
      }
    }

    /// <summary>Field number for the "deck" field.</summary>
    public const int DeckFieldNumber = 6;
    private global::Loom.ZombieBattleground.Protobuf.Deck deck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Deck Deck {
      get { return deck_; }
      set {
        deck_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_tags_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DebugFindMatchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DebugFindMatchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (DeckId != other.DeckId) return false;
      if (Version != other.Version) return false;
      if (RandomSeed != other.RandomSeed) return false;
      if (!object.Equals(CustomGame, other.CustomGame)) return false;
      if (!object.Equals(Deck, other.Deck)) return false;
      if(!tags_.Equals(other.tags_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (DeckId != 0L) hash ^= DeckId.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (RandomSeed != 0L) hash ^= RandomSeed.GetHashCode();
      if (customGame_ != null) hash ^= CustomGame.GetHashCode();
      if (deck_ != null) hash ^= Deck.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (DeckId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(DeckId);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Version);
      }
      if (RandomSeed != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(RandomSeed);
      }
      if (customGame_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(CustomGame);
      }
      if (deck_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Deck);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (DeckId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DeckId);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (RandomSeed != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RandomSeed);
      }
      if (customGame_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CustomGame);
      }
      if (deck_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deck);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DebugFindMatchRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.DeckId != 0L) {
        DeckId = other.DeckId;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.RandomSeed != 0L) {
        RandomSeed = other.RandomSeed;
      }
      if (other.customGame_ != null) {
        if (customGame_ == null) {
          customGame_ = new global::Loom.Client.Protobuf.Address();
        }
        CustomGame.MergeFrom(other.CustomGame);
      }
      if (other.deck_ != null) {
        if (deck_ == null) {
          deck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
        }
        Deck.MergeFrom(other.Deck);
      }
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 16: {
            DeckId = input.ReadInt64();
            break;
          }
          case 26: {
            Version = input.ReadString();
            break;
          }
          case 32: {
            RandomSeed = input.ReadInt64();
            break;
          }
          case 42: {
            if (customGame_ == null) {
              customGame_ = new global::Loom.Client.Protobuf.Address();
            }
            input.ReadMessage(customGame_);
            break;
          }
          case 50: {
            if (deck_ == null) {
              deck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
            }
            input.ReadMessage(deck_);
            break;
          }
          case 58: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CancelFindMatchRequest : pb::IMessage<CancelFindMatchRequest> {
    private static readonly pb::MessageParser<CancelFindMatchRequest> _parser = new pb::MessageParser<CancelFindMatchRequest>(() => new CancelFindMatchRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelFindMatchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelFindMatchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelFindMatchRequest(CancelFindMatchRequest other) : this() {
      userId_ = other.userId_;
      matchId_ = other.matchId_;
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelFindMatchRequest Clone() {
      return new CancelFindMatchRequest(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "matchId" field.</summary>
    public const int MatchIdFieldNumber = 2;
    private long matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MatchId {
      get { return matchId_; }
      set {
        matchId_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_tags_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelFindMatchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelFindMatchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (MatchId != other.MatchId) return false;
      if(!tags_.Equals(other.tags_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (MatchId != 0L) hash ^= MatchId.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (MatchId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MatchId);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (MatchId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchId);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelFindMatchRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.MatchId != 0L) {
        MatchId = other.MatchId;
      }
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 16: {
            MatchId = input.ReadInt64();
            break;
          }
          case 26: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CancelFindMatchResponse : pb::IMessage<CancelFindMatchResponse> {
    private static readonly pb::MessageParser<CancelFindMatchResponse> _parser = new pb::MessageParser<CancelFindMatchResponse>(() => new CancelFindMatchResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelFindMatchResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelFindMatchResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelFindMatchResponse(CancelFindMatchResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelFindMatchResponse Clone() {
      return new CancelFindMatchResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelFindMatchResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelFindMatchResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelFindMatchResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class GetMatchRequest : pb::IMessage<GetMatchRequest> {
    private static readonly pb::MessageParser<GetMatchRequest> _parser = new pb::MessageParser<GetMatchRequest>(() => new GetMatchRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetMatchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMatchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMatchRequest(GetMatchRequest other) : this() {
      matchId_ = other.matchId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMatchRequest Clone() {
      return new GetMatchRequest(this);
    }

    /// <summary>Field number for the "matchId" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private long matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MatchId {
      get { return matchId_; }
      set {
        matchId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetMatchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetMatchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId != 0L) hash ^= MatchId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MatchId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetMatchRequest other) {
      if (other == null) {
        return;
      }
      if (other.MatchId != 0L) {
        MatchId = other.MatchId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetMatchResponse : pb::IMessage<GetMatchResponse> {
    private static readonly pb::MessageParser<GetMatchResponse> _parser = new pb::MessageParser<GetMatchResponse>(() => new GetMatchResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetMatchResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMatchResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMatchResponse(GetMatchResponse other) : this() {
      match_ = other.match_ != null ? other.match_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMatchResponse Clone() {
      return new GetMatchResponse(this);
    }

    /// <summary>Field number for the "match" field.</summary>
    public const int MatchFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.Match match_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Match Match {
      get { return match_; }
      set {
        match_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetMatchResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetMatchResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Match, other.Match)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (match_ != null) hash ^= Match.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (match_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Match);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (match_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Match);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetMatchResponse other) {
      if (other == null) {
        return;
      }
      if (other.match_ != null) {
        if (match_ == null) {
          match_ = new global::Loom.ZombieBattleground.Protobuf.Match();
        }
        Match.MergeFrom(other.Match);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (match_ == null) {
              match_ = new global::Loom.ZombieBattleground.Protobuf.Match();
            }
            input.ReadMessage(match_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetMatchRequest : pb::IMessage<SetMatchRequest> {
    private static readonly pb::MessageParser<SetMatchRequest> _parser = new pb::MessageParser<SetMatchRequest>(() => new SetMatchRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetMatchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMatchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMatchRequest(SetMatchRequest other) : this() {
      match_ = other.match_ != null ? other.match_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMatchRequest Clone() {
      return new SetMatchRequest(this);
    }

    /// <summary>Field number for the "match" field.</summary>
    public const int MatchFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.Match match_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Match Match {
      get { return match_; }
      set {
        match_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetMatchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetMatchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Match, other.Match)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (match_ != null) hash ^= Match.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (match_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Match);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (match_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Match);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetMatchRequest other) {
      if (other == null) {
        return;
      }
      if (other.match_ != null) {
        if (match_ == null) {
          match_ = new global::Loom.ZombieBattleground.Protobuf.Match();
        }
        Match.MergeFrom(other.Match);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (match_ == null) {
              match_ = new global::Loom.ZombieBattleground.Protobuf.Match();
            }
            input.ReadMessage(match_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetGameStateRequest : pb::IMessage<GetGameStateRequest> {
    private static readonly pb::MessageParser<GetGameStateRequest> _parser = new pb::MessageParser<GetGameStateRequest>(() => new GetGameStateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetGameStateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGameStateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGameStateRequest(GetGameStateRequest other) : this() {
      matchId_ = other.matchId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGameStateRequest Clone() {
      return new GetGameStateRequest(this);
    }

    /// <summary>Field number for the "matchId" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private long matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MatchId {
      get { return matchId_; }
      set {
        matchId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetGameStateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetGameStateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId != 0L) hash ^= MatchId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MatchId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetGameStateRequest other) {
      if (other == null) {
        return;
      }
      if (other.MatchId != 0L) {
        MatchId = other.MatchId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetGameStateResponse : pb::IMessage<GetGameStateResponse> {
    private static readonly pb::MessageParser<GetGameStateResponse> _parser = new pb::MessageParser<GetGameStateResponse>(() => new GetGameStateResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetGameStateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGameStateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGameStateResponse(GetGameStateResponse other) : this() {
      gameState_ = other.gameState_ != null ? other.gameState_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGameStateResponse Clone() {
      return new GetGameStateResponse(this);
    }

    /// <summary>Field number for the "gameState" field.</summary>
    public const int GameStateFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.GameState gameState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.GameState GameState {
      get { return gameState_; }
      set {
        gameState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetGameStateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetGameStateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GameState, other.GameState)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gameState_ != null) hash ^= GameState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gameState_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gameState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetGameStateResponse other) {
      if (other == null) {
        return;
      }
      if (other.gameState_ != null) {
        if (gameState_ == null) {
          gameState_ = new global::Loom.ZombieBattleground.Protobuf.GameState();
        }
        GameState.MergeFrom(other.GameState);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (gameState_ == null) {
              gameState_ = new global::Loom.ZombieBattleground.Protobuf.GameState();
            }
            input.ReadMessage(gameState_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetGameStateRequest : pb::IMessage<SetGameStateRequest> {
    private static readonly pb::MessageParser<SetGameStateRequest> _parser = new pb::MessageParser<SetGameStateRequest>(() => new SetGameStateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetGameStateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGameStateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGameStateRequest(SetGameStateRequest other) : this() {
      gameState_ = other.gameState_ != null ? other.gameState_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGameStateRequest Clone() {
      return new SetGameStateRequest(this);
    }

    /// <summary>Field number for the "gameState" field.</summary>
    public const int GameStateFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.GameState gameState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.GameState GameState {
      get { return gameState_; }
      set {
        gameState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetGameStateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetGameStateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GameState, other.GameState)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gameState_ != null) hash ^= GameState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gameState_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gameState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetGameStateRequest other) {
      if (other == null) {
        return;
      }
      if (other.gameState_ != null) {
        if (gameState_ == null) {
          gameState_ = new global::Loom.ZombieBattleground.Protobuf.GameState();
        }
        GameState.MergeFrom(other.GameState);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (gameState_ == null) {
              gameState_ = new global::Loom.ZombieBattleground.Protobuf.GameState();
            }
            input.ReadMessage(gameState_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerActionRequest : pb::IMessage<PlayerActionRequest> {
    private static readonly pb::MessageParser<PlayerActionRequest> _parser = new pb::MessageParser<PlayerActionRequest>(() => new PlayerActionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerActionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionRequest(PlayerActionRequest other) : this() {
      matchId_ = other.matchId_;
      playerAction_ = other.playerAction_ != null ? other.playerAction_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionRequest Clone() {
      return new PlayerActionRequest(this);
    }

    /// <summary>Field number for the "matchId" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private long matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MatchId {
      get { return matchId_; }
      set {
        matchId_ = value;
      }
    }

    /// <summary>Field number for the "playerAction" field.</summary>
    public const int PlayerActionFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.PlayerAction playerAction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerAction PlayerAction {
      get { return playerAction_; }
      set {
        playerAction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerActionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerActionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (!object.Equals(PlayerAction, other.PlayerAction)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId != 0L) hash ^= MatchId.GetHashCode();
      if (playerAction_ != null) hash ^= PlayerAction.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MatchId);
      }
      if (playerAction_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PlayerAction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchId);
      }
      if (playerAction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerAction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerActionRequest other) {
      if (other == null) {
        return;
      }
      if (other.MatchId != 0L) {
        MatchId = other.MatchId;
      }
      if (other.playerAction_ != null) {
        if (playerAction_ == null) {
          playerAction_ = new global::Loom.ZombieBattleground.Protobuf.PlayerAction();
        }
        PlayerAction.MergeFrom(other.PlayerAction);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadInt64();
            break;
          }
          case 18: {
            if (playerAction_ == null) {
              playerAction_ = new global::Loom.ZombieBattleground.Protobuf.PlayerAction();
            }
            input.ReadMessage(playerAction_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerActionResponse : pb::IMessage<PlayerActionResponse> {
    private static readonly pb::MessageParser<PlayerActionResponse> _parser = new pb::MessageParser<PlayerActionResponse>(() => new PlayerActionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerActionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionResponse(PlayerActionResponse other) : this() {
      match_ = other.match_ != null ? other.match_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionResponse Clone() {
      return new PlayerActionResponse(this);
    }

    /// <summary>Field number for the "match" field.</summary>
    public const int MatchFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.Match match_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Match Match {
      get { return match_; }
      set {
        match_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerActionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerActionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Match, other.Match)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (match_ != null) hash ^= Match.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (match_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Match);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (match_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Match);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerActionResponse other) {
      if (other == null) {
        return;
      }
      if (other.match_ != null) {
        if (match_ == null) {
          match_ = new global::Loom.ZombieBattleground.Protobuf.Match();
        }
        Match.MergeFrom(other.Match);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (match_ == null) {
              match_ = new global::Loom.ZombieBattleground.Protobuf.Match();
            }
            input.ReadMessage(match_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BundlePlayerActionRequest : pb::IMessage<BundlePlayerActionRequest> {
    private static readonly pb::MessageParser<BundlePlayerActionRequest> _parser = new pb::MessageParser<BundlePlayerActionRequest>(() => new BundlePlayerActionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BundlePlayerActionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BundlePlayerActionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BundlePlayerActionRequest(BundlePlayerActionRequest other) : this() {
      matchId_ = other.matchId_;
      playerActions_ = other.playerActions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BundlePlayerActionRequest Clone() {
      return new BundlePlayerActionRequest(this);
    }

    /// <summary>Field number for the "matchId" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private long matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MatchId {
      get { return matchId_; }
      set {
        matchId_ = value;
      }
    }

    /// <summary>Field number for the "playerActions" field.</summary>
    public const int PlayerActionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.PlayerAction> _repeated_playerActions_codec
        = pb::FieldCodec.ForMessage(18, global::Loom.ZombieBattleground.Protobuf.PlayerAction.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerAction> playerActions_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerAction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerAction> PlayerActions {
      get { return playerActions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BundlePlayerActionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BundlePlayerActionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if(!playerActions_.Equals(other.playerActions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId != 0L) hash ^= MatchId.GetHashCode();
      hash ^= playerActions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MatchId);
      }
      playerActions_.WriteTo(output, _repeated_playerActions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchId);
      }
      size += playerActions_.CalculateSize(_repeated_playerActions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BundlePlayerActionRequest other) {
      if (other == null) {
        return;
      }
      if (other.MatchId != 0L) {
        MatchId = other.MatchId;
      }
      playerActions_.Add(other.playerActions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadInt64();
            break;
          }
          case 18: {
            playerActions_.AddEntriesFrom(input, _repeated_playerActions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BundlePlayerActionResponse : pb::IMessage<BundlePlayerActionResponse> {
    private static readonly pb::MessageParser<BundlePlayerActionResponse> _parser = new pb::MessageParser<BundlePlayerActionResponse>(() => new BundlePlayerActionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BundlePlayerActionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BundlePlayerActionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BundlePlayerActionResponse(BundlePlayerActionResponse other) : this() {
      gameState_ = other.gameState_ != null ? other.gameState_.Clone() : null;
      match_ = other.match_ != null ? other.match_.Clone() : null;
      history_ = other.history_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BundlePlayerActionResponse Clone() {
      return new BundlePlayerActionResponse(this);
    }

    /// <summary>Field number for the "gameState" field.</summary>
    public const int GameStateFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.GameState gameState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.GameState GameState {
      get { return gameState_; }
      set {
        gameState_ = value;
      }
    }

    /// <summary>Field number for the "match" field.</summary>
    public const int MatchFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.Match match_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Match Match {
      get { return match_; }
      set {
        match_ = value;
      }
    }

    /// <summary>Field number for the "history" field.</summary>
    public const int HistoryFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.HistoryData> _repeated_history_codec
        = pb::FieldCodec.ForMessage(26, global::Loom.ZombieBattleground.Protobuf.HistoryData.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.HistoryData> history_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.HistoryData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.HistoryData> History {
      get { return history_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BundlePlayerActionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BundlePlayerActionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GameState, other.GameState)) return false;
      if (!object.Equals(Match, other.Match)) return false;
      if(!history_.Equals(other.history_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gameState_ != null) hash ^= GameState.GetHashCode();
      if (match_ != null) hash ^= Match.GetHashCode();
      hash ^= history_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gameState_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameState);
      }
      if (match_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Match);
      }
      history_.WriteTo(output, _repeated_history_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gameState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameState);
      }
      if (match_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Match);
      }
      size += history_.CalculateSize(_repeated_history_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BundlePlayerActionResponse other) {
      if (other == null) {
        return;
      }
      if (other.gameState_ != null) {
        if (gameState_ == null) {
          gameState_ = new global::Loom.ZombieBattleground.Protobuf.GameState();
        }
        GameState.MergeFrom(other.GameState);
      }
      if (other.match_ != null) {
        if (match_ == null) {
          match_ = new global::Loom.ZombieBattleground.Protobuf.Match();
        }
        Match.MergeFrom(other.Match);
      }
      history_.Add(other.history_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (gameState_ == null) {
              gameState_ = new global::Loom.ZombieBattleground.Protobuf.GameState();
            }
            input.ReadMessage(gameState_);
            break;
          }
          case 18: {
            if (match_ == null) {
              match_ = new global::Loom.ZombieBattleground.Protobuf.Match();
            }
            input.ReadMessage(match_);
            break;
          }
          case 26: {
            history_.AddEntriesFrom(input, _repeated_history_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EndMatchRequest : pb::IMessage<EndMatchRequest> {
    private static readonly pb::MessageParser<EndMatchRequest> _parser = new pb::MessageParser<EndMatchRequest>(() => new EndMatchRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EndMatchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[90]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndMatchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndMatchRequest(EndMatchRequest other) : this() {
      matchId_ = other.matchId_;
      userId_ = other.userId_;
      winnerId_ = other.winnerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndMatchRequest Clone() {
      return new EndMatchRequest(this);
    }

    /// <summary>Field number for the "matchId" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private long matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MatchId {
      get { return matchId_; }
      set {
        matchId_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "winnerId" field.</summary>
    public const int WinnerIdFieldNumber = 3;
    private string winnerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WinnerId {
      get { return winnerId_; }
      set {
        winnerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EndMatchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EndMatchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (UserId != other.UserId) return false;
      if (WinnerId != other.WinnerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId != 0L) hash ^= MatchId.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (WinnerId.Length != 0) hash ^= WinnerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MatchId);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserId);
      }
      if (WinnerId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WinnerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchId);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (WinnerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WinnerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EndMatchRequest other) {
      if (other == null) {
        return;
      }
      if (other.MatchId != 0L) {
        MatchId = other.MatchId;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.WinnerId.Length != 0) {
        WinnerId = other.WinnerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadInt64();
            break;
          }
          case 18: {
            UserId = input.ReadString();
            break;
          }
          case 26: {
            WinnerId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EndMatchResponse : pb::IMessage<EndMatchResponse> {
    private static readonly pb::MessageParser<EndMatchResponse> _parser = new pb::MessageParser<EndMatchResponse>(() => new EndMatchResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EndMatchResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[91]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndMatchResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndMatchResponse(EndMatchResponse other) : this() {
      gameState_ = other.gameState_ != null ? other.gameState_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndMatchResponse Clone() {
      return new EndMatchResponse(this);
    }

    /// <summary>Field number for the "gameState" field.</summary>
    public const int GameStateFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.GameState gameState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.GameState GameState {
      get { return gameState_; }
      set {
        gameState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EndMatchResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EndMatchResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GameState, other.GameState)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gameState_ != null) hash ^= GameState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gameState_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gameState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EndMatchResponse other) {
      if (other == null) {
        return;
      }
      if (other.gameState_ != null) {
        if (gameState_ == null) {
          gameState_ = new global::Loom.ZombieBattleground.Protobuf.GameState();
        }
        GameState.MergeFrom(other.GameState);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (gameState_ == null) {
              gameState_ = new global::Loom.ZombieBattleground.Protobuf.GameState();
            }
            input.ReadMessage(gameState_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CheckGameStatusRequest : pb::IMessage<CheckGameStatusRequest> {
    private static readonly pb::MessageParser<CheckGameStatusRequest> _parser = new pb::MessageParser<CheckGameStatusRequest>(() => new CheckGameStatusRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckGameStatusRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[92]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckGameStatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckGameStatusRequest(CheckGameStatusRequest other) : this() {
      matchId_ = other.matchId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckGameStatusRequest Clone() {
      return new CheckGameStatusRequest(this);
    }

    /// <summary>Field number for the "matchId" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private long matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MatchId {
      get { return matchId_; }
      set {
        matchId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckGameStatusRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckGameStatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId != 0L) hash ^= MatchId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MatchId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckGameStatusRequest other) {
      if (other == null) {
        return;
      }
      if (other.MatchId != 0L) {
        MatchId = other.MatchId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CheckGameStatusResponse : pb::IMessage<CheckGameStatusResponse> {
    private static readonly pb::MessageParser<CheckGameStatusResponse> _parser = new pb::MessageParser<CheckGameStatusResponse>(() => new CheckGameStatusResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckGameStatusResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[93]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckGameStatusResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckGameStatusResponse(CheckGameStatusResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckGameStatusResponse Clone() {
      return new CheckGameStatusResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckGameStatusResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckGameStatusResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckGameStatusResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class GameMode : pb::IMessage<GameMode> {
    private static readonly pb::MessageParser<GameMode> _parser = new pb::MessageParser<GameMode>(() => new GameMode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameMode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[94]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameMode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameMode(GameMode other) : this() {
      iD_ = other.iD_;
      name_ = other.name_;
      description_ = other.description_;
      version_ = other.version_;
      gameModeType_ = other.gameModeType_;
      address_ = other.address_ != null ? other.address_.Clone() : null;
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameMode Clone() {
      return new GameMode(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private string iD_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ID {
      get { return iD_; }
      set {
        iD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 4;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_mode_type" field.</summary>
    public const int GameModeTypeFieldNumber = 5;
    private global::Loom.ZombieBattleground.Protobuf.GameModeType gameModeType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.GameModeType GameModeType {
      get { return gameModeType_; }
      set {
        gameModeType_ = value;
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 6;
    private global::Loom.Client.Protobuf.Address address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.Client.Protobuf.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "Owner" field.</summary>
    public const int OwnerFieldNumber = 7;
    private global::Loom.Client.Protobuf.Address owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.Client.Protobuf.Address Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameMode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameMode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (Version != other.Version) return false;
      if (GameModeType != other.GameModeType) return false;
      if (!object.Equals(Address, other.Address)) return false;
      if (!object.Equals(Owner, other.Owner)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID.Length != 0) hash ^= ID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (GameModeType != 0) hash ^= GameModeType.GetHashCode();
      if (address_ != null) hash ^= Address.GetHashCode();
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Version);
      }
      if (GameModeType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) GameModeType);
      }
      if (address_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Address);
      }
      if (owner_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (GameModeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GameModeType);
      }
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameMode other) {
      if (other == null) {
        return;
      }
      if (other.ID.Length != 0) {
        ID = other.ID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.GameModeType != 0) {
        GameModeType = other.GameModeType;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          address_ = new global::Loom.Client.Protobuf.Address();
        }
        Address.MergeFrom(other.Address);
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          owner_ = new global::Loom.Client.Protobuf.Address();
        }
        Owner.MergeFrom(other.Owner);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ID = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            Version = input.ReadString();
            break;
          }
          case 40: {
            gameModeType_ = (global::Loom.ZombieBattleground.Protobuf.GameModeType) input.ReadEnum();
            break;
          }
          case 50: {
            if (address_ == null) {
              address_ = new global::Loom.Client.Protobuf.Address();
            }
            input.ReadMessage(address_);
            break;
          }
          case 58: {
            if (owner_ == null) {
              owner_ = new global::Loom.Client.Protobuf.Address();
            }
            input.ReadMessage(owner_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameModeList : pb::IMessage<GameModeList> {
    private static readonly pb::MessageParser<GameModeList> _parser = new pb::MessageParser<GameModeList>(() => new GameModeList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameModeList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[95]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeList(GameModeList other) : this() {
      gameModes_ = other.gameModes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeList Clone() {
      return new GameModeList(this);
    }

    /// <summary>Field number for the "game_modes" field.</summary>
    public const int GameModesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.GameMode> _repeated_gameModes_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.GameMode.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.GameMode> gameModes_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.GameMode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.GameMode> GameModes {
      get { return gameModes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameModeList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameModeList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!gameModes_.Equals(other.gameModes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= gameModes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      gameModes_.WriteTo(output, _repeated_gameModes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += gameModes_.CalculateSize(_repeated_gameModes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameModeList other) {
      if (other == null) {
        return;
      }
      gameModes_.Add(other.gameModes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            gameModes_.AddEntriesFrom(input, _repeated_gameModes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameModeRequest : pb::IMessage<GameModeRequest> {
    private static readonly pb::MessageParser<GameModeRequest> _parser = new pb::MessageParser<GameModeRequest>(() => new GameModeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameModeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[96]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeRequest(GameModeRequest other) : this() {
      name_ = other.name_;
      description_ = other.description_;
      version_ = other.version_;
      address_ = other.address_;
      gameModeType_ = other.gameModeType_;
      oracle_ = other.oracle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeRequest Clone() {
      return new GameModeRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 4;
    private string address_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_mode_type" field.</summary>
    public const int GameModeTypeFieldNumber = 5;
    private global::Loom.ZombieBattleground.Protobuf.GameModeType gameModeType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.GameModeType GameModeType {
      get { return gameModeType_; }
      set {
        gameModeType_ = value;
      }
    }

    /// <summary>Field number for the "oracle" field.</summary>
    public const int OracleFieldNumber = 6;
    private string oracle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Oracle {
      get { return oracle_; }
      set {
        oracle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameModeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameModeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (Version != other.Version) return false;
      if (Address != other.Address) return false;
      if (GameModeType != other.GameModeType) return false;
      if (Oracle != other.Oracle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (GameModeType != 0) hash ^= GameModeType.GetHashCode();
      if (Oracle.Length != 0) hash ^= Oracle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Version);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Address);
      }
      if (GameModeType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) GameModeType);
      }
      if (Oracle.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Oracle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (GameModeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GameModeType);
      }
      if (Oracle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Oracle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameModeRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.GameModeType != 0) {
        GameModeType = other.GameModeType;
      }
      if (other.Oracle.Length != 0) {
        Oracle = other.Oracle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            Version = input.ReadString();
            break;
          }
          case 34: {
            Address = input.ReadString();
            break;
          }
          case 40: {
            gameModeType_ = (global::Loom.ZombieBattleground.Protobuf.GameModeType) input.ReadEnum();
            break;
          }
          case 50: {
            Oracle = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateGameModeRequest : pb::IMessage<UpdateGameModeRequest> {
    private static readonly pb::MessageParser<UpdateGameModeRequest> _parser = new pb::MessageParser<UpdateGameModeRequest>(() => new UpdateGameModeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateGameModeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[97]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateGameModeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateGameModeRequest(UpdateGameModeRequest other) : this() {
      iD_ = other.iD_;
      name_ = other.name_;
      description_ = other.description_;
      version_ = other.version_;
      address_ = other.address_;
      gameModeType_ = other.gameModeType_;
      oracle_ = other.oracle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateGameModeRequest Clone() {
      return new UpdateGameModeRequest(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private string iD_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ID {
      get { return iD_; }
      set {
        iD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 4;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 5;
    private string address_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_mode_type" field.</summary>
    public const int GameModeTypeFieldNumber = 6;
    private global::Loom.ZombieBattleground.Protobuf.GameModeType gameModeType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.GameModeType GameModeType {
      get { return gameModeType_; }
      set {
        gameModeType_ = value;
      }
    }

    /// <summary>Field number for the "oracle" field.</summary>
    public const int OracleFieldNumber = 7;
    private string oracle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Oracle {
      get { return oracle_; }
      set {
        oracle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateGameModeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateGameModeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (Version != other.Version) return false;
      if (Address != other.Address) return false;
      if (GameModeType != other.GameModeType) return false;
      if (Oracle != other.Oracle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID.Length != 0) hash ^= ID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (GameModeType != 0) hash ^= GameModeType.GetHashCode();
      if (Oracle.Length != 0) hash ^= Oracle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Version);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Address);
      }
      if (GameModeType != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) GameModeType);
      }
      if (Oracle.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Oracle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (GameModeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GameModeType);
      }
      if (Oracle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Oracle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateGameModeRequest other) {
      if (other == null) {
        return;
      }
      if (other.ID.Length != 0) {
        ID = other.ID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.GameModeType != 0) {
        GameModeType = other.GameModeType;
      }
      if (other.Oracle.Length != 0) {
        Oracle = other.Oracle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ID = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            Version = input.ReadString();
            break;
          }
          case 42: {
            Address = input.ReadString();
            break;
          }
          case 48: {
            gameModeType_ = (global::Loom.ZombieBattleground.Protobuf.GameModeType) input.ReadEnum();
            break;
          }
          case 58: {
            Oracle = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteGameModeRequest : pb::IMessage<DeleteGameModeRequest> {
    private static readonly pb::MessageParser<DeleteGameModeRequest> _parser = new pb::MessageParser<DeleteGameModeRequest>(() => new DeleteGameModeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteGameModeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[98]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteGameModeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteGameModeRequest(DeleteGameModeRequest other) : this() {
      iD_ = other.iD_;
      oracle_ = other.oracle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteGameModeRequest Clone() {
      return new DeleteGameModeRequest(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private string iD_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ID {
      get { return iD_; }
      set {
        iD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "oracle" field.</summary>
    public const int OracleFieldNumber = 2;
    private string oracle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Oracle {
      get { return oracle_; }
      set {
        oracle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteGameModeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteGameModeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Oracle != other.Oracle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID.Length != 0) hash ^= ID.GetHashCode();
      if (Oracle.Length != 0) hash ^= Oracle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ID);
      }
      if (Oracle.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Oracle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ID);
      }
      if (Oracle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Oracle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteGameModeRequest other) {
      if (other == null) {
        return;
      }
      if (other.ID.Length != 0) {
        ID = other.ID;
      }
      if (other.Oracle.Length != 0) {
        Oracle = other.Oracle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ID = input.ReadString();
            break;
          }
          case 18: {
            Oracle = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetGameModeRequest : pb::IMessage<GetGameModeRequest> {
    private static readonly pb::MessageParser<GetGameModeRequest> _parser = new pb::MessageParser<GetGameModeRequest>(() => new GetGameModeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetGameModeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[99]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGameModeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGameModeRequest(GetGameModeRequest other) : this() {
      iD_ = other.iD_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGameModeRequest Clone() {
      return new GetGameModeRequest(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private string iD_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ID {
      get { return iD_; }
      set {
        iD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetGameModeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetGameModeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID.Length != 0) hash ^= ID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetGameModeRequest other) {
      if (other == null) {
        return;
      }
      if (other.ID.Length != 0) {
        ID = other.ID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListGameModesRequest : pb::IMessage<ListGameModesRequest> {
    private static readonly pb::MessageParser<ListGameModesRequest> _parser = new pb::MessageParser<ListGameModesRequest>(() => new ListGameModesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListGameModesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[100]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListGameModesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListGameModesRequest(ListGameModesRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListGameModesRequest Clone() {
      return new ListGameModesRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListGameModesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListGameModesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListGameModesRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class GetCustomGameModeCustomUiRequest : pb::IMessage<GetCustomGameModeCustomUiRequest> {
    private static readonly pb::MessageParser<GetCustomGameModeCustomUiRequest> _parser = new pb::MessageParser<GetCustomGameModeCustomUiRequest>(() => new GetCustomGameModeCustomUiRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetCustomGameModeCustomUiRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[101]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCustomGameModeCustomUiRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCustomGameModeCustomUiRequest(GetCustomGameModeCustomUiRequest other) : this() {
      address_ = other.address_ != null ? other.address_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCustomGameModeCustomUiRequest Clone() {
      return new GetCustomGameModeCustomUiRequest(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private global::Loom.Client.Protobuf.Address address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.Client.Protobuf.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetCustomGameModeCustomUiRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetCustomGameModeCustomUiRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Address, other.Address)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (address_ != null) hash ^= Address.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (address_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetCustomGameModeCustomUiRequest other) {
      if (other == null) {
        return;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          address_ = new global::Loom.Client.Protobuf.Address();
        }
        Address.MergeFrom(other.Address);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (address_ == null) {
              address_ = new global::Loom.Client.Protobuf.Address();
            }
            input.ReadMessage(address_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetCustomGameModeCustomUiResponse : pb::IMessage<GetCustomGameModeCustomUiResponse> {
    private static readonly pb::MessageParser<GetCustomGameModeCustomUiResponse> _parser = new pb::MessageParser<GetCustomGameModeCustomUiResponse>(() => new GetCustomGameModeCustomUiResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetCustomGameModeCustomUiResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[102]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCustomGameModeCustomUiResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCustomGameModeCustomUiResponse(GetCustomGameModeCustomUiResponse other) : this() {
      uiElements_ = other.uiElements_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCustomGameModeCustomUiResponse Clone() {
      return new GetCustomGameModeCustomUiResponse(this);
    }

    /// <summary>Field number for the "uiElements" field.</summary>
    public const int UiElementsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CustomGameModeCustomUiElement> _repeated_uiElements_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.CustomGameModeCustomUiElement.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CustomGameModeCustomUiElement> uiElements_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CustomGameModeCustomUiElement>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CustomGameModeCustomUiElement> UiElements {
      get { return uiElements_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetCustomGameModeCustomUiResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetCustomGameModeCustomUiResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!uiElements_.Equals(other.uiElements_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= uiElements_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      uiElements_.WriteTo(output, _repeated_uiElements_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += uiElements_.CalculateSize(_repeated_uiElements_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetCustomGameModeCustomUiResponse other) {
      if (other == null) {
        return;
      }
      uiElements_.Add(other.uiElements_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            uiElements_.AddEntriesFrom(input, _repeated_uiElements_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CallCustomGameModeFunctionRequest : pb::IMessage<CallCustomGameModeFunctionRequest> {
    private static readonly pb::MessageParser<CallCustomGameModeFunctionRequest> _parser = new pb::MessageParser<CallCustomGameModeFunctionRequest>(() => new CallCustomGameModeFunctionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CallCustomGameModeFunctionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[103]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallCustomGameModeFunctionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallCustomGameModeFunctionRequest(CallCustomGameModeFunctionRequest other) : this() {
      address_ = other.address_ != null ? other.address_.Clone() : null;
      callData_ = other.callData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallCustomGameModeFunctionRequest Clone() {
      return new CallCustomGameModeFunctionRequest(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private global::Loom.Client.Protobuf.Address address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.Client.Protobuf.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "callData" field.</summary>
    public const int CallDataFieldNumber = 2;
    private pb::ByteString callData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CallData {
      get { return callData_; }
      set {
        callData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CallCustomGameModeFunctionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CallCustomGameModeFunctionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Address, other.Address)) return false;
      if (CallData != other.CallData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (address_ != null) hash ^= Address.GetHashCode();
      if (CallData.Length != 0) hash ^= CallData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (address_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Address);
      }
      if (CallData.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(CallData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      if (CallData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CallData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CallCustomGameModeFunctionRequest other) {
      if (other == null) {
        return;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          address_ = new global::Loom.Client.Protobuf.Address();
        }
        Address.MergeFrom(other.Address);
      }
      if (other.CallData.Length != 0) {
        CallData = other.CallData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (address_ == null) {
              address_ = new global::Loom.Client.Protobuf.Address();
            }
            input.ReadMessage(address_);
            break;
          }
          case 18: {
            CallData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StaticCallCustomGameModeFunctionResponse : pb::IMessage<StaticCallCustomGameModeFunctionResponse> {
    private static readonly pb::MessageParser<StaticCallCustomGameModeFunctionResponse> _parser = new pb::MessageParser<StaticCallCustomGameModeFunctionResponse>(() => new StaticCallCustomGameModeFunctionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StaticCallCustomGameModeFunctionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[104]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StaticCallCustomGameModeFunctionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StaticCallCustomGameModeFunctionResponse(StaticCallCustomGameModeFunctionResponse other) : this() {
      output_ = other.output_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StaticCallCustomGameModeFunctionResponse Clone() {
      return new StaticCallCustomGameModeFunctionResponse(this);
    }

    /// <summary>Field number for the "output" field.</summary>
    public const int OutputFieldNumber = 1;
    private pb::ByteString output_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Output {
      get { return output_; }
      set {
        output_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StaticCallCustomGameModeFunctionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StaticCallCustomGameModeFunctionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Output != other.Output) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Output.Length != 0) hash ^= Output.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Output.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Output.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Output);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StaticCallCustomGameModeFunctionResponse other) {
      if (other == null) {
        return;
      }
      if (other.Output.Length != 0) {
        Output = other.Output;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Output = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CustomGameModeCustomUiLabel : pb::IMessage<CustomGameModeCustomUiLabel> {
    private static readonly pb::MessageParser<CustomGameModeCustomUiLabel> _parser = new pb::MessageParser<CustomGameModeCustomUiLabel>(() => new CustomGameModeCustomUiLabel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CustomGameModeCustomUiLabel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[105]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomGameModeCustomUiLabel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomGameModeCustomUiLabel(CustomGameModeCustomUiLabel other) : this() {
      text_ = other.text_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomGameModeCustomUiLabel Clone() {
      return new CustomGameModeCustomUiLabel(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CustomGameModeCustomUiLabel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CustomGameModeCustomUiLabel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Text != other.Text) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Text.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CustomGameModeCustomUiLabel other) {
      if (other == null) {
        return;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CustomGameModeCustomUiButton : pb::IMessage<CustomGameModeCustomUiButton> {
    private static readonly pb::MessageParser<CustomGameModeCustomUiButton> _parser = new pb::MessageParser<CustomGameModeCustomUiButton>(() => new CustomGameModeCustomUiButton());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CustomGameModeCustomUiButton> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[106]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomGameModeCustomUiButton() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomGameModeCustomUiButton(CustomGameModeCustomUiButton other) : this() {
      title_ = other.title_;
      callData_ = other.callData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomGameModeCustomUiButton Clone() {
      return new CustomGameModeCustomUiButton(this);
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 1;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "callData" field.</summary>
    public const int CallDataFieldNumber = 2;
    private pb::ByteString callData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CallData {
      get { return callData_; }
      set {
        callData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CustomGameModeCustomUiButton);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CustomGameModeCustomUiButton other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Title != other.Title) return false;
      if (CallData != other.CallData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (CallData.Length != 0) hash ^= CallData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Title.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Title);
      }
      if (CallData.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(CallData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (CallData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CallData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CustomGameModeCustomUiButton other) {
      if (other == null) {
        return;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.CallData.Length != 0) {
        CallData = other.CallData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Title = input.ReadString();
            break;
          }
          case 18: {
            CallData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CustomGameModeCustomUiElement : pb::IMessage<CustomGameModeCustomUiElement> {
    private static readonly pb::MessageParser<CustomGameModeCustomUiElement> _parser = new pb::MessageParser<CustomGameModeCustomUiElement>(() => new CustomGameModeCustomUiElement());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CustomGameModeCustomUiElement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[107]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomGameModeCustomUiElement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomGameModeCustomUiElement(CustomGameModeCustomUiElement other) : this() {
      rect_ = other.rect_ != null ? other.rect_.Clone() : null;
      switch (other.UiElementCase) {
        case UiElementOneofCase.Label:
          Label = other.Label.Clone();
          break;
        case UiElementOneofCase.Button:
          Button = other.Button.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomGameModeCustomUiElement Clone() {
      return new CustomGameModeCustomUiElement(this);
    }

    /// <summary>Field number for the "rect" field.</summary>
    public const int RectFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.Rect rect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Rect Rect {
      get { return rect_; }
      set {
        rect_ = value;
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CustomGameModeCustomUiLabel Label {
      get { return uiElementCase_ == UiElementOneofCase.Label ? (global::Loom.ZombieBattleground.Protobuf.CustomGameModeCustomUiLabel) uiElement_ : null; }
      set {
        uiElement_ = value;
        uiElementCase_ = value == null ? UiElementOneofCase.None : UiElementOneofCase.Label;
      }
    }

    /// <summary>Field number for the "button" field.</summary>
    public const int ButtonFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CustomGameModeCustomUiButton Button {
      get { return uiElementCase_ == UiElementOneofCase.Button ? (global::Loom.ZombieBattleground.Protobuf.CustomGameModeCustomUiButton) uiElement_ : null; }
      set {
        uiElement_ = value;
        uiElementCase_ = value == null ? UiElementOneofCase.None : UiElementOneofCase.Button;
      }
    }

    private object uiElement_;
    /// <summary>Enum of possible cases for the "uiElement" oneof.</summary>
    public enum UiElementOneofCase {
      None = 0,
      Label = 2,
      Button = 3,
    }
    private UiElementOneofCase uiElementCase_ = UiElementOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UiElementOneofCase UiElementCase {
      get { return uiElementCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUiElement() {
      uiElementCase_ = UiElementOneofCase.None;
      uiElement_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CustomGameModeCustomUiElement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CustomGameModeCustomUiElement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Rect, other.Rect)) return false;
      if (!object.Equals(Label, other.Label)) return false;
      if (!object.Equals(Button, other.Button)) return false;
      if (UiElementCase != other.UiElementCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rect_ != null) hash ^= Rect.GetHashCode();
      if (uiElementCase_ == UiElementOneofCase.Label) hash ^= Label.GetHashCode();
      if (uiElementCase_ == UiElementOneofCase.Button) hash ^= Button.GetHashCode();
      hash ^= (int) uiElementCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rect_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Rect);
      }
      if (uiElementCase_ == UiElementOneofCase.Label) {
        output.WriteRawTag(18);
        output.WriteMessage(Label);
      }
      if (uiElementCase_ == UiElementOneofCase.Button) {
        output.WriteRawTag(26);
        output.WriteMessage(Button);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rect_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rect);
      }
      if (uiElementCase_ == UiElementOneofCase.Label) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Label);
      }
      if (uiElementCase_ == UiElementOneofCase.Button) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Button);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CustomGameModeCustomUiElement other) {
      if (other == null) {
        return;
      }
      if (other.rect_ != null) {
        if (rect_ == null) {
          rect_ = new global::Loom.ZombieBattleground.Protobuf.Rect();
        }
        Rect.MergeFrom(other.Rect);
      }
      switch (other.UiElementCase) {
        case UiElementOneofCase.Label:
          if (Label == null) {
            Label = new global::Loom.ZombieBattleground.Protobuf.CustomGameModeCustomUiLabel();
          }
          Label.MergeFrom(other.Label);
          break;
        case UiElementOneofCase.Button:
          if (Button == null) {
            Button = new global::Loom.ZombieBattleground.Protobuf.CustomGameModeCustomUiButton();
          }
          Button.MergeFrom(other.Button);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (rect_ == null) {
              rect_ = new global::Loom.ZombieBattleground.Protobuf.Rect();
            }
            input.ReadMessage(rect_);
            break;
          }
          case 18: {
            global::Loom.ZombieBattleground.Protobuf.CustomGameModeCustomUiLabel subBuilder = new global::Loom.ZombieBattleground.Protobuf.CustomGameModeCustomUiLabel();
            if (uiElementCase_ == UiElementOneofCase.Label) {
              subBuilder.MergeFrom(Label);
            }
            input.ReadMessage(subBuilder);
            Label = subBuilder;
            break;
          }
          case 26: {
            global::Loom.ZombieBattleground.Protobuf.CustomGameModeCustomUiButton subBuilder = new global::Loom.ZombieBattleground.Protobuf.CustomGameModeCustomUiButton();
            if (uiElementCase_ == UiElementOneofCase.Button) {
              subBuilder.MergeFrom(Button);
            }
            input.ReadMessage(subBuilder);
            Button = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class UniqueAnimationType : pb::IMessage<UniqueAnimationType> {
    private static readonly pb::MessageParser<UniqueAnimationType> _parser = new pb::MessageParser<UniqueAnimationType>(() => new UniqueAnimationType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UniqueAnimationType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[108]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UniqueAnimationType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UniqueAnimationType(UniqueAnimationType other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UniqueAnimationType Clone() {
      return new UniqueAnimationType(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UniqueAnimationType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UniqueAnimationType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UniqueAnimationType other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the UniqueAnimationType message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Enum {
        [pbr::OriginalName("None")] None = 0,
        [pbr::OriginalName("ShammannArrival")] ShammannArrival = 1,
        [pbr::OriginalName("ZVirusArrival")] ZvirusArrival = 2,
      }

    }
    #endregion

  }

  public sealed partial class CardAbilityTarget : pb::IMessage<CardAbilityTarget> {
    private static readonly pb::MessageParser<CardAbilityTarget> _parser = new pb::MessageParser<CardAbilityTarget>(() => new CardAbilityTarget());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardAbilityTarget> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[109]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityTarget() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityTarget(CardAbilityTarget other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityTarget Clone() {
      return new CardAbilityTarget(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardAbilityTarget);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardAbilityTarget other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardAbilityTarget other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CardAbilityTarget message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Enum {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("PLAYER")] Player = 1,
        [pbr::OriginalName("PLAYER_CARD")] PlayerCard = 2,
        [pbr::OriginalName("PLAYER_ALL_CARDS")] PlayerAllCards = 3,
        [pbr::OriginalName("OPPONENT")] Opponent = 4,
        [pbr::OriginalName("OPPONENT_CARD")] OpponentCard = 5,
        [pbr::OriginalName("OPPONENT_ALL_CARDS")] OpponentAllCards = 6,
        [pbr::OriginalName("ALL_CARDS")] AllCards = 7,
        [pbr::OriginalName("ALL")] All = 8,
        [pbr::OriginalName("ITSELF")] Itself = 9,
      }

    }
    #endregion

  }

  public sealed partial class OverlordAbilityTarget : pb::IMessage<OverlordAbilityTarget> {
    private static readonly pb::MessageParser<OverlordAbilityTarget> _parser = new pb::MessageParser<OverlordAbilityTarget>(() => new OverlordAbilityTarget());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OverlordAbilityTarget> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[110]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordAbilityTarget() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordAbilityTarget(OverlordAbilityTarget other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordAbilityTarget Clone() {
      return new OverlordAbilityTarget(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OverlordAbilityTarget);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OverlordAbilityTarget other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OverlordAbilityTarget other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the OverlordAbilityTarget message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Enum {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("PLAYER")] Player = 1,
        [pbr::OriginalName("PLAYER_CARD")] PlayerCard = 2,
        [pbr::OriginalName("PLAYER_ALL_CARDS")] PlayerAllCards = 3,
        [pbr::OriginalName("OPPONENT")] Opponent = 4,
        [pbr::OriginalName("OPPONENT_CARD")] OpponentCard = 5,
        [pbr::OriginalName("OPPONENT_ALL_CARDS")] OpponentAllCards = 6,
        [pbr::OriginalName("ALL_CARDS")] AllCards = 7,
      }

    }
    #endregion

  }

  public sealed partial class GameMechanicDescriptionType : pb::IMessage<GameMechanicDescriptionType> {
    private static readonly pb::MessageParser<GameMechanicDescriptionType> _parser = new pb::MessageParser<GameMechanicDescriptionType>(() => new GameMechanicDescriptionType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameMechanicDescriptionType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[111]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameMechanicDescriptionType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameMechanicDescriptionType(GameMechanicDescriptionType other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameMechanicDescriptionType Clone() {
      return new GameMechanicDescriptionType(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameMechanicDescriptionType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameMechanicDescriptionType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameMechanicDescriptionType other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GameMechanicDescriptionType message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Enum {
        [pbr::OriginalName("UNDEFINED")] Undefined = 0,
        [pbr::OriginalName("ATTACK")] Attack = 1,
        [pbr::OriginalName("DEATH")] Death = 2,
        [pbr::OriginalName("DELAYED")] Delayed = 3,
        [pbr::OriginalName("DESTROY")] Destroy = 4,
        [pbr::OriginalName("DEVOUR")] Devour = 5,
        [pbr::OriginalName("DISTRACT")] Distract = 6,
        [pbr::OriginalName("END")] End = 7,
        [pbr::OriginalName("ENTRY")] Entry = 8,
        [pbr::OriginalName("FERAL")] Feral = 9,
        [pbr::OriginalName("FLASH")] Flash = 10,
        [pbr::OriginalName("FREEZE")] Freeze = 11,
        [pbr::OriginalName("GUARD")] Guard = 12,
        [pbr::OriginalName("HEAVY")] Heavy = 13,
        [pbr::OriginalName("OVERFLOW")] Overflow = 14,
        [pbr::OriginalName("RAGE")] Rage = 15,
        [pbr::OriginalName("REANIMATE")] Reanimate = 16,
        [pbr::OriginalName("SHATTER")] Shatter = 17,
        [pbr::OriginalName("SWING")] Swing = 18,
        [pbr::OriginalName("TURN")] Turn = 19,
        [pbr::OriginalName("GOT_DAMAGE")] GotDamage = 20,
        [pbr::OriginalName("AT_DEFENSE")] AtDefense = 21,
        [pbr::OriginalName("IN_HAND")] InHand = 22,
        [pbr::OriginalName("KILL_UNIT")] KillUnit = 23,
        [pbr::OriginalName("PERMANENT")] Permanent = 24,
        [pbr::OriginalName("BLITZ")] Blitz = 25,
      }

    }
    #endregion

  }

  public sealed partial class AttackRestriction : pb::IMessage<AttackRestriction> {
    private static readonly pb::MessageParser<AttackRestriction> _parser = new pb::MessageParser<AttackRestriction>(() => new AttackRestriction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttackRestriction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[112]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackRestriction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackRestriction(AttackRestriction other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackRestriction Clone() {
      return new AttackRestriction(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttackRestriction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttackRestriction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttackRestriction other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AttackRestriction message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Enum {
        [pbr::OriginalName("ANY")] Any = 0,
        [pbr::OriginalName("ONLY_DIFFERENT")] OnlyDifferent = 1,
      }

    }
    #endregion

  }

  public sealed partial class CardAbilityBuffType : pb::IMessage<CardAbilityBuffType> {
    private static readonly pb::MessageParser<CardAbilityBuffType> _parser = new pb::MessageParser<CardAbilityBuffType>(() => new CardAbilityBuffType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardAbilityBuffType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[113]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityBuffType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityBuffType(CardAbilityBuffType other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityBuffType Clone() {
      return new CardAbilityBuffType(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardAbilityBuffType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardAbilityBuffType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardAbilityBuffType other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CardAbilityBuffType message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Enum {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("GUARD")] Guard = 1,
        [pbr::OriginalName("DEFENCE")] Defence = 2,
        [pbr::OriginalName("HEAVY")] Heavy = 3,
        [pbr::OriginalName("WEAPON")] Weapon = 4,
        [pbr::OriginalName("RUSH")] Rush = 5,
        [pbr::OriginalName("ATTACK")] Attack = 6,
        [pbr::OriginalName("FREEZE")] Freeze = 7,
        [pbr::OriginalName("DAMAGE")] Damage = 8,
        [pbr::OriginalName("HEAL_ALLY")] HealAlly = 9,
        [pbr::OriginalName("DESTROY")] Destroy = 10,
        [pbr::OriginalName("REANIMATE")] Reanimate = 11,
      }

    }
    #endregion

  }

  public sealed partial class CardAbilityActivityType : pb::IMessage<CardAbilityActivityType> {
    private static readonly pb::MessageParser<CardAbilityActivityType> _parser = new pb::MessageParser<CardAbilityActivityType>(() => new CardAbilityActivityType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardAbilityActivityType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[114]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityActivityType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityActivityType(CardAbilityActivityType other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityActivityType Clone() {
      return new CardAbilityActivityType(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardAbilityActivityType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardAbilityActivityType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardAbilityActivityType other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CardAbilityActivityType message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Enum {
        [pbr::OriginalName("UNDEFINED")] Undefined = 0,
        [pbr::OriginalName("PASSIVE")] Passive = 1,
        [pbr::OriginalName("ACTIVE")] Active = 2,
      }

    }
    #endregion

  }

  public sealed partial class CardAbilityTrigger : pb::IMessage<CardAbilityTrigger> {
    private static readonly pb::MessageParser<CardAbilityTrigger> _parser = new pb::MessageParser<CardAbilityTrigger>(() => new CardAbilityTrigger());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardAbilityTrigger> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[115]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityTrigger() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityTrigger(CardAbilityTrigger other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityTrigger Clone() {
      return new CardAbilityTrigger(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardAbilityTrigger);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardAbilityTrigger other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardAbilityTrigger other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CardAbilityTrigger message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Enum {
        [pbr::OriginalName("UNDEFINED")] Undefined = 0,
        [pbr::OriginalName("TURN")] Turn = 1,
        [pbr::OriginalName("ENTRY")] Entry = 2,
        [pbr::OriginalName("END")] End = 3,
        [pbr::OriginalName("ATTACK")] Attack = 4,
        [pbr::OriginalName("DEATH")] Death = 5,
        [pbr::OriginalName("PERMANENT")] Permanent = 6,
        [pbr::OriginalName("GOT_DAMAGE")] GotDamage = 7,
        [pbr::OriginalName("AT_DEFENCE")] AtDefence = 8,
        [pbr::OriginalName("IN_HAND")] InHand = 9,
        [pbr::OriginalName("KILL_UNIT")] KillUnit = 10,
      }

    }
    #endregion

  }

  public sealed partial class CardAbilityEffect : pb::IMessage<CardAbilityEffect> {
    private static readonly pb::MessageParser<CardAbilityEffect> _parser = new pb::MessageParser<CardAbilityEffect>(() => new CardAbilityEffect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardAbilityEffect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[116]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityEffect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityEffect(CardAbilityEffect other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityEffect Clone() {
      return new CardAbilityEffect(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardAbilityEffect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardAbilityEffect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardAbilityEffect other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CardAbilityEffect message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Enum {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("MASSIVE_WATER_WAVE")] MassiveWaterWave = 1,
        [pbr::OriginalName("MASSIVE_FIRE")] MassiveFire = 2,
        [pbr::OriginalName("MASSIVE_LIGHTNING")] MassiveLightning = 3,
        [pbr::OriginalName("MASSIVE_TOXIC_ALL")] MassiveToxicAll = 4,
        [pbr::OriginalName("TARGET_ROCK")] TargetRock = 5,
        [pbr::OriginalName("TARGET_FIRE")] TargetFire = 6,
        [pbr::OriginalName("TARGET_LIFE")] TargetLife = 7,
        [pbr::OriginalName("TARGET_TOXIC")] TargetToxic = 8,
        [pbr::OriginalName("TARGET_WATER")] TargetWater = 9,
        [pbr::OriginalName("TARGET_ADJUSTMENTS_BOMB")] TargetAdjustmentsBomb = 10,
        [pbr::OriginalName("STUN_FREEZES")] StunFreezes = 11,
        [pbr::OriginalName("STUN_OR_DAMAGE_FREEZES")] StunOrDamageFreezes = 12,
        [pbr::OriginalName("TARGET_ADJUSTMENTS_AIR")] TargetAdjustmentsAir = 13,
        [pbr::OriginalName("HEAL_DIRECTLY")] HealDirectly = 14,
        [pbr::OriginalName("HEAL")] Heal = 15,
      }

    }
    #endregion

  }

  public sealed partial class CardAbilityType : pb::IMessage<CardAbilityType> {
    private static readonly pb::MessageParser<CardAbilityType> _parser = new pb::MessageParser<CardAbilityType>(() => new CardAbilityType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardAbilityType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[117]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityType(CardAbilityType other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityType Clone() {
      return new CardAbilityType(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardAbilityType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardAbilityType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardAbilityType other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CardAbilityType message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Enum {
        [pbr::OriginalName("UNDEFINED")] Undefined = 0,
        [pbr::OriginalName("HEAL")] Heal = 1,
        [pbr::OriginalName("MODIFICATOR_STATS")] ModificatorStats = 2,
        [pbr::OriginalName("CHANGE_STAT")] ChangeStat = 3,
        [pbr::OriginalName("STUN")] Stun = 4,
        [pbr::OriginalName("STUN_OR_DAMAGE_ADJUSTMENTS")] StunOrDamageAdjustments = 5,
        [pbr::OriginalName("SPURT")] Spurt = 6,
        [pbr::OriginalName("ADD_GOO_VIAL")] AddGooVial = 7,
        [pbr::OriginalName("ADD_GOO_CARRIER")] AddGooCarrier = 8,
        [pbr::OriginalName("DOT")] Dot = 9,
        [pbr::OriginalName("SUMMON")] Summon = 10,
        [pbr::OriginalName("SPELL_ATTACK")] SpellAttack = 11,
        [pbr::OriginalName("MASSIVE_DAMAGE")] MassiveDamage = 12,
        [pbr::OriginalName("DAMAGE_TARGET_ADJUSTMENTS")] DamageTargetAdjustments = 13,
        [pbr::OriginalName("DAMAGE_TARGET")] DamageTarget = 14,
        [pbr::OriginalName("CARD_RETURN")] CardReturn = 15,
        [pbr::OriginalName("WEAPON")] Weapon = 16,
        [pbr::OriginalName("CHANGE_STAT_OF_CREATURES_BY_TYPE")] ChangeStatOfCreaturesByType = 17,
        [pbr::OriginalName("ATTACK_NUMBER_OF_TIMES_PER_TURN")] AttackNumberOfTimesPerTurn = 18,
        [pbr::OriginalName("DRAW_CARD")] DrawCard = 19,
        [pbr::OriginalName("DEVOUR_ZOMBIES_AND_COMBINE_STATS")] DevourZombiesAndCombineStats = 20,
        [pbr::OriginalName("DESTROY_UNIT_BY_TYPE")] DestroyUnitByType = 21,
        [pbr::OriginalName("LOWER_COST_OF_CARD_IN_HAND")] LowerCostOfCardInHand = 22,
        [pbr::OriginalName("OVERFLOW_GOO")] OverflowGoo = 23,
        [pbr::OriginalName("LOSE_GOO")] LoseGoo = 24,
        [pbr::OriginalName("DISABLE_NEXT_TURN_GOO")] DisableNextTurnGoo = 25,
        [pbr::OriginalName("RAGE")] Rage = 26,
        [pbr::OriginalName("FREEZE_UNITS")] FreezeUnits = 27,
        [pbr::OriginalName("TAKE_DAMAGE_RANDOM_ENEMY")] TakeDamageRandomEnemy = 28,
        [pbr::OriginalName("TAKE_CONTROL_ENEMY_UNIT")] TakeControlEnemyUnit = 29,
        [pbr::OriginalName("GUARD")] Guard = 30,
        [pbr::OriginalName("DESTROY_FROZEN_UNIT")] DestroyFrozenUnit = 31,
        [pbr::OriginalName("USE_ALL_GOO_TO_INCREASE_STATS")] UseAllGooToIncreaseStats = 32,
        [pbr::OriginalName("FIRST_UNIT_IN_PLAY")] FirstUnitInPlay = 33,
        [pbr::OriginalName("ALLY_UNITS_OF_TYPE_IN_PLAY_GET_STATS")] AllyUnitsOfTypeInPlayGetStats = 34,
        [pbr::OriginalName("DAMAGE_ENEMY_UNITS_AND_FREEZE_THEM")] DamageEnemyUnitsAndFreezeThem = 35,
        [pbr::OriginalName("RETURN_UNITS_ON_BOARD_TO_OWNERS_DECKS")] ReturnUnitsOnBoardToOwnersDecks = 36,
        [pbr::OriginalName("TAKE_UNIT_TYPE_TO_ADJACENT_ALLY_UNITS")] TakeUnitTypeToAdjacentAllyUnits = 37,
        [pbr::OriginalName("ENEMY_THAT_ATTACKS_BECOME_FROZEN")] EnemyThatAttacksBecomeFrozen = 38,
        [pbr::OriginalName("TAKE_UNIT_TYPE_TO_ALLY_UNIT")] TakeUnitTypeToAllyUnit = 39,
        [pbr::OriginalName("REVIVE_DIED_UNITS_OF_TYPE_FROM_MATCH")] ReviveDiedUnitsOfTypeFromMatch = 40,
        [pbr::OriginalName("CHANGE_STAT_UNTILL_END_OF_TURN")] ChangeStatUntillEndOfTurn = 41,
        [pbr::OriginalName("ATTACK_OVERLORD")] AttackOverlord = 42,
        [pbr::OriginalName("ADJACENT_UNITS_GET_HEAVY")] AdjacentUnitsGetHeavy = 43,
        [pbr::OriginalName("FREEZE_NUMBER_OF_RANDOM_ALLY")] FreezeNumberOfRandomAlly = 44,
        [pbr::OriginalName("ADD_CARD_BY_NAME_TO_HAND")] AddCardByNameToHand = 45,
        [pbr::OriginalName("DEAL_DAMAGE_TO_THIS_AND_ADJACENT_UNITS")] DealDamageToThisAndAdjacentUnits = 46,
        [pbr::OriginalName("SWING")] Swing = 47,
        [pbr::OriginalName("TAKE_DEFENSE_IF_OVERLORD_HAS_LESS_DEFENSE_THAN")] TakeDefenseIfOverlordHasLessDefenseThan = 48,
        [pbr::OriginalName("GAIN_NUMBER_OF_LIFE_FOR_EACH_DAMAGE_THIS_DEALS")] GainNumberOfLifeForEachDamageThisDeals = 49,
        [pbr::OriginalName("ADDITIONAL_DAMAGE_TO_HEAVY_IN_ATTACK")] AdditionalDamageToHeavyInAttack = 50,
        [pbr::OriginalName("UNIT_WEAPON")] UnitWeapon = 51,
        [pbr::OriginalName("TAKE_DAMAGE_AT_END_OF_TURN_TO_THIS")] TakeDamageAtEndOfTurnToThis = 52,
        [pbr::OriginalName("DELAYED_LOSE_HEAVY_GAIN_ATTACK")] DelayedLoseHeavyGainAttack = 53,
        [pbr::OriginalName("DELAYED_GAIN_ATTACK")] DelayedGainAttack = 54,
        [pbr::OriginalName("REANIMATE_UNIT")] ReanimateUnit = 55,
        [pbr::OriginalName("PRIORITY_ATTACK")] PriorityAttack = 56,
        [pbr::OriginalName("DESTROY_TARGET_UNIT_AFTER_ATTACK")] DestroyTargetUnitAfterAttack = 57,
        [pbr::OriginalName("COSTS_LESS_IF_CARD_TYPE_IN_HAND")] CostsLessIfCardTypeInHand = 58,
        [pbr::OriginalName("RETURN_UNITS_ON_BOARD_TO_OWNERS_HANDS")] ReturnUnitsOnBoardToOwnersHands = 59,
        [pbr::OriginalName("REPLACE_UNITS_WITH_TYPE_ON_STRONGER_ONES")] ReplaceUnitsWithTypeOnStrongerOnes = 60,
        [pbr::OriginalName("RESTORE_DEF_RANDOMLY_SPLIT")] RestoreDefRandomlySplit = 61,
        [pbr::OriginalName("ADJACENT_UNITS_GET_GUARD")] AdjacentUnitsGetGuard = 62,
        [pbr::OriginalName("SUMMON_UNIT_FROM_HAND")] SummonUnitFromHand = 63,
        [pbr::OriginalName("DAMAGE_AND_DISTRACT_TARGET")] DamageAndDistractTarget = 64,
        [pbr::OriginalName("DRAW_CARD_IF_DAMAGED_ZOMBIE_IN_PLAY")] DrawCardIfDamagedZombieInPlay = 65,
        [pbr::OriginalName("TAKE_STAT_IF_OVERLORD_HAS_LESS_DEFENSE_THAN")] TakeStatIfOverlordHasLessDefenseThan = 66,
        [pbr::OriginalName("DAMAGE_OVERLORD_ON_COUNT_ITEMS_PLAYED")] DamageOverlordOnCountItemsPlayed = 67,
        [pbr::OriginalName("SHUFFLE_THIS_CARD_TO_DECK")] ShuffleThisCardToDeck = 68,
        [pbr::OriginalName("TAKE_DEFENSE_TO_OVERLORD_WITH_DEFENSE")] TakeDefenseToOverlordWithDefense = 69,
        [pbr::OriginalName("PUT_RANDOM_UNIT_FROM_DECK_ON_BOARD")] PutRandomUnitFromDeckOnBoard = 70,
        [pbr::OriginalName("DISTRACT")] Distract = 71,
        [pbr::OriginalName("DAMAGE_TARGET_FREEZE_IT_IF_SURVIVES")] DamageTargetFreezeItIfSurvives = 72,
        [pbr::OriginalName("DESTROY_UNIT_BY_COST")] DestroyUnitByCost = 73,
        [pbr::OriginalName("DAMAGE_ENEMY_OR_RESTORE_DEFENSE_ALLY")] DamageEnemyOrRestoreDefenseAlly = 74,
        [pbr::OriginalName("TAKE_SWING_TO_UNITS")] TakeSwingToUnits = 75,
        [pbr::OriginalName("DELAYED_PLACE_COPIES_IN_PLAY_DESTROY_UNIT")] DelayedPlaceCopiesInPlayDestroyUnit = 76,
        [pbr::OriginalName("ADJACENT_UNITS_GET_STAT")] AdjacentUnitsGetStat = 77,
        [pbr::OriginalName("EXTRA_GOO_IF_UNIT_IN_PLAY")] ExtraGooIfUnitInPlay = 78,
        [pbr::OriginalName("DESTROY_UNITS")] DestroyUnits = 79,
        [pbr::OriginalName("DEAL_DAMAGE_TO_UNIT_AND_SWING")] DealDamageToUnitAndSwing = 80,
        [pbr::OriginalName("SET_ATTACK_AVAILABILITY")] SetAttackAvailability = 81,
        [pbr::OriginalName("CHOOSABLE_ABILITIES")] ChoosableAbilities = 82,
        [pbr::OriginalName("COSTS_LESS_IF_TYPE_CARD_IN_PLAY")] CostsLessIfTypeCardInPlay = 83,
        [pbr::OriginalName("GAIN_GOO")] GainGoo = 84,
        [pbr::OriginalName("BLITZ")] Blitz = 85,
        [pbr::OriginalName("DRAW_CARD_BY_FACTION")] DrawCardByFaction = 86,
      }

    }
    #endregion

  }

  public sealed partial class CardAbilitySubTrigger : pb::IMessage<CardAbilitySubTrigger> {
    private static readonly pb::MessageParser<CardAbilitySubTrigger> _parser = new pb::MessageParser<CardAbilitySubTrigger>(() => new CardAbilitySubTrigger());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardAbilitySubTrigger> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[118]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilitySubTrigger() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilitySubTrigger(CardAbilitySubTrigger other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilitySubTrigger Clone() {
      return new CardAbilitySubTrigger(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardAbilitySubTrigger);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardAbilitySubTrigger other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardAbilitySubTrigger other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CardAbilitySubTrigger message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Enum {
        [pbr::OriginalName("None")] None = 0,
        [pbr::OriginalName("OnlyThisUnitInPlay")] OnlyThisUnitInPlay = 1,
        [pbr::OriginalName("AllOtherAllyUnitsInPlay")] AllOtherAllyUnitsInPlay = 2,
        [pbr::OriginalName("AllAllyUnitsInPlay")] AllAllyUnitsInPlay = 3,
        [pbr::OriginalName("RandomUnit")] RandomUnit = 4,
        [pbr::OriginalName("AllEnemyUnitsInPlay")] AllEnemyUnitsInPlay = 5,
        [pbr::OriginalName("AllAllyUnitsByFactionInPlay")] AllAllyUnitsByFactionInPlay = 6,
        [pbr::OriginalName("ForEachFactionOfUnitInHand")] ForEachFactionOfUnitInHand = 7,
        [pbr::OriginalName("IfHasUnitsWithFactionInPlay")] IfHasUnitsWithFactionInPlay = 8,
        [pbr::OriginalName("AllyUnitsByFactionThatCost")] AllyUnitsByFactionThatCost = 9,
        [pbr::OriginalName("YourOverlord")] YourOverlord = 10,
      }

    }
    #endregion

  }

  public sealed partial class CardKind : pb::IMessage<CardKind> {
    private static readonly pb::MessageParser<CardKind> _parser = new pb::MessageParser<CardKind>(() => new CardKind());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardKind> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[119]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardKind() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardKind(CardKind other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardKind Clone() {
      return new CardKind(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardKind);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardKind other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardKind other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CardKind message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Enum {
        [pbr::OriginalName("UNDEFINED")] Undefined = 0,
        [pbr::OriginalName("CREATURE")] Creature = 1,
        [pbr::OriginalName("SPELL")] Spell = 2,
      }

    }
    #endregion

  }

  public sealed partial class AffectObjectType : pb::IMessage<AffectObjectType> {
    private static readonly pb::MessageParser<AffectObjectType> _parser = new pb::MessageParser<AffectObjectType>(() => new AffectObjectType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AffectObjectType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[120]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AffectObjectType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AffectObjectType(AffectObjectType other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AffectObjectType Clone() {
      return new AffectObjectType(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AffectObjectType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AffectObjectType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AffectObjectType other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AffectObjectType message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Enum {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("PLAYER")] Player = 1,
        [pbr::OriginalName("CHARACTER")] Character = 2,
        [pbr::OriginalName("CARD")] Card = 3,
      }

    }
    #endregion

  }

  public sealed partial class CreatureRank : pb::IMessage<CreatureRank> {
    private static readonly pb::MessageParser<CreatureRank> _parser = new pb::MessageParser<CreatureRank>(() => new CreatureRank());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreatureRank> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[121]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatureRank() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatureRank(CreatureRank other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatureRank Clone() {
      return new CreatureRank(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreatureRank);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreatureRank other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreatureRank other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CreatureRank message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Enum {
        [pbr::OriginalName("UNDEFINED")] Undefined = 0,
        [pbr::OriginalName("MINION")] Minion = 1,
        [pbr::OriginalName("OFFICER")] Officer = 2,
        [pbr::OriginalName("COMMANDER")] Commander = 3,
        [pbr::OriginalName("GENERAL")] General = 4,
      }

    }
    #endregion

  }

  public sealed partial class CreatureType : pb::IMessage<CreatureType> {
    private static readonly pb::MessageParser<CreatureType> _parser = new pb::MessageParser<CreatureType>(() => new CreatureType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreatureType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[122]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatureType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatureType(CreatureType other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatureType Clone() {
      return new CreatureType(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreatureType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreatureType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreatureType other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CreatureType message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Enum {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("WALKER")] Walker = 1,
        [pbr::OriginalName("FERAL")] Feral = 2,
        [pbr::OriginalName("HEAVY")] Heavy = 3,
      }

    }
    #endregion

  }

  public sealed partial class CardSetType : pb::IMessage<CardSetType> {
    private static readonly pb::MessageParser<CardSetType> _parser = new pb::MessageParser<CardSetType>(() => new CardSetType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardSetType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[123]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardSetType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardSetType(CardSetType other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardSetType Clone() {
      return new CardSetType(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardSetType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardSetType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardSetType other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CardSetType message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Enum {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("FIRE")] Fire = 1,
        [pbr::OriginalName("WATER")] Water = 2,
        [pbr::OriginalName("EARTH")] Earth = 3,
        [pbr::OriginalName("AIR")] Air = 4,
        [pbr::OriginalName("LIFE")] Life = 5,
        [pbr::OriginalName("TOXIC")] Toxic = 6,
        [pbr::OriginalName("ITEM")] Item = 7,
        [pbr::OriginalName("OTHERS")] Others = 8,
      }

    }
    #endregion

  }

  public sealed partial class GameState : pb::IMessage<GameState> {
    private static readonly pb::MessageParser<GameState> _parser = new pb::MessageParser<GameState>(() => new GameState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[124]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState(GameState other) : this() {
      id_ = other.id_;
      isEnded_ = other.isEnded_;
      currentPlayerIndex_ = other.currentPlayerIndex_;
      playerStates_ = other.playerStates_.Clone();
      currentActionIndex_ = other.currentActionIndex_;
      playerActions_ = other.playerActions_.Clone();
      randomSeed_ = other.randomSeed_;
      winner_ = other.winner_;
      version_ = other.version_;
      createdAt_ = other.createdAt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState Clone() {
      return new GameState(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "isEnded" field.</summary>
    public const int IsEndedFieldNumber = 2;
    private bool isEnded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEnded {
      get { return isEnded_; }
      set {
        isEnded_ = value;
      }
    }

    /// <summary>Field number for the "currentPlayerIndex" field.</summary>
    public const int CurrentPlayerIndexFieldNumber = 3;
    private int currentPlayerIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentPlayerIndex {
      get { return currentPlayerIndex_; }
      set {
        currentPlayerIndex_ = value;
      }
    }

    /// <summary>Field number for the "playerStates" field.</summary>
    public const int PlayerStatesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.PlayerState> _repeated_playerStates_codec
        = pb::FieldCodec.ForMessage(34, global::Loom.ZombieBattleground.Protobuf.PlayerState.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerState> playerStates_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerState>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerState> PlayerStates {
      get { return playerStates_; }
    }

    /// <summary>Field number for the "currentActionIndex" field.</summary>
    public const int CurrentActionIndexFieldNumber = 5;
    private long currentActionIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurrentActionIndex {
      get { return currentActionIndex_; }
      set {
        currentActionIndex_ = value;
      }
    }

    /// <summary>Field number for the "playerActions" field.</summary>
    public const int PlayerActionsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.PlayerAction> _repeated_playerActions_codec
        = pb::FieldCodec.ForMessage(50, global::Loom.ZombieBattleground.Protobuf.PlayerAction.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerAction> playerActions_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerAction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerAction> PlayerActions {
      get { return playerActions_; }
    }

    /// <summary>Field number for the "randomSeed" field.</summary>
    public const int RandomSeedFieldNumber = 7;
    private long randomSeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RandomSeed {
      get { return randomSeed_; }
      set {
        randomSeed_ = value;
      }
    }

    /// <summary>Field number for the "winner" field.</summary>
    public const int WinnerFieldNumber = 8;
    private string winner_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Winner {
      get { return winner_; }
      set {
        winner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 9;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createdAt" field.</summary>
    public const int CreatedAtFieldNumber = 10;
    private long createdAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (IsEnded != other.IsEnded) return false;
      if (CurrentPlayerIndex != other.CurrentPlayerIndex) return false;
      if(!playerStates_.Equals(other.playerStates_)) return false;
      if (CurrentActionIndex != other.CurrentActionIndex) return false;
      if(!playerActions_.Equals(other.playerActions_)) return false;
      if (RandomSeed != other.RandomSeed) return false;
      if (Winner != other.Winner) return false;
      if (Version != other.Version) return false;
      if (CreatedAt != other.CreatedAt) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (IsEnded != false) hash ^= IsEnded.GetHashCode();
      if (CurrentPlayerIndex != 0) hash ^= CurrentPlayerIndex.GetHashCode();
      hash ^= playerStates_.GetHashCode();
      if (CurrentActionIndex != 0L) hash ^= CurrentActionIndex.GetHashCode();
      hash ^= playerActions_.GetHashCode();
      if (RandomSeed != 0L) hash ^= RandomSeed.GetHashCode();
      if (Winner.Length != 0) hash ^= Winner.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (CreatedAt != 0L) hash ^= CreatedAt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (IsEnded != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsEnded);
      }
      if (CurrentPlayerIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurrentPlayerIndex);
      }
      playerStates_.WriteTo(output, _repeated_playerStates_codec);
      if (CurrentActionIndex != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(CurrentActionIndex);
      }
      playerActions_.WriteTo(output, _repeated_playerActions_codec);
      if (RandomSeed != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(RandomSeed);
      }
      if (Winner.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Winner);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Version);
      }
      if (CreatedAt != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(CreatedAt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (IsEnded != false) {
        size += 1 + 1;
      }
      if (CurrentPlayerIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentPlayerIndex);
      }
      size += playerStates_.CalculateSize(_repeated_playerStates_codec);
      if (CurrentActionIndex != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrentActionIndex);
      }
      size += playerActions_.CalculateSize(_repeated_playerActions_codec);
      if (RandomSeed != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RandomSeed);
      }
      if (Winner.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Winner);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (CreatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameState other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.IsEnded != false) {
        IsEnded = other.IsEnded;
      }
      if (other.CurrentPlayerIndex != 0) {
        CurrentPlayerIndex = other.CurrentPlayerIndex;
      }
      playerStates_.Add(other.playerStates_);
      if (other.CurrentActionIndex != 0L) {
        CurrentActionIndex = other.CurrentActionIndex;
      }
      playerActions_.Add(other.playerActions_);
      if (other.RandomSeed != 0L) {
        RandomSeed = other.RandomSeed;
      }
      if (other.Winner.Length != 0) {
        Winner = other.Winner;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.CreatedAt != 0L) {
        CreatedAt = other.CreatedAt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            IsEnded = input.ReadBool();
            break;
          }
          case 24: {
            CurrentPlayerIndex = input.ReadInt32();
            break;
          }
          case 34: {
            playerStates_.AddEntriesFrom(input, _repeated_playerStates_codec);
            break;
          }
          case 40: {
            CurrentActionIndex = input.ReadInt64();
            break;
          }
          case 50: {
            playerActions_.AddEntriesFrom(input, _repeated_playerActions_codec);
            break;
          }
          case 56: {
            RandomSeed = input.ReadInt64();
            break;
          }
          case 66: {
            Winner = input.ReadString();
            break;
          }
          case 74: {
            Version = input.ReadString();
            break;
          }
          case 80: {
            CreatedAt = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardChoosableAbility : pb::IMessage<CardChoosableAbility> {
    private static readonly pb::MessageParser<CardChoosableAbility> _parser = new pb::MessageParser<CardChoosableAbility>(() => new CardChoosableAbility());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardChoosableAbility> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[125]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardChoosableAbility() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardChoosableAbility(CardChoosableAbility other) : this() {
      description_ = other.description_;
      abilityData_ = other.abilityData_ != null ? other.abilityData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardChoosableAbility Clone() {
      return new CardChoosableAbility(this);
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 1;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ability_data" field.</summary>
    public const int AbilityDataFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.CardAbility abilityData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardAbility AbilityData {
      get { return abilityData_; }
      set {
        abilityData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardChoosableAbility);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardChoosableAbility other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Description != other.Description) return false;
      if (!object.Equals(AbilityData, other.AbilityData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (abilityData_ != null) hash ^= AbilityData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Description.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Description);
      }
      if (abilityData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AbilityData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (abilityData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AbilityData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardChoosableAbility other) {
      if (other == null) {
        return;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.abilityData_ != null) {
        if (abilityData_ == null) {
          abilityData_ = new global::Loom.ZombieBattleground.Protobuf.CardAbility();
        }
        AbilityData.MergeFrom(other.AbilityData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Description = input.ReadString();
            break;
          }
          case 18: {
            if (abilityData_ == null) {
              abilityData_ = new global::Loom.ZombieBattleground.Protobuf.CardAbility();
            }
            input.ReadMessage(abilityData_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardAbility : pb::IMessage<CardAbility> {
    private static readonly pb::MessageParser<CardAbility> _parser = new pb::MessageParser<CardAbility>(() => new CardAbility());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardAbility> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[126]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbility() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbility(CardAbility other) : this() {
      type_ = other.type_;
      activityType_ = other.activityType_;
      trigger_ = other.trigger_;
      targetTypes_ = other.targetTypes_.Clone();
      stat_ = other.stat_;
      set_ = other.set_;
      effect_ = other.effect_;
      attackRestriction_ = other.attackRestriction_;
      targetCardType_ = other.targetCardType_;
      targetUnitSpecialStatus_ = other.targetUnitSpecialStatus_;
      targetUnitType_ = other.targetUnitType_;
      value_ = other.value_;
      attack_ = other.attack_;
      defense_ = other.defense_;
      name_ = other.name_;
      turns_ = other.turns_;
      count_ = other.count_;
      delay_ = other.delay_;
      visualEffectsToPlay_ = other.visualEffectsToPlay_.Clone();
      gameMechanicDescriptionType_ = other.gameMechanicDescriptionType_;
      targetSet_ = other.targetSet_;
      subTrigger_ = other.subTrigger_;
      choosableAbilities_ = other.choosableAbilities_.Clone();
      defense2_ = other.defense2_;
      cost_ = other.cost_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbility Clone() {
      return new CardAbility(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.CardAbilityType.Types.Enum type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardAbilityType.Types.Enum Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "activityType" field.</summary>
    public const int ActivityTypeFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.CardAbilityActivityType.Types.Enum activityType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardAbilityActivityType.Types.Enum ActivityType {
      get { return activityType_; }
      set {
        activityType_ = value;
      }
    }

    /// <summary>Field number for the "trigger" field.</summary>
    public const int TriggerFieldNumber = 3;
    private global::Loom.ZombieBattleground.Protobuf.CardAbilityTrigger.Types.Enum trigger_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardAbilityTrigger.Types.Enum Trigger {
      get { return trigger_; }
      set {
        trigger_ = value;
      }
    }

    /// <summary>Field number for the "targetTypes" field.</summary>
    public const int TargetTypesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardAbilityTarget.Types.Enum> _repeated_targetTypes_codec
        = pb::FieldCodec.ForEnum(34, x => (int) x, x => (global::Loom.ZombieBattleground.Protobuf.CardAbilityTarget.Types.Enum) x);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardAbilityTarget.Types.Enum> targetTypes_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardAbilityTarget.Types.Enum>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardAbilityTarget.Types.Enum> TargetTypes {
      get { return targetTypes_; }
    }

    /// <summary>Field number for the "stat" field.</summary>
    public const int StatFieldNumber = 5;
    private global::Loom.ZombieBattleground.Protobuf.StatType.Types.Enum stat_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.StatType.Types.Enum Stat {
      get { return stat_; }
      set {
        stat_ = value;
      }
    }

    /// <summary>Field number for the "set" field.</summary>
    public const int SetFieldNumber = 6;
    private global::Loom.ZombieBattleground.Protobuf.CardSetType.Types.Enum set_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardSetType.Types.Enum Set {
      get { return set_; }
      set {
        set_ = value;
      }
    }

    /// <summary>Field number for the "effect" field.</summary>
    public const int EffectFieldNumber = 7;
    private global::Loom.ZombieBattleground.Protobuf.CardAbilityEffect.Types.Enum effect_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardAbilityEffect.Types.Enum Effect {
      get { return effect_; }
      set {
        effect_ = value;
      }
    }

    /// <summary>Field number for the "attackRestriction" field.</summary>
    public const int AttackRestrictionFieldNumber = 8;
    private global::Loom.ZombieBattleground.Protobuf.AttackRestriction.Types.Enum attackRestriction_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.AttackRestriction.Types.Enum AttackRestriction {
      get { return attackRestriction_; }
      set {
        attackRestriction_ = value;
      }
    }

    /// <summary>Field number for the "targetCardType" field.</summary>
    public const int TargetCardTypeFieldNumber = 9;
    private global::Loom.ZombieBattleground.Protobuf.CreatureType.Types.Enum targetCardType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CreatureType.Types.Enum TargetCardType {
      get { return targetCardType_; }
      set {
        targetCardType_ = value;
      }
    }

    /// <summary>Field number for the "targetUnitSpecialStatus" field.</summary>
    public const int TargetUnitSpecialStatusFieldNumber = 10;
    private global::Loom.ZombieBattleground.Protobuf.UnitSpecialStatus.Types.Enum targetUnitSpecialStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.UnitSpecialStatus.Types.Enum TargetUnitSpecialStatus {
      get { return targetUnitSpecialStatus_; }
      set {
        targetUnitSpecialStatus_ = value;
      }
    }

    /// <summary>Field number for the "targetUnitType" field.</summary>
    public const int TargetUnitTypeFieldNumber = 11;
    private global::Loom.ZombieBattleground.Protobuf.CreatureType.Types.Enum targetUnitType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CreatureType.Types.Enum TargetUnitType {
      get { return targetUnitType_; }
      set {
        targetUnitType_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 12;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "attack" field.</summary>
    public const int AttackFieldNumber = 13;
    private int attack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Attack {
      get { return attack_; }
      set {
        attack_ = value;
      }
    }

    /// <summary>Field number for the "defense" field.</summary>
    public const int DefenseFieldNumber = 14;
    private int defense_;
    /// <summary>
    /// FIXME: Health in client code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Defense {
      get { return defense_; }
      set {
        defense_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 15;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "turns" field.</summary>
    public const int TurnsFieldNumber = 16;
    private int turns_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Turns {
      get { return turns_; }
      set {
        turns_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 17;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "delay" field.</summary>
    public const int DelayFieldNumber = 18;
    private int delay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Delay {
      get { return delay_; }
      set {
        delay_ = value;
      }
    }

    /// <summary>Field number for the "VisualEffectsToPlay" field.</summary>
    public const int VisualEffectsToPlayFieldNumber = 19;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardAbility.Types.VisualEffectInfo> _repeated_visualEffectsToPlay_codec
        = pb::FieldCodec.ForMessage(154, global::Loom.ZombieBattleground.Protobuf.CardAbility.Types.VisualEffectInfo.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardAbility.Types.VisualEffectInfo> visualEffectsToPlay_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardAbility.Types.VisualEffectInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardAbility.Types.VisualEffectInfo> VisualEffectsToPlay {
      get { return visualEffectsToPlay_; }
    }

    /// <summary>Field number for the "gameMechanicDescriptionType" field.</summary>
    public const int GameMechanicDescriptionTypeFieldNumber = 20;
    private global::Loom.ZombieBattleground.Protobuf.GameMechanicDescriptionType.Types.Enum gameMechanicDescriptionType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.GameMechanicDescriptionType.Types.Enum GameMechanicDescriptionType {
      get { return gameMechanicDescriptionType_; }
      set {
        gameMechanicDescriptionType_ = value;
      }
    }

    /// <summary>Field number for the "target_set" field.</summary>
    public const int TargetSetFieldNumber = 21;
    private global::Loom.ZombieBattleground.Protobuf.CardSetType.Types.Enum targetSet_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardSetType.Types.Enum TargetSet {
      get { return targetSet_; }
      set {
        targetSet_ = value;
      }
    }

    /// <summary>Field number for the "sub_trigger" field.</summary>
    public const int SubTriggerFieldNumber = 22;
    private global::Loom.ZombieBattleground.Protobuf.CardAbilitySubTrigger.Types.Enum subTrigger_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardAbilitySubTrigger.Types.Enum SubTrigger {
      get { return subTrigger_; }
      set {
        subTrigger_ = value;
      }
    }

    /// <summary>Field number for the "choosable_abilities" field.</summary>
    public const int ChoosableAbilitiesFieldNumber = 23;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardChoosableAbility> _repeated_choosableAbilities_codec
        = pb::FieldCodec.ForMessage(186, global::Loom.ZombieBattleground.Protobuf.CardChoosableAbility.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardChoosableAbility> choosableAbilities_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardChoosableAbility>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardChoosableAbility> ChoosableAbilities {
      get { return choosableAbilities_; }
    }

    /// <summary>Field number for the "defense2" field.</summary>
    public const int Defense2FieldNumber = 24;
    private int defense2_;
    /// <summary>
    /// FIXME: Defense in client code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Defense2 {
      get { return defense2_; }
      set {
        defense2_ = value;
      }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 25;
    private int cost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardAbility);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardAbility other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (ActivityType != other.ActivityType) return false;
      if (Trigger != other.Trigger) return false;
      if(!targetTypes_.Equals(other.targetTypes_)) return false;
      if (Stat != other.Stat) return false;
      if (Set != other.Set) return false;
      if (Effect != other.Effect) return false;
      if (AttackRestriction != other.AttackRestriction) return false;
      if (TargetCardType != other.TargetCardType) return false;
      if (TargetUnitSpecialStatus != other.TargetUnitSpecialStatus) return false;
      if (TargetUnitType != other.TargetUnitType) return false;
      if (Value != other.Value) return false;
      if (Attack != other.Attack) return false;
      if (Defense != other.Defense) return false;
      if (Name != other.Name) return false;
      if (Turns != other.Turns) return false;
      if (Count != other.Count) return false;
      if (Delay != other.Delay) return false;
      if(!visualEffectsToPlay_.Equals(other.visualEffectsToPlay_)) return false;
      if (GameMechanicDescriptionType != other.GameMechanicDescriptionType) return false;
      if (TargetSet != other.TargetSet) return false;
      if (SubTrigger != other.SubTrigger) return false;
      if(!choosableAbilities_.Equals(other.choosableAbilities_)) return false;
      if (Defense2 != other.Defense2) return false;
      if (Cost != other.Cost) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (ActivityType != 0) hash ^= ActivityType.GetHashCode();
      if (Trigger != 0) hash ^= Trigger.GetHashCode();
      hash ^= targetTypes_.GetHashCode();
      if (Stat != 0) hash ^= Stat.GetHashCode();
      if (Set != 0) hash ^= Set.GetHashCode();
      if (Effect != 0) hash ^= Effect.GetHashCode();
      if (AttackRestriction != 0) hash ^= AttackRestriction.GetHashCode();
      if (TargetCardType != 0) hash ^= TargetCardType.GetHashCode();
      if (TargetUnitSpecialStatus != 0) hash ^= TargetUnitSpecialStatus.GetHashCode();
      if (TargetUnitType != 0) hash ^= TargetUnitType.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (Attack != 0) hash ^= Attack.GetHashCode();
      if (Defense != 0) hash ^= Defense.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Turns != 0) hash ^= Turns.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Delay != 0) hash ^= Delay.GetHashCode();
      hash ^= visualEffectsToPlay_.GetHashCode();
      if (GameMechanicDescriptionType != 0) hash ^= GameMechanicDescriptionType.GetHashCode();
      if (TargetSet != 0) hash ^= TargetSet.GetHashCode();
      if (SubTrigger != 0) hash ^= SubTrigger.GetHashCode();
      hash ^= choosableAbilities_.GetHashCode();
      if (Defense2 != 0) hash ^= Defense2.GetHashCode();
      if (Cost != 0) hash ^= Cost.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (ActivityType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ActivityType);
      }
      if (Trigger != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Trigger);
      }
      targetTypes_.WriteTo(output, _repeated_targetTypes_codec);
      if (Stat != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Stat);
      }
      if (Set != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Set);
      }
      if (Effect != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Effect);
      }
      if (AttackRestriction != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) AttackRestriction);
      }
      if (TargetCardType != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) TargetCardType);
      }
      if (TargetUnitSpecialStatus != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) TargetUnitSpecialStatus);
      }
      if (TargetUnitType != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) TargetUnitType);
      }
      if (Value != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Value);
      }
      if (Attack != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Attack);
      }
      if (Defense != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Defense);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Name);
      }
      if (Turns != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Turns);
      }
      if (Count != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Count);
      }
      if (Delay != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(Delay);
      }
      visualEffectsToPlay_.WriteTo(output, _repeated_visualEffectsToPlay_codec);
      if (GameMechanicDescriptionType != 0) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) GameMechanicDescriptionType);
      }
      if (TargetSet != 0) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) TargetSet);
      }
      if (SubTrigger != 0) {
        output.WriteRawTag(176, 1);
        output.WriteEnum((int) SubTrigger);
      }
      choosableAbilities_.WriteTo(output, _repeated_choosableAbilities_codec);
      if (Defense2 != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(Defense2);
      }
      if (Cost != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(Cost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (ActivityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActivityType);
      }
      if (Trigger != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Trigger);
      }
      size += targetTypes_.CalculateSize(_repeated_targetTypes_codec);
      if (Stat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Stat);
      }
      if (Set != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Set);
      }
      if (Effect != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Effect);
      }
      if (AttackRestriction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AttackRestriction);
      }
      if (TargetCardType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TargetCardType);
      }
      if (TargetUnitSpecialStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TargetUnitSpecialStatus);
      }
      if (TargetUnitType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TargetUnitType);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (Attack != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Attack);
      }
      if (Defense != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Defense);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Turns != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Turns);
      }
      if (Count != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Delay != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Delay);
      }
      size += visualEffectsToPlay_.CalculateSize(_repeated_visualEffectsToPlay_codec);
      if (GameMechanicDescriptionType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) GameMechanicDescriptionType);
      }
      if (TargetSet != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TargetSet);
      }
      if (SubTrigger != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SubTrigger);
      }
      size += choosableAbilities_.CalculateSize(_repeated_choosableAbilities_codec);
      if (Defense2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Defense2);
      }
      if (Cost != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardAbility other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.ActivityType != 0) {
        ActivityType = other.ActivityType;
      }
      if (other.Trigger != 0) {
        Trigger = other.Trigger;
      }
      targetTypes_.Add(other.targetTypes_);
      if (other.Stat != 0) {
        Stat = other.Stat;
      }
      if (other.Set != 0) {
        Set = other.Set;
      }
      if (other.Effect != 0) {
        Effect = other.Effect;
      }
      if (other.AttackRestriction != 0) {
        AttackRestriction = other.AttackRestriction;
      }
      if (other.TargetCardType != 0) {
        TargetCardType = other.TargetCardType;
      }
      if (other.TargetUnitSpecialStatus != 0) {
        TargetUnitSpecialStatus = other.TargetUnitSpecialStatus;
      }
      if (other.TargetUnitType != 0) {
        TargetUnitType = other.TargetUnitType;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      if (other.Attack != 0) {
        Attack = other.Attack;
      }
      if (other.Defense != 0) {
        Defense = other.Defense;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Turns != 0) {
        Turns = other.Turns;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Delay != 0) {
        Delay = other.Delay;
      }
      visualEffectsToPlay_.Add(other.visualEffectsToPlay_);
      if (other.GameMechanicDescriptionType != 0) {
        GameMechanicDescriptionType = other.GameMechanicDescriptionType;
      }
      if (other.TargetSet != 0) {
        TargetSet = other.TargetSet;
      }
      if (other.SubTrigger != 0) {
        SubTrigger = other.SubTrigger;
      }
      choosableAbilities_.Add(other.choosableAbilities_);
      if (other.Defense2 != 0) {
        Defense2 = other.Defense2;
      }
      if (other.Cost != 0) {
        Cost = other.Cost;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::Loom.ZombieBattleground.Protobuf.CardAbilityType.Types.Enum) input.ReadEnum();
            break;
          }
          case 16: {
            activityType_ = (global::Loom.ZombieBattleground.Protobuf.CardAbilityActivityType.Types.Enum) input.ReadEnum();
            break;
          }
          case 24: {
            trigger_ = (global::Loom.ZombieBattleground.Protobuf.CardAbilityTrigger.Types.Enum) input.ReadEnum();
            break;
          }
          case 34:
          case 32: {
            targetTypes_.AddEntriesFrom(input, _repeated_targetTypes_codec);
            break;
          }
          case 40: {
            stat_ = (global::Loom.ZombieBattleground.Protobuf.StatType.Types.Enum) input.ReadEnum();
            break;
          }
          case 48: {
            set_ = (global::Loom.ZombieBattleground.Protobuf.CardSetType.Types.Enum) input.ReadEnum();
            break;
          }
          case 56: {
            effect_ = (global::Loom.ZombieBattleground.Protobuf.CardAbilityEffect.Types.Enum) input.ReadEnum();
            break;
          }
          case 64: {
            attackRestriction_ = (global::Loom.ZombieBattleground.Protobuf.AttackRestriction.Types.Enum) input.ReadEnum();
            break;
          }
          case 72: {
            targetCardType_ = (global::Loom.ZombieBattleground.Protobuf.CreatureType.Types.Enum) input.ReadEnum();
            break;
          }
          case 80: {
            targetUnitSpecialStatus_ = (global::Loom.ZombieBattleground.Protobuf.UnitSpecialStatus.Types.Enum) input.ReadEnum();
            break;
          }
          case 88: {
            targetUnitType_ = (global::Loom.ZombieBattleground.Protobuf.CreatureType.Types.Enum) input.ReadEnum();
            break;
          }
          case 96: {
            Value = input.ReadInt32();
            break;
          }
          case 104: {
            Attack = input.ReadInt32();
            break;
          }
          case 112: {
            Defense = input.ReadInt32();
            break;
          }
          case 122: {
            Name = input.ReadString();
            break;
          }
          case 128: {
            Turns = input.ReadInt32();
            break;
          }
          case 136: {
            Count = input.ReadInt32();
            break;
          }
          case 144: {
            Delay = input.ReadInt32();
            break;
          }
          case 154: {
            visualEffectsToPlay_.AddEntriesFrom(input, _repeated_visualEffectsToPlay_codec);
            break;
          }
          case 160: {
            gameMechanicDescriptionType_ = (global::Loom.ZombieBattleground.Protobuf.GameMechanicDescriptionType.Types.Enum) input.ReadEnum();
            break;
          }
          case 168: {
            targetSet_ = (global::Loom.ZombieBattleground.Protobuf.CardSetType.Types.Enum) input.ReadEnum();
            break;
          }
          case 176: {
            subTrigger_ = (global::Loom.ZombieBattleground.Protobuf.CardAbilitySubTrigger.Types.Enum) input.ReadEnum();
            break;
          }
          case 186: {
            choosableAbilities_.AddEntriesFrom(input, _repeated_choosableAbilities_codec);
            break;
          }
          case 192: {
            Defense2 = input.ReadInt32();
            break;
          }
          case 200: {
            Cost = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CardAbility message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class VisualEffectInfo : pb::IMessage<VisualEffectInfo> {
        private static readonly pb::MessageParser<VisualEffectInfo> _parser = new pb::MessageParser<VisualEffectInfo>(() => new VisualEffectInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<VisualEffectInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Loom.ZombieBattleground.Protobuf.CardAbility.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VisualEffectInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VisualEffectInfo(VisualEffectInfo other) : this() {
          type_ = other.type_;
          path_ = other.path_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VisualEffectInfo Clone() {
          return new VisualEffectInfo(this);
        }

        /// <summary>Field number for the "Type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::Loom.ZombieBattleground.Protobuf.CardAbility.Types.VisualEffectInfo.Types.VisualEffectType type_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.CardAbility.Types.VisualEffectInfo.Types.VisualEffectType Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "Path" field.</summary>
        public const int PathFieldNumber = 2;
        private string path_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Path {
          get { return path_; }
          set {
            path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as VisualEffectInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(VisualEffectInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Type != other.Type) return false;
          if (Path != other.Path) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Type != 0) hash ^= Type.GetHashCode();
          if (Path.Length != 0) hash ^= Path.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Type != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Type);
          }
          if (Path.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Path);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (Path.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(VisualEffectInfo other) {
          if (other == null) {
            return;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.Path.Length != 0) {
            Path = other.Path;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                type_ = (global::Loom.ZombieBattleground.Protobuf.CardAbility.Types.VisualEffectInfo.Types.VisualEffectType) input.ReadEnum();
                break;
              }
              case 18: {
                Path = input.ReadString();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the VisualEffectInfo message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum VisualEffectType {
            [pbr::OriginalName("Undefined")] Undefined = 0,
            [pbr::OriginalName("Impact")] Impact = 1,
            [pbr::OriginalName("Moving")] Moving = 2,
            [pbr::OriginalName("Impact_Heavy")] ImpactHeavy = 3,
            [pbr::OriginalName("Impact_Feral")] ImpactFeral = 4,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class CardAbilityRage : pb::IMessage<CardAbilityRage> {
    private static readonly pb::MessageParser<CardAbilityRage> _parser = new pb::MessageParser<CardAbilityRage>(() => new CardAbilityRage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardAbilityRage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[127]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityRage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityRage(CardAbilityRage other) : this() {
      addedAttack_ = other.addedAttack_;
      wasApplied_ = other.wasApplied_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityRage Clone() {
      return new CardAbilityRage(this);
    }

    /// <summary>Field number for the "addedAttack" field.</summary>
    public const int AddedAttackFieldNumber = 1;
    private int addedAttack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddedAttack {
      get { return addedAttack_; }
      set {
        addedAttack_ = value;
      }
    }

    /// <summary>Field number for the "wasApplied" field.</summary>
    public const int WasAppliedFieldNumber = 2;
    private bool wasApplied_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WasApplied {
      get { return wasApplied_; }
      set {
        wasApplied_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardAbilityRage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardAbilityRage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AddedAttack != other.AddedAttack) return false;
      if (WasApplied != other.WasApplied) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AddedAttack != 0) hash ^= AddedAttack.GetHashCode();
      if (WasApplied != false) hash ^= WasApplied.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AddedAttack != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AddedAttack);
      }
      if (WasApplied != false) {
        output.WriteRawTag(16);
        output.WriteBool(WasApplied);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AddedAttack != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddedAttack);
      }
      if (WasApplied != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardAbilityRage other) {
      if (other == null) {
        return;
      }
      if (other.AddedAttack != 0) {
        AddedAttack = other.AddedAttack;
      }
      if (other.WasApplied != false) {
        WasApplied = other.WasApplied;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AddedAttack = input.ReadInt32();
            break;
          }
          case 16: {
            WasApplied = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardAbilityPriorityAttack : pb::IMessage<CardAbilityPriorityAttack> {
    private static readonly pb::MessageParser<CardAbilityPriorityAttack> _parser = new pb::MessageParser<CardAbilityPriorityAttack>(() => new CardAbilityPriorityAttack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardAbilityPriorityAttack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[128]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityPriorityAttack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityPriorityAttack(CardAbilityPriorityAttack other) : this() {
      attackerOldDefense_ = other.attackerOldDefense_;
      targetOldDefense_ = other.targetOldDefense_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityPriorityAttack Clone() {
      return new CardAbilityPriorityAttack(this);
    }

    /// <summary>Field number for the "attackerOldDefense" field.</summary>
    public const int AttackerOldDefenseFieldNumber = 1;
    private int attackerOldDefense_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackerOldDefense {
      get { return attackerOldDefense_; }
      set {
        attackerOldDefense_ = value;
      }
    }

    /// <summary>Field number for the "targetOldDefense" field.</summary>
    public const int TargetOldDefenseFieldNumber = 2;
    private int targetOldDefense_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetOldDefense {
      get { return targetOldDefense_; }
      set {
        targetOldDefense_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardAbilityPriorityAttack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardAbilityPriorityAttack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AttackerOldDefense != other.AttackerOldDefense) return false;
      if (TargetOldDefense != other.TargetOldDefense) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AttackerOldDefense != 0) hash ^= AttackerOldDefense.GetHashCode();
      if (TargetOldDefense != 0) hash ^= TargetOldDefense.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AttackerOldDefense != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AttackerOldDefense);
      }
      if (TargetOldDefense != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetOldDefense);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AttackerOldDefense != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackerOldDefense);
      }
      if (TargetOldDefense != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetOldDefense);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardAbilityPriorityAttack other) {
      if (other == null) {
        return;
      }
      if (other.AttackerOldDefense != 0) {
        AttackerOldDefense = other.AttackerOldDefense;
      }
      if (other.TargetOldDefense != 0) {
        TargetOldDefense = other.TargetOldDefense;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AttackerOldDefense = input.ReadInt32();
            break;
          }
          case 16: {
            TargetOldDefense = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerActionOutcome : pb::IMessage<PlayerActionOutcome> {
    private static readonly pb::MessageParser<PlayerActionOutcome> _parser = new pb::MessageParser<PlayerActionOutcome>(() => new PlayerActionOutcome());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerActionOutcome> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[129]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionOutcome() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionOutcome(PlayerActionOutcome other) : this() {
      switch (other.OutcomeCase) {
        case OutcomeOneofCase.Rage:
          Rage = other.Rage.Clone();
          break;
        case OutcomeOneofCase.PriorityAttack:
          PriorityAttack = other.PriorityAttack.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionOutcome Clone() {
      return new PlayerActionOutcome(this);
    }

    /// <summary>Field number for the "rage" field.</summary>
    public const int RageFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityRageOutcome Rage {
      get { return outcomeCase_ == OutcomeOneofCase.Rage ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityRageOutcome) outcome_ : null; }
      set {
        outcome_ = value;
        outcomeCase_ = value == null ? OutcomeOneofCase.None : OutcomeOneofCase.Rage;
      }
    }

    /// <summary>Field number for the "priorityAttack" field.</summary>
    public const int PriorityAttackFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityPriorityAttackOutcome PriorityAttack {
      get { return outcomeCase_ == OutcomeOneofCase.PriorityAttack ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityPriorityAttackOutcome) outcome_ : null; }
      set {
        outcome_ = value;
        outcomeCase_ = value == null ? OutcomeOneofCase.None : OutcomeOneofCase.PriorityAttack;
      }
    }

    private object outcome_;
    /// <summary>Enum of possible cases for the "Outcome" oneof.</summary>
    public enum OutcomeOneofCase {
      None = 0,
      Rage = 1,
      PriorityAttack = 2,
    }
    private OutcomeOneofCase outcomeCase_ = OutcomeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutcomeOneofCase OutcomeCase {
      get { return outcomeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOutcome() {
      outcomeCase_ = OutcomeOneofCase.None;
      outcome_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerActionOutcome);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerActionOutcome other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Rage, other.Rage)) return false;
      if (!object.Equals(PriorityAttack, other.PriorityAttack)) return false;
      if (OutcomeCase != other.OutcomeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (outcomeCase_ == OutcomeOneofCase.Rage) hash ^= Rage.GetHashCode();
      if (outcomeCase_ == OutcomeOneofCase.PriorityAttack) hash ^= PriorityAttack.GetHashCode();
      hash ^= (int) outcomeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (outcomeCase_ == OutcomeOneofCase.Rage) {
        output.WriteRawTag(10);
        output.WriteMessage(Rage);
      }
      if (outcomeCase_ == OutcomeOneofCase.PriorityAttack) {
        output.WriteRawTag(18);
        output.WriteMessage(PriorityAttack);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (outcomeCase_ == OutcomeOneofCase.Rage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rage);
      }
      if (outcomeCase_ == OutcomeOneofCase.PriorityAttack) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PriorityAttack);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerActionOutcome other) {
      if (other == null) {
        return;
      }
      switch (other.OutcomeCase) {
        case OutcomeOneofCase.Rage:
          if (Rage == null) {
            Rage = new global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityRageOutcome();
          }
          Rage.MergeFrom(other.Rage);
          break;
        case OutcomeOneofCase.PriorityAttack:
          if (PriorityAttack == null) {
            PriorityAttack = new global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityPriorityAttackOutcome();
          }
          PriorityAttack.MergeFrom(other.PriorityAttack);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityRageOutcome subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityRageOutcome();
            if (outcomeCase_ == OutcomeOneofCase.Rage) {
              subBuilder.MergeFrom(Rage);
            }
            input.ReadMessage(subBuilder);
            Rage = subBuilder;
            break;
          }
          case 18: {
            global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityPriorityAttackOutcome subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Types.CardAbilityPriorityAttackOutcome();
            if (outcomeCase_ == OutcomeOneofCase.PriorityAttack) {
              subBuilder.MergeFrom(PriorityAttack);
            }
            input.ReadMessage(subBuilder);
            PriorityAttack = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PlayerActionOutcome message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class CardAbilityRageOutcome : pb::IMessage<CardAbilityRageOutcome> {
        private static readonly pb::MessageParser<CardAbilityRageOutcome> _parser = new pb::MessageParser<CardAbilityRageOutcome>(() => new CardAbilityRageOutcome());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CardAbilityRageOutcome> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAbilityRageOutcome() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAbilityRageOutcome(CardAbilityRageOutcome other) : this() {
          instanceId_ = other.instanceId_;
          newAttack_ = other.newAttack_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAbilityRageOutcome Clone() {
          return new CardAbilityRageOutcome(this);
        }

        /// <summary>Field number for the "instanceId" field.</summary>
        public const int InstanceIdFieldNumber = 1;
        private int instanceId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int InstanceId {
          get { return instanceId_; }
          set {
            instanceId_ = value;
          }
        }

        /// <summary>Field number for the "newAttack" field.</summary>
        public const int NewAttackFieldNumber = 2;
        private int newAttack_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int NewAttack {
          get { return newAttack_; }
          set {
            newAttack_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CardAbilityRageOutcome);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CardAbilityRageOutcome other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (InstanceId != other.InstanceId) return false;
          if (NewAttack != other.NewAttack) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (InstanceId != 0) hash ^= InstanceId.GetHashCode();
          if (NewAttack != 0) hash ^= NewAttack.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (InstanceId != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(InstanceId);
          }
          if (NewAttack != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(NewAttack);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (InstanceId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(InstanceId);
          }
          if (NewAttack != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewAttack);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CardAbilityRageOutcome other) {
          if (other == null) {
            return;
          }
          if (other.InstanceId != 0) {
            InstanceId = other.InstanceId;
          }
          if (other.NewAttack != 0) {
            NewAttack = other.NewAttack;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                InstanceId = input.ReadInt32();
                break;
              }
              case 16: {
                NewAttack = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class CardAbilityPriorityAttackOutcome : pb::IMessage<CardAbilityPriorityAttackOutcome> {
        private static readonly pb::MessageParser<CardAbilityPriorityAttackOutcome> _parser = new pb::MessageParser<CardAbilityPriorityAttackOutcome>(() => new CardAbilityPriorityAttackOutcome());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CardAbilityPriorityAttackOutcome> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAbilityPriorityAttackOutcome() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAbilityPriorityAttackOutcome(CardAbilityPriorityAttackOutcome other) : this() {
          instanceId_ = other.instanceId_;
          newDefense_ = other.newDefense_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAbilityPriorityAttackOutcome Clone() {
          return new CardAbilityPriorityAttackOutcome(this);
        }

        /// <summary>Field number for the "instanceId" field.</summary>
        public const int InstanceIdFieldNumber = 1;
        private int instanceId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int InstanceId {
          get { return instanceId_; }
          set {
            instanceId_ = value;
          }
        }

        /// <summary>Field number for the "newDefense" field.</summary>
        public const int NewDefenseFieldNumber = 2;
        private int newDefense_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int NewDefense {
          get { return newDefense_; }
          set {
            newDefense_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CardAbilityPriorityAttackOutcome);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CardAbilityPriorityAttackOutcome other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (InstanceId != other.InstanceId) return false;
          if (NewDefense != other.NewDefense) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (InstanceId != 0) hash ^= InstanceId.GetHashCode();
          if (NewDefense != 0) hash ^= NewDefense.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (InstanceId != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(InstanceId);
          }
          if (NewDefense != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(NewDefense);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (InstanceId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(InstanceId);
          }
          if (NewDefense != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewDefense);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CardAbilityPriorityAttackOutcome other) {
          if (other == null) {
            return;
          }
          if (other.InstanceId != 0) {
            InstanceId = other.InstanceId;
          }
          if (other.NewDefense != 0) {
            NewDefense = other.NewDefense;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                InstanceId = input.ReadInt32();
                break;
              }
              case 16: {
                NewDefense = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class CardAbilityInstance : pb::IMessage<CardAbilityInstance> {
    private static readonly pb::MessageParser<CardAbilityInstance> _parser = new pb::MessageParser<CardAbilityInstance>(() => new CardAbilityInstance());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardAbilityInstance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[130]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityInstance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityInstance(CardAbilityInstance other) : this() {
      switch (other.AbilityTypeCase) {
        case AbilityTypeOneofCase.Rage:
          Rage = other.Rage.Clone();
          break;
        case AbilityTypeOneofCase.PriorityAttack:
          PriorityAttack = other.PriorityAttack.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAbilityInstance Clone() {
      return new CardAbilityInstance(this);
    }

    /// <summary>Field number for the "rage" field.</summary>
    public const int RageFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardAbilityRage Rage {
      get { return abilityTypeCase_ == AbilityTypeOneofCase.Rage ? (global::Loom.ZombieBattleground.Protobuf.CardAbilityRage) abilityType_ : null; }
      set {
        abilityType_ = value;
        abilityTypeCase_ = value == null ? AbilityTypeOneofCase.None : AbilityTypeOneofCase.Rage;
      }
    }

    /// <summary>Field number for the "priorityAttack" field.</summary>
    public const int PriorityAttackFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardAbilityPriorityAttack PriorityAttack {
      get { return abilityTypeCase_ == AbilityTypeOneofCase.PriorityAttack ? (global::Loom.ZombieBattleground.Protobuf.CardAbilityPriorityAttack) abilityType_ : null; }
      set {
        abilityType_ = value;
        abilityTypeCase_ = value == null ? AbilityTypeOneofCase.None : AbilityTypeOneofCase.PriorityAttack;
      }
    }

    private object abilityType_;
    /// <summary>Enum of possible cases for the "AbilityType" oneof.</summary>
    public enum AbilityTypeOneofCase {
      None = 0,
      Rage = 1,
      PriorityAttack = 2,
    }
    private AbilityTypeOneofCase abilityTypeCase_ = AbilityTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbilityTypeOneofCase AbilityTypeCase {
      get { return abilityTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAbilityType() {
      abilityTypeCase_ = AbilityTypeOneofCase.None;
      abilityType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardAbilityInstance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardAbilityInstance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Rage, other.Rage)) return false;
      if (!object.Equals(PriorityAttack, other.PriorityAttack)) return false;
      if (AbilityTypeCase != other.AbilityTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (abilityTypeCase_ == AbilityTypeOneofCase.Rage) hash ^= Rage.GetHashCode();
      if (abilityTypeCase_ == AbilityTypeOneofCase.PriorityAttack) hash ^= PriorityAttack.GetHashCode();
      hash ^= (int) abilityTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (abilityTypeCase_ == AbilityTypeOneofCase.Rage) {
        output.WriteRawTag(10);
        output.WriteMessage(Rage);
      }
      if (abilityTypeCase_ == AbilityTypeOneofCase.PriorityAttack) {
        output.WriteRawTag(18);
        output.WriteMessage(PriorityAttack);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (abilityTypeCase_ == AbilityTypeOneofCase.Rage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rage);
      }
      if (abilityTypeCase_ == AbilityTypeOneofCase.PriorityAttack) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PriorityAttack);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardAbilityInstance other) {
      if (other == null) {
        return;
      }
      switch (other.AbilityTypeCase) {
        case AbilityTypeOneofCase.Rage:
          if (Rage == null) {
            Rage = new global::Loom.ZombieBattleground.Protobuf.CardAbilityRage();
          }
          Rage.MergeFrom(other.Rage);
          break;
        case AbilityTypeOneofCase.PriorityAttack:
          if (PriorityAttack == null) {
            PriorityAttack = new global::Loom.ZombieBattleground.Protobuf.CardAbilityPriorityAttack();
          }
          PriorityAttack.MergeFrom(other.PriorityAttack);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Loom.ZombieBattleground.Protobuf.CardAbilityRage subBuilder = new global::Loom.ZombieBattleground.Protobuf.CardAbilityRage();
            if (abilityTypeCase_ == AbilityTypeOneofCase.Rage) {
              subBuilder.MergeFrom(Rage);
            }
            input.ReadMessage(subBuilder);
            Rage = subBuilder;
            break;
          }
          case 18: {
            global::Loom.ZombieBattleground.Protobuf.CardAbilityPriorityAttack subBuilder = new global::Loom.ZombieBattleground.Protobuf.CardAbilityPriorityAttack();
            if (abilityTypeCase_ == AbilityTypeOneofCase.PriorityAttack) {
              subBuilder.MergeFrom(PriorityAttack);
            }
            input.ReadMessage(subBuilder);
            PriorityAttack = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardInstance : pb::IMessage<CardInstance> {
    private static readonly pb::MessageParser<CardInstance> _parser = new pb::MessageParser<CardInstance>(() => new CardInstance());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardInstance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[131]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardInstance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardInstance(CardInstance other) : this() {
      prototype_ = other.prototype_ != null ? other.prototype_.Clone() : null;
      instanceId_ = other.instanceId_;
      instance_ = other.instance_ != null ? other.instance_.Clone() : null;
      owner_ = other.owner_;
      abilitiesInstancesInitialized_ = other.abilitiesInstancesInitialized_;
      abilitiesInstances_ = other.abilitiesInstances_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardInstance Clone() {
      return new CardInstance(this);
    }

    /// <summary>Field number for the "prototype" field.</summary>
    public const int PrototypeFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.Card prototype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Card Prototype {
      get { return prototype_; }
      set {
        prototype_ = value;
      }
    }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 2;
    private int instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "instance" field.</summary>
    public const int InstanceFieldNumber = 3;
    private global::Loom.ZombieBattleground.Protobuf.CardInstanceSpecificData instance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardInstanceSpecificData Instance {
      get { return instance_; }
      set {
        instance_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 4;
    private string owner_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Owner {
      get { return owner_; }
      set {
        owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "abilitiesInstancesInitialized" field.</summary>
    public const int AbilitiesInstancesInitializedFieldNumber = 5;
    private bool abilitiesInstancesInitialized_;
    /// <summary>
    /// FIXME: this really shouldn't be in Protobuf
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AbilitiesInstancesInitialized {
      get { return abilitiesInstancesInitialized_; }
      set {
        abilitiesInstancesInitialized_ = value;
      }
    }

    /// <summary>Field number for the "abilitiesInstances" field.</summary>
    public const int AbilitiesInstancesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardAbilityInstance> _repeated_abilitiesInstances_codec
        = pb::FieldCodec.ForMessage(50, global::Loom.ZombieBattleground.Protobuf.CardAbilityInstance.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardAbilityInstance> abilitiesInstances_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardAbilityInstance>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardAbilityInstance> AbilitiesInstances {
      get { return abilitiesInstances_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardInstance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardInstance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Prototype, other.Prototype)) return false;
      if (InstanceId != other.InstanceId) return false;
      if (!object.Equals(Instance, other.Instance)) return false;
      if (Owner != other.Owner) return false;
      if (AbilitiesInstancesInitialized != other.AbilitiesInstancesInitialized) return false;
      if(!abilitiesInstances_.Equals(other.abilitiesInstances_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (prototype_ != null) hash ^= Prototype.GetHashCode();
      if (InstanceId != 0) hash ^= InstanceId.GetHashCode();
      if (instance_ != null) hash ^= Instance.GetHashCode();
      if (Owner.Length != 0) hash ^= Owner.GetHashCode();
      if (AbilitiesInstancesInitialized != false) hash ^= AbilitiesInstancesInitialized.GetHashCode();
      hash ^= abilitiesInstances_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (prototype_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Prototype);
      }
      if (InstanceId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(InstanceId);
      }
      if (instance_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Instance);
      }
      if (Owner.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Owner);
      }
      if (AbilitiesInstancesInitialized != false) {
        output.WriteRawTag(40);
        output.WriteBool(AbilitiesInstancesInitialized);
      }
      abilitiesInstances_.WriteTo(output, _repeated_abilitiesInstances_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (prototype_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prototype);
      }
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InstanceId);
      }
      if (instance_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Instance);
      }
      if (Owner.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
      }
      if (AbilitiesInstancesInitialized != false) {
        size += 1 + 1;
      }
      size += abilitiesInstances_.CalculateSize(_repeated_abilitiesInstances_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardInstance other) {
      if (other == null) {
        return;
      }
      if (other.prototype_ != null) {
        if (prototype_ == null) {
          prototype_ = new global::Loom.ZombieBattleground.Protobuf.Card();
        }
        Prototype.MergeFrom(other.Prototype);
      }
      if (other.InstanceId != 0) {
        InstanceId = other.InstanceId;
      }
      if (other.instance_ != null) {
        if (instance_ == null) {
          instance_ = new global::Loom.ZombieBattleground.Protobuf.CardInstanceSpecificData();
        }
        Instance.MergeFrom(other.Instance);
      }
      if (other.Owner.Length != 0) {
        Owner = other.Owner;
      }
      if (other.AbilitiesInstancesInitialized != false) {
        AbilitiesInstancesInitialized = other.AbilitiesInstancesInitialized;
      }
      abilitiesInstances_.Add(other.abilitiesInstances_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (prototype_ == null) {
              prototype_ = new global::Loom.ZombieBattleground.Protobuf.Card();
            }
            input.ReadMessage(prototype_);
            break;
          }
          case 16: {
            InstanceId = input.ReadInt32();
            break;
          }
          case 26: {
            if (instance_ == null) {
              instance_ = new global::Loom.ZombieBattleground.Protobuf.CardInstanceSpecificData();
            }
            input.ReadMessage(instance_);
            break;
          }
          case 34: {
            Owner = input.ReadString();
            break;
          }
          case 40: {
            AbilitiesInstancesInitialized = input.ReadBool();
            break;
          }
          case 50: {
            abilitiesInstances_.AddEntriesFrom(input, _repeated_abilitiesInstances_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataIdOwner : pb::IMessage<DataIdOwner> {
    private static readonly pb::MessageParser<DataIdOwner> _parser = new pb::MessageParser<DataIdOwner>(() => new DataIdOwner());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataIdOwner> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[132]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataIdOwner() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataIdOwner(DataIdOwner other) : this() {
      dataId_ = other.dataId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataIdOwner Clone() {
      return new DataIdOwner(this);
    }

    /// <summary>Field number for the "dataId" field.</summary>
    public const int DataIdFieldNumber = 1;
    private int dataId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DataId {
      get { return dataId_; }
      set {
        dataId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataIdOwner);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataIdOwner other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DataId != other.DataId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DataId != 0) hash ^= DataId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DataId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DataId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DataId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataIdOwner other) {
      if (other == null) {
        return;
      }
      if (other.DataId != 0) {
        DataId = other.DataId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DataId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// (interface IDeck)
  /// </summary>
  public sealed partial class CardDeck : pb::IMessage<CardDeck> {
    private static readonly pb::MessageParser<CardDeck> _parser = new pb::MessageParser<CardDeck>(() => new CardDeck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardDeck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[133]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardDeck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardDeck(CardDeck other) : this() {
      cards_ = other.cards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardDeck Clone() {
      return new CardDeck(this);
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Card> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.Card.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card> cards_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardDeck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardDeck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cards_.Equals(other.cards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cards_.WriteTo(output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardDeck other) {
      if (other == null) {
        return;
      }
      cards_.Add(other.cards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InstanceIdOwner : pb::IMessage<InstanceIdOwner> {
    private static readonly pb::MessageParser<InstanceIdOwner> _parser = new pb::MessageParser<InstanceIdOwner>(() => new InstanceIdOwner());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InstanceIdOwner> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[134]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstanceIdOwner() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstanceIdOwner(InstanceIdOwner other) : this() {
      instanceId_ = other.instanceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstanceIdOwner Clone() {
      return new InstanceIdOwner(this);
    }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private int instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InstanceIdOwner);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InstanceIdOwner other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstanceId != other.InstanceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstanceId != 0) hash ^= InstanceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(InstanceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InstanceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InstanceIdOwner other) {
      if (other == null) {
        return;
      }
      if (other.InstanceId != 0) {
        InstanceId = other.InstanceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InstanceId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OverlordInstance : pb::IMessage<OverlordInstance> {
    private static readonly pb::MessageParser<OverlordInstance> _parser = new pb::MessageParser<OverlordInstance>(() => new OverlordInstance());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OverlordInstance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[135]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordInstance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordInstance(OverlordInstance other) : this() {
      instanceId_ = other.instanceId_;
      prototype_ = other.prototype_ != null ? other.prototype_.Clone() : null;
      firstSkill_ = other.firstSkill_ != null ? other.firstSkill_.Clone() : null;
      secondSkill_ = other.secondSkill_ != null ? other.secondSkill_.Clone() : null;
      defense_ = other.defense_;
      goo_ = other.goo_;
      maxGoo_ = other.maxGoo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordInstance Clone() {
      return new OverlordInstance(this);
    }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private int instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "prototype" field.</summary>
    public const int PrototypeFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.OverlordPrototype prototype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.OverlordPrototype Prototype {
      get { return prototype_; }
      set {
        prototype_ = value;
      }
    }

    /// <summary>Field number for the "firstSkill" field.</summary>
    public const int FirstSkillFieldNumber = 3;
    private global::Loom.ZombieBattleground.Protobuf.OverlordSkillInstance firstSkill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.OverlordSkillInstance FirstSkill {
      get { return firstSkill_; }
      set {
        firstSkill_ = value;
      }
    }

    /// <summary>Field number for the "secondSkill" field.</summary>
    public const int SecondSkillFieldNumber = 4;
    private global::Loom.ZombieBattleground.Protobuf.OverlordSkillInstance secondSkill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.OverlordSkillInstance SecondSkill {
      get { return secondSkill_; }
      set {
        secondSkill_ = value;
      }
    }

    /// <summary>Field number for the "defense" field.</summary>
    public const int DefenseFieldNumber = 5;
    private int defense_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Defense {
      get { return defense_; }
      set {
        defense_ = value;
      }
    }

    /// <summary>Field number for the "goo" field.</summary>
    public const int GooFieldNumber = 6;
    private int goo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Goo {
      get { return goo_; }
      set {
        goo_ = value;
      }
    }

    /// <summary>Field number for the "maxGoo" field.</summary>
    public const int MaxGooFieldNumber = 7;
    private int maxGoo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxGoo {
      get { return maxGoo_; }
      set {
        maxGoo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OverlordInstance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OverlordInstance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstanceId != other.InstanceId) return false;
      if (!object.Equals(Prototype, other.Prototype)) return false;
      if (!object.Equals(FirstSkill, other.FirstSkill)) return false;
      if (!object.Equals(SecondSkill, other.SecondSkill)) return false;
      if (Defense != other.Defense) return false;
      if (Goo != other.Goo) return false;
      if (MaxGoo != other.MaxGoo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstanceId != 0) hash ^= InstanceId.GetHashCode();
      if (prototype_ != null) hash ^= Prototype.GetHashCode();
      if (firstSkill_ != null) hash ^= FirstSkill.GetHashCode();
      if (secondSkill_ != null) hash ^= SecondSkill.GetHashCode();
      if (Defense != 0) hash ^= Defense.GetHashCode();
      if (Goo != 0) hash ^= Goo.GetHashCode();
      if (MaxGoo != 0) hash ^= MaxGoo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(InstanceId);
      }
      if (prototype_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Prototype);
      }
      if (firstSkill_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(FirstSkill);
      }
      if (secondSkill_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SecondSkill);
      }
      if (Defense != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Defense);
      }
      if (Goo != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Goo);
      }
      if (MaxGoo != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MaxGoo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InstanceId);
      }
      if (prototype_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prototype);
      }
      if (firstSkill_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FirstSkill);
      }
      if (secondSkill_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SecondSkill);
      }
      if (Defense != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Defense);
      }
      if (Goo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Goo);
      }
      if (MaxGoo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxGoo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OverlordInstance other) {
      if (other == null) {
        return;
      }
      if (other.InstanceId != 0) {
        InstanceId = other.InstanceId;
      }
      if (other.prototype_ != null) {
        if (prototype_ == null) {
          prototype_ = new global::Loom.ZombieBattleground.Protobuf.OverlordPrototype();
        }
        Prototype.MergeFrom(other.Prototype);
      }
      if (other.firstSkill_ != null) {
        if (firstSkill_ == null) {
          firstSkill_ = new global::Loom.ZombieBattleground.Protobuf.OverlordSkillInstance();
        }
        FirstSkill.MergeFrom(other.FirstSkill);
      }
      if (other.secondSkill_ != null) {
        if (secondSkill_ == null) {
          secondSkill_ = new global::Loom.ZombieBattleground.Protobuf.OverlordSkillInstance();
        }
        SecondSkill.MergeFrom(other.SecondSkill);
      }
      if (other.Defense != 0) {
        Defense = other.Defense;
      }
      if (other.Goo != 0) {
        Goo = other.Goo;
      }
      if (other.MaxGoo != 0) {
        MaxGoo = other.MaxGoo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InstanceId = input.ReadInt32();
            break;
          }
          case 18: {
            if (prototype_ == null) {
              prototype_ = new global::Loom.ZombieBattleground.Protobuf.OverlordPrototype();
            }
            input.ReadMessage(prototype_);
            break;
          }
          case 26: {
            if (firstSkill_ == null) {
              firstSkill_ = new global::Loom.ZombieBattleground.Protobuf.OverlordSkillInstance();
            }
            input.ReadMessage(firstSkill_);
            break;
          }
          case 34: {
            if (secondSkill_ == null) {
              secondSkill_ = new global::Loom.ZombieBattleground.Protobuf.OverlordSkillInstance();
            }
            input.ReadMessage(secondSkill_);
            break;
          }
          case 40: {
            Defense = input.ReadInt32();
            break;
          }
          case 48: {
            Goo = input.ReadInt32();
            break;
          }
          case 56: {
            MaxGoo = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OverlordPrototype : pb::IMessage<OverlordPrototype> {
    private static readonly pb::MessageParser<OverlordPrototype> _parser = new pb::MessageParser<OverlordPrototype>(() => new OverlordPrototype());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OverlordPrototype> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[136]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordPrototype() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordPrototype(OverlordPrototype other) : this() {
      heroId_ = other.heroId_;
      icon_ = other.icon_;
      name_ = other.name_;
      shortDescription_ = other.shortDescription_;
      longDescription_ = other.longDescription_;
      experience_ = other.experience_;
      level_ = other.level_;
      element_ = other.element_;
      skills_ = other.skills_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordPrototype Clone() {
      return new OverlordPrototype(this);
    }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private int heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 2;
    private string icon_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shortDescription" field.</summary>
    public const int ShortDescriptionFieldNumber = 4;
    private string shortDescription_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShortDescription {
      get { return shortDescription_; }
      set {
        shortDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "longDescription" field.</summary>
    public const int LongDescriptionFieldNumber = 5;
    private string longDescription_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LongDescription {
      get { return longDescription_; }
      set {
        longDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "experience" field.</summary>
    public const int ExperienceFieldNumber = 6;
    private int experience_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Experience {
      get { return experience_; }
      set {
        experience_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 7;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "element" field.</summary>
    public const int ElementFieldNumber = 8;
    private global::Loom.ZombieBattleground.Protobuf.CardSetType.Types.Enum element_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardSetType.Types.Enum Element {
      get { return element_; }
      set {
        element_ = value;
      }
    }

    /// <summary>Field number for the "skills" field.</summary>
    public const int SkillsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.OverlordSkillPrototype> _repeated_skills_codec
        = pb::FieldCodec.ForMessage(74, global::Loom.ZombieBattleground.Protobuf.OverlordSkillPrototype.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.OverlordSkillPrototype> skills_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.OverlordSkillPrototype>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.OverlordSkillPrototype> Skills {
      get { return skills_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OverlordPrototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OverlordPrototype other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeroId != other.HeroId) return false;
      if (Icon != other.Icon) return false;
      if (Name != other.Name) return false;
      if (ShortDescription != other.ShortDescription) return false;
      if (LongDescription != other.LongDescription) return false;
      if (Experience != other.Experience) return false;
      if (Level != other.Level) return false;
      if (Element != other.Element) return false;
      if(!skills_.Equals(other.skills_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeroId != 0) hash ^= HeroId.GetHashCode();
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ShortDescription.Length != 0) hash ^= ShortDescription.GetHashCode();
      if (LongDescription.Length != 0) hash ^= LongDescription.GetHashCode();
      if (Experience != 0) hash ^= Experience.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Element != 0) hash ^= Element.GetHashCode();
      hash ^= skills_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HeroId);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Icon);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (ShortDescription.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ShortDescription);
      }
      if (LongDescription.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LongDescription);
      }
      if (Experience != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Experience);
      }
      if (Level != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Level);
      }
      if (Element != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Element);
      }
      skills_.WriteTo(output, _repeated_skills_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ShortDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShortDescription);
      }
      if (LongDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LongDescription);
      }
      if (Experience != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Experience);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Element != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Element);
      }
      size += skills_.CalculateSize(_repeated_skills_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OverlordPrototype other) {
      if (other == null) {
        return;
      }
      if (other.HeroId != 0) {
        HeroId = other.HeroId;
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ShortDescription.Length != 0) {
        ShortDescription = other.ShortDescription;
      }
      if (other.LongDescription.Length != 0) {
        LongDescription = other.LongDescription;
      }
      if (other.Experience != 0) {
        Experience = other.Experience;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Element != 0) {
        Element = other.Element;
      }
      skills_.Add(other.skills_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HeroId = input.ReadInt32();
            break;
          }
          case 18: {
            Icon = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            ShortDescription = input.ReadString();
            break;
          }
          case 42: {
            LongDescription = input.ReadString();
            break;
          }
          case 48: {
            Experience = input.ReadInt32();
            break;
          }
          case 56: {
            Level = input.ReadInt32();
            break;
          }
          case 64: {
            element_ = (global::Loom.ZombieBattleground.Protobuf.CardSetType.Types.Enum) input.ReadEnum();
            break;
          }
          case 74: {
            skills_.AddEntriesFrom(input, _repeated_skills_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class OverlordSkillInstance : pb::IMessage<OverlordSkillInstance> {
    private static readonly pb::MessageParser<OverlordSkillInstance> _parser = new pb::MessageParser<OverlordSkillInstance>(() => new OverlordSkillInstance());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OverlordSkillInstance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[137]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordSkillInstance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordSkillInstance(OverlordSkillInstance other) : this() {
      prototype_ = other.prototype_ != null ? other.prototype_.Clone() : null;
      cooldown_ = other.cooldown_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordSkillInstance Clone() {
      return new OverlordSkillInstance(this);
    }

    /// <summary>Field number for the "prototype" field.</summary>
    public const int PrototypeFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.OverlordSkillPrototype prototype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.OverlordSkillPrototype Prototype {
      get { return prototype_; }
      set {
        prototype_ = value;
      }
    }

    /// <summary>Field number for the "cooldown" field.</summary>
    public const int CooldownFieldNumber = 2;
    private int cooldown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cooldown {
      get { return cooldown_; }
      set {
        cooldown_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OverlordSkillInstance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OverlordSkillInstance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Prototype, other.Prototype)) return false;
      if (Cooldown != other.Cooldown) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (prototype_ != null) hash ^= Prototype.GetHashCode();
      if (Cooldown != 0) hash ^= Cooldown.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (prototype_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Prototype);
      }
      if (Cooldown != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Cooldown);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (prototype_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prototype);
      }
      if (Cooldown != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cooldown);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OverlordSkillInstance other) {
      if (other == null) {
        return;
      }
      if (other.prototype_ != null) {
        if (prototype_ == null) {
          prototype_ = new global::Loom.ZombieBattleground.Protobuf.OverlordSkillPrototype();
        }
        Prototype.MergeFrom(other.Prototype);
      }
      if (other.Cooldown != 0) {
        Cooldown = other.Cooldown;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (prototype_ == null) {
              prototype_ = new global::Loom.ZombieBattleground.Protobuf.OverlordSkillPrototype();
            }
            input.ReadMessage(prototype_);
            break;
          }
          case 16: {
            Cooldown = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OverlordSkillPrototype : pb::IMessage<OverlordSkillPrototype> {
    private static readonly pb::MessageParser<OverlordSkillPrototype> _parser = new pb::MessageParser<OverlordSkillPrototype>(() => new OverlordSkillPrototype());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OverlordSkillPrototype> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[138]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordSkillPrototype() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordSkillPrototype(OverlordSkillPrototype other) : this() {
      title_ = other.title_;
      skill_ = other.skill_;
      iconPath_ = other.iconPath_;
      description_ = other.description_;
      cooldown_ = other.cooldown_;
      initialCooldown_ = other.initialCooldown_;
      parameter_ = other.parameter_;
      attack_ = other.attack_;
      overlordSkillKind_ = other.overlordSkillKind_;
      skillTargetTypes_ = other.skillTargetTypes_.Clone();
      elementTargetTypes_ = other.elementTargetTypes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordSkillPrototype Clone() {
      return new OverlordSkillPrototype(this);
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 1;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "skill" field.</summary>
    public const int SkillFieldNumber = 2;
    private string skill_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Skill {
      get { return skill_; }
      set {
        skill_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "iconPath" field.</summary>
    public const int IconPathFieldNumber = 3;
    private string iconPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IconPath {
      get { return iconPath_; }
      set {
        iconPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cooldown" field.</summary>
    public const int CooldownFieldNumber = 5;
    private int cooldown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cooldown {
      get { return cooldown_; }
      set {
        cooldown_ = value;
      }
    }

    /// <summary>Field number for the "initialCooldown" field.</summary>
    public const int InitialCooldownFieldNumber = 6;
    private int initialCooldown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InitialCooldown {
      get { return initialCooldown_; }
      set {
        initialCooldown_ = value;
      }
    }

    /// <summary>Field number for the "parameter" field.</summary>
    public const int ParameterFieldNumber = 7;
    private int parameter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Parameter {
      get { return parameter_; }
      set {
        parameter_ = value;
      }
    }

    /// <summary>Field number for the "attack" field.</summary>
    public const int AttackFieldNumber = 8;
    private int attack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Attack {
      get { return attack_; }
      set {
        attack_ = value;
      }
    }

    /// <summary>Field number for the "overlordSkillKind" field.</summary>
    public const int OverlordSkillKindFieldNumber = 9;
    private global::Loom.ZombieBattleground.Protobuf.OverlordSkillKind.Types.Enum overlordSkillKind_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.OverlordSkillKind.Types.Enum OverlordSkillKind {
      get { return overlordSkillKind_; }
      set {
        overlordSkillKind_ = value;
      }
    }

    /// <summary>Field number for the "skillTargetTypes" field.</summary>
    public const int SkillTargetTypesFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.OverlordAbilityTarget.Types.Enum> _repeated_skillTargetTypes_codec
        = pb::FieldCodec.ForEnum(82, x => (int) x, x => (global::Loom.ZombieBattleground.Protobuf.OverlordAbilityTarget.Types.Enum) x);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.OverlordAbilityTarget.Types.Enum> skillTargetTypes_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.OverlordAbilityTarget.Types.Enum>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.OverlordAbilityTarget.Types.Enum> SkillTargetTypes {
      get { return skillTargetTypes_; }
    }

    /// <summary>Field number for the "elementTargetTypes" field.</summary>
    public const int ElementTargetTypesFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardSetType.Types.Enum> _repeated_elementTargetTypes_codec
        = pb::FieldCodec.ForEnum(90, x => (int) x, x => (global::Loom.ZombieBattleground.Protobuf.CardSetType.Types.Enum) x);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardSetType.Types.Enum> elementTargetTypes_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardSetType.Types.Enum>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardSetType.Types.Enum> ElementTargetTypes {
      get { return elementTargetTypes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OverlordSkillPrototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OverlordSkillPrototype other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Title != other.Title) return false;
      if (Skill != other.Skill) return false;
      if (IconPath != other.IconPath) return false;
      if (Description != other.Description) return false;
      if (Cooldown != other.Cooldown) return false;
      if (InitialCooldown != other.InitialCooldown) return false;
      if (Parameter != other.Parameter) return false;
      if (Attack != other.Attack) return false;
      if (OverlordSkillKind != other.OverlordSkillKind) return false;
      if(!skillTargetTypes_.Equals(other.skillTargetTypes_)) return false;
      if(!elementTargetTypes_.Equals(other.elementTargetTypes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Skill.Length != 0) hash ^= Skill.GetHashCode();
      if (IconPath.Length != 0) hash ^= IconPath.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Cooldown != 0) hash ^= Cooldown.GetHashCode();
      if (InitialCooldown != 0) hash ^= InitialCooldown.GetHashCode();
      if (Parameter != 0) hash ^= Parameter.GetHashCode();
      if (Attack != 0) hash ^= Attack.GetHashCode();
      if (OverlordSkillKind != 0) hash ^= OverlordSkillKind.GetHashCode();
      hash ^= skillTargetTypes_.GetHashCode();
      hash ^= elementTargetTypes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Title.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Title);
      }
      if (Skill.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Skill);
      }
      if (IconPath.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(IconPath);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (Cooldown != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Cooldown);
      }
      if (InitialCooldown != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(InitialCooldown);
      }
      if (Parameter != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Parameter);
      }
      if (Attack != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Attack);
      }
      if (OverlordSkillKind != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) OverlordSkillKind);
      }
      skillTargetTypes_.WriteTo(output, _repeated_skillTargetTypes_codec);
      elementTargetTypes_.WriteTo(output, _repeated_elementTargetTypes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Skill.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Skill);
      }
      if (IconPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IconPath);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Cooldown != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cooldown);
      }
      if (InitialCooldown != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InitialCooldown);
      }
      if (Parameter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Parameter);
      }
      if (Attack != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Attack);
      }
      if (OverlordSkillKind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OverlordSkillKind);
      }
      size += skillTargetTypes_.CalculateSize(_repeated_skillTargetTypes_codec);
      size += elementTargetTypes_.CalculateSize(_repeated_elementTargetTypes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OverlordSkillPrototype other) {
      if (other == null) {
        return;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Skill.Length != 0) {
        Skill = other.Skill;
      }
      if (other.IconPath.Length != 0) {
        IconPath = other.IconPath;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Cooldown != 0) {
        Cooldown = other.Cooldown;
      }
      if (other.InitialCooldown != 0) {
        InitialCooldown = other.InitialCooldown;
      }
      if (other.Parameter != 0) {
        Parameter = other.Parameter;
      }
      if (other.Attack != 0) {
        Attack = other.Attack;
      }
      if (other.OverlordSkillKind != 0) {
        OverlordSkillKind = other.OverlordSkillKind;
      }
      skillTargetTypes_.Add(other.skillTargetTypes_);
      elementTargetTypes_.Add(other.elementTargetTypes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Title = input.ReadString();
            break;
          }
          case 18: {
            Skill = input.ReadString();
            break;
          }
          case 26: {
            IconPath = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 40: {
            Cooldown = input.ReadInt32();
            break;
          }
          case 48: {
            InitialCooldown = input.ReadInt32();
            break;
          }
          case 56: {
            Parameter = input.ReadInt32();
            break;
          }
          case 64: {
            Attack = input.ReadInt32();
            break;
          }
          case 72: {
            overlordSkillKind_ = (global::Loom.ZombieBattleground.Protobuf.OverlordSkillKind.Types.Enum) input.ReadEnum();
            break;
          }
          case 82:
          case 80: {
            skillTargetTypes_.AddEntriesFrom(input, _repeated_skillTargetTypes_codec);
            break;
          }
          case 90:
          case 88: {
            elementTargetTypes_.AddEntriesFrom(input, _repeated_elementTargetTypes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerActionLeaveMatch : pb::IMessage<PlayerActionLeaveMatch> {
    private static readonly pb::MessageParser<PlayerActionLeaveMatch> _parser = new pb::MessageParser<PlayerActionLeaveMatch>(() => new PlayerActionLeaveMatch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerActionLeaveMatch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[139]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionLeaveMatch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionLeaveMatch(PlayerActionLeaveMatch other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionLeaveMatch Clone() {
      return new PlayerActionLeaveMatch(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerActionLeaveMatch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerActionLeaveMatch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerActionLeaveMatch other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class PlayerActionCardPlay : pb::IMessage<PlayerActionCardPlay> {
    private static readonly pb::MessageParser<PlayerActionCardPlay> _parser = new pb::MessageParser<PlayerActionCardPlay>(() => new PlayerActionCardPlay());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerActionCardPlay> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[140]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionCardPlay() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionCardPlay(PlayerActionCardPlay other) : this() {
      card_ = other.card_ != null ? other.card_.Clone() : null;
      position_ = other.position_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionCardPlay Clone() {
      return new PlayerActionCardPlay(this);
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.CardInstance card_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardInstance Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private int position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerActionCardPlay);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerActionCardPlay other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Card, other.Card)) return false;
      if (Position != other.Position) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (card_ != null) hash ^= Card.GetHashCode();
      if (Position != 0) hash ^= Position.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (card_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Card);
      }
      if (Position != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Position);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (card_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerActionCardPlay other) {
      if (other == null) {
        return;
      }
      if (other.card_ != null) {
        if (card_ == null) {
          card_ = new global::Loom.ZombieBattleground.Protobuf.CardInstance();
        }
        Card.MergeFrom(other.Card);
      }
      if (other.Position != 0) {
        Position = other.Position;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (card_ == null) {
              card_ = new global::Loom.ZombieBattleground.Protobuf.CardInstance();
            }
            input.ReadMessage(card_);
            break;
          }
          case 16: {
            Position = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerActionRankBuff : pb::IMessage<PlayerActionRankBuff> {
    private static readonly pb::MessageParser<PlayerActionRankBuff> _parser = new pb::MessageParser<PlayerActionRankBuff>(() => new PlayerActionRankBuff());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerActionRankBuff> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[141]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionRankBuff() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionRankBuff(PlayerActionRankBuff other) : this() {
      card_ = other.card_ != null ? other.card_.Clone() : null;
      targets_ = other.targets_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionRankBuff Clone() {
      return new PlayerActionRankBuff(this);
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.CardInstance card_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardInstance Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    /// <summary>Field number for the "targets" field.</summary>
    public const int TargetsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Unit> _repeated_targets_codec
        = pb::FieldCodec.ForMessage(18, global::Loom.ZombieBattleground.Protobuf.Unit.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Unit> targets_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Unit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Unit> Targets {
      get { return targets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerActionRankBuff);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerActionRankBuff other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Card, other.Card)) return false;
      if(!targets_.Equals(other.targets_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (card_ != null) hash ^= Card.GetHashCode();
      hash ^= targets_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (card_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Card);
      }
      targets_.WriteTo(output, _repeated_targets_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (card_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
      }
      size += targets_.CalculateSize(_repeated_targets_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerActionRankBuff other) {
      if (other == null) {
        return;
      }
      if (other.card_ != null) {
        if (card_ == null) {
          card_ = new global::Loom.ZombieBattleground.Protobuf.CardInstance();
        }
        Card.MergeFrom(other.Card);
      }
      targets_.Add(other.targets_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (card_ == null) {
              card_ = new global::Loom.ZombieBattleground.Protobuf.CardInstance();
            }
            input.ReadMessage(card_);
            break;
          }
          case 18: {
            targets_.AddEntriesFrom(input, _repeated_targets_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerActionCardAttack : pb::IMessage<PlayerActionCardAttack> {
    private static readonly pb::MessageParser<PlayerActionCardAttack> _parser = new pb::MessageParser<PlayerActionCardAttack>(() => new PlayerActionCardAttack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerActionCardAttack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[142]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionCardAttack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionCardAttack(PlayerActionCardAttack other) : this() {
      attacker_ = other.attacker_ != null ? other.attacker_.Clone() : null;
      affectObjectType_ = other.affectObjectType_;
      target_ = other.target_ != null ? other.target_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionCardAttack Clone() {
      return new PlayerActionCardAttack(this);
    }

    /// <summary>Field number for the "attacker" field.</summary>
    public const int AttackerFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.CardInstance attacker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardInstance Attacker {
      get { return attacker_; }
      set {
        attacker_ = value;
      }
    }

    /// <summary>Field number for the "affectObjectType" field.</summary>
    public const int AffectObjectTypeFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.AffectObjectType.Types.Enum affectObjectType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.AffectObjectType.Types.Enum AffectObjectType {
      get { return affectObjectType_; }
      set {
        affectObjectType_ = value;
      }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 3;
    private global::Loom.ZombieBattleground.Protobuf.Unit target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Unit Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerActionCardAttack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerActionCardAttack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Attacker, other.Attacker)) return false;
      if (AffectObjectType != other.AffectObjectType) return false;
      if (!object.Equals(Target, other.Target)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (attacker_ != null) hash ^= Attacker.GetHashCode();
      if (AffectObjectType != 0) hash ^= AffectObjectType.GetHashCode();
      if (target_ != null) hash ^= Target.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (attacker_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Attacker);
      }
      if (AffectObjectType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) AffectObjectType);
      }
      if (target_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Target);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (attacker_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attacker);
      }
      if (AffectObjectType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AffectObjectType);
      }
      if (target_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerActionCardAttack other) {
      if (other == null) {
        return;
      }
      if (other.attacker_ != null) {
        if (attacker_ == null) {
          attacker_ = new global::Loom.ZombieBattleground.Protobuf.CardInstance();
        }
        Attacker.MergeFrom(other.Attacker);
      }
      if (other.AffectObjectType != 0) {
        AffectObjectType = other.AffectObjectType;
      }
      if (other.target_ != null) {
        if (target_ == null) {
          target_ = new global::Loom.ZombieBattleground.Protobuf.Unit();
        }
        Target.MergeFrom(other.Target);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (attacker_ == null) {
              attacker_ = new global::Loom.ZombieBattleground.Protobuf.CardInstance();
            }
            input.ReadMessage(attacker_);
            break;
          }
          case 16: {
            affectObjectType_ = (global::Loom.ZombieBattleground.Protobuf.AffectObjectType.Types.Enum) input.ReadEnum();
            break;
          }
          case 26: {
            if (target_ == null) {
              target_ = new global::Loom.ZombieBattleground.Protobuf.Unit();
            }
            input.ReadMessage(target_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerActionCardAbilityUsed : pb::IMessage<PlayerActionCardAbilityUsed> {
    private static readonly pb::MessageParser<PlayerActionCardAbilityUsed> _parser = new pb::MessageParser<PlayerActionCardAbilityUsed>(() => new PlayerActionCardAbilityUsed());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerActionCardAbilityUsed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[143]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionCardAbilityUsed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionCardAbilityUsed(PlayerActionCardAbilityUsed other) : this() {
      card_ = other.card_ != null ? other.card_.Clone() : null;
      cardKind_ = other.cardKind_;
      targets_ = other.targets_.Clone();
      abilityType_ = other.abilityType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionCardAbilityUsed Clone() {
      return new PlayerActionCardAbilityUsed(this);
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 1;
    private global::Loom.ZombieBattleground.Protobuf.CardInstance card_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardInstance Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    /// <summary>Field number for the "cardKind" field.</summary>
    public const int CardKindFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.CardKind.Types.Enum cardKind_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardKind.Types.Enum CardKind {
      get { return cardKind_; }
      set {
        cardKind_ = value;
      }
    }

    /// <summary>Field number for the "targets" field.</summary>
    public const int TargetsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Unit> _repeated_targets_codec
        = pb::FieldCodec.ForMessage(26, global::Loom.ZombieBattleground.Protobuf.Unit.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Unit> targets_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Unit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Unit> Targets {
      get { return targets_; }
    }

    /// <summary>Field number for the "AbilityType" field.</summary>
    public const int AbilityTypeFieldNumber = 4;
    private string abilityType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AbilityType {
      get { return abilityType_; }
      set {
        abilityType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerActionCardAbilityUsed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerActionCardAbilityUsed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Card, other.Card)) return false;
      if (CardKind != other.CardKind) return false;
      if(!targets_.Equals(other.targets_)) return false;
      if (AbilityType != other.AbilityType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (card_ != null) hash ^= Card.GetHashCode();
      if (CardKind != 0) hash ^= CardKind.GetHashCode();
      hash ^= targets_.GetHashCode();
      if (AbilityType.Length != 0) hash ^= AbilityType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (card_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Card);
      }
      if (CardKind != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CardKind);
      }
      targets_.WriteTo(output, _repeated_targets_codec);
      if (AbilityType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AbilityType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (card_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
      }
      if (CardKind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CardKind);
      }
      size += targets_.CalculateSize(_repeated_targets_codec);
      if (AbilityType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AbilityType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerActionCardAbilityUsed other) {
      if (other == null) {
        return;
      }
      if (other.card_ != null) {
        if (card_ == null) {
          card_ = new global::Loom.ZombieBattleground.Protobuf.CardInstance();
        }
        Card.MergeFrom(other.Card);
      }
      if (other.CardKind != 0) {
        CardKind = other.CardKind;
      }
      targets_.Add(other.targets_);
      if (other.AbilityType.Length != 0) {
        AbilityType = other.AbilityType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (card_ == null) {
              card_ = new global::Loom.ZombieBattleground.Protobuf.CardInstance();
            }
            input.ReadMessage(card_);
            break;
          }
          case 16: {
            cardKind_ = (global::Loom.ZombieBattleground.Protobuf.CardKind.Types.Enum) input.ReadEnum();
            break;
          }
          case 26: {
            targets_.AddEntriesFrom(input, _repeated_targets_codec);
            break;
          }
          case 34: {
            AbilityType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerActionOverlordSkillUsed : pb::IMessage<PlayerActionOverlordSkillUsed> {
    private static readonly pb::MessageParser<PlayerActionOverlordSkillUsed> _parser = new pb::MessageParser<PlayerActionOverlordSkillUsed>(() => new PlayerActionOverlordSkillUsed());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerActionOverlordSkillUsed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[144]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionOverlordSkillUsed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionOverlordSkillUsed(PlayerActionOverlordSkillUsed other) : this() {
      skillId_ = other.skillId_;
      affectObjectType_ = other.affectObjectType_;
      target_ = other.target_ != null ? other.target_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionOverlordSkillUsed Clone() {
      return new PlayerActionOverlordSkillUsed(this);
    }

    /// <summary>Field number for the "SkillId" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private long skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "affectObjectType" field.</summary>
    public const int AffectObjectTypeFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.AffectObjectType.Types.Enum affectObjectType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.AffectObjectType.Types.Enum AffectObjectType {
      get { return affectObjectType_; }
      set {
        affectObjectType_ = value;
      }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 3;
    private global::Loom.ZombieBattleground.Protobuf.Unit target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Unit Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerActionOverlordSkillUsed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerActionOverlordSkillUsed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SkillId != other.SkillId) return false;
      if (AffectObjectType != other.AffectObjectType) return false;
      if (!object.Equals(Target, other.Target)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SkillId != 0L) hash ^= SkillId.GetHashCode();
      if (AffectObjectType != 0) hash ^= AffectObjectType.GetHashCode();
      if (target_ != null) hash ^= Target.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SkillId);
      }
      if (AffectObjectType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) AffectObjectType);
      }
      if (target_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Target);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SkillId);
      }
      if (AffectObjectType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AffectObjectType);
      }
      if (target_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerActionOverlordSkillUsed other) {
      if (other == null) {
        return;
      }
      if (other.SkillId != 0L) {
        SkillId = other.SkillId;
      }
      if (other.AffectObjectType != 0) {
        AffectObjectType = other.AffectObjectType;
      }
      if (other.target_ != null) {
        if (target_ == null) {
          target_ = new global::Loom.ZombieBattleground.Protobuf.Unit();
        }
        Target.MergeFrom(other.Target);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SkillId = input.ReadInt64();
            break;
          }
          case 16: {
            affectObjectType_ = (global::Loom.ZombieBattleground.Protobuf.AffectObjectType.Types.Enum) input.ReadEnum();
            break;
          }
          case 26: {
            if (target_ == null) {
              target_ = new global::Loom.ZombieBattleground.Protobuf.Unit();
            }
            input.ReadMessage(target_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerActionDrawCard : pb::IMessage<PlayerActionDrawCard> {
    private static readonly pb::MessageParser<PlayerActionDrawCard> _parser = new pb::MessageParser<PlayerActionDrawCard>(() => new PlayerActionDrawCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerActionDrawCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[145]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionDrawCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionDrawCard(PlayerActionDrawCard other) : this() {
      cardInstance_ = other.cardInstance_ != null ? other.cardInstance_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionDrawCard Clone() {
      return new PlayerActionDrawCard(this);
    }

    /// <summary>Field number for the "cardInstance" field.</summary>
    public const int CardInstanceFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.CardInstance cardInstance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.CardInstance CardInstance {
      get { return cardInstance_; }
      set {
        cardInstance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerActionDrawCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerActionDrawCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CardInstance, other.CardInstance)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cardInstance_ != null) hash ^= CardInstance.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (cardInstance_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CardInstance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cardInstance_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardInstance);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerActionDrawCard other) {
      if (other == null) {
        return;
      }
      if (other.cardInstance_ != null) {
        if (cardInstance_ == null) {
          cardInstance_ = new global::Loom.ZombieBattleground.Protobuf.CardInstance();
        }
        CardInstance.MergeFrom(other.CardInstance);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            if (cardInstance_ == null) {
              cardInstance_ = new global::Loom.ZombieBattleground.Protobuf.CardInstance();
            }
            input.ReadMessage(cardInstance_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerActionEndTurn : pb::IMessage<PlayerActionEndTurn> {
    private static readonly pb::MessageParser<PlayerActionEndTurn> _parser = new pb::MessageParser<PlayerActionEndTurn>(() => new PlayerActionEndTurn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerActionEndTurn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[146]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionEndTurn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionEndTurn(PlayerActionEndTurn other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionEndTurn Clone() {
      return new PlayerActionEndTurn(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerActionEndTurn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerActionEndTurn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerActionEndTurn other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class PlayerActionMulligan : pb::IMessage<PlayerActionMulligan> {
    private static readonly pb::MessageParser<PlayerActionMulligan> _parser = new pb::MessageParser<PlayerActionMulligan>(() => new PlayerActionMulligan());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerActionMulligan> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[147]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionMulligan() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionMulligan(PlayerActionMulligan other) : this() {
      mulliganedCards_ = other.mulliganedCards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionMulligan Clone() {
      return new PlayerActionMulligan(this);
    }

    /// <summary>Field number for the "mulliganedCards" field.</summary>
    public const int MulliganedCardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardInstance> _repeated_mulliganedCards_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.CardInstance.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance> mulliganedCards_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance> MulliganedCards {
      get { return mulliganedCards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerActionMulligan);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerActionMulligan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!mulliganedCards_.Equals(other.mulliganedCards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= mulliganedCards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mulliganedCards_.WriteTo(output, _repeated_mulliganedCards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mulliganedCards_.CalculateSize(_repeated_mulliganedCards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerActionMulligan other) {
      if (other == null) {
        return;
      }
      mulliganedCards_.Add(other.mulliganedCards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            mulliganedCards_.AddEntriesFrom(input, _repeated_mulliganedCards_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StartGameAction : pb::IMessage<StartGameAction> {
    private static readonly pb::MessageParser<StartGameAction> _parser = new pb::MessageParser<StartGameAction>(() => new StartGameAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartGameAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[148]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartGameAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartGameAction(StartGameAction other) : this() {
      playerStates_ = other.playerStates_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartGameAction Clone() {
      return new StartGameAction(this);
    }

    /// <summary>Field number for the "playerStates" field.</summary>
    public const int PlayerStatesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.PlayerState> _repeated_playerStates_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.PlayerState.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerState> playerStates_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerState>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerState> PlayerStates {
      get { return playerStates_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartGameAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartGameAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!playerStates_.Equals(other.playerStates_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= playerStates_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      playerStates_.WriteTo(output, _repeated_playerStates_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerStates_.CalculateSize(_repeated_playerStates_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartGameAction other) {
      if (other == null) {
        return;
      }
      playerStates_.Add(other.playerStates_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            playerStates_.AddEntriesFrom(input, _repeated_playerStates_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Unit : pb::IMessage<Unit> {
    private static readonly pb::MessageParser<Unit> _parser = new pb::MessageParser<Unit>(() => new Unit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Unit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[149]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Unit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Unit(Unit other) : this() {
      instanceId_ = other.instanceId_;
      affectObjectType_ = other.affectObjectType_;
      parameter_ = other.parameter_ != null ? other.parameter_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Unit Clone() {
      return new Unit(this);
    }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private int instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "affectObjectType" field.</summary>
    public const int AffectObjectTypeFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.AffectObjectType.Types.Enum affectObjectType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.AffectObjectType.Types.Enum AffectObjectType {
      get { return affectObjectType_; }
      set {
        affectObjectType_ = value;
      }
    }

    /// <summary>Field number for the "Parameter" field.</summary>
    public const int ParameterFieldNumber = 3;
    private global::Loom.ZombieBattleground.Protobuf.Parameter parameter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Parameter Parameter {
      get { return parameter_; }
      set {
        parameter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Unit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Unit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstanceId != other.InstanceId) return false;
      if (AffectObjectType != other.AffectObjectType) return false;
      if (!object.Equals(Parameter, other.Parameter)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstanceId != 0) hash ^= InstanceId.GetHashCode();
      if (AffectObjectType != 0) hash ^= AffectObjectType.GetHashCode();
      if (parameter_ != null) hash ^= Parameter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(InstanceId);
      }
      if (AffectObjectType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) AffectObjectType);
      }
      if (parameter_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Parameter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InstanceId);
      }
      if (AffectObjectType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AffectObjectType);
      }
      if (parameter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Parameter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Unit other) {
      if (other == null) {
        return;
      }
      if (other.InstanceId != 0) {
        InstanceId = other.InstanceId;
      }
      if (other.AffectObjectType != 0) {
        AffectObjectType = other.AffectObjectType;
      }
      if (other.parameter_ != null) {
        if (parameter_ == null) {
          parameter_ = new global::Loom.ZombieBattleground.Protobuf.Parameter();
        }
        Parameter.MergeFrom(other.Parameter);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InstanceId = input.ReadInt32();
            break;
          }
          case 16: {
            affectObjectType_ = (global::Loom.ZombieBattleground.Protobuf.AffectObjectType.Types.Enum) input.ReadEnum();
            break;
          }
          case 26: {
            if (parameter_ == null) {
              parameter_ = new global::Loom.ZombieBattleground.Protobuf.Parameter();
            }
            input.ReadMessage(parameter_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Parameter : pb::IMessage<Parameter> {
    private static readonly pb::MessageParser<Parameter> _parser = new pb::MessageParser<Parameter>(() => new Parameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Parameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[150]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parameter(Parameter other) : this() {
      attack_ = other.attack_;
      defense_ = other.defense_;
      cardName_ = other.cardName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parameter Clone() {
      return new Parameter(this);
    }

    /// <summary>Field number for the "Attack" field.</summary>
    public const int AttackFieldNumber = 1;
    private int attack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Attack {
      get { return attack_; }
      set {
        attack_ = value;
      }
    }

    /// <summary>Field number for the "Defense" field.</summary>
    public const int DefenseFieldNumber = 2;
    private int defense_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Defense {
      get { return defense_; }
      set {
        defense_ = value;
      }
    }

    /// <summary>Field number for the "CardName" field.</summary>
    public const int CardNameFieldNumber = 3;
    private string cardName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CardName {
      get { return cardName_; }
      set {
        cardName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Parameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Parameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Attack != other.Attack) return false;
      if (Defense != other.Defense) return false;
      if (CardName != other.CardName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Attack != 0) hash ^= Attack.GetHashCode();
      if (Defense != 0) hash ^= Defense.GetHashCode();
      if (CardName.Length != 0) hash ^= CardName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Attack != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Attack);
      }
      if (Defense != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Defense);
      }
      if (CardName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CardName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Attack != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Attack);
      }
      if (Defense != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Defense);
      }
      if (CardName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CardName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Parameter other) {
      if (other == null) {
        return;
      }
      if (other.Attack != 0) {
        Attack = other.Attack;
      }
      if (other.Defense != 0) {
        Defense = other.Defense;
      }
      if (other.CardName.Length != 0) {
        CardName = other.CardName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Attack = input.ReadInt32();
            break;
          }
          case 16: {
            Defense = input.ReadInt32();
            break;
          }
          case 26: {
            CardName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OverlordSkillKind : pb::IMessage<OverlordSkillKind> {
    private static readonly pb::MessageParser<OverlordSkillKind> _parser = new pb::MessageParser<OverlordSkillKind>(() => new OverlordSkillKind());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OverlordSkillKind> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[151]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordSkillKind() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordSkillKind(OverlordSkillKind other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverlordSkillKind Clone() {
      return new OverlordSkillKind(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OverlordSkillKind);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OverlordSkillKind other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OverlordSkillKind other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the OverlordSkillKind message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Enum {
        [pbr::OriginalName("NONE")] None = 0,
        /// <summary>
        /// AIR
        /// </summary>
        [pbr::OriginalName("PUSH")] Push = 1,
        [pbr::OriginalName("DRAW")] Draw = 2,
        [pbr::OriginalName("WIND_SHIELD")] WindShield = 3,
        [pbr::OriginalName("LEVITATE")] Levitate = 4,
        [pbr::OriginalName("RETREAT")] Retreat = 5,
        /// <summary>
        /// EARTH
        /// </summary>
        [pbr::OriginalName("HARDEN")] Harden = 6,
        [pbr::OriginalName("STONE_SKIN")] StoneSkin = 7,
        [pbr::OriginalName("FORTIFY")] Fortify = 8,
        [pbr::OriginalName("PHALANX")] Phalanx = 9,
        [pbr::OriginalName("FORTRESS")] Fortress = 10,
        /// <summary>
        /// FIRE
        /// </summary>
        [pbr::OriginalName("FIRE_BOLT")] FireBolt = 11,
        [pbr::OriginalName("RABIES")] Rabies = 12,
        [pbr::OriginalName("FIREBALL")] Fireball = 13,
        [pbr::OriginalName("MASS_RABIES")] MassRabies = 14,
        [pbr::OriginalName("METEOR_SHOWER")] MeteorShower = 15,
        /// <summary>
        /// LIFE
        /// </summary>
        [pbr::OriginalName("HEALING_TOUCH")] HealingTouch = 16,
        [pbr::OriginalName("MEND")] Mend = 17,
        [pbr::OriginalName("RESSURECT")] Ressurect = 18,
        [pbr::OriginalName("ENHANCE")] Enhance = 19,
        [pbr::OriginalName("REANIMATE")] Reanimate = 20,
        /// <summary>
        /// TOXIC
        /// </summary>
        [pbr::OriginalName("POISON_DART")] PoisonDart = 21,
        [pbr::OriginalName("TOXIC_POWER")] ToxicPower = 22,
        [pbr::OriginalName("BREAKOUT")] Breakout = 23,
        [pbr::OriginalName("INFECT")] Infect = 24,
        [pbr::OriginalName("EPIDEMIC")] Epidemic = 25,
        /// <summary>
        /// WATER
        /// </summary>
        [pbr::OriginalName("FREEZE")] Freeze = 26,
        [pbr::OriginalName("ICE_BOLT")] IceBolt = 27,
        [pbr::OriginalName("ICE_WALL")] IceWall = 28,
        [pbr::OriginalName("SHATTER")] Shatter = 29,
        [pbr::OriginalName("BLIZZARD")] Blizzard = 30,
      }

    }
    #endregion

  }

  public sealed partial class StatType : pb::IMessage<StatType> {
    private static readonly pb::MessageParser<StatType> _parser = new pb::MessageParser<StatType>(() => new StatType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[152]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatType(StatType other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatType Clone() {
      return new StatType(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatType other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the StatType message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Enum {
        [pbr::OriginalName("UNDEFINED")] Undefined = 0,
        [pbr::OriginalName("HEALTH")] Health = 1,
        [pbr::OriginalName("DAMAGE")] Damage = 2,
      }

    }
    #endregion

  }

  public sealed partial class UnitSpecialStatus : pb::IMessage<UnitSpecialStatus> {
    private static readonly pb::MessageParser<UnitSpecialStatus> _parser = new pb::MessageParser<UnitSpecialStatus>(() => new UnitSpecialStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnitSpecialStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[153]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitSpecialStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitSpecialStatus(UnitSpecialStatus other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitSpecialStatus Clone() {
      return new UnitSpecialStatus(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnitSpecialStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnitSpecialStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnitSpecialStatus other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the UnitSpecialStatus message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Enum {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("FROZEN")] Frozen = 1,
      }

    }
    #endregion

  }

  public sealed partial class GameReplay : pb::IMessage<GameReplay> {
    private static readonly pb::MessageParser<GameReplay> _parser = new pb::MessageParser<GameReplay>(() => new GameReplay());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameReplay> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[154]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameReplay() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameReplay(GameReplay other) : this() {
      actions_ = other.actions_.Clone();
      blocks_ = other.blocks_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameReplay Clone() {
      return new GameReplay(this);
    }

    /// <summary>Field number for the "actions" field.</summary>
    public const int ActionsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.PlayerAction> _repeated_actions_codec
        = pb::FieldCodec.ForMessage(42, global::Loom.ZombieBattleground.Protobuf.PlayerAction.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerAction> actions_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerAction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerAction> Actions {
      get { return actions_; }
    }

    /// <summary>Field number for the "blocks" field.</summary>
    public const int BlocksFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.HistoryData> _repeated_blocks_codec
        = pb::FieldCodec.ForMessage(50, global::Loom.ZombieBattleground.Protobuf.HistoryData.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.HistoryData> blocks_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.HistoryData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.HistoryData> Blocks {
      get { return blocks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameReplay);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameReplay other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!actions_.Equals(other.actions_)) return false;
      if(!blocks_.Equals(other.blocks_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= actions_.GetHashCode();
      hash ^= blocks_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      actions_.WriteTo(output, _repeated_actions_codec);
      blocks_.WriteTo(output, _repeated_blocks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += actions_.CalculateSize(_repeated_actions_codec);
      size += blocks_.CalculateSize(_repeated_blocks_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameReplay other) {
      if (other == null) {
        return;
      }
      actions_.Add(other.actions_);
      blocks_.Add(other.blocks_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 42: {
            actions_.AddEntriesFrom(input, _repeated_actions_codec);
            break;
          }
          case 50: {
            blocks_.AddEntriesFrom(input, _repeated_blocks_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Player : pb::IMessage<Player> {
    private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Player> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[155]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player(Player other) : this() {
      id_ = other.id_;
      deck_ = other.deck_ != null ? other.deck_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player Clone() {
      return new Player(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deck" field.</summary>
    public const int DeckFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.Deck deck_;
    /// <summary>
    /// TODO Change to card instance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Deck Deck {
      get { return deck_; }
      set {
        deck_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Player);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Player other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Deck, other.Deck)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (deck_ != null) hash ^= Deck.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (deck_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Deck);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (deck_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deck);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Player other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.deck_ != null) {
        if (deck_ == null) {
          deck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
        }
        Deck.MergeFrom(other.Deck);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (deck_ == null) {
              deck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
            }
            input.ReadMessage(deck_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Zone : pb::IMessage<Zone> {
    private static readonly pb::MessageParser<Zone> _parser = new pb::MessageParser<Zone>(() => new Zone());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Zone> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[156]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Zone() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Zone(Zone other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Zone Clone() {
      return new Zone(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Zone);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Zone other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Zone other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Zone message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum type {
        [pbr::OriginalName("PLAY")] Play = 0,
        [pbr::OriginalName("DECK")] Deck = 1,
        [pbr::OriginalName("HAND")] Hand = 2,
        [pbr::OriginalName("GRAVEYARD")] Graveyard = 3,
        [pbr::OriginalName("REMOVEFROMGAME")] Removefromgame = 4,
        [pbr::OriginalName("SETASIDE")] Setaside = 5,
        [pbr::OriginalName("SECRET")] Secret = 6,
      }

    }
    #endregion

  }

  public sealed partial class History : pb::IMessage<History> {
    private static readonly pb::MessageParser<History> _parser = new pb::MessageParser<History>(() => new History());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<History> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[157]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public History() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public History(History other) : this() {
      list_ = other.list_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public History Clone() {
      return new History(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.HistoryData> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.HistoryData.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.HistoryData> list_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.HistoryData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.HistoryData> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as History);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(History other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(History other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HistoryData : pb::IMessage<HistoryData> {
    private static readonly pb::MessageParser<HistoryData> _parser = new pb::MessageParser<HistoryData>(() => new HistoryData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HistoryData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[158]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryData(HistoryData other) : this() {
      switch (other.DataCase) {
        case DataOneofCase.CreateGame:
          CreateGame = other.CreateGame.Clone();
          break;
        case DataOneofCase.FullInstance:
          FullInstance = other.FullInstance.Clone();
          break;
        case DataOneofCase.ShowInstance:
          ShowInstance = other.ShowInstance.Clone();
          break;
        case DataOneofCase.HideInstance:
          HideInstance = other.HideInstance.Clone();
          break;
        case DataOneofCase.ChangeInstance:
          ChangeInstance = other.ChangeInstance.Clone();
          break;
        case DataOneofCase.EndGame:
          EndGame = other.EndGame.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryData Clone() {
      return new HistoryData(this);
    }

    /// <summary>Field number for the "createGame" field.</summary>
    public const int CreateGameFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.HistoryCreateGame CreateGame {
      get { return dataCase_ == DataOneofCase.CreateGame ? (global::Loom.ZombieBattleground.Protobuf.HistoryCreateGame) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.CreateGame;
      }
    }

    /// <summary>Field number for the "fullInstance" field.</summary>
    public const int FullInstanceFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.HistoryFullInstance FullInstance {
      get { return dataCase_ == DataOneofCase.FullInstance ? (global::Loom.ZombieBattleground.Protobuf.HistoryFullInstance) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.FullInstance;
      }
    }

    /// <summary>Field number for the "showInstance" field.</summary>
    public const int ShowInstanceFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.HistoryInstance ShowInstance {
      get { return dataCase_ == DataOneofCase.ShowInstance ? (global::Loom.ZombieBattleground.Protobuf.HistoryInstance) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.ShowInstance;
      }
    }

    /// <summary>Field number for the "hideInstance" field.</summary>
    public const int HideInstanceFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.HistoryHide HideInstance {
      get { return dataCase_ == DataOneofCase.HideInstance ? (global::Loom.ZombieBattleground.Protobuf.HistoryHide) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.HideInstance;
      }
    }

    /// <summary>Field number for the "changeInstance" field.</summary>
    public const int ChangeInstanceFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.HistoryInstance ChangeInstance {
      get { return dataCase_ == DataOneofCase.ChangeInstance ? (global::Loom.ZombieBattleground.Protobuf.HistoryInstance) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.ChangeInstance;
      }
    }

    /// <summary>Field number for the "endGame" field.</summary>
    public const int EndGameFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.HistoryEndGame EndGame {
      get { return dataCase_ == DataOneofCase.EndGame ? (global::Loom.ZombieBattleground.Protobuf.HistoryEndGame) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.EndGame;
      }
    }

    private object data_;
    /// <summary>Enum of possible cases for the "data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      CreateGame = 1,
      FullInstance = 2,
      ShowInstance = 3,
      HideInstance = 4,
      ChangeInstance = 5,
      EndGame = 6,
    }
    private DataOneofCase dataCase_ = DataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HistoryData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HistoryData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CreateGame, other.CreateGame)) return false;
      if (!object.Equals(FullInstance, other.FullInstance)) return false;
      if (!object.Equals(ShowInstance, other.ShowInstance)) return false;
      if (!object.Equals(HideInstance, other.HideInstance)) return false;
      if (!object.Equals(ChangeInstance, other.ChangeInstance)) return false;
      if (!object.Equals(EndGame, other.EndGame)) return false;
      if (DataCase != other.DataCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dataCase_ == DataOneofCase.CreateGame) hash ^= CreateGame.GetHashCode();
      if (dataCase_ == DataOneofCase.FullInstance) hash ^= FullInstance.GetHashCode();
      if (dataCase_ == DataOneofCase.ShowInstance) hash ^= ShowInstance.GetHashCode();
      if (dataCase_ == DataOneofCase.HideInstance) hash ^= HideInstance.GetHashCode();
      if (dataCase_ == DataOneofCase.ChangeInstance) hash ^= ChangeInstance.GetHashCode();
      if (dataCase_ == DataOneofCase.EndGame) hash ^= EndGame.GetHashCode();
      hash ^= (int) dataCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dataCase_ == DataOneofCase.CreateGame) {
        output.WriteRawTag(10);
        output.WriteMessage(CreateGame);
      }
      if (dataCase_ == DataOneofCase.FullInstance) {
        output.WriteRawTag(18);
        output.WriteMessage(FullInstance);
      }
      if (dataCase_ == DataOneofCase.ShowInstance) {
        output.WriteRawTag(26);
        output.WriteMessage(ShowInstance);
      }
      if (dataCase_ == DataOneofCase.HideInstance) {
        output.WriteRawTag(34);
        output.WriteMessage(HideInstance);
      }
      if (dataCase_ == DataOneofCase.ChangeInstance) {
        output.WriteRawTag(42);
        output.WriteMessage(ChangeInstance);
      }
      if (dataCase_ == DataOneofCase.EndGame) {
        output.WriteRawTag(50);
        output.WriteMessage(EndGame);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dataCase_ == DataOneofCase.CreateGame) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateGame);
      }
      if (dataCase_ == DataOneofCase.FullInstance) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FullInstance);
      }
      if (dataCase_ == DataOneofCase.ShowInstance) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShowInstance);
      }
      if (dataCase_ == DataOneofCase.HideInstance) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HideInstance);
      }
      if (dataCase_ == DataOneofCase.ChangeInstance) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChangeInstance);
      }
      if (dataCase_ == DataOneofCase.EndGame) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndGame);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HistoryData other) {
      if (other == null) {
        return;
      }
      switch (other.DataCase) {
        case DataOneofCase.CreateGame:
          if (CreateGame == null) {
            CreateGame = new global::Loom.ZombieBattleground.Protobuf.HistoryCreateGame();
          }
          CreateGame.MergeFrom(other.CreateGame);
          break;
        case DataOneofCase.FullInstance:
          if (FullInstance == null) {
            FullInstance = new global::Loom.ZombieBattleground.Protobuf.HistoryFullInstance();
          }
          FullInstance.MergeFrom(other.FullInstance);
          break;
        case DataOneofCase.ShowInstance:
          if (ShowInstance == null) {
            ShowInstance = new global::Loom.ZombieBattleground.Protobuf.HistoryInstance();
          }
          ShowInstance.MergeFrom(other.ShowInstance);
          break;
        case DataOneofCase.HideInstance:
          if (HideInstance == null) {
            HideInstance = new global::Loom.ZombieBattleground.Protobuf.HistoryHide();
          }
          HideInstance.MergeFrom(other.HideInstance);
          break;
        case DataOneofCase.ChangeInstance:
          if (ChangeInstance == null) {
            ChangeInstance = new global::Loom.ZombieBattleground.Protobuf.HistoryInstance();
          }
          ChangeInstance.MergeFrom(other.ChangeInstance);
          break;
        case DataOneofCase.EndGame:
          if (EndGame == null) {
            EndGame = new global::Loom.ZombieBattleground.Protobuf.HistoryEndGame();
          }
          EndGame.MergeFrom(other.EndGame);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Loom.ZombieBattleground.Protobuf.HistoryCreateGame subBuilder = new global::Loom.ZombieBattleground.Protobuf.HistoryCreateGame();
            if (dataCase_ == DataOneofCase.CreateGame) {
              subBuilder.MergeFrom(CreateGame);
            }
            input.ReadMessage(subBuilder);
            CreateGame = subBuilder;
            break;
          }
          case 18: {
            global::Loom.ZombieBattleground.Protobuf.HistoryFullInstance subBuilder = new global::Loom.ZombieBattleground.Protobuf.HistoryFullInstance();
            if (dataCase_ == DataOneofCase.FullInstance) {
              subBuilder.MergeFrom(FullInstance);
            }
            input.ReadMessage(subBuilder);
            FullInstance = subBuilder;
            break;
          }
          case 26: {
            global::Loom.ZombieBattleground.Protobuf.HistoryInstance subBuilder = new global::Loom.ZombieBattleground.Protobuf.HistoryInstance();
            if (dataCase_ == DataOneofCase.ShowInstance) {
              subBuilder.MergeFrom(ShowInstance);
            }
            input.ReadMessage(subBuilder);
            ShowInstance = subBuilder;
            break;
          }
          case 34: {
            global::Loom.ZombieBattleground.Protobuf.HistoryHide subBuilder = new global::Loom.ZombieBattleground.Protobuf.HistoryHide();
            if (dataCase_ == DataOneofCase.HideInstance) {
              subBuilder.MergeFrom(HideInstance);
            }
            input.ReadMessage(subBuilder);
            HideInstance = subBuilder;
            break;
          }
          case 42: {
            global::Loom.ZombieBattleground.Protobuf.HistoryInstance subBuilder = new global::Loom.ZombieBattleground.Protobuf.HistoryInstance();
            if (dataCase_ == DataOneofCase.ChangeInstance) {
              subBuilder.MergeFrom(ChangeInstance);
            }
            input.ReadMessage(subBuilder);
            ChangeInstance = subBuilder;
            break;
          }
          case 50: {
            global::Loom.ZombieBattleground.Protobuf.HistoryEndGame subBuilder = new global::Loom.ZombieBattleground.Protobuf.HistoryEndGame();
            if (dataCase_ == DataOneofCase.EndGame) {
              subBuilder.MergeFrom(EndGame);
            }
            input.ReadMessage(subBuilder);
            EndGame = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class HistoryCreateGame : pb::IMessage<HistoryCreateGame> {
    private static readonly pb::MessageParser<HistoryCreateGame> _parser = new pb::MessageParser<HistoryCreateGame>(() => new HistoryCreateGame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HistoryCreateGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[159]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryCreateGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryCreateGame(HistoryCreateGame other) : this() {
      gameId_ = other.gameId_;
      players_ = other.players_.Clone();
      randomSeed_ = other.randomSeed_;
      version_ = other.version_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryCreateGame Clone() {
      return new HistoryCreateGame(this);
    }

    /// <summary>Field number for the "gameId" field.</summary>
    public const int GameIdFieldNumber = 1;
    private long gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Player> _repeated_players_codec
        = pb::FieldCodec.ForMessage(18, global::Loom.ZombieBattleground.Protobuf.Player.Parser);
    private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Player> players_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Player> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "randomSeed" field.</summary>
    public const int RandomSeedFieldNumber = 3;
    private long randomSeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RandomSeed {
      get { return randomSeed_; }
      set {
        randomSeed_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 4;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HistoryCreateGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HistoryCreateGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameId != other.GameId) return false;
      if(!players_.Equals(other.players_)) return false;
      if (RandomSeed != other.RandomSeed) return false;
      if (Version != other.Version) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameId != 0L) hash ^= GameId.GetHashCode();
      hash ^= players_.GetHashCode();
      if (RandomSeed != 0L) hash ^= RandomSeed.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(GameId);
      }
      players_.WriteTo(output, _repeated_players_codec);
      if (RandomSeed != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(RandomSeed);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GameId);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      if (RandomSeed != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RandomSeed);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HistoryCreateGame other) {
      if (other == null) {
        return;
      }
      if (other.GameId != 0L) {
        GameId = other.GameId;
      }
      players_.Add(other.players_);
      if (other.RandomSeed != 0L) {
        RandomSeed = other.RandomSeed;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GameId = input.ReadInt64();
            break;
          }
          case 18: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 24: {
            RandomSeed = input.ReadInt64();
            break;
          }
          case 34: {
            Version = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HistoryFullInstance : pb::IMessage<HistoryFullInstance> {
    private static readonly pb::MessageParser<HistoryFullInstance> _parser = new pb::MessageParser<HistoryFullInstance>(() => new HistoryFullInstance());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HistoryFullInstance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[160]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryFullInstance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryFullInstance(HistoryFullInstance other) : this() {
      instanceId_ = other.instanceId_;
      attack_ = other.attack_;
      defense_ = other.defense_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryFullInstance Clone() {
      return new HistoryFullInstance(this);
    }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private int instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "attack" field.</summary>
    public const int AttackFieldNumber = 2;
    private int attack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Attack {
      get { return attack_; }
      set {
        attack_ = value;
      }
    }

    /// <summary>Field number for the "defense" field.</summary>
    public const int DefenseFieldNumber = 3;
    private int defense_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Defense {
      get { return defense_; }
      set {
        defense_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HistoryFullInstance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HistoryFullInstance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstanceId != other.InstanceId) return false;
      if (Attack != other.Attack) return false;
      if (Defense != other.Defense) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstanceId != 0) hash ^= InstanceId.GetHashCode();
      if (Attack != 0) hash ^= Attack.GetHashCode();
      if (Defense != 0) hash ^= Defense.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(InstanceId);
      }
      if (Attack != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Attack);
      }
      if (Defense != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Defense);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InstanceId);
      }
      if (Attack != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Attack);
      }
      if (Defense != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Defense);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HistoryFullInstance other) {
      if (other == null) {
        return;
      }
      if (other.InstanceId != 0) {
        InstanceId = other.InstanceId;
      }
      if (other.Attack != 0) {
        Attack = other.Attack;
      }
      if (other.Defense != 0) {
        Defense = other.Defense;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InstanceId = input.ReadInt32();
            break;
          }
          case 16: {
            Attack = input.ReadInt32();
            break;
          }
          case 24: {
            Defense = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HistoryInstance : pb::IMessage<HistoryInstance> {
    private static readonly pb::MessageParser<HistoryInstance> _parser = new pb::MessageParser<HistoryInstance>(() => new HistoryInstance());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HistoryInstance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[161]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryInstance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryInstance(HistoryInstance other) : this() {
      instanceId_ = other.instanceId_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryInstance Clone() {
      return new HistoryInstance(this);
    }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private int instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HistoryInstance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HistoryInstance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstanceId != other.InstanceId) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstanceId != 0) hash ^= InstanceId.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(InstanceId);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InstanceId);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HistoryInstance other) {
      if (other == null) {
        return;
      }
      if (other.InstanceId != 0) {
        InstanceId = other.InstanceId;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InstanceId = input.ReadInt32();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the HistoryInstance message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum change {
        [pbr::OriginalName("Attack")] Attack = 0,
        [pbr::OriginalName("Defense")] Defense = 1,
      }

    }
    #endregion

  }

  public sealed partial class HistoryHide : pb::IMessage<HistoryHide> {
    private static readonly pb::MessageParser<HistoryHide> _parser = new pb::MessageParser<HistoryHide>(() => new HistoryHide());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HistoryHide> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[162]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryHide() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryHide(HistoryHide other) : this() {
      instanceId_ = other.instanceId_;
      zone_ = other.zone_ != null ? other.zone_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryHide Clone() {
      return new HistoryHide(this);
    }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private int instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "zone" field.</summary>
    public const int ZoneFieldNumber = 2;
    private global::Loom.ZombieBattleground.Protobuf.Zone zone_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.ZombieBattleground.Protobuf.Zone Zone {
      get { return zone_; }
      set {
        zone_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HistoryHide);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HistoryHide other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstanceId != other.InstanceId) return false;
      if (!object.Equals(Zone, other.Zone)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstanceId != 0) hash ^= InstanceId.GetHashCode();
      if (zone_ != null) hash ^= Zone.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(InstanceId);
      }
      if (zone_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Zone);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InstanceId);
      }
      if (zone_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Zone);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HistoryHide other) {
      if (other == null) {
        return;
      }
      if (other.InstanceId != 0) {
        InstanceId = other.InstanceId;
      }
      if (other.zone_ != null) {
        if (zone_ == null) {
          zone_ = new global::Loom.ZombieBattleground.Protobuf.Zone();
        }
        Zone.MergeFrom(other.Zone);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InstanceId = input.ReadInt32();
            break;
          }
          case 18: {
            if (zone_ == null) {
              zone_ = new global::Loom.ZombieBattleground.Protobuf.Zone();
            }
            input.ReadMessage(zone_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HistoryEndGame : pb::IMessage<HistoryEndGame> {
    private static readonly pb::MessageParser<HistoryEndGame> _parser = new pb::MessageParser<HistoryEndGame>(() => new HistoryEndGame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HistoryEndGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[163]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryEndGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryEndGame(HistoryEndGame other) : this() {
      matchId_ = other.matchId_;
      userId_ = other.userId_;
      winnerId_ = other.winnerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryEndGame Clone() {
      return new HistoryEndGame(this);
    }

    /// <summary>Field number for the "matchId" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private long matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MatchId {
      get { return matchId_; }
      set {
        matchId_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "winnerId" field.</summary>
    public const int WinnerIdFieldNumber = 3;
    private string winnerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WinnerId {
      get { return winnerId_; }
      set {
        winnerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HistoryEndGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HistoryEndGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (UserId != other.UserId) return false;
      if (WinnerId != other.WinnerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId != 0L) hash ^= MatchId.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (WinnerId.Length != 0) hash ^= WinnerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MatchId);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserId);
      }
      if (WinnerId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WinnerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchId);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (WinnerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WinnerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HistoryEndGame other) {
      if (other == null) {
        return;
      }
      if (other.MatchId != 0L) {
        MatchId = other.MatchId;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.WinnerId.Length != 0) {
        WinnerId = other.WinnerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchId = input.ReadInt64();
            break;
          }
          case 18: {
            UserId = input.ReadString();
            break;
          }
          case 26: {
            WinnerId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
