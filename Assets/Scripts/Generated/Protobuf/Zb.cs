// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: github.com/loomnetwork/zombie_battleground/types/zb/zb.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Loom.Google.Protobuf;
using pbc = global::Loom.Google.Protobuf.Collections;
using pbr = global::Loom.Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Loom.ZombieBattleground.Protobuf
{

    /// <summary>Holder for reflection information generated from github.com/loomnetwork/zombie_battleground/types/zb/zb.proto</summary>
    public static partial class ZbReflection
    {

        #region Descriptor
        /// <summary>File descriptor for github.com/loomnetwork/zombie_battleground/types/zb/zb.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static ZbReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "CjxnaXRodWIuY29tL2xvb21uZXR3b3JrL3pvbWJpZV9iYXR0bGVncm91bmQv",
                  "dHlwZXMvemIvemIucHJvdG8i6wEKB0FjY291bnQSDwoHdXNlcl9pZBgBIAEo",
                  "CRIdChVwaG9uZV9udW1iZXJfdmVyaWZpZWQYAiABKAgSFwoPcmV3YXJkX3Jl",
                  "ZGVlbWVkGAMgASgIEhYKDmlzX2tpY2tzdGFydGVyGAQgASgIEg0KBWltYWdl",
                  "GAUgASgJEhoKEmVtYWlsX25vdGlmaWNhdGlvbhgGIAEoCBIRCgllbG9fc2Nv",
                  "cmUYByABKAMSFAoMY3VycmVudF90aWVyGAggASgFEhwKFGdhbWVfbWVtYmVy",
                  "c2hpcF90aWVyGAkgASgFEg0KBW93bmVyGAogASgMIlEKBERlY2sSCgoCaWQY",
                  "ASABKAMSDAoEbmFtZRgCIAEoCRIPCgdoZXJvX2lkGAMgASgDEh4KBWNhcmRz",
                  "GAQgAygLMg8uQ2FyZENvbGxlY3Rpb24izgIKBENhcmQSCgoCaWQYASABKAMS",
                  "DAoEa2luZBgCIAEoCRILCgNzZXQYAyABKAkSDAoEbmFtZRgEIAEoCRITCgtk",
                  "ZXNjcmlwdGlvbhgFIAEoCRITCgtmbGF2b3JfdGV4dBgGIAEoCRIPCgdwaWN0",
                  "dXJlGAcgASgJEgwKBHJhbmsYCCABKAkSDAoEdHlwZRgJIAEoCRIOCgZyYXJp",
                  "dHkYCiABKAkSDQoFZnJhbWUYCyABKAkSDgoGZGFtYWdlGAwgASgFEg4KBmhl",
                  "YWx0aBgNIAEoBRIMCgRjb3N0GA4gASgFEg8KB2FiaWxpdHkYDyABKAkSJQoO",
                  "Y2FyZF92aWV3X2luZm8YECABKAsyDS5DYXJkVmlld0luZm8SGAoHZWZmZWN0",
                  "cxgRIAMoCzIHLkVmZmVjdBIbCglhYmlsaXRpZXMYEiADKAsyCC5BYmlsaXR5",
                  "IksKDENhcmRWaWV3SW5mbxIeCghwb3NpdGlvbhgBIAEoCzIMLkNvb3JkaW5h",
                  "dGVzEhsKBXNjYWxlGAIgASgLMgwuQ29vcmRpbmF0ZXMiLgoLQ29vcmRpbmF0",
                  "ZXMSCQoBeBgBIAEoAhIJCgF5GAIgASgCEgkKAXoYAyABKAIiWgoGRWZmZWN0",
                  "Eg8KB3RyaWdnZXIYASABKAkSDgoGZWZmZWN0GAIgASgJEhAKCGR1cmF0aW9u",
                  "GAMgASgJEg4KBnRhcmdldBgEIAEoCRINCgVsaW1pdBgFIAEoCSLdAgoHQWJp",
                  "bGl0eRIMCgR0eXBlGAEgASgJEhUKDWFjdGl2aXR5X3R5cGUYAiABKAkSEQoJ",
                  "Y2FsbF90eXBlGAMgASgJEhMKC3RhcmdldF90eXBlGAQgASgJEhEKCXN0YXRf",
                  "dHlwZRgFIAEoCRIQCghzZXRfdHlwZRgGIAEoCRINCgV2YWx1ZRgHIAEoBRIR",
                  "CglidWZmX3R5cGUYCCABKAkSEwoLZWZmZWN0X3R5cGUYCSABKAkSEQoJdW5p",
                  "dF90eXBlGAogASgJEg0KBWNvdW50GAsgASgFEgwKBG5hbWUYDCABKAkSDQoF",
                  "dHVybnMYDSABKAUSDQoFZGVsYXkYDiABKAUSEwoLdW5pdF9zdGF0dXMYDyAB",
                  "KAkSEQoJY2FyZF90eXBlGBAgASgJEg4KBmhlYWx0aBgRIAEoBRIOCgZkYW1h",
                  "Z2UYEiABKAUSEwoLYXR0YWNrX2luZm8YEyABKAkiIAoIQ2FyZExpc3QSFAoF",
                  "Y2FyZHMYASADKAsyBS5DYXJkIjMKDkNhcmRDb2xsZWN0aW9uEhEKCWNhcmRf",
                  "bmFtZRgBIAEoCRIOCgZhbW91bnQYAiABKAMiLQoHQ2FyZFNldBIMCgRuYW1l",
                  "GAEgASgJEhQKBWNhcmRzGAIgAygLMgUuQ2FyZCIlCgtDYXJkTGlicmFyeRIW",
                  "CgRzZXRzGAEgAygLMgguQ2FyZFNldCLkAQoESGVybxIPCgdoZXJvX2lkGAEg",
                  "ASgDEgwKBGljb24YAiABKAkSDAoEbmFtZRgDIAEoCRIZChFzaG9ydF9kZXNj",
                  "cmlwdGlvbhgEIAEoCRIYChBsb25nX2Rlc2NyaXB0aW9uGAUgASgJEg8KB2Vs",
                  "ZW1lbnQYBiABKAkSEgoKZXhwZXJpZW5jZRgHIAEoAxINCgVsZXZlbBgIIAEo",
                  "AxIWCgZza2lsbHMYCSADKAsyBi5Ta2lsbBIVCg1wcmltYXJ5X3NraWxsGAog",
                  "ASgFEhcKD3NlY29uZGFyeV9za2lsbBgLIAEoBSIkChFMaXN0SGVyb2VzUmVx",
                  "dWVzdBIPCgd1c2VyX2lkGAEgASgJIisKEkxpc3RIZXJvZXNSZXNwb25zZRIV",
                  "CgZoZXJvZXMYASADKAsyBS5IZXJvIlAKGEFkZEhlcm9FeHBlcmllbmNlUmVx",
                  "dWVzdBIPCgd1c2VyX2lkGAEgASgJEg8KB2hlcm9faWQYAiABKAMSEgoKZXhw",
                  "ZXJpZW5jZRgDIAEoAyJAChlBZGRIZXJvRXhwZXJpZW5jZVJlc3BvbnNlEg8K",
                  "B2hlcm9faWQYASABKAMSEgoKZXhwZXJpZW5jZRgCIAEoAyIyCg5HZXRIZXJv",
                  "UmVxdWVzdBIPCgd1c2VyX2lkGAEgASgJEg8KB2hlcm9faWQYAiABKAMiJgoP",
                  "R2V0SGVyb1Jlc3BvbnNlEhMKBGhlcm8YASABKAsyBS5IZXJvIjgKFEdldEhl",
                  "cm9Ta2lsbHNSZXF1ZXN0Eg8KB3VzZXJfaWQYASABKAkSDwoHaGVyb19pZBgC",
                  "IAEoAyJAChVHZXRIZXJvU2tpbGxzUmVzcG9uc2USDwoHaGVyb19pZBgBIAEo",
                  "AxIWCgZza2lsbHMYAiADKAsyBi5Ta2lsbCLxAgoFU2tpbGwSDQoFdGl0bGUY",
                  "ASABKAkSDQoFc2tpbGwYAiABKAkSEQoJaWNvbl9wYXRoGAMgASgJEhMKC2Rl",
                  "c2NyaXB0aW9uGAQgASgJEhUKDXNraWxsX3RhcmdldHMYBSABKAkSFwoPZWxl",
                  "bWVudF90YXJnZXRzGAYgASgJEg0KBXZhbHVlGAcgASgFEhAKCGNvb2xkb3du",
                  "GAggASgFEhgKEGluaXRpYWxfY29vbGRvd24YCSABKAUSDgoGYXR0YWNrGAog",
                  "ASgFEg4KBmhlYWx0aBgLIAEoBSKWAQoPU2tpbGxUYXJnZXRUeXBlEggKBE5P",
                  "TkUQABIKCgZQTEFZRVIQARIPCgtQTEFZRVJfQ0FSRBACEhQKEFBMQVlFUl9B",
                  "TExfQ0FSRFMQAxIMCghPUFBPTkVOVBAEEhEKDU9QUE9ORU5UX0NBUkQQBRIW",
                  "ChJPUFBPTkVOVF9BTExfQ0FSRFMQBhINCglBTExfQ0FSRFMQByIhCghIZXJv",
                  "TGlzdBIVCgZoZXJvZXMYASADKAsyBS5IZXJvIjQKEkNhcmRDb2xsZWN0aW9u",
                  "TGlzdBIeCgVjYXJkcxgBIAMoCzIPLkNhcmRDb2xsZWN0aW9uIkUKCERlY2tM",
                  "aXN0EhQKBWRlY2tzGAEgAygLMgUuRGVjaxIjChtsYXN0X21vZGlmaWNhdGlv",
                  "bl90aW1lc3RhbXAYAiABKAMipgEKC0luaXRSZXF1ZXN0EhwKDWRlZmF1bHRf",
                  "ZGVja3MYASADKAsyBS5EZWNrEisKEmRlZmF1bHRfY29sbGVjdGlvbhgCIAMo",
                  "CzIPLkNhcmRDb2xsZWN0aW9uEhQKBWNhcmRzGAMgAygLMgUuQ2FyZBIVCgZo",
                  "ZXJvZXMYBCADKAsyBS5IZXJvEg8KB3ZlcnNpb24YBSABKAkSDgoGb3JhY2xl",
                  "GAYgASgMIjYKDFVwZGF0ZU9yYWNsZRISCgpuZXdfb3JhY2xlGAEgASgMEhIK",
                  "Cm9sZF9vcmFjbGUYAiABKAwirAEKEVVwZGF0ZUluaXRSZXF1ZXN0EhwKDWRl",
                  "ZmF1bHRfZGVja3MYASADKAsyBS5EZWNrEisKEmRlZmF1bHRfY29sbGVjdGlv",
                  "bhgCIAMoCzIPLkNhcmRDb2xsZWN0aW9uEhQKBWNhcmRzGAMgAygLMgUuQ2Fy",
                  "ZBIVCgZoZXJvZXMYBCADKAsyBS5IZXJvEg8KB3ZlcnNpb24YBSABKAkSDgoG",
                  "b3JhY2xlGAYgASgMIj4KFVVwZGF0ZUNhcmRMaXN0UmVxdWVzdBIUCgVjYXJk",
                  "cxgBIAMoCzIFLkNhcmQSDwoHdmVyc2lvbhgCIAEoCSL6AQoUVXBzZXJ0QWNj",
                  "b3VudFJlcXVlc3QSDwoHdXNlcl9pZBgBIAEoCRIdChVwaG9uZV9udW1iZXJf",
                  "dmVyaWZpZWQYAiABKAgSFwoPcmV3YXJkX3JlZGVlbWVkGAMgASgIEhYKDmlz",
                  "X2tpY2tzdGFydGVyGAQgASgIEg0KBWltYWdlGAUgASgJEhoKEmVtYWlsX25v",
                  "dGlmaWNhdGlvbhgGIAEoCBIRCgllbG9fc2NvcmUYByABKAMSFAoMY3VycmVu",
                  "dF90aWVyGAggASgFEhwKFGdhbWVfbWVtYmVyc2hpcF90aWVyGAkgASgFEg8K",
                  "B3ZlcnNpb24YCiABKAkiJAoRR2V0QWNjb3VudFJlcXVlc3QSDwoHdXNlcl9p",
                  "ZBgBIAEoCSIyCg5HZXREZWNrUmVxdWVzdBIPCgd1c2VyX2lkGAEgASgJEg8K",
                  "B2RlY2tfaWQYAiABKAMiJgoPR2V0RGVja1Jlc3BvbnNlEhMKBGRlY2sYAiAB",
                  "KAsyBS5EZWNrIl4KEUNyZWF0ZURlY2tSZXF1ZXN0Eg8KB3VzZXJfaWQYASAB",
                  "KAkSEwoEZGVjaxgCIAEoCzIFLkRlY2sSIwobbGFzdF9tb2RpZmljYXRpb25f",
                  "dGltZXN0YW1wGAMgASgDIiUKEkNyZWF0ZURlY2tSZXNwb25zZRIPCgdkZWNr",
                  "X2lkGAEgASgDIloKEURlbGV0ZURlY2tSZXF1ZXN0Eg8KB3VzZXJfaWQYASAB",
                  "KAkSDwoHZGVja19pZBgCIAEoAxIjChtsYXN0X21vZGlmaWNhdGlvbl90aW1l",
                  "c3RhbXAYAyABKAMiXAoPRWRpdERlY2tSZXF1ZXN0Eg8KB3VzZXJfaWQYASAB",
                  "KAkSEwoEZGVjaxgCIAEoCzIFLkRlY2sSIwobbGFzdF9tb2RpZmljYXRpb25f",
                  "dGltZXN0YW1wGAMgASgDIjYKDURlY2tzUmVzcG9uc2USDwoHdXNlcl9pZBgB",
                  "IAEoCRIUCgVkZWNrcxgCIAMoCzIFLkRlY2siIwoQTGlzdERlY2tzUmVxdWVz",
                  "dBIPCgd1c2VyX2lkGAEgASgJIk4KEUxpc3REZWNrc1Jlc3BvbnNlEhQKBWRl",
                  "Y2tzGAEgAygLMgUuRGVjaxIjChtsYXN0X21vZGlmaWNhdGlvbl90aW1lc3Rh",
                  "bXAYAyABKAMiKQoWTGlzdENhcmRMaWJyYXJ5UmVxdWVzdBIPCgd2ZXJzaW9u",
                  "GAEgASgJIjEKF0xpc3RDYXJkTGlicmFyeVJlc3BvbnNlEhYKBHNldHMYASAD",
                  "KAsyCC5DYXJkU2V0IikKFkxpc3RIZXJvTGlicmFyeVJlcXVlc3QSDwoHdmVy",
                  "c2lvbhgBIAEoCSIwChdMaXN0SGVyb0xpYnJhcnlSZXNwb25zZRIVCgZoZXJv",
                  "ZXMYASADKAsyBS5IZXJvIicKFEdldENvbGxlY3Rpb25SZXF1ZXN0Eg8KB3Vz",
                  "ZXJfaWQYASABKAkiNwoVR2V0Q29sbGVjdGlvblJlc3BvbnNlEh4KBWNhcmRz",
                  "GAEgAygLMg8uQ2FyZENvbGxlY3Rpb24ijAIKC1BsYXllclN0YXRlEgoKAmlk",
                  "GAEgASgJEigKDWN1cnJlbnRBY3Rpb24YAiABKA4yES5QbGF5ZXJBY3Rpb25U",
                  "eXBlEisKEG92ZXJsb3JkSW5zdGFuY2UYAyABKAsyES5PdmVybG9yZEluc3Rh",
                  "bmNlEiIKC2NhcmRzSW5IYW5kGAQgAygLMg0uQ2FyZEluc3RhbmNlEiMKDGNh",
                  "cmRzT25Cb2FyZBgFIAMoCzINLkNhcmRJbnN0YW5jZRIiCgtjYXJkc0luRGVj",
                  "axgGIAMoCzINLkNhcmRJbnN0YW5jZRITCgRkZWNrGAcgASgLMgUuRGVjaxIK",
                  "CgJocBgIIAEoBRIMCgRtYW5hGAkgASgFIsABCgVNYXRjaBIKCgJpZBgBIAEo",
                  "AxIOCgZ0b3BpY3MYAiADKAkSIgoMcGxheWVyU3RhdGVzGAMgAygLMgwuUGxh",
                  "eWVyU3RhdGUSHQoGc3RhdHVzGAQgASgOMg0uTWF0Y2guU3RhdHVzIlgKBlN0",
                  "YXR1cxILCgdDcmVhdGVkEAASDAoITWF0Y2hpbmcQARILCgdTdGFydGVkEAIS",
                  "CwoHUGxheWluZxADEg4KClBsYXllckxlZnQQBBIJCgVFbmRlZBAFIjYKE01h",
                  "dGNoTWFraW5nSW5mb0xpc3QSHwoFaW5mb3MYASADKAsyEC5NYXRjaE1ha2lu",
                  "Z0luZm8iNgoPTWF0Y2hNYWtpbmdJbmZvEg4KBnVzZXJJZBgBIAEoCRITCgRk",
                  "ZWNrGAIgASgLMgUuRGVjayKnBAoMUGxheWVyQWN0aW9uEiUKCmFjdGlvblR5",
                  "cGUYASABKA4yES5QbGF5ZXJBY3Rpb25UeXBlEhAKCHBsYXllcklkGAIgASgJ",
                  "Ei0KCmNhcmRBdHRhY2sYAyABKAsyFy5QbGF5ZXJBY3Rpb25DYXJkQXR0YWNr",
                  "SAASKQoIZHJhd0NhcmQYBCABKAsyFS5QbGF5ZXJBY3Rpb25EcmF3Q2FyZEgA",
                  "EicKB2VuZFR1cm4YBSABKAsyFC5QbGF5ZXJBY3Rpb25FbmRUdXJuSAASKQoI",
                  "bXVsbGlnYW4YBiABKAsyFS5QbGF5ZXJBY3Rpb25NdWxsaWdhbkgAEikKCGNh",
                  "cmRQbGF5GAcgASgLMhUuUGxheWVyQWN0aW9uQ2FyZFBsYXlIABI3Cg9jYXJk",
                  "QWJpbGl0eVVzZWQYCCABKAsyHC5QbGF5ZXJBY3Rpb25DYXJkQWJpbGl0eVVz",
                  "ZWRIABI7ChFvdmVybG9yZFNraWxsVXNlZBgJIAEoCzIeLlBsYXllckFjdGlv",
                  "bk92ZXJsb3JkU2tpbGxVc2VkSAASKQoIY29pblRvc3MYCiABKAsyFS5QbGF5",
                  "ZXJBY3Rpb25Db2luVG9zc0gAEisKCWluaXRIYW5kcxgLIAEoCzIWLlBsYXll",
                  "ckFjdGlvbkluaXRIYW5kc0gAEi0KCmxlYXZlTWF0Y2gYDCABKAsyFy5QbGF5",
                  "ZXJBY3Rpb25MZWF2ZU1hdGNoSABCCAoGYWN0aW9uIrwBChFQbGF5ZXJBY3Rp",
                  "b25FdmVudBIrChBwbGF5ZXJBY3Rpb25UeXBlGAEgASgOMhEuUGxheWVyQWN0",
                  "aW9uVHlwZRIOCgZ1c2VySWQYAiABKAkSDwoHbWVzc2FnZRgDIAEoCRIVCgVt",
                  "YXRjaBgEIAEoCzIGLk1hdGNoEiMKDHBsYXllckFjdGlvbhgFIAEoCzINLlBs",
                  "YXllckFjdGlvbhIdCglnYW1lU3RhdGUYBiABKAsyCi5HYW1lU3RhdGUiWwoK",
                  "R2FtZVJlcGxheRIiCgZldmVudHMYASADKAsyEi5QbGF5ZXJBY3Rpb25FdmVu",
                  "dBIVCg1yZXBsYXlWZXJzaW9uGAMgASgJEhIKCnJhbmRvbVNlZWQYBCABKAUi",
                  "KwoYUGxheWVyc0luTWF0Y2htYWtpbmdMaXN0Eg8KB3VzZXJJRHMYASADKAki",
                  "KwoQUGVuZGluZ01hdGNoTGlzdBIXCgdtYXRjaGVzGAEgAygLMgYuTWF0Y2gi",
                  "JAoJTWF0Y2hMaXN0EhcKB21hdGNoZXMYASADKAsyBi5NYXRjaCIfCgpNYXRj",
                  "aENvdW50EhEKCWN1cnJlbnRJZBgBIAEoAyIyChBGaW5kTWF0Y2hSZXF1ZXN0",
                  "Eg4KBnVzZXJJZBgBIAEoCRIOCgZkZWNrSWQYAiABKAMiKgoRRmluZE1hdGNo",
                  "UmVzcG9uc2USFQoFbWF0Y2gYASABKAsyBi5NYXRjaCIiCg9HZXRNYXRjaFJl",
                  "cXVlc3QSDwoHbWF0Y2hJZBgBIAEoAyJIChBHZXRNYXRjaFJlc3BvbnNlEhUK",
                  "BW1hdGNoGAEgASgLMgYuTWF0Y2gSHQoJZ2FtZVN0YXRlGAIgASgLMgouR2Ft",
                  "ZVN0YXRlIiYKE0dldEdhbWVTdGF0ZVJlcXVlc3QSDwoHbWF0Y2hJZBgBIAEo",
                  "AyI1ChRHZXRHYW1lU3RhdGVSZXNwb25zZRIdCglnYW1lU3RhdGUYASABKAsy",
                  "Ci5HYW1lU3RhdGUiSwoTUGxheWVyQWN0aW9uUmVxdWVzdBIPCgdtYXRjaElk",
                  "GAEgASgDEiMKDHBsYXllckFjdGlvbhgCIAEoCzINLlBsYXllckFjdGlvbiI1",
                  "ChRQbGF5ZXJBY3Rpb25SZXNwb25zZRIdCglnYW1lU3RhdGUYASABKAsyCi5H",
                  "YW1lU3RhdGUiRAoPRW5kTWF0Y2hSZXF1ZXN0Eg8KB21hdGNoSWQYASABKAMS",
                  "DgoGdXNlcklkGAIgASgJEhAKCHdpbm5lcklkGAMgASgJIjEKEEVuZE1hdGNo",
                  "UmVzcG9uc2USHQoJZ2FtZVN0YXRlGAEgASgLMgouR2FtZVN0YXRlIo8BCghH",
                  "YW1lTW9kZRIKCgJJRBgBIAEoCRIMCgRuYW1lGAIgASgJEhMKC2Rlc2NyaXB0",
                  "aW9uGAMgASgJEg8KB3ZlcnNpb24YBCABKAkSJQoOZ2FtZV9tb2RlX3R5cGUY",
                  "BSABKA4yDS5HYW1lTW9kZVR5cGUSDQoFYnl0ZXMYBiABKAwSDQoFT3duZXIY",
                  "ByABKAwiLQoMR2FtZU1vZGVMaXN0Eh0KCmdhbWVfbW9kZXMYASADKAsyCS5H",
                  "YW1lTW9kZSKLAQoPR2FtZU1vZGVSZXF1ZXN0EgwKBG5hbWUYASABKAkSEwoL",
                  "ZGVzY3JpcHRpb24YAiABKAkSDwoHdmVyc2lvbhgDIAEoCRINCgVieXRlcxgE",
                  "IAEoCRIlCg5nYW1lX21vZGVfdHlwZRgFIAEoDjINLkdhbWVNb2RlVHlwZRIO",
                  "CgZvcmFjbGUYBiABKAkinQEKFVVwZGF0ZUdhbWVNb2RlUmVxdWVzdBIKCgJJ",
                  "RBgBIAEoCRIMCgRuYW1lGAIgASgJEhMKC2Rlc2NyaXB0aW9uGAMgASgJEg8K",
                  "B3ZlcnNpb24YBCABKAkSDQoFYnl0ZXMYBSABKAkSJQoOZ2FtZV9tb2RlX3R5",
                  "cGUYBiABKA4yDS5HYW1lTW9kZVR5cGUSDgoGb3JhY2xlGAcgASgJIjMKFURl",
                  "bGV0ZUdhbWVNb2RlUmVxdWVzdBIKCgJJRBgBIAEoCRIOCgZvcmFjbGUYAiAB",
                  "KAkiIAoSR2V0R2FtZU1vZGVSZXF1ZXN0EgoKAklEGAEgASgJIhYKFExpc3RH",
                  "YW1lTW9kZXNSZXF1ZXN0IiYKC0dsb2JhbFN0YXRlEhcKD2N1cnJlbnRfZ2Ft",
                  "ZV9pZBgBIAEoAyLOAQoJR2FtZVN0YXRlEgoKAmlkGAEgASgDEg8KB2lzRW5k",
                  "ZWQYAiABKAgSGgoSY3VycmVudFBsYXllckluZGV4GAMgASgFEiIKDHBsYXll",
                  "clN0YXRlcxgEIAMoCzIMLlBsYXllclN0YXRlEhoKEmN1cnJlbnRBY3Rpb25J",
                  "bmRleBgFIAEoAxIkCg1wbGF5ZXJBY3Rpb25zGAYgAygLMg0uUGxheWVyQWN0",
                  "aW9uEhIKCnJhbmRvbXNlZWQYByABKAMSDgoGd2lubmVyGAggASgJIhEKD0Fi",
                  "aWxpdHlJbnN0YW5jZSLpBAoLQ2FyZEFiaWxpdHkSJQoLYWJpbGl0eVR5cGUY",
                  "ASABKA4yEC5DYXJkQWJpbGl0eVR5cGUSNQoTYWJpbGl0eUFjdGl2aXR5VHlw",
                  "ZRgCIAEoDjIYLkNhcmRBYmlsaXR5QWN0aXZpdHlUeXBlEi8KEmNhcmRBYmls",
                  "aXR5VHJpZ2dlchgDIAEoDjITLkNhcmRBYmlsaXR5VHJpZ2dlchImCg5hbGxv",
                  "d2VkVGFyZ2V0cxgEIAMoDjIOLkFsbG93ZWRUYXJnZXQSIgoPYWJpbGl0eVN0",
                  "YXRUeXBlGAUgASgOMgkuU3RhdFR5cGUSJAoOYWJpbGl0eVNldFR5cGUYBiAB",
                  "KA4yDC5FbGVtZW50S2luZBItChFjYXJkQWJpbGl0eUVmZmVjdBgHIAEoDjIS",
                  "LkNhcmRBYmlsaXR5RWZmZWN0Ei0KEWF0dGFja1Jlc3RyaWN0aW9uGAggASgO",
                  "MhIuQXR0YWNrUmVzdHJpY3Rpb24SIQoOdGFyZ2V0Q2FyZFR5cGUYCSABKA4y",
                  "CS5DYXJkS2luZBI3Cht0YXJnZXRVbml0U3BlY2lhbFN0YXR1c1R5cGUYCiAB",
                  "KA4yEi5Vbml0U3BlY2lhbFN0YXR1cxIhCg50YXJnZXRVbml0VHlwZRgLIAEo",
                  "DjIJLkNhcmRLaW5kEg0KBXZhbHVlGAwgASgFEg4KBmRhbWFnZRgNIAEoBRIO",
                  "CgZoZWFsdGgYDiABKAUSEgoKYXR0YWNrSW5mbxgPIAEoCRIMCgRuYW1lGBAg",
                  "ASgJEg0KBXR1cm5zGBEgASgFEg0KBWNvdW50GBIgASgFEg0KBWRlbGF5GBMg",
                  "ASgFImYKDENhcmRJbnN0YW5jZRISCgppbnN0YW5jZUlkGAEgASgFEiEKCXBy",
                  "b3RvdHlwZRgCIAEoCzIOLkNhcmRQcm90b3R5cGUSDwoHZGVmZW5jZRgDIAEo",
                  "BRIOCgZhdHRhY2sYBCABKAUisAMKDUNhcmRQcm90b3R5cGUSDgoGZGF0YUlk",
                  "GAEgASgFEiEKC2NhcmRTZXRUeXBlGAIgASgOMgwuRWxlbWVudEtpbmQSDAoE",
                  "bmFtZRgDIAEoCRIPCgdnb29Db3N0GAQgASgFEhMKC2Rlc2NyaXB0aW9uGAUg",
                  "ASgJEhIKCmZsYXZvclRleHQYBiABKAkSDwoHcGljdHVyZRgHIAEoCRINCgVm",
                  "cmFtZRgIIAEoCRIVCg1pbml0aWFsRGFtYWdlGAkgASgFEhYKDmluaXRpYWxE",
                  "ZWZlbmNlGAogASgFEgwKBHJhbmsYCyABKAkSDAoEdHlwZRgMIAEoCRIfCglh",
                  "YmlsaXRpZXMYDSADKAsyDC5DYXJkQWJpbGl0eRIjCgxjYXJkVmlld0luZm8Y",
                  "DiABKAsyDS5DYXJkVmlld0luZm8SIwoMY3JlYXR1cmVSYW5rGA8gASgOMg0u",
                  "Q3JlYXR1cmVSYW5rEiMKDGNyZWF0dXJlVHlwZRgQIAEoDjINLkNyZWF0dXJl",
                  "VHlwZRIbCghjYXJkS2luZBgRIAEoDjIJLkNhcmRLaW5kEgwKBGtpbmQYEiAB",
                  "KAkiHQoLRGF0YUlkT3duZXISDgoGZGF0YUlkGAEgASgFIikKCENhcmREZWNr",
                  "Eh0KBWNhcmRzGAEgAygLMg4uQ2FyZFByb3RvdHlwZSIlCg9JbnN0YW5jZUlk",
                  "T3duZXISEgoKaW5zdGFuY2VJZBgBIAEoBSLUAQoQT3ZlcmxvcmRJbnN0YW5j",
                  "ZRISCgppbnN0YW5jZUlkGAEgASgFEiUKCXByb3RvdHlwZRgCIAEoCzISLk92",
                  "ZXJsb3JkUHJvdG90eXBlEioKCmZpcnN0U2tpbGwYAyABKAsyFi5PdmVybG9y",
                  "ZFNraWxsSW5zdGFuY2USKwoLc2Vjb25kU2tpbGwYBCABKAsyFi5PdmVybG9y",
                  "ZFNraWxsSW5zdGFuY2USDwoHZGVmZW5jZRgFIAEoBRILCgNnb28YBiABKAUS",
                  "DgoGbWF4R29vGAcgASgFIt0BChFPdmVybG9yZFByb3RvdHlwZRIOCgZoZXJv",
                  "SWQYASABKAUSDAoEaWNvbhgCIAEoCRIMCgRuYW1lGAMgASgJEhgKEHNob3J0",
                  "RGVzY3JpcHRpb24YBCABKAkSFwoPbG9uZ0Rlc2NyaXB0aW9uGAUgASgJEhIK",
                  "CmV4cGVyaWVuY2UYBiABKAUSDQoFbGV2ZWwYByABKAUSHQoHZWxlbWVudBgI",
                  "IAEoDjIMLkVsZW1lbnRLaW5kEicKBnNraWxscxgJIAMoCzIXLk92ZXJsb3Jk",
                  "U2tpbGxQcm90b3R5cGUiVQoVT3ZlcmxvcmRTa2lsbEluc3RhbmNlEioKCXBy",
                  "b3RvdHlwZRgBIAEoCzIXLk92ZXJsb3JkU2tpbGxQcm90b3R5cGUSEAoIY29v",
                  "bGRvd24YAiABKAUirgIKFk92ZXJsb3JkU2tpbGxQcm90b3R5cGUSDQoFdGl0",
                  "bGUYASABKAkSDQoFc2tpbGwYAiABKAkSEAoIaWNvblBhdGgYAyABKAkSEwoL",
                  "ZGVzY3JpcHRpb24YBCABKAkSEAoIY29vbGRvd24YBSABKAUSFwoPaW5pdGlh",
                  "bENvb2xkb3duGAYgASgFEhEKCXBhcmFtZXRlchgHIAEoBRIOCgZhdHRhY2sY",
                  "CCABKAUSLQoRb3ZlcmxvcmRTa2lsbEtpbmQYCSABKA4yEi5PdmVybG9yZFNr",
                  "aWxsS2luZBIoChBza2lsbFRhcmdldFR5cGVzGAogAygOMg4uQWxsb3dlZFRh",
                  "cmdldBIoChJlbGVtZW50VGFyZ2V0VHlwZXMYCyADKA4yDC5FbGVtZW50S2lu",
                  "ZCIWChRQbGF5ZXJBY3Rpb25Db2luVG9zcyIXChVQbGF5ZXJBY3Rpb25Jbml0",
                  "SGFuZHMiGAoWUGxheWVyQWN0aW9uTGVhdmVNYXRjaCIzChRQbGF5ZXJBY3Rp",
                  "b25DYXJkUGxheRIbCgRjYXJkGAEgASgLMg0uQ2FyZEluc3RhbmNlIn0KFlBs",
                  "YXllckFjdGlvbkNhcmRBdHRhY2sSHwoIYXR0YWNrZXIYASABKAsyDS5DYXJk",
                  "SW5zdGFuY2USKwoQYWZmZWN0T2JqZWN0VHlwZRgCIAEoDjIRLkFmZmVjdE9i",
                  "amVjdFR5cGUSFQoGdGFyZ2V0GAMgASgLMgUuVW5pdCKxAQobUGxheWVyQWN0",
                  "aW9uQ2FyZEFiaWxpdHlVc2VkEhsKBGNhcmQYASABKAsyDS5DYXJkSW5zdGFu",
                  "Y2USKwoQYWZmZWN0T2JqZWN0VHlwZRgCIAEoDjIRLkFmZmVjdE9iamVjdFR5",
                  "cGUSGwoIY2FyZEtpbmQYAyABKA4yCS5DYXJkS2luZBIWCgd0YXJnZXRzGAQg",
                  "AygLMgUuVW5pdBITCgtBYmlsaXR5VHlwZRgFIAEoCSJ0Ch1QbGF5ZXJBY3Rp",
                  "b25PdmVybG9yZFNraWxsVXNlZBIPCgdTa2lsbElkGAEgASgDEisKEGFmZmVj",
                  "dE9iamVjdFR5cGUYAiABKA4yES5BZmZlY3RPYmplY3RUeXBlEhUKBnRhcmdl",
                  "dBgDIAEoCzIFLlVuaXQiOwoUUGxheWVyQWN0aW9uRHJhd0NhcmQSIwoMY2Fy",
                  "ZEluc3RhbmNlGAIgASgLMg0uQ2FyZEluc3RhbmNlIhUKE1BsYXllckFjdGlv",
                  "bkVuZFR1cm4iPgoUUGxheWVyQWN0aW9uTXVsbGlnYW4SJgoPbXVsbGlnYW5l",
                  "ZENhcmRzGAEgAygLMg0uQ2FyZEluc3RhbmNlIkYKE1BsYXllckFjdGlvbk91",
                  "dGNvbWUSEAoIcGxheWVySWQYASABKAkSHQoJZ2FtZVN0YXRlGAIgASgLMgou",
                  "R2FtZVN0YXRlIjUKD1N0YXJ0R2FtZUFjdGlvbhIiCgxwbGF5ZXJTdGF0ZXMY",
                  "ASADKAsyDC5QbGF5ZXJTdGF0ZSIaCgRVbml0EhIKCmluc3RhbmNlSWQYASAB",
                  "KAUqwgEKEFBsYXllckFjdGlvblR5cGUSDgoKTm9uZUFjdGlvbhAAEgsKB0Vu",
                  "ZFR1cm4QARIMCghNdWxsaWdhbhACEgwKCERyYXdDYXJkEAMSDAoIQ2FyZFBs",
                  "YXkQBBIOCgpDYXJkQXR0YWNrEAUSEwoPQ2FyZEFiaWxpdHlVc2VkEAYSFQoR",
                  "T3ZlcmxvcmRTa2lsbFVzZWQQBxIMCghDb2luVG9zcxAIEg0KCUluaXRIYW5k",
                  "cxAJEg4KCkxlYXZlTWF0Y2gQCionCgxHYW1lTW9kZVR5cGUSDQoJQ29tbXVu",
                  "aXR5EAASCAoETG9vbRABKqMBCg1BbGxvd2VkVGFyZ2V0EhUKEU5vbmVBbGxv",
                  "d2VkVGFyZ2V0EAASCgoGUGxheWVyEAESDgoKUGxheWVyQ2FyZBACEhIKDlBs",
                  "YXllckFsbENhcmRzEAMSDAoIT3Bwb25lbnQQBBIQCgxPcHBvbmVudENhcmQQ",
                  "BRIUChBPcHBvbmVudEFsbENhcmRzEAYSDAoIQWxsQ2FyZHMQBxIHCgNBbGwQ",
                  "CCpXChFBdHRhY2tSZXN0cmljdGlvbhIZChVOb25lQXR0YWNrUmVzdHJpY3Rp",
                  "b24QABInCiNPbmx5Tm90QXR0YWNrZWRCeVRoaXNVbml0SW5UaGlzVHVybhAB",
                  "KjIKF0NhcmRBYmlsaXR5QWN0aXZpdHlUeXBlEgsKB1Bhc3NpdmUQABIKCgZB",
                  "Y3RpdmUQASreAgoRQ2FyZEFiaWxpdHlFZmZlY3QSGQoVTm9uZUNhcmRBYmls",
                  "aXR5RWZmZWN0EAASFAoQTWFzc2l2ZVdhdGVyV2F2ZRABEg8KC01hc3NpdmVG",
                  "aXJlEAISFAoQTWFzc2l2ZUxpZ2h0bmluZxADEhMKD01hc3NpdmVUb3hpY0Fs",
                  "bBAEEg4KClRhcmdldFJvY2sQBRIOCgpUYXJnZXRGaXJlEAYSDgoKVGFyZ2V0",
                  "TGlmZRAHEg8KC1RhcmdldFRveGljEAgSDwoLVGFyZ2V0V2F0ZXIQCRIZChVU",
                  "YXJnZXRBZGp1c3RtZW50c0JvbWIQChIPCgtTdHVuRnJlZXplcxALEhcKE1N0",
                  "dW5PckRhbWFnZUZyZWV6ZXMQDBIYChRUYXJnZXRBZGp1c3RtZW50c0FpchAN",
                  "EhAKDEhlYWxEaXJlY3RseRAOEhkKFUhlYWxDYXJkQWJpbGl0eUVmZmVjdBAP",
                  "KoIBChJDYXJkQWJpbGl0eVRyaWdnZXISCAoEVHVybhAAEgkKBUVudHJ5EAES",
                  "BwoDRW5kEAISCgoGQXR0YWNrEAMSCQoFRGVhdGgQBBINCglQZXJtYW5lbnQQ",
                  "BRINCglHb3REYW1hZ2UQBhINCglBdERlZmVuY2UQBxIKCgZJbkhhbmQQCCrR",
                  "CwoPQ2FyZEFiaWxpdHlUeXBlEhcKE0hlYWxDYXJkQWJpbGl0eVR5cGUQABIU",
                  "ChBNb2RpZmljYXRvclN0YXRzEAESDgoKQ2hhbmdlU3RhdBACEggKBFN0dW4Q",
                  "AxIbChdTdHVuT3JEYW1hZ2VBZGp1c3RtZW50cxAEEgkKBVNwdXJ0EAUSDgoK",
                  "QWRkR29vVmlhbBAGEhEKDUFkZEdvb0NhcnJpZXIQBxIHCgNEb3QQCBIKCgZT",
                  "dW1tb24QCRIPCgtTcGVsbEF0dGFjaxAKEhEKDU1hc3NpdmVEYW1hZ2UQCxIb",
                  "ChdEYW1hZ2VUYXJnZXRBZGp1c3RtZW50cxAMEhAKDERhbWFnZVRhcmdldBAN",
                  "Eg4KCkNhcmRSZXR1cm4QDhIKCgZXZWFwb24QDxIfChtDaGFuZ2VTdGF0T2ZD",
                  "cmVhdHVyZXNCeVR5cGUQEBIeChpBdHRhY2tOdW1iZXJPZlRpbWVzUGVyVHVy",
                  "bhAREhsKF0RyYXdDYXJkQ2FyZEFiaWxpdHlUeXBlEBISIAocRGV2b3VyWm9t",
                  "Ymllc0FuZENvbWJpbmVTdGF0cxATEhUKEURlc3Ryb3lVbml0QnlUeXBlEBQS",
                  "GQoVTG93ZXJDb3N0T2ZDYXJkSW5IYW5kEBUSDwoLT3ZlcmZsb3dHb28QFhIL",
                  "CgdMb3NlR29vEBcSFgoSRGlzYWJsZU5leHRUdXJuR29vEBgSCAoEUmFnZRAZ",
                  "Eg8KC0ZyZWV6ZVVuaXRzEBoSGQoVVGFrZURhbWFnZVJhbmRvbUVuZW15EBsS",
                  "GAoUVGFrZUNvbnRyb2xFbmVteVVuaXQQHBIJCgVHdWFyZBAdEhUKEURlc3Ry",
                  "b3lGcm96ZW5Vbml0EB4SHAoYVXNlQWxsR29vVG9JbmNyZWFzZVN0YXRzEB8S",
                  "EwoPRmlyc3RVbml0SW5QbGF5ECASIQodQWxseVVuaXRzT2ZUeXBlSW5QbGF5",
                  "R2V0U3RhdHMQIRIhCh1EYW1hZ2VFbmVteVVuaXRzQW5kRnJlZXplVGhlbRAi",
                  "EiMKH1JldHVyblVuaXRzT25Cb2FyZFRvT3duZXJzRGVja3MQIxIjCh9UYWtl",
                  "VW5pdFR5cGVUb0FkamFjZW50QWxseVVuaXRzECQSIAocRW5lbXlUaGF0QXR0",
                  "YWNrc0JlY29tZUZyb3plbhAlEhoKFlRha2VVbml0VHlwZVRvQWxseVVuaXQQ",
                  "JhIiCh5SZXZpdmVEaWVkVW5pdHNPZlR5cGVGcm9tTWF0Y2gQJxIdChlDaGFu",
                  "Z2VTdGF0VW50aWxsRW5kT2ZUdXJuECgSEgoOQXR0YWNrT3ZlcmxvcmQQKRIZ",
                  "ChVBZGphY2VudFVuaXRzR2V0SGVhdnkQKhIcChhGcmVlemVOdW1iZXJPZlJh",
                  "bmRvbUFsbHkQKxIXChNBZGRDYXJkQnlOYW1lVG9IYW5kECwSJAogRGVhbERh",
                  "bWFnZVRvVGhpc0FuZEFkamFjZW50VW5pdHMQLRIJCgVTd2luZxAuEisKJ1Rh",
                  "a2VEZWZlbmNlSWZPdmVybG9yZEhhc0xlc3NEZWZlbmNlVGhhbhAvEioKJkdh",
                  "aW5OdW1iZXJPZkxpZmVGb3JFYWNoRGFtYWdlVGhpc0RlYWxzEDASIwofQWRk",
                  "aXRpb25hbERhbWFnZVRvSGVhdnlJbkF0dGFjaxAxEg4KClVuaXRXZWFwb24Q",
                  "MhIfChtUYWtlRGFtYWdlQXRFbmRPZlR1cm5Ub1RoaXMQMxIeChpEZWxheWVk",
                  "TG9zZUhlYXZ5R2FpbkF0dGFjaxA0EhUKEURlbGF5ZWRHYWluQXR0YWNrEDUS",
                  "EQoNUmVhbmltYXRlVW5pdBA2EhIKDlByaW9yaXR5QXR0YWNrEDcSIAocRGVz",
                  "dHJveVRhcmdldFVuaXRBZnRlckF0dGFjaxA4Eh0KGUNvc3RzTGVzc0lmQ2Fy",
                  "ZFR5cGVJbkhhbmQQORIjCh9SZXR1cm5Vbml0c09uQm9hcmRUb093bmVyc0hh",
                  "bmRzEDoqIwoIQ2FyZEtpbmQSCQoFU1BFTEwQABIMCghDUkVBVFVSRRABKjcK",
                  "EEFmZmVjdE9iamVjdFR5cGUSCgoGUExBWUVSEAASDQoJQ0hBUkFDVEVSEAES",
                  "CAoEQ0FSRBACKkMKDENyZWF0dXJlUmFuaxIKCgZNaW5pb24QABILCgdPZmZp",
                  "Y2VyEAESDQoJQ29tbWFuZGVyEAISCwoHR2VuZXJhbBADKjoKDENyZWF0dXJl",
                  "VHlwZRIKCgZXYWxrZXIQABIJCgVGZXJhbBABEgkKBUhlYXZ5EAISCAoETm9u",
                  "ZRADKnYKC0VsZW1lbnRLaW5kEggKBEZpcmUQABIJCgVXYXRlchABEgkKBUVh",
                  "cnRoEAISBwoDQWlyEAMSCAoETGlmZRAEEgkKBVRveGljEAUSCAoESXRlbRAG",
                  "EgoKBk90aGVycxAHEhMKD05vbmVFbGVtZW50S2luZBAIKsoDChFPdmVybG9y",
                  "ZFNraWxsS2luZBIZChVOb25lT3ZlcmxvcmRTa2lsbEtpbmQQABIICgRQdXNo",
                  "EAESCAoERHJhdxACEg4KCldpbmRTaGllbGQQAxIMCghXaW5kV2FsbBAEEgsK",
                  "B1JldHJlYXQQBRIKCgZIYXJkZW4QBhINCglTdG9uZVNraW4QBxILCgdGb3J0",
                  "aWZ5EAgSCwoHUGhhbGFueBAJEgwKCEZvcnRyZXNzEAoSDAoIRmlyZUJvbHQQ",
                  "CxIKCgZSYWJpZXMQDBIMCghGaXJlYmFsbBANEg4KCk1hc3NSYWJpZXMQDhIQ",
                  "CgxNZXRlb3JTaG93ZXIQDxIQCgxIZWFsaW5nVG91Y2gQEBIICgRNZW5kEBES",
                  "DQoJUmVzc3VyZWN0EBISCwoHRW5oYW5jZRATEg0KCVJlYW5pbWF0ZRAUEg4K",
                  "ClBvaXNvbkRhcnQQFRIOCgpUb3hpY1Bvd2VyEBYSDAoIQnJlYWtvdXQQFxIK",
                  "CgZJbmZlY3QQGBIMCghFcGlkZW1pYxAZEgoKBkZyZWV6ZRAaEgsKB0ljZUJv",
                  "bHQQGxILCgdJY2VXYWxsEBwSCwoHU2hhdHRlchAdEgwKCEJsaXp6YXJkEB4q",
                  "OAoaT3ZlcmxvcmRTa2lsbFNlbGVjdGlvblR5cGUSCwoHUHJpbWFyeRAAEg0K",
                  "CVNlY29uZGFyeRABKjQKCFN0YXRUeXBlEhAKDE5vbmVTdGF0VHlwZRAAEgoK",
                  "BkhlYWx0aBABEgoKBkRhbWFnZRACKjoKEVVuaXRTcGVjaWFsU3RhdHVzEhkK",
                  "FU5vbmVVbml0U3BlY2lhbFN0YXR1cxAAEgoKBkZyb3plbhABQiOqAiBMb29t",
                  "LlpvbWJpZUJhdHRsZWdyb3VuZC5Qcm90b2J1ZmIGcHJvdG8z"));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(new[] { typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionType), typeof(global::Loom.ZombieBattleground.Protobuf.GameModeType), typeof(global::Loom.ZombieBattleground.Protobuf.AllowedTarget), typeof(global::Loom.ZombieBattleground.Protobuf.AttackRestriction), typeof(global::Loom.ZombieBattleground.Protobuf.CardAbilityActivityType), typeof(global::Loom.ZombieBattleground.Protobuf.CardAbilityEffect), typeof(global::Loom.ZombieBattleground.Protobuf.CardAbilityTrigger), typeof(global::Loom.ZombieBattleground.Protobuf.CardAbilityType), typeof(global::Loom.ZombieBattleground.Protobuf.CardKind), typeof(global::Loom.ZombieBattleground.Protobuf.AffectObjectType), typeof(global::Loom.ZombieBattleground.Protobuf.CreatureRank), typeof(global::Loom.ZombieBattleground.Protobuf.CreatureType), typeof(global::Loom.ZombieBattleground.Protobuf.ElementKind), typeof(global::Loom.ZombieBattleground.Protobuf.OverlordSkillKind), typeof(global::Loom.ZombieBattleground.Protobuf.OverlordSkillSelectionType), typeof(global::Loom.ZombieBattleground.Protobuf.StatType), typeof(global::Loom.ZombieBattleground.Protobuf.UnitSpecialStatus), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.Account), global::Loom.ZombieBattleground.Protobuf.Account.Parser, new[]{ "UserId", "PhoneNumberVerified", "RewardRedeemed", "IsKickstarter", "Image", "EmailNotification", "EloScore", "CurrentTier", "GameMembershipTier", "Owner" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.Deck), global::Loom.ZombieBattleground.Protobuf.Deck.Parser, new[]{ "Id", "Name", "HeroId", "Cards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.Card), global::Loom.ZombieBattleground.Protobuf.Card.Parser, new[]{ "Id", "Kind", "Set", "Name", "Description", "FlavorText", "Picture", "Rank", "Type", "Rarity", "Frame", "Damage", "Health", "Cost", "Ability", "CardViewInfo", "Effects", "Abilities" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardViewInfo), global::Loom.ZombieBattleground.Protobuf.CardViewInfo.Parser, new[]{ "Position", "Scale" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.Coordinates), global::Loom.ZombieBattleground.Protobuf.Coordinates.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.Effect), global::Loom.ZombieBattleground.Protobuf.Effect.Parser, new[]{ "Trigger", "Effect_", "Duration", "Target", "Limit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.Ability), global::Loom.ZombieBattleground.Protobuf.Ability.Parser, new[]{ "Type", "ActivityType", "CallType", "TargetType", "StatType", "SetType", "Value", "BuffType", "EffectType", "UnitType", "Count", "Name", "Turns", "Delay", "UnitStatus", "CardType", "Health", "Damage", "AttackInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardList), global::Loom.ZombieBattleground.Protobuf.CardList.Parser, new[]{ "Cards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardCollection), global::Loom.ZombieBattleground.Protobuf.CardCollection.Parser, new[]{ "CardName", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardSet), global::Loom.ZombieBattleground.Protobuf.CardSet.Parser, new[]{ "Name", "Cards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardLibrary), global::Loom.ZombieBattleground.Protobuf.CardLibrary.Parser, new[]{ "Sets" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.Hero), global::Loom.ZombieBattleground.Protobuf.Hero.Parser, new[]{ "HeroId", "Icon", "Name", "ShortDescription", "LongDescription", "Element", "Experience", "Level", "Skills", "PrimarySkill", "SecondarySkill" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.ListHeroesRequest), global::Loom.ZombieBattleground.Protobuf.ListHeroesRequest.Parser, new[]{ "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.ListHeroesResponse), global::Loom.ZombieBattleground.Protobuf.ListHeroesResponse.Parser, new[]{ "Heroes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.AddHeroExperienceRequest), global::Loom.ZombieBattleground.Protobuf.AddHeroExperienceRequest.Parser, new[]{ "UserId", "HeroId", "Experience" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.AddHeroExperienceResponse), global::Loom.ZombieBattleground.Protobuf.AddHeroExperienceResponse.Parser, new[]{ "HeroId", "Experience" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GetHeroRequest), global::Loom.ZombieBattleground.Protobuf.GetHeroRequest.Parser, new[]{ "UserId", "HeroId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GetHeroResponse), global::Loom.ZombieBattleground.Protobuf.GetHeroResponse.Parser, new[]{ "Hero" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GetHeroSkillsRequest), global::Loom.ZombieBattleground.Protobuf.GetHeroSkillsRequest.Parser, new[]{ "UserId", "HeroId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GetHeroSkillsResponse), global::Loom.ZombieBattleground.Protobuf.GetHeroSkillsResponse.Parser, new[]{ "HeroId", "Skills" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.Skill), global::Loom.ZombieBattleground.Protobuf.Skill.Parser, new[]{ "Title", "Skill_", "IconPath", "Description", "SkillTargets", "ElementTargets", "Value", "Cooldown", "InitialCooldown", "Attack", "Health" }, null, new[]{ typeof(global::Loom.ZombieBattleground.Protobuf.Skill.Types.SkillTargetType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.HeroList), global::Loom.ZombieBattleground.Protobuf.HeroList.Parser, new[]{ "Heroes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardCollectionList), global::Loom.ZombieBattleground.Protobuf.CardCollectionList.Parser, new[]{ "Cards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.DeckList), global::Loom.ZombieBattleground.Protobuf.DeckList.Parser, new[]{ "Decks", "LastModificationTimestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.InitRequest), global::Loom.ZombieBattleground.Protobuf.InitRequest.Parser, new[]{ "DefaultDecks", "DefaultCollection", "Cards", "Heroes", "Version", "Oracle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.UpdateOracle), global::Loom.ZombieBattleground.Protobuf.UpdateOracle.Parser, new[]{ "NewOracle", "OldOracle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.UpdateInitRequest), global::Loom.ZombieBattleground.Protobuf.UpdateInitRequest.Parser, new[]{ "DefaultDecks", "DefaultCollection", "Cards", "Heroes", "Version", "Oracle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.UpdateCardListRequest), global::Loom.ZombieBattleground.Protobuf.UpdateCardListRequest.Parser, new[]{ "Cards", "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.UpsertAccountRequest), global::Loom.ZombieBattleground.Protobuf.UpsertAccountRequest.Parser, new[]{ "UserId", "PhoneNumberVerified", "RewardRedeemed", "IsKickstarter", "Image", "EmailNotification", "EloScore", "CurrentTier", "GameMembershipTier", "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GetAccountRequest), global::Loom.ZombieBattleground.Protobuf.GetAccountRequest.Parser, new[]{ "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GetDeckRequest), global::Loom.ZombieBattleground.Protobuf.GetDeckRequest.Parser, new[]{ "UserId", "DeckId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GetDeckResponse), global::Loom.ZombieBattleground.Protobuf.GetDeckResponse.Parser, new[]{ "Deck" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CreateDeckRequest), global::Loom.ZombieBattleground.Protobuf.CreateDeckRequest.Parser, new[]{ "UserId", "Deck", "LastModificationTimestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CreateDeckResponse), global::Loom.ZombieBattleground.Protobuf.CreateDeckResponse.Parser, new[]{ "DeckId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.DeleteDeckRequest), global::Loom.ZombieBattleground.Protobuf.DeleteDeckRequest.Parser, new[]{ "UserId", "DeckId", "LastModificationTimestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.EditDeckRequest), global::Loom.ZombieBattleground.Protobuf.EditDeckRequest.Parser, new[]{ "UserId", "Deck", "LastModificationTimestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.DecksResponse), global::Loom.ZombieBattleground.Protobuf.DecksResponse.Parser, new[]{ "UserId", "Decks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.ListDecksRequest), global::Loom.ZombieBattleground.Protobuf.ListDecksRequest.Parser, new[]{ "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.ListDecksResponse), global::Loom.ZombieBattleground.Protobuf.ListDecksResponse.Parser, new[]{ "Decks", "LastModificationTimestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.ListCardLibraryRequest), global::Loom.ZombieBattleground.Protobuf.ListCardLibraryRequest.Parser, new[]{ "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.ListCardLibraryResponse), global::Loom.ZombieBattleground.Protobuf.ListCardLibraryResponse.Parser, new[]{ "Sets" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.ListHeroLibraryRequest), global::Loom.ZombieBattleground.Protobuf.ListHeroLibraryRequest.Parser, new[]{ "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.ListHeroLibraryResponse), global::Loom.ZombieBattleground.Protobuf.ListHeroLibraryResponse.Parser, new[]{ "Heroes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GetCollectionRequest), global::Loom.ZombieBattleground.Protobuf.GetCollectionRequest.Parser, new[]{ "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GetCollectionResponse), global::Loom.ZombieBattleground.Protobuf.GetCollectionResponse.Parser, new[]{ "Cards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerState), global::Loom.ZombieBattleground.Protobuf.PlayerState.Parser, new[]{ "Id", "CurrentAction", "OverlordInstance", "CardsInHand", "CardsOnBoard", "CardsInDeck", "Deck", "Hp", "Mana" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.Match), global::Loom.ZombieBattleground.Protobuf.Match.Parser, new[]{ "Id", "Topics", "PlayerStates", "Status" }, null, new[]{ typeof(global::Loom.ZombieBattleground.Protobuf.Match.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.MatchMakingInfoList), global::Loom.ZombieBattleground.Protobuf.MatchMakingInfoList.Parser, new[]{ "Infos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.MatchMakingInfo), global::Loom.ZombieBattleground.Protobuf.MatchMakingInfo.Parser, new[]{ "UserId", "Deck" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerAction), global::Loom.ZombieBattleground.Protobuf.PlayerAction.Parser, new[]{ "ActionType", "PlayerId", "CardAttack", "DrawCard", "EndTurn", "Mulligan", "CardPlay", "CardAbilityUsed", "OverlordSkillUsed", "CoinToss", "InitHands", "LeaveMatch" }, new[]{ "Action" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionEvent), global::Loom.ZombieBattleground.Protobuf.PlayerActionEvent.Parser, new[]{ "PlayerActionType", "UserId", "Message", "Match", "PlayerAction", "GameState" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GameReplay), global::Loom.ZombieBattleground.Protobuf.GameReplay.Parser, new[]{ "Events", "ReplayVersion", "RandomSeed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayersInMatchmakingList), global::Loom.ZombieBattleground.Protobuf.PlayersInMatchmakingList.Parser, new[]{ "UserIDs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PendingMatchList), global::Loom.ZombieBattleground.Protobuf.PendingMatchList.Parser, new[]{ "Matches" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.MatchList), global::Loom.ZombieBattleground.Protobuf.MatchList.Parser, new[]{ "Matches" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.MatchCount), global::Loom.ZombieBattleground.Protobuf.MatchCount.Parser, new[]{ "CurrentId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.FindMatchRequest), global::Loom.ZombieBattleground.Protobuf.FindMatchRequest.Parser, new[]{ "UserId", "DeckId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.FindMatchResponse), global::Loom.ZombieBattleground.Protobuf.FindMatchResponse.Parser, new[]{ "Match" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GetMatchRequest), global::Loom.ZombieBattleground.Protobuf.GetMatchRequest.Parser, new[]{ "MatchId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GetMatchResponse), global::Loom.ZombieBattleground.Protobuf.GetMatchResponse.Parser, new[]{ "Match", "GameState" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GetGameStateRequest), global::Loom.ZombieBattleground.Protobuf.GetGameStateRequest.Parser, new[]{ "MatchId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GetGameStateResponse), global::Loom.ZombieBattleground.Protobuf.GetGameStateResponse.Parser, new[]{ "GameState" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionRequest), global::Loom.ZombieBattleground.Protobuf.PlayerActionRequest.Parser, new[]{ "MatchId", "PlayerAction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionResponse), global::Loom.ZombieBattleground.Protobuf.PlayerActionResponse.Parser, new[]{ "GameState" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.EndMatchRequest), global::Loom.ZombieBattleground.Protobuf.EndMatchRequest.Parser, new[]{ "MatchId", "UserId", "WinnerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.EndMatchResponse), global::Loom.ZombieBattleground.Protobuf.EndMatchResponse.Parser, new[]{ "GameState" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GameMode), global::Loom.ZombieBattleground.Protobuf.GameMode.Parser, new[]{ "ID", "Name", "Description", "Version", "GameModeType", "Bytes", "Owner" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GameModeList), global::Loom.ZombieBattleground.Protobuf.GameModeList.Parser, new[]{ "GameModes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GameModeRequest), global::Loom.ZombieBattleground.Protobuf.GameModeRequest.Parser, new[]{ "Name", "Description", "Version", "Bytes", "GameModeType", "Oracle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.UpdateGameModeRequest), global::Loom.ZombieBattleground.Protobuf.UpdateGameModeRequest.Parser, new[]{ "ID", "Name", "Description", "Version", "Bytes", "GameModeType", "Oracle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.DeleteGameModeRequest), global::Loom.ZombieBattleground.Protobuf.DeleteGameModeRequest.Parser, new[]{ "ID", "Oracle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GetGameModeRequest), global::Loom.ZombieBattleground.Protobuf.GetGameModeRequest.Parser, new[]{ "ID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.ListGameModesRequest), global::Loom.ZombieBattleground.Protobuf.ListGameModesRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GlobalState), global::Loom.ZombieBattleground.Protobuf.GlobalState.Parser, new[]{ "CurrentGameId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.GameState), global::Loom.ZombieBattleground.Protobuf.GameState.Parser, new[]{ "Id", "IsEnded", "CurrentPlayerIndex", "PlayerStates", "CurrentActionIndex", "PlayerActions", "Randomseed", "Winner" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.AbilityInstance), global::Loom.ZombieBattleground.Protobuf.AbilityInstance.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardAbility), global::Loom.ZombieBattleground.Protobuf.CardAbility.Parser, new[]{ "AbilityType", "AbilityActivityType", "CardAbilityTrigger", "AllowedTargets", "AbilityStatType", "AbilitySetType", "CardAbilityEffect", "AttackRestriction", "TargetCardType", "TargetUnitSpecialStatusType", "TargetUnitType", "Value", "Damage", "Health", "AttackInfo", "Name", "Turns", "Count", "Delay" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardInstance), global::Loom.ZombieBattleground.Protobuf.CardInstance.Parser, new[]{ "InstanceId", "Prototype", "Defence", "Attack" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardPrototype), global::Loom.ZombieBattleground.Protobuf.CardPrototype.Parser, new[]{ "DataId", "CardSetType", "Name", "GooCost", "Description", "FlavorText", "Picture", "Frame", "InitialDamage", "InitialDefence", "Rank", "Type", "Abilities", "CardViewInfo", "CreatureRank", "CreatureType", "CardKind", "Kind" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.DataIdOwner), global::Loom.ZombieBattleground.Protobuf.DataIdOwner.Parser, new[]{ "DataId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.CardDeck), global::Loom.ZombieBattleground.Protobuf.CardDeck.Parser, new[]{ "Cards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.InstanceIdOwner), global::Loom.ZombieBattleground.Protobuf.InstanceIdOwner.Parser, new[]{ "InstanceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.OverlordInstance), global::Loom.ZombieBattleground.Protobuf.OverlordInstance.Parser, new[]{ "InstanceId", "Prototype", "FirstSkill", "SecondSkill", "Defence", "Goo", "MaxGoo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.OverlordPrototype), global::Loom.ZombieBattleground.Protobuf.OverlordPrototype.Parser, new[]{ "HeroId", "Icon", "Name", "ShortDescription", "LongDescription", "Experience", "Level", "Element", "Skills" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.OverlordSkillInstance), global::Loom.ZombieBattleground.Protobuf.OverlordSkillInstance.Parser, new[]{ "Prototype", "Cooldown" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.OverlordSkillPrototype), global::Loom.ZombieBattleground.Protobuf.OverlordSkillPrototype.Parser, new[]{ "Title", "Skill", "IconPath", "Description", "Cooldown", "InitialCooldown", "Parameter", "Attack", "OverlordSkillKind", "SkillTargetTypes", "ElementTargetTypes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionCoinToss), global::Loom.ZombieBattleground.Protobuf.PlayerActionCoinToss.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionInitHands), global::Loom.ZombieBattleground.Protobuf.PlayerActionInitHands.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionLeaveMatch), global::Loom.ZombieBattleground.Protobuf.PlayerActionLeaveMatch.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionCardPlay), global::Loom.ZombieBattleground.Protobuf.PlayerActionCardPlay.Parser, new[]{ "Card" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAttack), global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAttack.Parser, new[]{ "Attacker", "AffectObjectType", "Target" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAbilityUsed), global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAbilityUsed.Parser, new[]{ "Card", "AffectObjectType", "CardKind", "Targets", "AbilityType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionOverlordSkillUsed), global::Loom.ZombieBattleground.Protobuf.PlayerActionOverlordSkillUsed.Parser, new[]{ "SkillId", "AffectObjectType", "Target" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionDrawCard), global::Loom.ZombieBattleground.Protobuf.PlayerActionDrawCard.Parser, new[]{ "CardInstance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionEndTurn), global::Loom.ZombieBattleground.Protobuf.PlayerActionEndTurn.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionMulligan), global::Loom.ZombieBattleground.Protobuf.PlayerActionMulligan.Parser, new[]{ "MulliganedCards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome), global::Loom.ZombieBattleground.Protobuf.PlayerActionOutcome.Parser, new[]{ "PlayerId", "GameState" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.StartGameAction), global::Loom.ZombieBattleground.Protobuf.StartGameAction.Parser, new[]{ "PlayerStates" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.ZombieBattleground.Protobuf.Unit), global::Loom.ZombieBattleground.Protobuf.Unit.Parser, new[]{ "InstanceId" }, null, null, null)
                }));
        }
        #endregion

    }
    #region Enums
    public enum PlayerActionType
    {
        [pbr::OriginalName("NoneAction")] NoneAction = 0,
        [pbr::OriginalName("EndTurn")] EndTurn = 1,
        [pbr::OriginalName("Mulligan")] Mulligan = 2,
        [pbr::OriginalName("DrawCard")] DrawCard = 3,
        [pbr::OriginalName("CardPlay")] CardPlay = 4,
        [pbr::OriginalName("CardAttack")] CardAttack = 5,
        [pbr::OriginalName("CardAbilityUsed")] CardAbilityUsed = 6,
        [pbr::OriginalName("OverlordSkillUsed")] OverlordSkillUsed = 7,
        [pbr::OriginalName("CoinToss")] CoinToss = 8,
        [pbr::OriginalName("InitHands")] InitHands = 9,
        [pbr::OriginalName("LeaveMatch")] LeaveMatch = 10,
    }

    public enum GameModeType
    {
        [pbr::OriginalName("Community")] Community = 0,
        [pbr::OriginalName("Loom")] Loom = 1,
    }

    public enum AllowedTarget
    {
        [pbr::OriginalName("NoneAllowedTarget")] NoneAllowedTarget = 0,
        [pbr::OriginalName("Player")] Player = 1,
        [pbr::OriginalName("PlayerCard")] PlayerCard = 2,
        [pbr::OriginalName("PlayerAllCards")] PlayerAllCards = 3,
        [pbr::OriginalName("Opponent")] Opponent = 4,
        [pbr::OriginalName("OpponentCard")] OpponentCard = 5,
        [pbr::OriginalName("OpponentAllCards")] OpponentAllCards = 6,
        [pbr::OriginalName("AllCards")] AllCards = 7,
        [pbr::OriginalName("All")] All = 8,
    }

    public enum AttackRestriction
    {
        [pbr::OriginalName("NoneAttackRestriction")] NoneAttackRestriction = 0,
        [pbr::OriginalName("OnlyNotAttackedByThisUnitInThisTurn")] OnlyNotAttackedByThisUnitInThisTurn = 1,
    }

    public enum CardAbilityActivityType
    {
        [pbr::OriginalName("Passive")] Passive = 0,
        [pbr::OriginalName("Active")] Active = 1,
    }

    public enum CardAbilityEffect
    {
        [pbr::OriginalName("NoneCardAbilityEffect")] NoneCardAbilityEffect = 0,
        [pbr::OriginalName("MassiveWaterWave")] MassiveWaterWave = 1,
        [pbr::OriginalName("MassiveFire")] MassiveFire = 2,
        [pbr::OriginalName("MassiveLightning")] MassiveLightning = 3,
        [pbr::OriginalName("MassiveToxicAll")] MassiveToxicAll = 4,
        [pbr::OriginalName("TargetRock")] TargetRock = 5,
        [pbr::OriginalName("TargetFire")] TargetFire = 6,
        [pbr::OriginalName("TargetLife")] TargetLife = 7,
        [pbr::OriginalName("TargetToxic")] TargetToxic = 8,
        [pbr::OriginalName("TargetWater")] TargetWater = 9,
        [pbr::OriginalName("TargetAdjustmentsBomb")] TargetAdjustmentsBomb = 10,
        [pbr::OriginalName("StunFreezes")] StunFreezes = 11,
        [pbr::OriginalName("StunOrDamageFreezes")] StunOrDamageFreezes = 12,
        [pbr::OriginalName("TargetAdjustmentsAir")] TargetAdjustmentsAir = 13,
        [pbr::OriginalName("HealDirectly")] HealDirectly = 14,
        [pbr::OriginalName("HealCardAbilityEffect")] HealCardAbilityEffect = 15,
    }

    public enum CardAbilityTrigger
    {
        [pbr::OriginalName("Turn")] Turn = 0,
        [pbr::OriginalName("Entry")] Entry = 1,
        [pbr::OriginalName("End")] End = 2,
        [pbr::OriginalName("Attack")] Attack = 3,
        [pbr::OriginalName("Death")] Death = 4,
        [pbr::OriginalName("Permanent")] Permanent = 5,
        [pbr::OriginalName("GotDamage")] GotDamage = 6,
        [pbr::OriginalName("AtDefence")] AtDefence = 7,
        [pbr::OriginalName("InHand")] InHand = 8,
    }

    public enum CardAbilityType
    {
        [pbr::OriginalName("HealCardAbilityType")] HealCardAbilityType = 0,
        [pbr::OriginalName("ModificatorStats")] ModificatorStats = 1,
        [pbr::OriginalName("ChangeStat")] ChangeStat = 2,
        [pbr::OriginalName("Stun")] Stun = 3,
        [pbr::OriginalName("StunOrDamageAdjustments")] StunOrDamageAdjustments = 4,
        [pbr::OriginalName("Spurt")] Spurt = 5,
        [pbr::OriginalName("AddGooVial")] AddGooVial = 6,
        [pbr::OriginalName("AddGooCarrier")] AddGooCarrier = 7,
        [pbr::OriginalName("Dot")] Dot = 8,
        [pbr::OriginalName("Summon")] Summon = 9,
        [pbr::OriginalName("SpellAttack")] SpellAttack = 10,
        [pbr::OriginalName("MassiveDamage")] MassiveDamage = 11,
        [pbr::OriginalName("DamageTargetAdjustments")] DamageTargetAdjustments = 12,
        [pbr::OriginalName("DamageTarget")] DamageTarget = 13,
        [pbr::OriginalName("CardReturn")] CardReturn = 14,
        [pbr::OriginalName("Weapon")] Weapon = 15,
        [pbr::OriginalName("ChangeStatOfCreaturesByType")] ChangeStatOfCreaturesByType = 16,
        [pbr::OriginalName("AttackNumberOfTimesPerTurn")] AttackNumberOfTimesPerTurn = 17,
        [pbr::OriginalName("DrawCardCardAbilityType")] DrawCardCardAbilityType = 18,
        [pbr::OriginalName("DevourZombiesAndCombineStats")] DevourZombiesAndCombineStats = 19,
        [pbr::OriginalName("DestroyUnitByType")] DestroyUnitByType = 20,
        [pbr::OriginalName("LowerCostOfCardInHand")] LowerCostOfCardInHand = 21,
        [pbr::OriginalName("OverflowGoo")] OverflowGoo = 22,
        [pbr::OriginalName("LoseGoo")] LoseGoo = 23,
        [pbr::OriginalName("DisableNextTurnGoo")] DisableNextTurnGoo = 24,
        [pbr::OriginalName("Rage")] Rage = 25,
        [pbr::OriginalName("FreezeUnits")] FreezeUnits = 26,
        [pbr::OriginalName("TakeDamageRandomEnemy")] TakeDamageRandomEnemy = 27,
        [pbr::OriginalName("TakeControlEnemyUnit")] TakeControlEnemyUnit = 28,
        [pbr::OriginalName("Guard")] Guard = 29,
        [pbr::OriginalName("DestroyFrozenUnit")] DestroyFrozenUnit = 30,
        [pbr::OriginalName("UseAllGooToIncreaseStats")] UseAllGooToIncreaseStats = 31,
        [pbr::OriginalName("FirstUnitInPlay")] FirstUnitInPlay = 32,
        [pbr::OriginalName("AllyUnitsOfTypeInPlayGetStats")] AllyUnitsOfTypeInPlayGetStats = 33,
        [pbr::OriginalName("DamageEnemyUnitsAndFreezeThem")] DamageEnemyUnitsAndFreezeThem = 34,
        [pbr::OriginalName("ReturnUnitsOnBoardToOwnersDecks")] ReturnUnitsOnBoardToOwnersDecks = 35,
        [pbr::OriginalName("TakeUnitTypeToAdjacentAllyUnits")] TakeUnitTypeToAdjacentAllyUnits = 36,
        [pbr::OriginalName("EnemyThatAttacksBecomeFrozen")] EnemyThatAttacksBecomeFrozen = 37,
        [pbr::OriginalName("TakeUnitTypeToAllyUnit")] TakeUnitTypeToAllyUnit = 38,
        [pbr::OriginalName("ReviveDiedUnitsOfTypeFromMatch")] ReviveDiedUnitsOfTypeFromMatch = 39,
        [pbr::OriginalName("ChangeStatUntillEndOfTurn")] ChangeStatUntillEndOfTurn = 40,
        [pbr::OriginalName("AttackOverlord")] AttackOverlord = 41,
        [pbr::OriginalName("AdjacentUnitsGetHeavy")] AdjacentUnitsGetHeavy = 42,
        [pbr::OriginalName("FreezeNumberOfRandomAlly")] FreezeNumberOfRandomAlly = 43,
        [pbr::OriginalName("AddCardByNameToHand")] AddCardByNameToHand = 44,
        [pbr::OriginalName("DealDamageToThisAndAdjacentUnits")] DealDamageToThisAndAdjacentUnits = 45,
        [pbr::OriginalName("Swing")] Swing = 46,
        [pbr::OriginalName("TakeDefenceIfOverlordHasLessDefenceThan")] TakeDefenceIfOverlordHasLessDefenceThan = 47,
        [pbr::OriginalName("GainNumberOfLifeForEachDamageThisDeals")] GainNumberOfLifeForEachDamageThisDeals = 48,
        [pbr::OriginalName("AdditionalDamageToHeavyInAttack")] AdditionalDamageToHeavyInAttack = 49,
        [pbr::OriginalName("UnitWeapon")] UnitWeapon = 50,
        [pbr::OriginalName("TakeDamageAtEndOfTurnToThis")] TakeDamageAtEndOfTurnToThis = 51,
        [pbr::OriginalName("DelayedLoseHeavyGainAttack")] DelayedLoseHeavyGainAttack = 52,
        [pbr::OriginalName("DelayedGainAttack")] DelayedGainAttack = 53,
        [pbr::OriginalName("ReanimateUnit")] ReanimateUnit = 54,
        [pbr::OriginalName("PriorityAttack")] PriorityAttack = 55,
        [pbr::OriginalName("DestroyTargetUnitAfterAttack")] DestroyTargetUnitAfterAttack = 56,
        [pbr::OriginalName("CostsLessIfCardTypeInHand")] CostsLessIfCardTypeInHand = 57,
        [pbr::OriginalName("ReturnUnitsOnBoardToOwnersHands")] ReturnUnitsOnBoardToOwnersHands = 58,
    }

    public enum CardKind
    {
        [pbr::OriginalName("SPELL")] Spell = 0,
        [pbr::OriginalName("CREATURE")] Creature = 1,
    }

    public enum AffectObjectType
    {
        [pbr::OriginalName("PLAYER")] Player = 0,
        [pbr::OriginalName("CHARACTER")] Character = 1,
        [pbr::OriginalName("CARD")] Card = 2,
    }

    public enum CreatureRank
    {
        [pbr::OriginalName("Minion")] Minion = 0,
        [pbr::OriginalName("Officer")] Officer = 1,
        [pbr::OriginalName("Commander")] Commander = 2,
        [pbr::OriginalName("General")] General = 3,
    }

    public enum CreatureType
    {
        [pbr::OriginalName("Walker")] Walker = 0,
        [pbr::OriginalName("Feral")] Feral = 1,
        [pbr::OriginalName("Heavy")] Heavy = 2,
        [pbr::OriginalName("None")] None = 3,
    }

    public enum ElementKind
    {
        [pbr::OriginalName("Fire")] Fire = 0,
        [pbr::OriginalName("Water")] Water = 1,
        [pbr::OriginalName("Earth")] Earth = 2,
        [pbr::OriginalName("Air")] Air = 3,
        [pbr::OriginalName("Life")] Life = 4,
        [pbr::OriginalName("Toxic")] Toxic = 5,
        [pbr::OriginalName("Item")] Item = 6,
        [pbr::OriginalName("Others")] Others = 7,
        [pbr::OriginalName("NoneElementKind")] NoneElementKind = 8,
    }

    public enum OverlordSkillKind
    {
        [pbr::OriginalName("NoneOverlordSkillKind")] NoneOverlordSkillKind = 0,
        /// <summary>
        /// AIR
        /// </summary>
        [pbr::OriginalName("Push")] Push = 1,
        [pbr::OriginalName("Draw")] Draw = 2,
        [pbr::OriginalName("WindShield")] WindShield = 3,
        [pbr::OriginalName("WindWall")] WindWall = 4,
        [pbr::OriginalName("Retreat")] Retreat = 5,
        /// <summary>
        /// EARTH
        /// </summary>
        [pbr::OriginalName("Harden")] Harden = 6,
        [pbr::OriginalName("StoneSkin")] StoneSkin = 7,
        [pbr::OriginalName("Fortify")] Fortify = 8,
        [pbr::OriginalName("Phalanx")] Phalanx = 9,
        [pbr::OriginalName("Fortress")] Fortress = 10,
        /// <summary>
        /// FIRE
        /// </summary>
        [pbr::OriginalName("FireBolt")] FireBolt = 11,
        [pbr::OriginalName("Rabies")] Rabies = 12,
        [pbr::OriginalName("Fireball")] Fireball = 13,
        [pbr::OriginalName("MassRabies")] MassRabies = 14,
        [pbr::OriginalName("MeteorShower")] MeteorShower = 15,
        /// <summary>
        /// LIFE
        /// </summary>
        [pbr::OriginalName("HealingTouch")] HealingTouch = 16,
        [pbr::OriginalName("Mend")] Mend = 17,
        [pbr::OriginalName("Ressurect")] Ressurect = 18,
        [pbr::OriginalName("Enhance")] Enhance = 19,
        [pbr::OriginalName("Reanimate")] Reanimate = 20,
        /// <summary>
        /// TOXIC
        /// </summary>
        [pbr::OriginalName("PoisonDart")] PoisonDart = 21,
        [pbr::OriginalName("ToxicPower")] ToxicPower = 22,
        [pbr::OriginalName("Breakout")] Breakout = 23,
        [pbr::OriginalName("Infect")] Infect = 24,
        [pbr::OriginalName("Epidemic")] Epidemic = 25,
        /// <summary>
        /// WATER
        /// </summary>
        [pbr::OriginalName("Freeze")] Freeze = 26,
        [pbr::OriginalName("IceBolt")] IceBolt = 27,
        [pbr::OriginalName("IceWall")] IceWall = 28,
        [pbr::OriginalName("Shatter")] Shatter = 29,
        [pbr::OriginalName("Blizzard")] Blizzard = 30,
    }

    public enum OverlordSkillSelectionType
    {
        [pbr::OriginalName("Primary")] Primary = 0,
        [pbr::OriginalName("Secondary")] Secondary = 1,
    }

    public enum StatType
    {
        [pbr::OriginalName("NoneStatType")] NoneStatType = 0,
        [pbr::OriginalName("Health")] Health = 1,
        [pbr::OriginalName("Damage")] Damage = 2,
    }

    public enum UnitSpecialStatus
    {
        [pbr::OriginalName("NoneUnitSpecialStatus")] NoneUnitSpecialStatus = 0,
        [pbr::OriginalName("Frozen")] Frozen = 1,
    }

    #endregion

    #region Messages
    public sealed partial class Account : pb::IMessage<Account>
    {
        private static readonly pb::MessageParser<Account> _parser = new pb::MessageParser<Account>(() => new Account());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Account> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Account()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Account(Account other) : this()
        {
            userId_ = other.userId_;
            phoneNumberVerified_ = other.phoneNumberVerified_;
            rewardRedeemed_ = other.rewardRedeemed_;
            isKickstarter_ = other.isKickstarter_;
            image_ = other.image_;
            emailNotification_ = other.emailNotification_;
            eloScore_ = other.eloScore_;
            currentTier_ = other.currentTier_;
            gameMembershipTier_ = other.gameMembershipTier_;
            owner_ = other.owner_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Account Clone()
        {
            return new Account(this);
        }

        /// <summary>Field number for the "user_id" field.</summary>
        public const int UserIdFieldNumber = 1;
        private string userId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserId
        {
            get { return userId_; }
            set
            {
                userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "phone_number_verified" field.</summary>
        public const int PhoneNumberVerifiedFieldNumber = 2;
        private bool phoneNumberVerified_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool PhoneNumberVerified
        {
            get { return phoneNumberVerified_; }
            set
            {
                phoneNumberVerified_ = value;
            }
        }

        /// <summary>Field number for the "reward_redeemed" field.</summary>
        public const int RewardRedeemedFieldNumber = 3;
        private bool rewardRedeemed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool RewardRedeemed
        {
            get { return rewardRedeemed_; }
            set
            {
                rewardRedeemed_ = value;
            }
        }

        /// <summary>Field number for the "is_kickstarter" field.</summary>
        public const int IsKickstarterFieldNumber = 4;
        private bool isKickstarter_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsKickstarter
        {
            get { return isKickstarter_; }
            set
            {
                isKickstarter_ = value;
            }
        }

        /// <summary>Field number for the "image" field.</summary>
        public const int ImageFieldNumber = 5;
        private string image_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Image
        {
            get { return image_; }
            set
            {
                image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "email_notification" field.</summary>
        public const int EmailNotificationFieldNumber = 6;
        private bool emailNotification_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool EmailNotification
        {
            get { return emailNotification_; }
            set
            {
                emailNotification_ = value;
            }
        }

        /// <summary>Field number for the "elo_score" field.</summary>
        public const int EloScoreFieldNumber = 7;
        private long eloScore_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long EloScore
        {
            get { return eloScore_; }
            set
            {
                eloScore_ = value;
            }
        }

        /// <summary>Field number for the "current_tier" field.</summary>
        public const int CurrentTierFieldNumber = 8;
        private int currentTier_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CurrentTier
        {
            get { return currentTier_; }
            set
            {
                currentTier_ = value;
            }
        }

        /// <summary>Field number for the "game_membership_tier" field.</summary>
        public const int GameMembershipTierFieldNumber = 9;
        private int gameMembershipTier_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int GameMembershipTier
        {
            get { return gameMembershipTier_; }
            set
            {
                gameMembershipTier_ = value;
            }
        }

        /// <summary>Field number for the "owner" field.</summary>
        public const int OwnerFieldNumber = 10;
        private pb::ByteString owner_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Owner
        {
            get { return owner_; }
            set
            {
                owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Account);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Account other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (UserId != other.UserId) return false;
            if (PhoneNumberVerified != other.PhoneNumberVerified) return false;
            if (RewardRedeemed != other.RewardRedeemed) return false;
            if (IsKickstarter != other.IsKickstarter) return false;
            if (Image != other.Image) return false;
            if (EmailNotification != other.EmailNotification) return false;
            if (EloScore != other.EloScore) return false;
            if (CurrentTier != other.CurrentTier) return false;
            if (GameMembershipTier != other.GameMembershipTier) return false;
            if (Owner != other.Owner) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (UserId.Length != 0) hash ^= UserId.GetHashCode();
            if (PhoneNumberVerified != false) hash ^= PhoneNumberVerified.GetHashCode();
            if (RewardRedeemed != false) hash ^= RewardRedeemed.GetHashCode();
            if (IsKickstarter != false) hash ^= IsKickstarter.GetHashCode();
            if (Image.Length != 0) hash ^= Image.GetHashCode();
            if (EmailNotification != false) hash ^= EmailNotification.GetHashCode();
            if (EloScore != 0L) hash ^= EloScore.GetHashCode();
            if (CurrentTier != 0) hash ^= CurrentTier.GetHashCode();
            if (GameMembershipTier != 0) hash ^= GameMembershipTier.GetHashCode();
            if (Owner.Length != 0) hash ^= Owner.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (UserId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(UserId);
            }
            if (PhoneNumberVerified != false)
            {
                output.WriteRawTag(16);
                output.WriteBool(PhoneNumberVerified);
            }
            if (RewardRedeemed != false)
            {
                output.WriteRawTag(24);
                output.WriteBool(RewardRedeemed);
            }
            if (IsKickstarter != false)
            {
                output.WriteRawTag(32);
                output.WriteBool(IsKickstarter);
            }
            if (Image.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteString(Image);
            }
            if (EmailNotification != false)
            {
                output.WriteRawTag(48);
                output.WriteBool(EmailNotification);
            }
            if (EloScore != 0L)
            {
                output.WriteRawTag(56);
                output.WriteInt64(EloScore);
            }
            if (CurrentTier != 0)
            {
                output.WriteRawTag(64);
                output.WriteInt32(CurrentTier);
            }
            if (GameMembershipTier != 0)
            {
                output.WriteRawTag(72);
                output.WriteInt32(GameMembershipTier);
            }
            if (Owner.Length != 0)
            {
                output.WriteRawTag(82);
                output.WriteBytes(Owner);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (UserId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
            }
            if (PhoneNumberVerified != false)
            {
                size += 1 + 1;
            }
            if (RewardRedeemed != false)
            {
                size += 1 + 1;
            }
            if (IsKickstarter != false)
            {
                size += 1 + 1;
            }
            if (Image.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Image);
            }
            if (EmailNotification != false)
            {
                size += 1 + 1;
            }
            if (EloScore != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(EloScore);
            }
            if (CurrentTier != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentTier);
            }
            if (GameMembershipTier != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameMembershipTier);
            }
            if (Owner.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Owner);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Account other)
        {
            if (other == null)
            {
                return;
            }
            if (other.UserId.Length != 0)
            {
                UserId = other.UserId;
            }
            if (other.PhoneNumberVerified != false)
            {
                PhoneNumberVerified = other.PhoneNumberVerified;
            }
            if (other.RewardRedeemed != false)
            {
                RewardRedeemed = other.RewardRedeemed;
            }
            if (other.IsKickstarter != false)
            {
                IsKickstarter = other.IsKickstarter;
            }
            if (other.Image.Length != 0)
            {
                Image = other.Image;
            }
            if (other.EmailNotification != false)
            {
                EmailNotification = other.EmailNotification;
            }
            if (other.EloScore != 0L)
            {
                EloScore = other.EloScore;
            }
            if (other.CurrentTier != 0)
            {
                CurrentTier = other.CurrentTier;
            }
            if (other.GameMembershipTier != 0)
            {
                GameMembershipTier = other.GameMembershipTier;
            }
            if (other.Owner.Length != 0)
            {
                Owner = other.Owner;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            UserId = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            PhoneNumberVerified = input.ReadBool();
                            break;
                        }
                    case 24:
                        {
                            RewardRedeemed = input.ReadBool();
                            break;
                        }
                    case 32:
                        {
                            IsKickstarter = input.ReadBool();
                            break;
                        }
                    case 42:
                        {
                            Image = input.ReadString();
                            break;
                        }
                    case 48:
                        {
                            EmailNotification = input.ReadBool();
                            break;
                        }
                    case 56:
                        {
                            EloScore = input.ReadInt64();
                            break;
                        }
                    case 64:
                        {
                            CurrentTier = input.ReadInt32();
                            break;
                        }
                    case 72:
                        {
                            GameMembershipTier = input.ReadInt32();
                            break;
                        }
                    case 82:
                        {
                            Owner = input.ReadBytes();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Deck : pb::IMessage<Deck>
    {
        private static readonly pb::MessageParser<Deck> _parser = new pb::MessageParser<Deck>(() => new Deck());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Deck> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Deck()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Deck(Deck other) : this()
        {
            id_ = other.id_;
            name_ = other.name_;
            heroId_ = other.heroId_;
            cards_ = other.cards_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Deck Clone()
        {
            return new Deck(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private long id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Id
        {
            get { return id_; }
            set
            {
                id_ = value;
            }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name
        {
            get { return name_; }
            set
            {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "hero_id" field.</summary>
        public const int HeroIdFieldNumber = 3;
        private long heroId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long HeroId
        {
            get { return heroId_; }
            set
            {
                heroId_ = value;
            }
        }

        /// <summary>Field number for the "cards" field.</summary>
        public const int CardsFieldNumber = 4;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardCollection> _repeated_cards_codec
            = pb::FieldCodec.ForMessage(34, global::Loom.ZombieBattleground.Protobuf.CardCollection.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollection> cards_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollection>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollection> Cards
        {
            get { return cards_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Deck);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Deck other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Id != other.Id) return false;
            if (Name != other.Name) return false;
            if (HeroId != other.HeroId) return false;
            if (!cards_.Equals(other.cards_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Id != 0L) hash ^= Id.GetHashCode();
            if (Name.Length != 0) hash ^= Name.GetHashCode();
            if (HeroId != 0L) hash ^= HeroId.GetHashCode();
            hash ^= cards_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Id != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(Id);
            }
            if (Name.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Name);
            }
            if (HeroId != 0L)
            {
                output.WriteRawTag(24);
                output.WriteInt64(HeroId);
            }
            cards_.WriteTo(output, _repeated_cards_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Id != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
            }
            if (Name.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
            }
            if (HeroId != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
            }
            size += cards_.CalculateSize(_repeated_cards_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Deck other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Id != 0L)
            {
                Id = other.Id;
            }
            if (other.Name.Length != 0)
            {
                Name = other.Name;
            }
            if (other.HeroId != 0L)
            {
                HeroId = other.HeroId;
            }
            cards_.Add(other.cards_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Id = input.ReadInt64();
                            break;
                        }
                    case 18:
                        {
                            Name = input.ReadString();
                            break;
                        }
                    case 24:
                        {
                            HeroId = input.ReadInt64();
                            break;
                        }
                    case 34:
                        {
                            cards_.AddEntriesFrom(input, _repeated_cards_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Card : pb::IMessage<Card>
    {
        private static readonly pb::MessageParser<Card> _parser = new pb::MessageParser<Card>(() => new Card());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Card> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Card()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Card(Card other) : this()
        {
            id_ = other.id_;
            kind_ = other.kind_;
            set_ = other.set_;
            name_ = other.name_;
            description_ = other.description_;
            flavorText_ = other.flavorText_;
            picture_ = other.picture_;
            rank_ = other.rank_;
            type_ = other.type_;
            rarity_ = other.rarity_;
            frame_ = other.frame_;
            damage_ = other.damage_;
            health_ = other.health_;
            cost_ = other.cost_;
            ability_ = other.ability_;
            cardViewInfo_ = other.cardViewInfo_ != null ? other.cardViewInfo_.Clone() : null;
            effects_ = other.effects_.Clone();
            abilities_ = other.abilities_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Card Clone()
        {
            return new Card(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private long id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Id
        {
            get { return id_; }
            set
            {
                id_ = value;
            }
        }

        /// <summary>Field number for the "kind" field.</summary>
        public const int KindFieldNumber = 2;
        private string kind_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Kind
        {
            get { return kind_; }
            set
            {
                kind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "set" field.</summary>
        public const int SetFieldNumber = 3;
        private string set_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Set
        {
            get { return set_; }
            set
            {
                set_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 4;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name
        {
            get { return name_; }
            set
            {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "description" field.</summary>
        public const int DescriptionFieldNumber = 5;
        private string description_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Description
        {
            get { return description_; }
            set
            {
                description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "flavor_text" field.</summary>
        public const int FlavorTextFieldNumber = 6;
        private string flavorText_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FlavorText
        {
            get { return flavorText_; }
            set
            {
                flavorText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "picture" field.</summary>
        public const int PictureFieldNumber = 7;
        private string picture_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Picture
        {
            get { return picture_; }
            set
            {
                picture_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "rank" field.</summary>
        public const int RankFieldNumber = 8;
        private string rank_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Rank
        {
            get { return rank_; }
            set
            {
                rank_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 9;
        private string type_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Type
        {
            get { return type_; }
            set
            {
                type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "rarity" field.</summary>
        public const int RarityFieldNumber = 10;
        private string rarity_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Rarity
        {
            get { return rarity_; }
            set
            {
                rarity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "frame" field.</summary>
        public const int FrameFieldNumber = 11;
        private string frame_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Frame
        {
            get { return frame_; }
            set
            {
                frame_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "damage" field.</summary>
        public const int DamageFieldNumber = 12;
        private int damage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Damage
        {
            get { return damage_; }
            set
            {
                damage_ = value;
            }
        }

        /// <summary>Field number for the "health" field.</summary>
        public const int HealthFieldNumber = 13;
        private int health_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Health
        {
            get { return health_; }
            set
            {
                health_ = value;
            }
        }

        /// <summary>Field number for the "cost" field.</summary>
        public const int CostFieldNumber = 14;
        private int cost_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Cost
        {
            get { return cost_; }
            set
            {
                cost_ = value;
            }
        }

        /// <summary>Field number for the "ability" field.</summary>
        public const int AbilityFieldNumber = 15;
        private string ability_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Ability
        {
            get { return ability_; }
            set
            {
                ability_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "card_view_info" field.</summary>
        public const int CardViewInfoFieldNumber = 16;
        private global::Loom.ZombieBattleground.Protobuf.CardViewInfo cardViewInfo_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.CardViewInfo CardViewInfo
        {
            get { return cardViewInfo_; }
            set
            {
                cardViewInfo_ = value;
            }
        }

        /// <summary>Field number for the "effects" field.</summary>
        public const int EffectsFieldNumber = 17;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Effect> _repeated_effects_codec
            = pb::FieldCodec.ForMessage(138, global::Loom.ZombieBattleground.Protobuf.Effect.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Effect> effects_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Effect>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Effect> Effects
        {
            get { return effects_; }
        }

        /// <summary>Field number for the "abilities" field.</summary>
        public const int AbilitiesFieldNumber = 18;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Ability> _repeated_abilities_codec
            = pb::FieldCodec.ForMessage(146, global::Loom.ZombieBattleground.Protobuf.Ability.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Ability> abilities_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Ability>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Ability> Abilities
        {
            get { return abilities_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Card);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Card other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Id != other.Id) return false;
            if (Kind != other.Kind) return false;
            if (Set != other.Set) return false;
            if (Name != other.Name) return false;
            if (Description != other.Description) return false;
            if (FlavorText != other.FlavorText) return false;
            if (Picture != other.Picture) return false;
            if (Rank != other.Rank) return false;
            if (Type != other.Type) return false;
            if (Rarity != other.Rarity) return false;
            if (Frame != other.Frame) return false;
            if (Damage != other.Damage) return false;
            if (Health != other.Health) return false;
            if (Cost != other.Cost) return false;
            if (Ability != other.Ability) return false;
            if (!object.Equals(CardViewInfo, other.CardViewInfo)) return false;
            if (!effects_.Equals(other.effects_)) return false;
            if (!abilities_.Equals(other.abilities_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Id != 0L) hash ^= Id.GetHashCode();
            if (Kind.Length != 0) hash ^= Kind.GetHashCode();
            if (Set.Length != 0) hash ^= Set.GetHashCode();
            if (Name.Length != 0) hash ^= Name.GetHashCode();
            if (Description.Length != 0) hash ^= Description.GetHashCode();
            if (FlavorText.Length != 0) hash ^= FlavorText.GetHashCode();
            if (Picture.Length != 0) hash ^= Picture.GetHashCode();
            if (Rank.Length != 0) hash ^= Rank.GetHashCode();
            if (Type.Length != 0) hash ^= Type.GetHashCode();
            if (Rarity.Length != 0) hash ^= Rarity.GetHashCode();
            if (Frame.Length != 0) hash ^= Frame.GetHashCode();
            if (Damage != 0) hash ^= Damage.GetHashCode();
            if (Health != 0) hash ^= Health.GetHashCode();
            if (Cost != 0) hash ^= Cost.GetHashCode();
            if (Ability.Length != 0) hash ^= Ability.GetHashCode();
            if (cardViewInfo_ != null) hash ^= CardViewInfo.GetHashCode();
            hash ^= effects_.GetHashCode();
            hash ^= abilities_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Id != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(Id);
            }
            if (Kind.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Kind);
            }
            if (Set.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(Set);
            }
            if (Name.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(Name);
            }
            if (Description.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteString(Description);
            }
            if (FlavorText.Length != 0)
            {
                output.WriteRawTag(50);
                output.WriteString(FlavorText);
            }
            if (Picture.Length != 0)
            {
                output.WriteRawTag(58);
                output.WriteString(Picture);
            }
            if (Rank.Length != 0)
            {
                output.WriteRawTag(66);
                output.WriteString(Rank);
            }
            if (Type.Length != 0)
            {
                output.WriteRawTag(74);
                output.WriteString(Type);
            }
            if (Rarity.Length != 0)
            {
                output.WriteRawTag(82);
                output.WriteString(Rarity);
            }
            if (Frame.Length != 0)
            {
                output.WriteRawTag(90);
                output.WriteString(Frame);
            }
            if (Damage != 0)
            {
                output.WriteRawTag(96);
                output.WriteInt32(Damage);
            }
            if (Health != 0)
            {
                output.WriteRawTag(104);
                output.WriteInt32(Health);
            }
            if (Cost != 0)
            {
                output.WriteRawTag(112);
                output.WriteInt32(Cost);
            }
            if (Ability.Length != 0)
            {
                output.WriteRawTag(122);
                output.WriteString(Ability);
            }
            if (cardViewInfo_ != null)
            {
                output.WriteRawTag(130, 1);
                output.WriteMessage(CardViewInfo);
            }
            effects_.WriteTo(output, _repeated_effects_codec);
            abilities_.WriteTo(output, _repeated_abilities_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Id != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
            }
            if (Kind.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Kind);
            }
            if (Set.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Set);
            }
            if (Name.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
            }
            if (Description.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
            }
            if (FlavorText.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(FlavorText);
            }
            if (Picture.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Picture);
            }
            if (Rank.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Rank);
            }
            if (Type.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
            }
            if (Rarity.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Rarity);
            }
            if (Frame.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Frame);
            }
            if (Damage != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
            }
            if (Health != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Health);
            }
            if (Cost != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
            }
            if (Ability.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Ability);
            }
            if (cardViewInfo_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(CardViewInfo);
            }
            size += effects_.CalculateSize(_repeated_effects_codec);
            size += abilities_.CalculateSize(_repeated_abilities_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Card other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Id != 0L)
            {
                Id = other.Id;
            }
            if (other.Kind.Length != 0)
            {
                Kind = other.Kind;
            }
            if (other.Set.Length != 0)
            {
                Set = other.Set;
            }
            if (other.Name.Length != 0)
            {
                Name = other.Name;
            }
            if (other.Description.Length != 0)
            {
                Description = other.Description;
            }
            if (other.FlavorText.Length != 0)
            {
                FlavorText = other.FlavorText;
            }
            if (other.Picture.Length != 0)
            {
                Picture = other.Picture;
            }
            if (other.Rank.Length != 0)
            {
                Rank = other.Rank;
            }
            if (other.Type.Length != 0)
            {
                Type = other.Type;
            }
            if (other.Rarity.Length != 0)
            {
                Rarity = other.Rarity;
            }
            if (other.Frame.Length != 0)
            {
                Frame = other.Frame;
            }
            if (other.Damage != 0)
            {
                Damage = other.Damage;
            }
            if (other.Health != 0)
            {
                Health = other.Health;
            }
            if (other.Cost != 0)
            {
                Cost = other.Cost;
            }
            if (other.Ability.Length != 0)
            {
                Ability = other.Ability;
            }
            if (other.cardViewInfo_ != null)
            {
                if (cardViewInfo_ == null)
                {
                    cardViewInfo_ = new global::Loom.ZombieBattleground.Protobuf.CardViewInfo();
                }
                CardViewInfo.MergeFrom(other.CardViewInfo);
            }
            effects_.Add(other.effects_);
            abilities_.Add(other.abilities_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Id = input.ReadInt64();
                            break;
                        }
                    case 18:
                        {
                            Kind = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            Set = input.ReadString();
                            break;
                        }
                    case 34:
                        {
                            Name = input.ReadString();
                            break;
                        }
                    case 42:
                        {
                            Description = input.ReadString();
                            break;
                        }
                    case 50:
                        {
                            FlavorText = input.ReadString();
                            break;
                        }
                    case 58:
                        {
                            Picture = input.ReadString();
                            break;
                        }
                    case 66:
                        {
                            Rank = input.ReadString();
                            break;
                        }
                    case 74:
                        {
                            Type = input.ReadString();
                            break;
                        }
                    case 82:
                        {
                            Rarity = input.ReadString();
                            break;
                        }
                    case 90:
                        {
                            Frame = input.ReadString();
                            break;
                        }
                    case 96:
                        {
                            Damage = input.ReadInt32();
                            break;
                        }
                    case 104:
                        {
                            Health = input.ReadInt32();
                            break;
                        }
                    case 112:
                        {
                            Cost = input.ReadInt32();
                            break;
                        }
                    case 122:
                        {
                            Ability = input.ReadString();
                            break;
                        }
                    case 130:
                        {
                            if (cardViewInfo_ == null)
                            {
                                cardViewInfo_ = new global::Loom.ZombieBattleground.Protobuf.CardViewInfo();
                            }
                            input.ReadMessage(cardViewInfo_);
                            break;
                        }
                    case 138:
                        {
                            effects_.AddEntriesFrom(input, _repeated_effects_codec);
                            break;
                        }
                    case 146:
                        {
                            abilities_.AddEntriesFrom(input, _repeated_abilities_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class CardViewInfo : pb::IMessage<CardViewInfo>
    {
        private static readonly pb::MessageParser<CardViewInfo> _parser = new pb::MessageParser<CardViewInfo>(() => new CardViewInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CardViewInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardViewInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardViewInfo(CardViewInfo other) : this()
        {
            position_ = other.position_ != null ? other.position_.Clone() : null;
            scale_ = other.scale_ != null ? other.scale_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardViewInfo Clone()
        {
            return new CardViewInfo(this);
        }

        /// <summary>Field number for the "position" field.</summary>
        public const int PositionFieldNumber = 1;
        private global::Loom.ZombieBattleground.Protobuf.Coordinates position_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.Coordinates Position
        {
            get { return position_; }
            set
            {
                position_ = value;
            }
        }

        /// <summary>Field number for the "scale" field.</summary>
        public const int ScaleFieldNumber = 2;
        private global::Loom.ZombieBattleground.Protobuf.Coordinates scale_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.Coordinates Scale
        {
            get { return scale_; }
            set
            {
                scale_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CardViewInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CardViewInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Position, other.Position)) return false;
            if (!object.Equals(Scale, other.Scale)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (position_ != null) hash ^= Position.GetHashCode();
            if (scale_ != null) hash ^= Scale.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (position_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Position);
            }
            if (scale_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Scale);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (position_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
            }
            if (scale_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scale);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CardViewInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.position_ != null)
            {
                if (position_ == null)
                {
                    position_ = new global::Loom.ZombieBattleground.Protobuf.Coordinates();
                }
                Position.MergeFrom(other.Position);
            }
            if (other.scale_ != null)
            {
                if (scale_ == null)
                {
                    scale_ = new global::Loom.ZombieBattleground.Protobuf.Coordinates();
                }
                Scale.MergeFrom(other.Scale);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (position_ == null)
                            {
                                position_ = new global::Loom.ZombieBattleground.Protobuf.Coordinates();
                            }
                            input.ReadMessage(position_);
                            break;
                        }
                    case 18:
                        {
                            if (scale_ == null)
                            {
                                scale_ = new global::Loom.ZombieBattleground.Protobuf.Coordinates();
                            }
                            input.ReadMessage(scale_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Coordinates : pb::IMessage<Coordinates>
    {
        private static readonly pb::MessageParser<Coordinates> _parser = new pb::MessageParser<Coordinates>(() => new Coordinates());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Coordinates> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Coordinates()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Coordinates(Coordinates other) : this()
        {
            x_ = other.x_;
            y_ = other.y_;
            z_ = other.z_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Coordinates Clone()
        {
            return new Coordinates(this);
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 1;
        private float x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float X
        {
            get { return x_; }
            set
            {
                x_ = value;
            }
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 2;
        private float y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Y
        {
            get { return y_; }
            set
            {
                y_ = value;
            }
        }

        /// <summary>Field number for the "z" field.</summary>
        public const int ZFieldNumber = 3;
        private float z_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Z
        {
            get { return z_; }
            set
            {
                z_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Coordinates);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Coordinates other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
            if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
            if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (X != 0F)
            {
                output.WriteRawTag(13);
                output.WriteFloat(X);
            }
            if (Y != 0F)
            {
                output.WriteRawTag(21);
                output.WriteFloat(Y);
            }
            if (Z != 0F)
            {
                output.WriteRawTag(29);
                output.WriteFloat(Z);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (X != 0F)
            {
                size += 1 + 4;
            }
            if (Y != 0F)
            {
                size += 1 + 4;
            }
            if (Z != 0F)
            {
                size += 1 + 4;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Coordinates other)
        {
            if (other == null)
            {
                return;
            }
            if (other.X != 0F)
            {
                X = other.X;
            }
            if (other.Y != 0F)
            {
                Y = other.Y;
            }
            if (other.Z != 0F)
            {
                Z = other.Z;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 13:
                        {
                            X = input.ReadFloat();
                            break;
                        }
                    case 21:
                        {
                            Y = input.ReadFloat();
                            break;
                        }
                    case 29:
                        {
                            Z = input.ReadFloat();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Effect : pb::IMessage<Effect>
    {
        private static readonly pb::MessageParser<Effect> _parser = new pb::MessageParser<Effect>(() => new Effect());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Effect> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Effect()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Effect(Effect other) : this()
        {
            trigger_ = other.trigger_;
            effect_ = other.effect_;
            duration_ = other.duration_;
            target_ = other.target_;
            limit_ = other.limit_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Effect Clone()
        {
            return new Effect(this);
        }

        /// <summary>Field number for the "trigger" field.</summary>
        public const int TriggerFieldNumber = 1;
        private string trigger_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Trigger
        {
            get { return trigger_; }
            set
            {
                trigger_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "effect" field.</summary>
        public const int Effect_FieldNumber = 2;
        private string effect_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Effect_
        {
            get { return effect_; }
            set
            {
                effect_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "duration" field.</summary>
        public const int DurationFieldNumber = 3;
        private string duration_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Duration
        {
            get { return duration_; }
            set
            {
                duration_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "target" field.</summary>
        public const int TargetFieldNumber = 4;
        private string target_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Target
        {
            get { return target_; }
            set
            {
                target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "limit" field.</summary>
        public const int LimitFieldNumber = 5;
        private string limit_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Limit
        {
            get { return limit_; }
            set
            {
                limit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Effect);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Effect other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Trigger != other.Trigger) return false;
            if (Effect_ != other.Effect_) return false;
            if (Duration != other.Duration) return false;
            if (Target != other.Target) return false;
            if (Limit != other.Limit) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Trigger.Length != 0) hash ^= Trigger.GetHashCode();
            if (Effect_.Length != 0) hash ^= Effect_.GetHashCode();
            if (Duration.Length != 0) hash ^= Duration.GetHashCode();
            if (Target.Length != 0) hash ^= Target.GetHashCode();
            if (Limit.Length != 0) hash ^= Limit.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Trigger.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Trigger);
            }
            if (Effect_.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Effect_);
            }
            if (Duration.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(Duration);
            }
            if (Target.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(Target);
            }
            if (Limit.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteString(Limit);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Trigger.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Trigger);
            }
            if (Effect_.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Effect_);
            }
            if (Duration.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Duration);
            }
            if (Target.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Target);
            }
            if (Limit.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Limit);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Effect other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Trigger.Length != 0)
            {
                Trigger = other.Trigger;
            }
            if (other.Effect_.Length != 0)
            {
                Effect_ = other.Effect_;
            }
            if (other.Duration.Length != 0)
            {
                Duration = other.Duration;
            }
            if (other.Target.Length != 0)
            {
                Target = other.Target;
            }
            if (other.Limit.Length != 0)
            {
                Limit = other.Limit;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            Trigger = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            Effect_ = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            Duration = input.ReadString();
                            break;
                        }
                    case 34:
                        {
                            Target = input.ReadString();
                            break;
                        }
                    case 42:
                        {
                            Limit = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Ability : pb::IMessage<Ability>
    {
        private static readonly pb::MessageParser<Ability> _parser = new pb::MessageParser<Ability>(() => new Ability());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Ability> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Ability()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Ability(Ability other) : this()
        {
            type_ = other.type_;
            activityType_ = other.activityType_;
            callType_ = other.callType_;
            targetType_ = other.targetType_;
            statType_ = other.statType_;
            setType_ = other.setType_;
            value_ = other.value_;
            buffType_ = other.buffType_;
            effectType_ = other.effectType_;
            unitType_ = other.unitType_;
            count_ = other.count_;
            name_ = other.name_;
            turns_ = other.turns_;
            delay_ = other.delay_;
            unitStatus_ = other.unitStatus_;
            cardType_ = other.cardType_;
            health_ = other.health_;
            damage_ = other.damage_;
            attackInfo_ = other.attackInfo_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Ability Clone()
        {
            return new Ability(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private string type_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Type
        {
            get { return type_; }
            set
            {
                type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "activity_type" field.</summary>
        public const int ActivityTypeFieldNumber = 2;
        private string activityType_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ActivityType
        {
            get { return activityType_; }
            set
            {
                activityType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "call_type" field.</summary>
        public const int CallTypeFieldNumber = 3;
        private string callType_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CallType
        {
            get { return callType_; }
            set
            {
                callType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "target_type" field.</summary>
        public const int TargetTypeFieldNumber = 4;
        private string targetType_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TargetType
        {
            get { return targetType_; }
            set
            {
                targetType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "stat_type" field.</summary>
        public const int StatTypeFieldNumber = 5;
        private string statType_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string StatType
        {
            get { return statType_; }
            set
            {
                statType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "set_type" field.</summary>
        public const int SetTypeFieldNumber = 6;
        private string setType_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SetType
        {
            get { return setType_; }
            set
            {
                setType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 7;
        private int value_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Value
        {
            get { return value_; }
            set
            {
                value_ = value;
            }
        }

        /// <summary>Field number for the "buff_type" field.</summary>
        public const int BuffTypeFieldNumber = 8;
        private string buffType_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string BuffType
        {
            get { return buffType_; }
            set
            {
                buffType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "effect_type" field.</summary>
        public const int EffectTypeFieldNumber = 9;
        private string effectType_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EffectType
        {
            get { return effectType_; }
            set
            {
                effectType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "unit_type" field.</summary>
        public const int UnitTypeFieldNumber = 10;
        private string unitType_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UnitType
        {
            get { return unitType_; }
            set
            {
                unitType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "count" field.</summary>
        public const int CountFieldNumber = 11;
        private int count_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Count
        {
            get { return count_; }
            set
            {
                count_ = value;
            }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 12;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name
        {
            get { return name_; }
            set
            {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "turns" field.</summary>
        public const int TurnsFieldNumber = 13;
        private int turns_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Turns
        {
            get { return turns_; }
            set
            {
                turns_ = value;
            }
        }

        /// <summary>Field number for the "delay" field.</summary>
        public const int DelayFieldNumber = 14;
        private int delay_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Delay
        {
            get { return delay_; }
            set
            {
                delay_ = value;
            }
        }

        /// <summary>Field number for the "unit_status" field.</summary>
        public const int UnitStatusFieldNumber = 15;
        private string unitStatus_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UnitStatus
        {
            get { return unitStatus_; }
            set
            {
                unitStatus_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "card_type" field.</summary>
        public const int CardTypeFieldNumber = 16;
        private string cardType_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CardType
        {
            get { return cardType_; }
            set
            {
                cardType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "health" field.</summary>
        public const int HealthFieldNumber = 17;
        private int health_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Health
        {
            get { return health_; }
            set
            {
                health_ = value;
            }
        }

        /// <summary>Field number for the "damage" field.</summary>
        public const int DamageFieldNumber = 18;
        private int damage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Damage
        {
            get { return damage_; }
            set
            {
                damage_ = value;
            }
        }

        /// <summary>Field number for the "attack_info" field.</summary>
        public const int AttackInfoFieldNumber = 19;
        private string attackInfo_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AttackInfo
        {
            get { return attackInfo_; }
            set
            {
                attackInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Ability);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Ability other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Type != other.Type) return false;
            if (ActivityType != other.ActivityType) return false;
            if (CallType != other.CallType) return false;
            if (TargetType != other.TargetType) return false;
            if (StatType != other.StatType) return false;
            if (SetType != other.SetType) return false;
            if (Value != other.Value) return false;
            if (BuffType != other.BuffType) return false;
            if (EffectType != other.EffectType) return false;
            if (UnitType != other.UnitType) return false;
            if (Count != other.Count) return false;
            if (Name != other.Name) return false;
            if (Turns != other.Turns) return false;
            if (Delay != other.Delay) return false;
            if (UnitStatus != other.UnitStatus) return false;
            if (CardType != other.CardType) return false;
            if (Health != other.Health) return false;
            if (Damage != other.Damage) return false;
            if (AttackInfo != other.AttackInfo) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Type.Length != 0) hash ^= Type.GetHashCode();
            if (ActivityType.Length != 0) hash ^= ActivityType.GetHashCode();
            if (CallType.Length != 0) hash ^= CallType.GetHashCode();
            if (TargetType.Length != 0) hash ^= TargetType.GetHashCode();
            if (StatType.Length != 0) hash ^= StatType.GetHashCode();
            if (SetType.Length != 0) hash ^= SetType.GetHashCode();
            if (Value != 0) hash ^= Value.GetHashCode();
            if (BuffType.Length != 0) hash ^= BuffType.GetHashCode();
            if (EffectType.Length != 0) hash ^= EffectType.GetHashCode();
            if (UnitType.Length != 0) hash ^= UnitType.GetHashCode();
            if (Count != 0) hash ^= Count.GetHashCode();
            if (Name.Length != 0) hash ^= Name.GetHashCode();
            if (Turns != 0) hash ^= Turns.GetHashCode();
            if (Delay != 0) hash ^= Delay.GetHashCode();
            if (UnitStatus.Length != 0) hash ^= UnitStatus.GetHashCode();
            if (CardType.Length != 0) hash ^= CardType.GetHashCode();
            if (Health != 0) hash ^= Health.GetHashCode();
            if (Damage != 0) hash ^= Damage.GetHashCode();
            if (AttackInfo.Length != 0) hash ^= AttackInfo.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Type.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Type);
            }
            if (ActivityType.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(ActivityType);
            }
            if (CallType.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(CallType);
            }
            if (TargetType.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(TargetType);
            }
            if (StatType.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteString(StatType);
            }
            if (SetType.Length != 0)
            {
                output.WriteRawTag(50);
                output.WriteString(SetType);
            }
            if (Value != 0)
            {
                output.WriteRawTag(56);
                output.WriteInt32(Value);
            }
            if (BuffType.Length != 0)
            {
                output.WriteRawTag(66);
                output.WriteString(BuffType);
            }
            if (EffectType.Length != 0)
            {
                output.WriteRawTag(74);
                output.WriteString(EffectType);
            }
            if (UnitType.Length != 0)
            {
                output.WriteRawTag(82);
                output.WriteString(UnitType);
            }
            if (Count != 0)
            {
                output.WriteRawTag(88);
                output.WriteInt32(Count);
            }
            if (Name.Length != 0)
            {
                output.WriteRawTag(98);
                output.WriteString(Name);
            }
            if (Turns != 0)
            {
                output.WriteRawTag(104);
                output.WriteInt32(Turns);
            }
            if (Delay != 0)
            {
                output.WriteRawTag(112);
                output.WriteInt32(Delay);
            }
            if (UnitStatus.Length != 0)
            {
                output.WriteRawTag(122);
                output.WriteString(UnitStatus);
            }
            if (CardType.Length != 0)
            {
                output.WriteRawTag(130, 1);
                output.WriteString(CardType);
            }
            if (Health != 0)
            {
                output.WriteRawTag(136, 1);
                output.WriteInt32(Health);
            }
            if (Damage != 0)
            {
                output.WriteRawTag(144, 1);
                output.WriteInt32(Damage);
            }
            if (AttackInfo.Length != 0)
            {
                output.WriteRawTag(154, 1);
                output.WriteString(AttackInfo);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Type.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
            }
            if (ActivityType.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ActivityType);
            }
            if (CallType.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CallType);
            }
            if (TargetType.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetType);
            }
            if (StatType.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(StatType);
            }
            if (SetType.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SetType);
            }
            if (Value != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
            }
            if (BuffType.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(BuffType);
            }
            if (EffectType.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(EffectType);
            }
            if (UnitType.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(UnitType);
            }
            if (Count != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
            }
            if (Name.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
            }
            if (Turns != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Turns);
            }
            if (Delay != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Delay);
            }
            if (UnitStatus.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(UnitStatus);
            }
            if (CardType.Length != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeStringSize(CardType);
            }
            if (Health != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeInt32Size(Health);
            }
            if (Damage != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeInt32Size(Damage);
            }
            if (AttackInfo.Length != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeStringSize(AttackInfo);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Ability other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Type.Length != 0)
            {
                Type = other.Type;
            }
            if (other.ActivityType.Length != 0)
            {
                ActivityType = other.ActivityType;
            }
            if (other.CallType.Length != 0)
            {
                CallType = other.CallType;
            }
            if (other.TargetType.Length != 0)
            {
                TargetType = other.TargetType;
            }
            if (other.StatType.Length != 0)
            {
                StatType = other.StatType;
            }
            if (other.SetType.Length != 0)
            {
                SetType = other.SetType;
            }
            if (other.Value != 0)
            {
                Value = other.Value;
            }
            if (other.BuffType.Length != 0)
            {
                BuffType = other.BuffType;
            }
            if (other.EffectType.Length != 0)
            {
                EffectType = other.EffectType;
            }
            if (other.UnitType.Length != 0)
            {
                UnitType = other.UnitType;
            }
            if (other.Count != 0)
            {
                Count = other.Count;
            }
            if (other.Name.Length != 0)
            {
                Name = other.Name;
            }
            if (other.Turns != 0)
            {
                Turns = other.Turns;
            }
            if (other.Delay != 0)
            {
                Delay = other.Delay;
            }
            if (other.UnitStatus.Length != 0)
            {
                UnitStatus = other.UnitStatus;
            }
            if (other.CardType.Length != 0)
            {
                CardType = other.CardType;
            }
            if (other.Health != 0)
            {
                Health = other.Health;
            }
            if (other.Damage != 0)
            {
                Damage = other.Damage;
            }
            if (other.AttackInfo.Length != 0)
            {
                AttackInfo = other.AttackInfo;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            Type = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            ActivityType = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            CallType = input.ReadString();
                            break;
                        }
                    case 34:
                        {
                            TargetType = input.ReadString();
                            break;
                        }
                    case 42:
                        {
                            StatType = input.ReadString();
                            break;
                        }
                    case 50:
                        {
                            SetType = input.ReadString();
                            break;
                        }
                    case 56:
                        {
                            Value = input.ReadInt32();
                            break;
                        }
                    case 66:
                        {
                            BuffType = input.ReadString();
                            break;
                        }
                    case 74:
                        {
                            EffectType = input.ReadString();
                            break;
                        }
                    case 82:
                        {
                            UnitType = input.ReadString();
                            break;
                        }
                    case 88:
                        {
                            Count = input.ReadInt32();
                            break;
                        }
                    case 98:
                        {
                            Name = input.ReadString();
                            break;
                        }
                    case 104:
                        {
                            Turns = input.ReadInt32();
                            break;
                        }
                    case 112:
                        {
                            Delay = input.ReadInt32();
                            break;
                        }
                    case 122:
                        {
                            UnitStatus = input.ReadString();
                            break;
                        }
                    case 130:
                        {
                            CardType = input.ReadString();
                            break;
                        }
                    case 136:
                        {
                            Health = input.ReadInt32();
                            break;
                        }
                    case 144:
                        {
                            Damage = input.ReadInt32();
                            break;
                        }
                    case 154:
                        {
                            AttackInfo = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class CardList : pb::IMessage<CardList>
    {
        private static readonly pb::MessageParser<CardList> _parser = new pb::MessageParser<CardList>(() => new CardList());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CardList> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardList()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardList(CardList other) : this()
        {
            cards_ = other.cards_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardList Clone()
        {
            return new CardList(this);
        }

        /// <summary>Field number for the "cards" field.</summary>
        public const int CardsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Card> _repeated_cards_codec
            = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.Card.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card> cards_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card> Cards
        {
            get { return cards_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CardList);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CardList other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!cards_.Equals(other.cards_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= cards_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            cards_.WriteTo(output, _repeated_cards_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += cards_.CalculateSize(_repeated_cards_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CardList other)
        {
            if (other == null)
            {
                return;
            }
            cards_.Add(other.cards_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            cards_.AddEntriesFrom(input, _repeated_cards_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class CardCollection : pb::IMessage<CardCollection>
    {
        private static readonly pb::MessageParser<CardCollection> _parser = new pb::MessageParser<CardCollection>(() => new CardCollection());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CardCollection> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardCollection()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardCollection(CardCollection other) : this()
        {
            cardName_ = other.cardName_;
            amount_ = other.amount_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardCollection Clone()
        {
            return new CardCollection(this);
        }

        /// <summary>Field number for the "card_name" field.</summary>
        public const int CardNameFieldNumber = 1;
        private string cardName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CardName
        {
            get { return cardName_; }
            set
            {
                cardName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "amount" field.</summary>
        public const int AmountFieldNumber = 2;
        private long amount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Amount
        {
            get { return amount_; }
            set
            {
                amount_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CardCollection);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CardCollection other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (CardName != other.CardName) return false;
            if (Amount != other.Amount) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (CardName.Length != 0) hash ^= CardName.GetHashCode();
            if (Amount != 0L) hash ^= Amount.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (CardName.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(CardName);
            }
            if (Amount != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(Amount);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (CardName.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CardName);
            }
            if (Amount != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CardCollection other)
        {
            if (other == null)
            {
                return;
            }
            if (other.CardName.Length != 0)
            {
                CardName = other.CardName;
            }
            if (other.Amount != 0L)
            {
                Amount = other.Amount;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            CardName = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            Amount = input.ReadInt64();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class CardSet : pb::IMessage<CardSet>
    {
        private static readonly pb::MessageParser<CardSet> _parser = new pb::MessageParser<CardSet>(() => new CardSet());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CardSet> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardSet()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardSet(CardSet other) : this()
        {
            name_ = other.name_;
            cards_ = other.cards_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardSet Clone()
        {
            return new CardSet(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name
        {
            get { return name_; }
            set
            {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "cards" field.</summary>
        public const int CardsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Card> _repeated_cards_codec
            = pb::FieldCodec.ForMessage(18, global::Loom.ZombieBattleground.Protobuf.Card.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card> cards_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card> Cards
        {
            get { return cards_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CardSet);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CardSet other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Name != other.Name) return false;
            if (!cards_.Equals(other.cards_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Name.Length != 0) hash ^= Name.GetHashCode();
            hash ^= cards_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Name.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Name);
            }
            cards_.WriteTo(output, _repeated_cards_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Name.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
            }
            size += cards_.CalculateSize(_repeated_cards_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CardSet other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Name.Length != 0)
            {
                Name = other.Name;
            }
            cards_.Add(other.cards_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            Name = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            cards_.AddEntriesFrom(input, _repeated_cards_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class CardLibrary : pb::IMessage<CardLibrary>
    {
        private static readonly pb::MessageParser<CardLibrary> _parser = new pb::MessageParser<CardLibrary>(() => new CardLibrary());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CardLibrary> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[10]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardLibrary()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardLibrary(CardLibrary other) : this()
        {
            sets_ = other.sets_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardLibrary Clone()
        {
            return new CardLibrary(this);
        }

        /// <summary>Field number for the "sets" field.</summary>
        public const int SetsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardSet> _repeated_sets_codec
            = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.CardSet.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardSet> sets_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardSet>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardSet> Sets
        {
            get { return sets_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CardLibrary);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CardLibrary other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!sets_.Equals(other.sets_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= sets_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            sets_.WriteTo(output, _repeated_sets_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += sets_.CalculateSize(_repeated_sets_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CardLibrary other)
        {
            if (other == null)
            {
                return;
            }
            sets_.Add(other.sets_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            sets_.AddEntriesFrom(input, _repeated_sets_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Hero : pb::IMessage<Hero>
    {
        private static readonly pb::MessageParser<Hero> _parser = new pb::MessageParser<Hero>(() => new Hero());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Hero> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[11]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Hero()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Hero(Hero other) : this()
        {
            heroId_ = other.heroId_;
            icon_ = other.icon_;
            name_ = other.name_;
            shortDescription_ = other.shortDescription_;
            longDescription_ = other.longDescription_;
            element_ = other.element_;
            experience_ = other.experience_;
            level_ = other.level_;
            skills_ = other.skills_.Clone();
            primarySkill_ = other.primarySkill_;
            secondarySkill_ = other.secondarySkill_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Hero Clone()
        {
            return new Hero(this);
        }

        /// <summary>Field number for the "hero_id" field.</summary>
        public const int HeroIdFieldNumber = 1;
        private long heroId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long HeroId
        {
            get { return heroId_; }
            set
            {
                heroId_ = value;
            }
        }

        /// <summary>Field number for the "icon" field.</summary>
        public const int IconFieldNumber = 2;
        private string icon_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Icon
        {
            get { return icon_; }
            set
            {
                icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 3;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name
        {
            get { return name_; }
            set
            {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "short_description" field.</summary>
        public const int ShortDescriptionFieldNumber = 4;
        private string shortDescription_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ShortDescription
        {
            get { return shortDescription_; }
            set
            {
                shortDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "long_description" field.</summary>
        public const int LongDescriptionFieldNumber = 5;
        private string longDescription_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LongDescription
        {
            get { return longDescription_; }
            set
            {
                longDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "element" field.</summary>
        public const int ElementFieldNumber = 6;
        private string element_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Element
        {
            get { return element_; }
            set
            {
                element_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "experience" field.</summary>
        public const int ExperienceFieldNumber = 7;
        private long experience_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Experience
        {
            get { return experience_; }
            set
            {
                experience_ = value;
            }
        }

        /// <summary>Field number for the "level" field.</summary>
        public const int LevelFieldNumber = 8;
        private long level_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Level
        {
            get { return level_; }
            set
            {
                level_ = value;
            }
        }

        /// <summary>Field number for the "skills" field.</summary>
        public const int SkillsFieldNumber = 9;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Skill> _repeated_skills_codec
            = pb::FieldCodec.ForMessage(74, global::Loom.ZombieBattleground.Protobuf.Skill.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Skill> skills_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Skill>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Skill> Skills
        {
            get { return skills_; }
        }

        /// <summary>Field number for the "primary_skill" field.</summary>
        public const int PrimarySkillFieldNumber = 10;
        private int primarySkill_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PrimarySkill
        {
            get { return primarySkill_; }
            set
            {
                primarySkill_ = value;
            }
        }

        /// <summary>Field number for the "secondary_skill" field.</summary>
        public const int SecondarySkillFieldNumber = 11;
        private int secondarySkill_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SecondarySkill
        {
            get { return secondarySkill_; }
            set
            {
                secondarySkill_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Hero);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Hero other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (HeroId != other.HeroId) return false;
            if (Icon != other.Icon) return false;
            if (Name != other.Name) return false;
            if (ShortDescription != other.ShortDescription) return false;
            if (LongDescription != other.LongDescription) return false;
            if (Element != other.Element) return false;
            if (Experience != other.Experience) return false;
            if (Level != other.Level) return false;
            if (!skills_.Equals(other.skills_)) return false;
            if (PrimarySkill != other.PrimarySkill) return false;
            if (SecondarySkill != other.SecondarySkill) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HeroId != 0L) hash ^= HeroId.GetHashCode();
            if (Icon.Length != 0) hash ^= Icon.GetHashCode();
            if (Name.Length != 0) hash ^= Name.GetHashCode();
            if (ShortDescription.Length != 0) hash ^= ShortDescription.GetHashCode();
            if (LongDescription.Length != 0) hash ^= LongDescription.GetHashCode();
            if (Element.Length != 0) hash ^= Element.GetHashCode();
            if (Experience != 0L) hash ^= Experience.GetHashCode();
            if (Level != 0L) hash ^= Level.GetHashCode();
            hash ^= skills_.GetHashCode();
            if (PrimarySkill != 0) hash ^= PrimarySkill.GetHashCode();
            if (SecondarySkill != 0) hash ^= SecondarySkill.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HeroId != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(HeroId);
            }
            if (Icon.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Icon);
            }
            if (Name.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(Name);
            }
            if (ShortDescription.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(ShortDescription);
            }
            if (LongDescription.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteString(LongDescription);
            }
            if (Element.Length != 0)
            {
                output.WriteRawTag(50);
                output.WriteString(Element);
            }
            if (Experience != 0L)
            {
                output.WriteRawTag(56);
                output.WriteInt64(Experience);
            }
            if (Level != 0L)
            {
                output.WriteRawTag(64);
                output.WriteInt64(Level);
            }
            skills_.WriteTo(output, _repeated_skills_codec);
            if (PrimarySkill != 0)
            {
                output.WriteRawTag(80);
                output.WriteInt32(PrimarySkill);
            }
            if (SecondarySkill != 0)
            {
                output.WriteRawTag(88);
                output.WriteInt32(SecondarySkill);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HeroId != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
            }
            if (Icon.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
            }
            if (Name.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
            }
            if (ShortDescription.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ShortDescription);
            }
            if (LongDescription.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(LongDescription);
            }
            if (Element.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Element);
            }
            if (Experience != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Experience);
            }
            if (Level != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Level);
            }
            size += skills_.CalculateSize(_repeated_skills_codec);
            if (PrimarySkill != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(PrimarySkill);
            }
            if (SecondarySkill != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(SecondarySkill);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Hero other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HeroId != 0L)
            {
                HeroId = other.HeroId;
            }
            if (other.Icon.Length != 0)
            {
                Icon = other.Icon;
            }
            if (other.Name.Length != 0)
            {
                Name = other.Name;
            }
            if (other.ShortDescription.Length != 0)
            {
                ShortDescription = other.ShortDescription;
            }
            if (other.LongDescription.Length != 0)
            {
                LongDescription = other.LongDescription;
            }
            if (other.Element.Length != 0)
            {
                Element = other.Element;
            }
            if (other.Experience != 0L)
            {
                Experience = other.Experience;
            }
            if (other.Level != 0L)
            {
                Level = other.Level;
            }
            skills_.Add(other.skills_);
            if (other.PrimarySkill != 0)
            {
                PrimarySkill = other.PrimarySkill;
            }
            if (other.SecondarySkill != 0)
            {
                SecondarySkill = other.SecondarySkill;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            HeroId = input.ReadInt64();
                            break;
                        }
                    case 18:
                        {
                            Icon = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            Name = input.ReadString();
                            break;
                        }
                    case 34:
                        {
                            ShortDescription = input.ReadString();
                            break;
                        }
                    case 42:
                        {
                            LongDescription = input.ReadString();
                            break;
                        }
                    case 50:
                        {
                            Element = input.ReadString();
                            break;
                        }
                    case 56:
                        {
                            Experience = input.ReadInt64();
                            break;
                        }
                    case 64:
                        {
                            Level = input.ReadInt64();
                            break;
                        }
                    case 74:
                        {
                            skills_.AddEntriesFrom(input, _repeated_skills_codec);
                            break;
                        }
                    case 80:
                        {
                            PrimarySkill = input.ReadInt32();
                            break;
                        }
                    case 88:
                        {
                            SecondarySkill = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ListHeroesRequest : pb::IMessage<ListHeroesRequest>
    {
        private static readonly pb::MessageParser<ListHeroesRequest> _parser = new pb::MessageParser<ListHeroesRequest>(() => new ListHeroesRequest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ListHeroesRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[12]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ListHeroesRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ListHeroesRequest(ListHeroesRequest other) : this()
        {
            userId_ = other.userId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ListHeroesRequest Clone()
        {
            return new ListHeroesRequest(this);
        }

        /// <summary>Field number for the "user_id" field.</summary>
        public const int UserIdFieldNumber = 1;
        private string userId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserId
        {
            get { return userId_; }
            set
            {
                userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ListHeroesRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ListHeroesRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (UserId != other.UserId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (UserId.Length != 0) hash ^= UserId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (UserId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(UserId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (UserId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ListHeroesRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.UserId.Length != 0)
            {
                UserId = other.UserId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            UserId = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ListHeroesResponse : pb::IMessage<ListHeroesResponse>
    {
        private static readonly pb::MessageParser<ListHeroesResponse> _parser = new pb::MessageParser<ListHeroesResponse>(() => new ListHeroesResponse());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ListHeroesResponse> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[13]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ListHeroesResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ListHeroesResponse(ListHeroesResponse other) : this()
        {
            heroes_ = other.heroes_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ListHeroesResponse Clone()
        {
            return new ListHeroesResponse(this);
        }

        /// <summary>Field number for the "heroes" field.</summary>
        public const int HeroesFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Hero> _repeated_heroes_codec
            = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.Hero.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero> heroes_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero> Heroes
        {
            get { return heroes_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ListHeroesResponse);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ListHeroesResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!heroes_.Equals(other.heroes_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= heroes_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            heroes_.WriteTo(output, _repeated_heroes_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += heroes_.CalculateSize(_repeated_heroes_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ListHeroesResponse other)
        {
            if (other == null)
            {
                return;
            }
            heroes_.Add(other.heroes_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            heroes_.AddEntriesFrom(input, _repeated_heroes_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class AddHeroExperienceRequest : pb::IMessage<AddHeroExperienceRequest>
    {
        private static readonly pb::MessageParser<AddHeroExperienceRequest> _parser = new pb::MessageParser<AddHeroExperienceRequest>(() => new AddHeroExperienceRequest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AddHeroExperienceRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[14]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AddHeroExperienceRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AddHeroExperienceRequest(AddHeroExperienceRequest other) : this()
        {
            userId_ = other.userId_;
            heroId_ = other.heroId_;
            experience_ = other.experience_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AddHeroExperienceRequest Clone()
        {
            return new AddHeroExperienceRequest(this);
        }

        /// <summary>Field number for the "user_id" field.</summary>
        public const int UserIdFieldNumber = 1;
        private string userId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserId
        {
            get { return userId_; }
            set
            {
                userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "hero_id" field.</summary>
        public const int HeroIdFieldNumber = 2;
        private long heroId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long HeroId
        {
            get { return heroId_; }
            set
            {
                heroId_ = value;
            }
        }

        /// <summary>Field number for the "experience" field.</summary>
        public const int ExperienceFieldNumber = 3;
        private long experience_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Experience
        {
            get { return experience_; }
            set
            {
                experience_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AddHeroExperienceRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AddHeroExperienceRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (UserId != other.UserId) return false;
            if (HeroId != other.HeroId) return false;
            if (Experience != other.Experience) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (UserId.Length != 0) hash ^= UserId.GetHashCode();
            if (HeroId != 0L) hash ^= HeroId.GetHashCode();
            if (Experience != 0L) hash ^= Experience.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (UserId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(UserId);
            }
            if (HeroId != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(HeroId);
            }
            if (Experience != 0L)
            {
                output.WriteRawTag(24);
                output.WriteInt64(Experience);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (UserId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
            }
            if (HeroId != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
            }
            if (Experience != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Experience);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AddHeroExperienceRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.UserId.Length != 0)
            {
                UserId = other.UserId;
            }
            if (other.HeroId != 0L)
            {
                HeroId = other.HeroId;
            }
            if (other.Experience != 0L)
            {
                Experience = other.Experience;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            UserId = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            HeroId = input.ReadInt64();
                            break;
                        }
                    case 24:
                        {
                            Experience = input.ReadInt64();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class AddHeroExperienceResponse : pb::IMessage<AddHeroExperienceResponse>
    {
        private static readonly pb::MessageParser<AddHeroExperienceResponse> _parser = new pb::MessageParser<AddHeroExperienceResponse>(() => new AddHeroExperienceResponse());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AddHeroExperienceResponse> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[15]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AddHeroExperienceResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AddHeroExperienceResponse(AddHeroExperienceResponse other) : this()
        {
            heroId_ = other.heroId_;
            experience_ = other.experience_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AddHeroExperienceResponse Clone()
        {
            return new AddHeroExperienceResponse(this);
        }

        /// <summary>Field number for the "hero_id" field.</summary>
        public const int HeroIdFieldNumber = 1;
        private long heroId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long HeroId
        {
            get { return heroId_; }
            set
            {
                heroId_ = value;
            }
        }

        /// <summary>Field number for the "experience" field.</summary>
        public const int ExperienceFieldNumber = 2;
        private long experience_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Experience
        {
            get { return experience_; }
            set
            {
                experience_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AddHeroExperienceResponse);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AddHeroExperienceResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (HeroId != other.HeroId) return false;
            if (Experience != other.Experience) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HeroId != 0L) hash ^= HeroId.GetHashCode();
            if (Experience != 0L) hash ^= Experience.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HeroId != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(HeroId);
            }
            if (Experience != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(Experience);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HeroId != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
            }
            if (Experience != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Experience);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AddHeroExperienceResponse other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HeroId != 0L)
            {
                HeroId = other.HeroId;
            }
            if (other.Experience != 0L)
            {
                Experience = other.Experience;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            HeroId = input.ReadInt64();
                            break;
                        }
                    case 16:
                        {
                            Experience = input.ReadInt64();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GetHeroRequest : pb::IMessage<GetHeroRequest>
    {
        private static readonly pb::MessageParser<GetHeroRequest> _parser = new pb::MessageParser<GetHeroRequest>(() => new GetHeroRequest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GetHeroRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[16]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetHeroRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetHeroRequest(GetHeroRequest other) : this()
        {
            userId_ = other.userId_;
            heroId_ = other.heroId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetHeroRequest Clone()
        {
            return new GetHeroRequest(this);
        }

        /// <summary>Field number for the "user_id" field.</summary>
        public const int UserIdFieldNumber = 1;
        private string userId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserId
        {
            get { return userId_; }
            set
            {
                userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "hero_id" field.</summary>
        public const int HeroIdFieldNumber = 2;
        private long heroId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long HeroId
        {
            get { return heroId_; }
            set
            {
                heroId_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GetHeroRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GetHeroRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (UserId != other.UserId) return false;
            if (HeroId != other.HeroId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (UserId.Length != 0) hash ^= UserId.GetHashCode();
            if (HeroId != 0L) hash ^= HeroId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (UserId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(UserId);
            }
            if (HeroId != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(HeroId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (UserId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
            }
            if (HeroId != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GetHeroRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.UserId.Length != 0)
            {
                UserId = other.UserId;
            }
            if (other.HeroId != 0L)
            {
                HeroId = other.HeroId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            UserId = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            HeroId = input.ReadInt64();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GetHeroResponse : pb::IMessage<GetHeroResponse>
    {
        private static readonly pb::MessageParser<GetHeroResponse> _parser = new pb::MessageParser<GetHeroResponse>(() => new GetHeroResponse());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GetHeroResponse> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[17]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetHeroResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetHeroResponse(GetHeroResponse other) : this()
        {
            hero_ = other.hero_ != null ? other.hero_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetHeroResponse Clone()
        {
            return new GetHeroResponse(this);
        }

        /// <summary>Field number for the "hero" field.</summary>
        public const int HeroFieldNumber = 1;
        private global::Loom.ZombieBattleground.Protobuf.Hero hero_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.Hero Hero
        {
            get { return hero_; }
            set
            {
                hero_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GetHeroResponse);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GetHeroResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Hero, other.Hero)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (hero_ != null) hash ^= Hero.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (hero_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Hero);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (hero_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hero);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GetHeroResponse other)
        {
            if (other == null)
            {
                return;
            }
            if (other.hero_ != null)
            {
                if (hero_ == null)
                {
                    hero_ = new global::Loom.ZombieBattleground.Protobuf.Hero();
                }
                Hero.MergeFrom(other.Hero);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (hero_ == null)
                            {
                                hero_ = new global::Loom.ZombieBattleground.Protobuf.Hero();
                            }
                            input.ReadMessage(hero_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GetHeroSkillsRequest : pb::IMessage<GetHeroSkillsRequest>
    {
        private static readonly pb::MessageParser<GetHeroSkillsRequest> _parser = new pb::MessageParser<GetHeroSkillsRequest>(() => new GetHeroSkillsRequest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GetHeroSkillsRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[18]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetHeroSkillsRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetHeroSkillsRequest(GetHeroSkillsRequest other) : this()
        {
            userId_ = other.userId_;
            heroId_ = other.heroId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetHeroSkillsRequest Clone()
        {
            return new GetHeroSkillsRequest(this);
        }

        /// <summary>Field number for the "user_id" field.</summary>
        public const int UserIdFieldNumber = 1;
        private string userId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserId
        {
            get { return userId_; }
            set
            {
                userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "hero_id" field.</summary>
        public const int HeroIdFieldNumber = 2;
        private long heroId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long HeroId
        {
            get { return heroId_; }
            set
            {
                heroId_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GetHeroSkillsRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GetHeroSkillsRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (UserId != other.UserId) return false;
            if (HeroId != other.HeroId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (UserId.Length != 0) hash ^= UserId.GetHashCode();
            if (HeroId != 0L) hash ^= HeroId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (UserId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(UserId);
            }
            if (HeroId != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(HeroId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (UserId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
            }
            if (HeroId != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GetHeroSkillsRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.UserId.Length != 0)
            {
                UserId = other.UserId;
            }
            if (other.HeroId != 0L)
            {
                HeroId = other.HeroId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            UserId = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            HeroId = input.ReadInt64();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GetHeroSkillsResponse : pb::IMessage<GetHeroSkillsResponse>
    {
        private static readonly pb::MessageParser<GetHeroSkillsResponse> _parser = new pb::MessageParser<GetHeroSkillsResponse>(() => new GetHeroSkillsResponse());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GetHeroSkillsResponse> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[19]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetHeroSkillsResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetHeroSkillsResponse(GetHeroSkillsResponse other) : this()
        {
            heroId_ = other.heroId_;
            skills_ = other.skills_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetHeroSkillsResponse Clone()
        {
            return new GetHeroSkillsResponse(this);
        }

        /// <summary>Field number for the "hero_id" field.</summary>
        public const int HeroIdFieldNumber = 1;
        private long heroId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long HeroId
        {
            get { return heroId_; }
            set
            {
                heroId_ = value;
            }
        }

        /// <summary>Field number for the "skills" field.</summary>
        public const int SkillsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Skill> _repeated_skills_codec
            = pb::FieldCodec.ForMessage(18, global::Loom.ZombieBattleground.Protobuf.Skill.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Skill> skills_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Skill>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Skill> Skills
        {
            get { return skills_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GetHeroSkillsResponse);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GetHeroSkillsResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (HeroId != other.HeroId) return false;
            if (!skills_.Equals(other.skills_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HeroId != 0L) hash ^= HeroId.GetHashCode();
            hash ^= skills_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HeroId != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(HeroId);
            }
            skills_.WriteTo(output, _repeated_skills_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HeroId != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
            }
            size += skills_.CalculateSize(_repeated_skills_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GetHeroSkillsResponse other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HeroId != 0L)
            {
                HeroId = other.HeroId;
            }
            skills_.Add(other.skills_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            HeroId = input.ReadInt64();
                            break;
                        }
                    case 18:
                        {
                            skills_.AddEntriesFrom(input, _repeated_skills_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Skill : pb::IMessage<Skill>
    {
        private static readonly pb::MessageParser<Skill> _parser = new pb::MessageParser<Skill>(() => new Skill());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Skill> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[20]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Skill()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Skill(Skill other) : this()
        {
            title_ = other.title_;
            skill_ = other.skill_;
            iconPath_ = other.iconPath_;
            description_ = other.description_;
            skillTargets_ = other.skillTargets_;
            elementTargets_ = other.elementTargets_;
            value_ = other.value_;
            cooldown_ = other.cooldown_;
            initialCooldown_ = other.initialCooldown_;
            attack_ = other.attack_;
            health_ = other.health_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Skill Clone()
        {
            return new Skill(this);
        }

        /// <summary>Field number for the "title" field.</summary>
        public const int TitleFieldNumber = 1;
        private string title_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Title
        {
            get { return title_; }
            set
            {
                title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "skill" field.</summary>
        public const int Skill_FieldNumber = 2;
        private string skill_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Skill_
        {
            get { return skill_; }
            set
            {
                skill_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "icon_path" field.</summary>
        public const int IconPathFieldNumber = 3;
        private string iconPath_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string IconPath
        {
            get { return iconPath_; }
            set
            {
                iconPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "description" field.</summary>
        public const int DescriptionFieldNumber = 4;
        private string description_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Description
        {
            get { return description_; }
            set
            {
                description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "skill_targets" field.</summary>
        public const int SkillTargetsFieldNumber = 5;
        private string skillTargets_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SkillTargets
        {
            get { return skillTargets_; }
            set
            {
                skillTargets_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "element_targets" field.</summary>
        public const int ElementTargetsFieldNumber = 6;
        private string elementTargets_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ElementTargets
        {
            get { return elementTargets_; }
            set
            {
                elementTargets_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 7;
        private int value_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Value
        {
            get { return value_; }
            set
            {
                value_ = value;
            }
        }

        /// <summary>Field number for the "cooldown" field.</summary>
        public const int CooldownFieldNumber = 8;
        private int cooldown_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Cooldown
        {
            get { return cooldown_; }
            set
            {
                cooldown_ = value;
            }
        }

        /// <summary>Field number for the "initial_cooldown" field.</summary>
        public const int InitialCooldownFieldNumber = 9;
        private int initialCooldown_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int InitialCooldown
        {
            get { return initialCooldown_; }
            set
            {
                initialCooldown_ = value;
            }
        }

        /// <summary>Field number for the "attack" field.</summary>
        public const int AttackFieldNumber = 10;
        private int attack_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Attack
        {
            get { return attack_; }
            set
            {
                attack_ = value;
            }
        }

        /// <summary>Field number for the "health" field.</summary>
        public const int HealthFieldNumber = 11;
        private int health_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Health
        {
            get { return health_; }
            set
            {
                health_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Skill);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Skill other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Title != other.Title) return false;
            if (Skill_ != other.Skill_) return false;
            if (IconPath != other.IconPath) return false;
            if (Description != other.Description) return false;
            if (SkillTargets != other.SkillTargets) return false;
            if (ElementTargets != other.ElementTargets) return false;
            if (Value != other.Value) return false;
            if (Cooldown != other.Cooldown) return false;
            if (InitialCooldown != other.InitialCooldown) return false;
            if (Attack != other.Attack) return false;
            if (Health != other.Health) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Title.Length != 0) hash ^= Title.GetHashCode();
            if (Skill_.Length != 0) hash ^= Skill_.GetHashCode();
            if (IconPath.Length != 0) hash ^= IconPath.GetHashCode();
            if (Description.Length != 0) hash ^= Description.GetHashCode();
            if (SkillTargets.Length != 0) hash ^= SkillTargets.GetHashCode();
            if (ElementTargets.Length != 0) hash ^= ElementTargets.GetHashCode();
            if (Value != 0) hash ^= Value.GetHashCode();
            if (Cooldown != 0) hash ^= Cooldown.GetHashCode();
            if (InitialCooldown != 0) hash ^= InitialCooldown.GetHashCode();
            if (Attack != 0) hash ^= Attack.GetHashCode();
            if (Health != 0) hash ^= Health.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Title.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Title);
            }
            if (Skill_.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Skill_);
            }
            if (IconPath.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(IconPath);
            }
            if (Description.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(Description);
            }
            if (SkillTargets.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteString(SkillTargets);
            }
            if (ElementTargets.Length != 0)
            {
                output.WriteRawTag(50);
                output.WriteString(ElementTargets);
            }
            if (Value != 0)
            {
                output.WriteRawTag(56);
                output.WriteInt32(Value);
            }
            if (Cooldown != 0)
            {
                output.WriteRawTag(64);
                output.WriteInt32(Cooldown);
            }
            if (InitialCooldown != 0)
            {
                output.WriteRawTag(72);
                output.WriteInt32(InitialCooldown);
            }
            if (Attack != 0)
            {
                output.WriteRawTag(80);
                output.WriteInt32(Attack);
            }
            if (Health != 0)
            {
                output.WriteRawTag(88);
                output.WriteInt32(Health);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Title.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
            }
            if (Skill_.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Skill_);
            }
            if (IconPath.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(IconPath);
            }
            if (Description.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
            }
            if (SkillTargets.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SkillTargets);
            }
            if (ElementTargets.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ElementTargets);
            }
            if (Value != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
            }
            if (Cooldown != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cooldown);
            }
            if (InitialCooldown != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(InitialCooldown);
            }
            if (Attack != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Attack);
            }
            if (Health != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Health);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Skill other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Title.Length != 0)
            {
                Title = other.Title;
            }
            if (other.Skill_.Length != 0)
            {
                Skill_ = other.Skill_;
            }
            if (other.IconPath.Length != 0)
            {
                IconPath = other.IconPath;
            }
            if (other.Description.Length != 0)
            {
                Description = other.Description;
            }
            if (other.SkillTargets.Length != 0)
            {
                SkillTargets = other.SkillTargets;
            }
            if (other.ElementTargets.Length != 0)
            {
                ElementTargets = other.ElementTargets;
            }
            if (other.Value != 0)
            {
                Value = other.Value;
            }
            if (other.Cooldown != 0)
            {
                Cooldown = other.Cooldown;
            }
            if (other.InitialCooldown != 0)
            {
                InitialCooldown = other.InitialCooldown;
            }
            if (other.Attack != 0)
            {
                Attack = other.Attack;
            }
            if (other.Health != 0)
            {
                Health = other.Health;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            Title = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            Skill_ = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            IconPath = input.ReadString();
                            break;
                        }
                    case 34:
                        {
                            Description = input.ReadString();
                            break;
                        }
                    case 42:
                        {
                            SkillTargets = input.ReadString();
                            break;
                        }
                    case 50:
                        {
                            ElementTargets = input.ReadString();
                            break;
                        }
                    case 56:
                        {
                            Value = input.ReadInt32();
                            break;
                        }
                    case 64:
                        {
                            Cooldown = input.ReadInt32();
                            break;
                        }
                    case 72:
                        {
                            InitialCooldown = input.ReadInt32();
                            break;
                        }
                    case 80:
                        {
                            Attack = input.ReadInt32();
                            break;
                        }
                    case 88:
                        {
                            Health = input.ReadInt32();
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Skill message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public enum SkillTargetType
            {
                [pbr::OriginalName("NONE")] None = 0,
                [pbr::OriginalName("PLAYER")] Player = 1,
                [pbr::OriginalName("PLAYER_CARD")] PlayerCard = 2,
                [pbr::OriginalName("PLAYER_ALL_CARDS")] PlayerAllCards = 3,
                [pbr::OriginalName("OPPONENT")] Opponent = 4,
                [pbr::OriginalName("OPPONENT_CARD")] OpponentCard = 5,
                [pbr::OriginalName("OPPONENT_ALL_CARDS")] OpponentAllCards = 6,
                [pbr::OriginalName("ALL_CARDS")] AllCards = 7,
            }

        }
        #endregion

    }

    public sealed partial class HeroList : pb::IMessage<HeroList>
    {
        private static readonly pb::MessageParser<HeroList> _parser = new pb::MessageParser<HeroList>(() => new HeroList());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<HeroList> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[21]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HeroList()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HeroList(HeroList other) : this()
        {
            heroes_ = other.heroes_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HeroList Clone()
        {
            return new HeroList(this);
        }

        /// <summary>Field number for the "heroes" field.</summary>
        public const int HeroesFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Hero> _repeated_heroes_codec
            = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.Hero.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero> heroes_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero> Heroes
        {
            get { return heroes_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as HeroList);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(HeroList other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!heroes_.Equals(other.heroes_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= heroes_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            heroes_.WriteTo(output, _repeated_heroes_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += heroes_.CalculateSize(_repeated_heroes_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(HeroList other)
        {
            if (other == null)
            {
                return;
            }
            heroes_.Add(other.heroes_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            heroes_.AddEntriesFrom(input, _repeated_heroes_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class CardCollectionList : pb::IMessage<CardCollectionList>
    {
        private static readonly pb::MessageParser<CardCollectionList> _parser = new pb::MessageParser<CardCollectionList>(() => new CardCollectionList());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CardCollectionList> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[22]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardCollectionList()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardCollectionList(CardCollectionList other) : this()
        {
            cards_ = other.cards_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardCollectionList Clone()
        {
            return new CardCollectionList(this);
        }

        /// <summary>Field number for the "cards" field.</summary>
        public const int CardsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardCollection> _repeated_cards_codec
            = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.CardCollection.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollection> cards_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollection>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollection> Cards
        {
            get { return cards_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CardCollectionList);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CardCollectionList other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!cards_.Equals(other.cards_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= cards_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            cards_.WriteTo(output, _repeated_cards_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += cards_.CalculateSize(_repeated_cards_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CardCollectionList other)
        {
            if (other == null)
            {
                return;
            }
            cards_.Add(other.cards_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            cards_.AddEntriesFrom(input, _repeated_cards_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class DeckList : pb::IMessage<DeckList>
    {
        private static readonly pb::MessageParser<DeckList> _parser = new pb::MessageParser<DeckList>(() => new DeckList());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DeckList> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[23]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeckList()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeckList(DeckList other) : this()
        {
            decks_ = other.decks_.Clone();
            lastModificationTimestamp_ = other.lastModificationTimestamp_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeckList Clone()
        {
            return new DeckList(this);
        }

        /// <summary>Field number for the "decks" field.</summary>
        public const int DecksFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Deck> _repeated_decks_codec
            = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.Deck.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck> decks_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck> Decks
        {
            get { return decks_; }
        }

        /// <summary>Field number for the "last_modification_timestamp" field.</summary>
        public const int LastModificationTimestampFieldNumber = 2;
        private long lastModificationTimestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LastModificationTimestamp
        {
            get { return lastModificationTimestamp_; }
            set
            {
                lastModificationTimestamp_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as DeckList);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DeckList other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!decks_.Equals(other.decks_)) return false;
            if (LastModificationTimestamp != other.LastModificationTimestamp) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= decks_.GetHashCode();
            if (LastModificationTimestamp != 0L) hash ^= LastModificationTimestamp.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            decks_.WriteTo(output, _repeated_decks_codec);
            if (LastModificationTimestamp != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(LastModificationTimestamp);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += decks_.CalculateSize(_repeated_decks_codec);
            if (LastModificationTimestamp != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastModificationTimestamp);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DeckList other)
        {
            if (other == null)
            {
                return;
            }
            decks_.Add(other.decks_);
            if (other.LastModificationTimestamp != 0L)
            {
                LastModificationTimestamp = other.LastModificationTimestamp;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            decks_.AddEntriesFrom(input, _repeated_decks_codec);
                            break;
                        }
                    case 16:
                        {
                            LastModificationTimestamp = input.ReadInt64();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class InitRequest : pb::IMessage<InitRequest>
    {
        private static readonly pb::MessageParser<InitRequest> _parser = new pb::MessageParser<InitRequest>(() => new InitRequest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<InitRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[24]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InitRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InitRequest(InitRequest other) : this()
        {
            defaultDecks_ = other.defaultDecks_.Clone();
            defaultCollection_ = other.defaultCollection_.Clone();
            cards_ = other.cards_.Clone();
            heroes_ = other.heroes_.Clone();
            version_ = other.version_;
            oracle_ = other.oracle_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InitRequest Clone()
        {
            return new InitRequest(this);
        }

        /// <summary>Field number for the "default_decks" field.</summary>
        public const int DefaultDecksFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Deck> _repeated_defaultDecks_codec
            = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.Deck.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck> defaultDecks_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck> DefaultDecks
        {
            get { return defaultDecks_; }
        }

        /// <summary>Field number for the "default_collection" field.</summary>
        public const int DefaultCollectionFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardCollection> _repeated_defaultCollection_codec
            = pb::FieldCodec.ForMessage(18, global::Loom.ZombieBattleground.Protobuf.CardCollection.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollection> defaultCollection_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollection>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollection> DefaultCollection
        {
            get { return defaultCollection_; }
        }

        /// <summary>Field number for the "cards" field.</summary>
        public const int CardsFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Card> _repeated_cards_codec
            = pb::FieldCodec.ForMessage(26, global::Loom.ZombieBattleground.Protobuf.Card.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card> cards_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card> Cards
        {
            get { return cards_; }
        }

        /// <summary>Field number for the "heroes" field.</summary>
        public const int HeroesFieldNumber = 4;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Hero> _repeated_heroes_codec
            = pb::FieldCodec.ForMessage(34, global::Loom.ZombieBattleground.Protobuf.Hero.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero> heroes_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero> Heroes
        {
            get { return heroes_; }
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 5;
        private string version_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Version
        {
            get { return version_; }
            set
            {
                version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "oracle" field.</summary>
        public const int OracleFieldNumber = 6;
        private pb::ByteString oracle_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Oracle
        {
            get { return oracle_; }
            set
            {
                oracle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as InitRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(InitRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!defaultDecks_.Equals(other.defaultDecks_)) return false;
            if (!defaultCollection_.Equals(other.defaultCollection_)) return false;
            if (!cards_.Equals(other.cards_)) return false;
            if (!heroes_.Equals(other.heroes_)) return false;
            if (Version != other.Version) return false;
            if (Oracle != other.Oracle) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= defaultDecks_.GetHashCode();
            hash ^= defaultCollection_.GetHashCode();
            hash ^= cards_.GetHashCode();
            hash ^= heroes_.GetHashCode();
            if (Version.Length != 0) hash ^= Version.GetHashCode();
            if (Oracle.Length != 0) hash ^= Oracle.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            defaultDecks_.WriteTo(output, _repeated_defaultDecks_codec);
            defaultCollection_.WriteTo(output, _repeated_defaultCollection_codec);
            cards_.WriteTo(output, _repeated_cards_codec);
            heroes_.WriteTo(output, _repeated_heroes_codec);
            if (Version.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteString(Version);
            }
            if (Oracle.Length != 0)
            {
                output.WriteRawTag(50);
                output.WriteBytes(Oracle);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += defaultDecks_.CalculateSize(_repeated_defaultDecks_codec);
            size += defaultCollection_.CalculateSize(_repeated_defaultCollection_codec);
            size += cards_.CalculateSize(_repeated_cards_codec);
            size += heroes_.CalculateSize(_repeated_heroes_codec);
            if (Version.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
            }
            if (Oracle.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Oracle);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(InitRequest other)
        {
            if (other == null)
            {
                return;
            }
            defaultDecks_.Add(other.defaultDecks_);
            defaultCollection_.Add(other.defaultCollection_);
            cards_.Add(other.cards_);
            heroes_.Add(other.heroes_);
            if (other.Version.Length != 0)
            {
                Version = other.Version;
            }
            if (other.Oracle.Length != 0)
            {
                Oracle = other.Oracle;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            defaultDecks_.AddEntriesFrom(input, _repeated_defaultDecks_codec);
                            break;
                        }
                    case 18:
                        {
                            defaultCollection_.AddEntriesFrom(input, _repeated_defaultCollection_codec);
                            break;
                        }
                    case 26:
                        {
                            cards_.AddEntriesFrom(input, _repeated_cards_codec);
                            break;
                        }
                    case 34:
                        {
                            heroes_.AddEntriesFrom(input, _repeated_heroes_codec);
                            break;
                        }
                    case 42:
                        {
                            Version = input.ReadString();
                            break;
                        }
                    case 50:
                        {
                            Oracle = input.ReadBytes();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class UpdateOracle : pb::IMessage<UpdateOracle>
    {
        private static readonly pb::MessageParser<UpdateOracle> _parser = new pb::MessageParser<UpdateOracle>(() => new UpdateOracle());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UpdateOracle> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[25]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateOracle()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateOracle(UpdateOracle other) : this()
        {
            newOracle_ = other.newOracle_;
            oldOracle_ = other.oldOracle_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateOracle Clone()
        {
            return new UpdateOracle(this);
        }

        /// <summary>Field number for the "new_oracle" field.</summary>
        public const int NewOracleFieldNumber = 1;
        private pb::ByteString newOracle_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString NewOracle
        {
            get { return newOracle_; }
            set
            {
                newOracle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "old_oracle" field.</summary>
        public const int OldOracleFieldNumber = 2;
        private pb::ByteString oldOracle_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString OldOracle
        {
            get { return oldOracle_; }
            set
            {
                oldOracle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as UpdateOracle);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UpdateOracle other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (NewOracle != other.NewOracle) return false;
            if (OldOracle != other.OldOracle) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (NewOracle.Length != 0) hash ^= NewOracle.GetHashCode();
            if (OldOracle.Length != 0) hash ^= OldOracle.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (NewOracle.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteBytes(NewOracle);
            }
            if (OldOracle.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteBytes(OldOracle);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (NewOracle.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(NewOracle);
            }
            if (OldOracle.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(OldOracle);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UpdateOracle other)
        {
            if (other == null)
            {
                return;
            }
            if (other.NewOracle.Length != 0)
            {
                NewOracle = other.NewOracle;
            }
            if (other.OldOracle.Length != 0)
            {
                OldOracle = other.OldOracle;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            NewOracle = input.ReadBytes();
                            break;
                        }
                    case 18:
                        {
                            OldOracle = input.ReadBytes();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class UpdateInitRequest : pb::IMessage<UpdateInitRequest>
    {
        private static readonly pb::MessageParser<UpdateInitRequest> _parser = new pb::MessageParser<UpdateInitRequest>(() => new UpdateInitRequest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UpdateInitRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[26]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateInitRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateInitRequest(UpdateInitRequest other) : this()
        {
            defaultDecks_ = other.defaultDecks_.Clone();
            defaultCollection_ = other.defaultCollection_.Clone();
            cards_ = other.cards_.Clone();
            heroes_ = other.heroes_.Clone();
            version_ = other.version_;
            oracle_ = other.oracle_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateInitRequest Clone()
        {
            return new UpdateInitRequest(this);
        }

        /// <summary>Field number for the "default_decks" field.</summary>
        public const int DefaultDecksFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Deck> _repeated_defaultDecks_codec
            = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.Deck.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck> defaultDecks_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck> DefaultDecks
        {
            get { return defaultDecks_; }
        }

        /// <summary>Field number for the "default_collection" field.</summary>
        public const int DefaultCollectionFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardCollection> _repeated_defaultCollection_codec
            = pb::FieldCodec.ForMessage(18, global::Loom.ZombieBattleground.Protobuf.CardCollection.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollection> defaultCollection_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollection>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollection> DefaultCollection
        {
            get { return defaultCollection_; }
        }

        /// <summary>Field number for the "cards" field.</summary>
        public const int CardsFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Card> _repeated_cards_codec
            = pb::FieldCodec.ForMessage(26, global::Loom.ZombieBattleground.Protobuf.Card.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card> cards_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card> Cards
        {
            get { return cards_; }
        }

        /// <summary>Field number for the "heroes" field.</summary>
        public const int HeroesFieldNumber = 4;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Hero> _repeated_heroes_codec
            = pb::FieldCodec.ForMessage(34, global::Loom.ZombieBattleground.Protobuf.Hero.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero> heroes_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero> Heroes
        {
            get { return heroes_; }
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 5;
        private string version_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Version
        {
            get { return version_; }
            set
            {
                version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "oracle" field.</summary>
        public const int OracleFieldNumber = 6;
        private pb::ByteString oracle_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Oracle
        {
            get { return oracle_; }
            set
            {
                oracle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as UpdateInitRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UpdateInitRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!defaultDecks_.Equals(other.defaultDecks_)) return false;
            if (!defaultCollection_.Equals(other.defaultCollection_)) return false;
            if (!cards_.Equals(other.cards_)) return false;
            if (!heroes_.Equals(other.heroes_)) return false;
            if (Version != other.Version) return false;
            if (Oracle != other.Oracle) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= defaultDecks_.GetHashCode();
            hash ^= defaultCollection_.GetHashCode();
            hash ^= cards_.GetHashCode();
            hash ^= heroes_.GetHashCode();
            if (Version.Length != 0) hash ^= Version.GetHashCode();
            if (Oracle.Length != 0) hash ^= Oracle.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            defaultDecks_.WriteTo(output, _repeated_defaultDecks_codec);
            defaultCollection_.WriteTo(output, _repeated_defaultCollection_codec);
            cards_.WriteTo(output, _repeated_cards_codec);
            heroes_.WriteTo(output, _repeated_heroes_codec);
            if (Version.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteString(Version);
            }
            if (Oracle.Length != 0)
            {
                output.WriteRawTag(50);
                output.WriteBytes(Oracle);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += defaultDecks_.CalculateSize(_repeated_defaultDecks_codec);
            size += defaultCollection_.CalculateSize(_repeated_defaultCollection_codec);
            size += cards_.CalculateSize(_repeated_cards_codec);
            size += heroes_.CalculateSize(_repeated_heroes_codec);
            if (Version.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
            }
            if (Oracle.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Oracle);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UpdateInitRequest other)
        {
            if (other == null)
            {
                return;
            }
            defaultDecks_.Add(other.defaultDecks_);
            defaultCollection_.Add(other.defaultCollection_);
            cards_.Add(other.cards_);
            heroes_.Add(other.heroes_);
            if (other.Version.Length != 0)
            {
                Version = other.Version;
            }
            if (other.Oracle.Length != 0)
            {
                Oracle = other.Oracle;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            defaultDecks_.AddEntriesFrom(input, _repeated_defaultDecks_codec);
                            break;
                        }
                    case 18:
                        {
                            defaultCollection_.AddEntriesFrom(input, _repeated_defaultCollection_codec);
                            break;
                        }
                    case 26:
                        {
                            cards_.AddEntriesFrom(input, _repeated_cards_codec);
                            break;
                        }
                    case 34:
                        {
                            heroes_.AddEntriesFrom(input, _repeated_heroes_codec);
                            break;
                        }
                    case 42:
                        {
                            Version = input.ReadString();
                            break;
                        }
                    case 50:
                        {
                            Oracle = input.ReadBytes();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class UpdateCardListRequest : pb::IMessage<UpdateCardListRequest>
    {
        private static readonly pb::MessageParser<UpdateCardListRequest> _parser = new pb::MessageParser<UpdateCardListRequest>(() => new UpdateCardListRequest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UpdateCardListRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[27]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateCardListRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateCardListRequest(UpdateCardListRequest other) : this()
        {
            cards_ = other.cards_.Clone();
            version_ = other.version_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateCardListRequest Clone()
        {
            return new UpdateCardListRequest(this);
        }

        /// <summary>Field number for the "cards" field.</summary>
        public const int CardsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Card> _repeated_cards_codec
            = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.Card.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card> cards_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Card> Cards
        {
            get { return cards_; }
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 2;
        private string version_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Version
        {
            get { return version_; }
            set
            {
                version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as UpdateCardListRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UpdateCardListRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!cards_.Equals(other.cards_)) return false;
            if (Version != other.Version) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= cards_.GetHashCode();
            if (Version.Length != 0) hash ^= Version.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            cards_.WriteTo(output, _repeated_cards_codec);
            if (Version.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Version);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += cards_.CalculateSize(_repeated_cards_codec);
            if (Version.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UpdateCardListRequest other)
        {
            if (other == null)
            {
                return;
            }
            cards_.Add(other.cards_);
            if (other.Version.Length != 0)
            {
                Version = other.Version;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            cards_.AddEntriesFrom(input, _repeated_cards_codec);
                            break;
                        }
                    case 18:
                        {
                            Version = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class UpsertAccountRequest : pb::IMessage<UpsertAccountRequest>
    {
        private static readonly pb::MessageParser<UpsertAccountRequest> _parser = new pb::MessageParser<UpsertAccountRequest>(() => new UpsertAccountRequest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UpsertAccountRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[28]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpsertAccountRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpsertAccountRequest(UpsertAccountRequest other) : this()
        {
            userId_ = other.userId_;
            phoneNumberVerified_ = other.phoneNumberVerified_;
            rewardRedeemed_ = other.rewardRedeemed_;
            isKickstarter_ = other.isKickstarter_;
            image_ = other.image_;
            emailNotification_ = other.emailNotification_;
            eloScore_ = other.eloScore_;
            currentTier_ = other.currentTier_;
            gameMembershipTier_ = other.gameMembershipTier_;
            version_ = other.version_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpsertAccountRequest Clone()
        {
            return new UpsertAccountRequest(this);
        }

        /// <summary>Field number for the "user_id" field.</summary>
        public const int UserIdFieldNumber = 1;
        private string userId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserId
        {
            get { return userId_; }
            set
            {
                userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "phone_number_verified" field.</summary>
        public const int PhoneNumberVerifiedFieldNumber = 2;
        private bool phoneNumberVerified_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool PhoneNumberVerified
        {
            get { return phoneNumberVerified_; }
            set
            {
                phoneNumberVerified_ = value;
            }
        }

        /// <summary>Field number for the "reward_redeemed" field.</summary>
        public const int RewardRedeemedFieldNumber = 3;
        private bool rewardRedeemed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool RewardRedeemed
        {
            get { return rewardRedeemed_; }
            set
            {
                rewardRedeemed_ = value;
            }
        }

        /// <summary>Field number for the "is_kickstarter" field.</summary>
        public const int IsKickstarterFieldNumber = 4;
        private bool isKickstarter_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsKickstarter
        {
            get { return isKickstarter_; }
            set
            {
                isKickstarter_ = value;
            }
        }

        /// <summary>Field number for the "image" field.</summary>
        public const int ImageFieldNumber = 5;
        private string image_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Image
        {
            get { return image_; }
            set
            {
                image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "email_notification" field.</summary>
        public const int EmailNotificationFieldNumber = 6;
        private bool emailNotification_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool EmailNotification
        {
            get { return emailNotification_; }
            set
            {
                emailNotification_ = value;
            }
        }

        /// <summary>Field number for the "elo_score" field.</summary>
        public const int EloScoreFieldNumber = 7;
        private long eloScore_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long EloScore
        {
            get { return eloScore_; }
            set
            {
                eloScore_ = value;
            }
        }

        /// <summary>Field number for the "current_tier" field.</summary>
        public const int CurrentTierFieldNumber = 8;
        private int currentTier_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CurrentTier
        {
            get { return currentTier_; }
            set
            {
                currentTier_ = value;
            }
        }

        /// <summary>Field number for the "game_membership_tier" field.</summary>
        public const int GameMembershipTierFieldNumber = 9;
        private int gameMembershipTier_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int GameMembershipTier
        {
            get { return gameMembershipTier_; }
            set
            {
                gameMembershipTier_ = value;
            }
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 10;
        private string version_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Version
        {
            get { return version_; }
            set
            {
                version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as UpsertAccountRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UpsertAccountRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (UserId != other.UserId) return false;
            if (PhoneNumberVerified != other.PhoneNumberVerified) return false;
            if (RewardRedeemed != other.RewardRedeemed) return false;
            if (IsKickstarter != other.IsKickstarter) return false;
            if (Image != other.Image) return false;
            if (EmailNotification != other.EmailNotification) return false;
            if (EloScore != other.EloScore) return false;
            if (CurrentTier != other.CurrentTier) return false;
            if (GameMembershipTier != other.GameMembershipTier) return false;
            if (Version != other.Version) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (UserId.Length != 0) hash ^= UserId.GetHashCode();
            if (PhoneNumberVerified != false) hash ^= PhoneNumberVerified.GetHashCode();
            if (RewardRedeemed != false) hash ^= RewardRedeemed.GetHashCode();
            if (IsKickstarter != false) hash ^= IsKickstarter.GetHashCode();
            if (Image.Length != 0) hash ^= Image.GetHashCode();
            if (EmailNotification != false) hash ^= EmailNotification.GetHashCode();
            if (EloScore != 0L) hash ^= EloScore.GetHashCode();
            if (CurrentTier != 0) hash ^= CurrentTier.GetHashCode();
            if (GameMembershipTier != 0) hash ^= GameMembershipTier.GetHashCode();
            if (Version.Length != 0) hash ^= Version.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (UserId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(UserId);
            }
            if (PhoneNumberVerified != false)
            {
                output.WriteRawTag(16);
                output.WriteBool(PhoneNumberVerified);
            }
            if (RewardRedeemed != false)
            {
                output.WriteRawTag(24);
                output.WriteBool(RewardRedeemed);
            }
            if (IsKickstarter != false)
            {
                output.WriteRawTag(32);
                output.WriteBool(IsKickstarter);
            }
            if (Image.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteString(Image);
            }
            if (EmailNotification != false)
            {
                output.WriteRawTag(48);
                output.WriteBool(EmailNotification);
            }
            if (EloScore != 0L)
            {
                output.WriteRawTag(56);
                output.WriteInt64(EloScore);
            }
            if (CurrentTier != 0)
            {
                output.WriteRawTag(64);
                output.WriteInt32(CurrentTier);
            }
            if (GameMembershipTier != 0)
            {
                output.WriteRawTag(72);
                output.WriteInt32(GameMembershipTier);
            }
            if (Version.Length != 0)
            {
                output.WriteRawTag(82);
                output.WriteString(Version);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (UserId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
            }
            if (PhoneNumberVerified != false)
            {
                size += 1 + 1;
            }
            if (RewardRedeemed != false)
            {
                size += 1 + 1;
            }
            if (IsKickstarter != false)
            {
                size += 1 + 1;
            }
            if (Image.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Image);
            }
            if (EmailNotification != false)
            {
                size += 1 + 1;
            }
            if (EloScore != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(EloScore);
            }
            if (CurrentTier != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentTier);
            }
            if (GameMembershipTier != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameMembershipTier);
            }
            if (Version.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UpsertAccountRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.UserId.Length != 0)
            {
                UserId = other.UserId;
            }
            if (other.PhoneNumberVerified != false)
            {
                PhoneNumberVerified = other.PhoneNumberVerified;
            }
            if (other.RewardRedeemed != false)
            {
                RewardRedeemed = other.RewardRedeemed;
            }
            if (other.IsKickstarter != false)
            {
                IsKickstarter = other.IsKickstarter;
            }
            if (other.Image.Length != 0)
            {
                Image = other.Image;
            }
            if (other.EmailNotification != false)
            {
                EmailNotification = other.EmailNotification;
            }
            if (other.EloScore != 0L)
            {
                EloScore = other.EloScore;
            }
            if (other.CurrentTier != 0)
            {
                CurrentTier = other.CurrentTier;
            }
            if (other.GameMembershipTier != 0)
            {
                GameMembershipTier = other.GameMembershipTier;
            }
            if (other.Version.Length != 0)
            {
                Version = other.Version;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            UserId = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            PhoneNumberVerified = input.ReadBool();
                            break;
                        }
                    case 24:
                        {
                            RewardRedeemed = input.ReadBool();
                            break;
                        }
                    case 32:
                        {
                            IsKickstarter = input.ReadBool();
                            break;
                        }
                    case 42:
                        {
                            Image = input.ReadString();
                            break;
                        }
                    case 48:
                        {
                            EmailNotification = input.ReadBool();
                            break;
                        }
                    case 56:
                        {
                            EloScore = input.ReadInt64();
                            break;
                        }
                    case 64:
                        {
                            CurrentTier = input.ReadInt32();
                            break;
                        }
                    case 72:
                        {
                            GameMembershipTier = input.ReadInt32();
                            break;
                        }
                    case 82:
                        {
                            Version = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GetAccountRequest : pb::IMessage<GetAccountRequest>
    {
        private static readonly pb::MessageParser<GetAccountRequest> _parser = new pb::MessageParser<GetAccountRequest>(() => new GetAccountRequest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GetAccountRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[29]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetAccountRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetAccountRequest(GetAccountRequest other) : this()
        {
            userId_ = other.userId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetAccountRequest Clone()
        {
            return new GetAccountRequest(this);
        }

        /// <summary>Field number for the "user_id" field.</summary>
        public const int UserIdFieldNumber = 1;
        private string userId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserId
        {
            get { return userId_; }
            set
            {
                userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GetAccountRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GetAccountRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (UserId != other.UserId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (UserId.Length != 0) hash ^= UserId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (UserId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(UserId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (UserId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GetAccountRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.UserId.Length != 0)
            {
                UserId = other.UserId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            UserId = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GetDeckRequest : pb::IMessage<GetDeckRequest>
    {
        private static readonly pb::MessageParser<GetDeckRequest> _parser = new pb::MessageParser<GetDeckRequest>(() => new GetDeckRequest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GetDeckRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[30]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetDeckRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetDeckRequest(GetDeckRequest other) : this()
        {
            userId_ = other.userId_;
            deckId_ = other.deckId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetDeckRequest Clone()
        {
            return new GetDeckRequest(this);
        }

        /// <summary>Field number for the "user_id" field.</summary>
        public const int UserIdFieldNumber = 1;
        private string userId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserId
        {
            get { return userId_; }
            set
            {
                userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "deck_id" field.</summary>
        public const int DeckIdFieldNumber = 2;
        private long deckId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long DeckId
        {
            get { return deckId_; }
            set
            {
                deckId_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GetDeckRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GetDeckRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (UserId != other.UserId) return false;
            if (DeckId != other.DeckId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (UserId.Length != 0) hash ^= UserId.GetHashCode();
            if (DeckId != 0L) hash ^= DeckId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (UserId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(UserId);
            }
            if (DeckId != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(DeckId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (UserId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
            }
            if (DeckId != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(DeckId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GetDeckRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.UserId.Length != 0)
            {
                UserId = other.UserId;
            }
            if (other.DeckId != 0L)
            {
                DeckId = other.DeckId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            UserId = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            DeckId = input.ReadInt64();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GetDeckResponse : pb::IMessage<GetDeckResponse>
    {
        private static readonly pb::MessageParser<GetDeckResponse> _parser = new pb::MessageParser<GetDeckResponse>(() => new GetDeckResponse());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GetDeckResponse> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[31]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetDeckResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetDeckResponse(GetDeckResponse other) : this()
        {
            deck_ = other.deck_ != null ? other.deck_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetDeckResponse Clone()
        {
            return new GetDeckResponse(this);
        }

        /// <summary>Field number for the "deck" field.</summary>
        public const int DeckFieldNumber = 2;
        private global::Loom.ZombieBattleground.Protobuf.Deck deck_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.Deck Deck
        {
            get { return deck_; }
            set
            {
                deck_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GetDeckResponse);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GetDeckResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Deck, other.Deck)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (deck_ != null) hash ^= Deck.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (deck_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Deck);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (deck_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deck);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GetDeckResponse other)
        {
            if (other == null)
            {
                return;
            }
            if (other.deck_ != null)
            {
                if (deck_ == null)
                {
                    deck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
                }
                Deck.MergeFrom(other.Deck);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 18:
                        {
                            if (deck_ == null)
                            {
                                deck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
                            }
                            input.ReadMessage(deck_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class CreateDeckRequest : pb::IMessage<CreateDeckRequest>
    {
        private static readonly pb::MessageParser<CreateDeckRequest> _parser = new pb::MessageParser<CreateDeckRequest>(() => new CreateDeckRequest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CreateDeckRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[32]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CreateDeckRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CreateDeckRequest(CreateDeckRequest other) : this()
        {
            userId_ = other.userId_;
            deck_ = other.deck_ != null ? other.deck_.Clone() : null;
            lastModificationTimestamp_ = other.lastModificationTimestamp_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CreateDeckRequest Clone()
        {
            return new CreateDeckRequest(this);
        }

        /// <summary>Field number for the "user_id" field.</summary>
        public const int UserIdFieldNumber = 1;
        private string userId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserId
        {
            get { return userId_; }
            set
            {
                userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "deck" field.</summary>
        public const int DeckFieldNumber = 2;
        private global::Loom.ZombieBattleground.Protobuf.Deck deck_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.Deck Deck
        {
            get { return deck_; }
            set
            {
                deck_ = value;
            }
        }

        /// <summary>Field number for the "last_modification_timestamp" field.</summary>
        public const int LastModificationTimestampFieldNumber = 3;
        private long lastModificationTimestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LastModificationTimestamp
        {
            get { return lastModificationTimestamp_; }
            set
            {
                lastModificationTimestamp_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CreateDeckRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CreateDeckRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (UserId != other.UserId) return false;
            if (!object.Equals(Deck, other.Deck)) return false;
            if (LastModificationTimestamp != other.LastModificationTimestamp) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (UserId.Length != 0) hash ^= UserId.GetHashCode();
            if (deck_ != null) hash ^= Deck.GetHashCode();
            if (LastModificationTimestamp != 0L) hash ^= LastModificationTimestamp.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (UserId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(UserId);
            }
            if (deck_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Deck);
            }
            if (LastModificationTimestamp != 0L)
            {
                output.WriteRawTag(24);
                output.WriteInt64(LastModificationTimestamp);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (UserId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
            }
            if (deck_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deck);
            }
            if (LastModificationTimestamp != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastModificationTimestamp);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CreateDeckRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.UserId.Length != 0)
            {
                UserId = other.UserId;
            }
            if (other.deck_ != null)
            {
                if (deck_ == null)
                {
                    deck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
                }
                Deck.MergeFrom(other.Deck);
            }
            if (other.LastModificationTimestamp != 0L)
            {
                LastModificationTimestamp = other.LastModificationTimestamp;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            UserId = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            if (deck_ == null)
                            {
                                deck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
                            }
                            input.ReadMessage(deck_);
                            break;
                        }
                    case 24:
                        {
                            LastModificationTimestamp = input.ReadInt64();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class CreateDeckResponse : pb::IMessage<CreateDeckResponse>
    {
        private static readonly pb::MessageParser<CreateDeckResponse> _parser = new pb::MessageParser<CreateDeckResponse>(() => new CreateDeckResponse());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CreateDeckResponse> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[33]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CreateDeckResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CreateDeckResponse(CreateDeckResponse other) : this()
        {
            deckId_ = other.deckId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CreateDeckResponse Clone()
        {
            return new CreateDeckResponse(this);
        }

        /// <summary>Field number for the "deck_id" field.</summary>
        public const int DeckIdFieldNumber = 1;
        private long deckId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long DeckId
        {
            get { return deckId_; }
            set
            {
                deckId_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CreateDeckResponse);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CreateDeckResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (DeckId != other.DeckId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (DeckId != 0L) hash ^= DeckId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (DeckId != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(DeckId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (DeckId != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(DeckId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CreateDeckResponse other)
        {
            if (other == null)
            {
                return;
            }
            if (other.DeckId != 0L)
            {
                DeckId = other.DeckId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            DeckId = input.ReadInt64();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class DeleteDeckRequest : pb::IMessage<DeleteDeckRequest>
    {
        private static readonly pb::MessageParser<DeleteDeckRequest> _parser = new pb::MessageParser<DeleteDeckRequest>(() => new DeleteDeckRequest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DeleteDeckRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[34]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeleteDeckRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeleteDeckRequest(DeleteDeckRequest other) : this()
        {
            userId_ = other.userId_;
            deckId_ = other.deckId_;
            lastModificationTimestamp_ = other.lastModificationTimestamp_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeleteDeckRequest Clone()
        {
            return new DeleteDeckRequest(this);
        }

        /// <summary>Field number for the "user_id" field.</summary>
        public const int UserIdFieldNumber = 1;
        private string userId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserId
        {
            get { return userId_; }
            set
            {
                userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "deck_id" field.</summary>
        public const int DeckIdFieldNumber = 2;
        private long deckId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long DeckId
        {
            get { return deckId_; }
            set
            {
                deckId_ = value;
            }
        }

        /// <summary>Field number for the "last_modification_timestamp" field.</summary>
        public const int LastModificationTimestampFieldNumber = 3;
        private long lastModificationTimestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LastModificationTimestamp
        {
            get { return lastModificationTimestamp_; }
            set
            {
                lastModificationTimestamp_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as DeleteDeckRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DeleteDeckRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (UserId != other.UserId) return false;
            if (DeckId != other.DeckId) return false;
            if (LastModificationTimestamp != other.LastModificationTimestamp) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (UserId.Length != 0) hash ^= UserId.GetHashCode();
            if (DeckId != 0L) hash ^= DeckId.GetHashCode();
            if (LastModificationTimestamp != 0L) hash ^= LastModificationTimestamp.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (UserId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(UserId);
            }
            if (DeckId != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(DeckId);
            }
            if (LastModificationTimestamp != 0L)
            {
                output.WriteRawTag(24);
                output.WriteInt64(LastModificationTimestamp);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (UserId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
            }
            if (DeckId != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(DeckId);
            }
            if (LastModificationTimestamp != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastModificationTimestamp);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DeleteDeckRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.UserId.Length != 0)
            {
                UserId = other.UserId;
            }
            if (other.DeckId != 0L)
            {
                DeckId = other.DeckId;
            }
            if (other.LastModificationTimestamp != 0L)
            {
                LastModificationTimestamp = other.LastModificationTimestamp;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            UserId = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            DeckId = input.ReadInt64();
                            break;
                        }
                    case 24:
                        {
                            LastModificationTimestamp = input.ReadInt64();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class EditDeckRequest : pb::IMessage<EditDeckRequest>
    {
        private static readonly pb::MessageParser<EditDeckRequest> _parser = new pb::MessageParser<EditDeckRequest>(() => new EditDeckRequest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EditDeckRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[35]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EditDeckRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EditDeckRequest(EditDeckRequest other) : this()
        {
            userId_ = other.userId_;
            deck_ = other.deck_ != null ? other.deck_.Clone() : null;
            lastModificationTimestamp_ = other.lastModificationTimestamp_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EditDeckRequest Clone()
        {
            return new EditDeckRequest(this);
        }

        /// <summary>Field number for the "user_id" field.</summary>
        public const int UserIdFieldNumber = 1;
        private string userId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserId
        {
            get { return userId_; }
            set
            {
                userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "deck" field.</summary>
        public const int DeckFieldNumber = 2;
        private global::Loom.ZombieBattleground.Protobuf.Deck deck_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.Deck Deck
        {
            get { return deck_; }
            set
            {
                deck_ = value;
            }
        }

        /// <summary>Field number for the "last_modification_timestamp" field.</summary>
        public const int LastModificationTimestampFieldNumber = 3;
        private long lastModificationTimestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LastModificationTimestamp
        {
            get { return lastModificationTimestamp_; }
            set
            {
                lastModificationTimestamp_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as EditDeckRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EditDeckRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (UserId != other.UserId) return false;
            if (!object.Equals(Deck, other.Deck)) return false;
            if (LastModificationTimestamp != other.LastModificationTimestamp) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (UserId.Length != 0) hash ^= UserId.GetHashCode();
            if (deck_ != null) hash ^= Deck.GetHashCode();
            if (LastModificationTimestamp != 0L) hash ^= LastModificationTimestamp.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (UserId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(UserId);
            }
            if (deck_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Deck);
            }
            if (LastModificationTimestamp != 0L)
            {
                output.WriteRawTag(24);
                output.WriteInt64(LastModificationTimestamp);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (UserId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
            }
            if (deck_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deck);
            }
            if (LastModificationTimestamp != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastModificationTimestamp);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EditDeckRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.UserId.Length != 0)
            {
                UserId = other.UserId;
            }
            if (other.deck_ != null)
            {
                if (deck_ == null)
                {
                    deck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
                }
                Deck.MergeFrom(other.Deck);
            }
            if (other.LastModificationTimestamp != 0L)
            {
                LastModificationTimestamp = other.LastModificationTimestamp;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            UserId = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            if (deck_ == null)
                            {
                                deck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
                            }
                            input.ReadMessage(deck_);
                            break;
                        }
                    case 24:
                        {
                            LastModificationTimestamp = input.ReadInt64();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class DecksResponse : pb::IMessage<DecksResponse>
    {
        private static readonly pb::MessageParser<DecksResponse> _parser = new pb::MessageParser<DecksResponse>(() => new DecksResponse());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DecksResponse> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[36]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DecksResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DecksResponse(DecksResponse other) : this()
        {
            userId_ = other.userId_;
            decks_ = other.decks_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DecksResponse Clone()
        {
            return new DecksResponse(this);
        }

        /// <summary>Field number for the "user_id" field.</summary>
        public const int UserIdFieldNumber = 1;
        private string userId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserId
        {
            get { return userId_; }
            set
            {
                userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "decks" field.</summary>
        public const int DecksFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Deck> _repeated_decks_codec
            = pb::FieldCodec.ForMessage(18, global::Loom.ZombieBattleground.Protobuf.Deck.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck> decks_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck> Decks
        {
            get { return decks_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as DecksResponse);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DecksResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (UserId != other.UserId) return false;
            if (!decks_.Equals(other.decks_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (UserId.Length != 0) hash ^= UserId.GetHashCode();
            hash ^= decks_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (UserId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(UserId);
            }
            decks_.WriteTo(output, _repeated_decks_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (UserId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
            }
            size += decks_.CalculateSize(_repeated_decks_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DecksResponse other)
        {
            if (other == null)
            {
                return;
            }
            if (other.UserId.Length != 0)
            {
                UserId = other.UserId;
            }
            decks_.Add(other.decks_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            UserId = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            decks_.AddEntriesFrom(input, _repeated_decks_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ListDecksRequest : pb::IMessage<ListDecksRequest>
    {
        private static readonly pb::MessageParser<ListDecksRequest> _parser = new pb::MessageParser<ListDecksRequest>(() => new ListDecksRequest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ListDecksRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[37]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ListDecksRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ListDecksRequest(ListDecksRequest other) : this()
        {
            userId_ = other.userId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ListDecksRequest Clone()
        {
            return new ListDecksRequest(this);
        }

        /// <summary>Field number for the "user_id" field.</summary>
        public const int UserIdFieldNumber = 1;
        private string userId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserId
        {
            get { return userId_; }
            set
            {
                userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ListDecksRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ListDecksRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (UserId != other.UserId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (UserId.Length != 0) hash ^= UserId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (UserId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(UserId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (UserId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ListDecksRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.UserId.Length != 0)
            {
                UserId = other.UserId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            UserId = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ListDecksResponse : pb::IMessage<ListDecksResponse>
    {
        private static readonly pb::MessageParser<ListDecksResponse> _parser = new pb::MessageParser<ListDecksResponse>(() => new ListDecksResponse());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ListDecksResponse> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[38]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ListDecksResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ListDecksResponse(ListDecksResponse other) : this()
        {
            decks_ = other.decks_.Clone();
            lastModificationTimestamp_ = other.lastModificationTimestamp_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ListDecksResponse Clone()
        {
            return new ListDecksResponse(this);
        }

        /// <summary>Field number for the "decks" field.</summary>
        public const int DecksFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Deck> _repeated_decks_codec
            = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.Deck.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck> decks_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Deck> Decks
        {
            get { return decks_; }
        }

        /// <summary>Field number for the "last_modification_timestamp" field.</summary>
        public const int LastModificationTimestampFieldNumber = 3;
        private long lastModificationTimestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LastModificationTimestamp
        {
            get { return lastModificationTimestamp_; }
            set
            {
                lastModificationTimestamp_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ListDecksResponse);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ListDecksResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!decks_.Equals(other.decks_)) return false;
            if (LastModificationTimestamp != other.LastModificationTimestamp) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= decks_.GetHashCode();
            if (LastModificationTimestamp != 0L) hash ^= LastModificationTimestamp.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            decks_.WriteTo(output, _repeated_decks_codec);
            if (LastModificationTimestamp != 0L)
            {
                output.WriteRawTag(24);
                output.WriteInt64(LastModificationTimestamp);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += decks_.CalculateSize(_repeated_decks_codec);
            if (LastModificationTimestamp != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastModificationTimestamp);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ListDecksResponse other)
        {
            if (other == null)
            {
                return;
            }
            decks_.Add(other.decks_);
            if (other.LastModificationTimestamp != 0L)
            {
                LastModificationTimestamp = other.LastModificationTimestamp;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            decks_.AddEntriesFrom(input, _repeated_decks_codec);
                            break;
                        }
                    case 24:
                        {
                            LastModificationTimestamp = input.ReadInt64();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ListCardLibraryRequest : pb::IMessage<ListCardLibraryRequest>
    {
        private static readonly pb::MessageParser<ListCardLibraryRequest> _parser = new pb::MessageParser<ListCardLibraryRequest>(() => new ListCardLibraryRequest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ListCardLibraryRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[39]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ListCardLibraryRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ListCardLibraryRequest(ListCardLibraryRequest other) : this()
        {
            version_ = other.version_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ListCardLibraryRequest Clone()
        {
            return new ListCardLibraryRequest(this);
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 1;
        private string version_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Version
        {
            get { return version_; }
            set
            {
                version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ListCardLibraryRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ListCardLibraryRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Version != other.Version) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Version.Length != 0) hash ^= Version.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Version.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Version);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Version.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ListCardLibraryRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Version.Length != 0)
            {
                Version = other.Version;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            Version = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ListCardLibraryResponse : pb::IMessage<ListCardLibraryResponse>
    {
        private static readonly pb::MessageParser<ListCardLibraryResponse> _parser = new pb::MessageParser<ListCardLibraryResponse>(() => new ListCardLibraryResponse());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ListCardLibraryResponse> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[40]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ListCardLibraryResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ListCardLibraryResponse(ListCardLibraryResponse other) : this()
        {
            sets_ = other.sets_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ListCardLibraryResponse Clone()
        {
            return new ListCardLibraryResponse(this);
        }

        /// <summary>Field number for the "sets" field.</summary>
        public const int SetsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardSet> _repeated_sets_codec
            = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.CardSet.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardSet> sets_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardSet>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardSet> Sets
        {
            get { return sets_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ListCardLibraryResponse);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ListCardLibraryResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!sets_.Equals(other.sets_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= sets_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            sets_.WriteTo(output, _repeated_sets_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += sets_.CalculateSize(_repeated_sets_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ListCardLibraryResponse other)
        {
            if (other == null)
            {
                return;
            }
            sets_.Add(other.sets_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            sets_.AddEntriesFrom(input, _repeated_sets_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ListHeroLibraryRequest : pb::IMessage<ListHeroLibraryRequest>
    {
        private static readonly pb::MessageParser<ListHeroLibraryRequest> _parser = new pb::MessageParser<ListHeroLibraryRequest>(() => new ListHeroLibraryRequest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ListHeroLibraryRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[41]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ListHeroLibraryRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ListHeroLibraryRequest(ListHeroLibraryRequest other) : this()
        {
            version_ = other.version_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ListHeroLibraryRequest Clone()
        {
            return new ListHeroLibraryRequest(this);
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 1;
        private string version_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Version
        {
            get { return version_; }
            set
            {
                version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ListHeroLibraryRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ListHeroLibraryRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Version != other.Version) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Version.Length != 0) hash ^= Version.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Version.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Version);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Version.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ListHeroLibraryRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Version.Length != 0)
            {
                Version = other.Version;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            Version = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ListHeroLibraryResponse : pb::IMessage<ListHeroLibraryResponse>
    {
        private static readonly pb::MessageParser<ListHeroLibraryResponse> _parser = new pb::MessageParser<ListHeroLibraryResponse>(() => new ListHeroLibraryResponse());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ListHeroLibraryResponse> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[42]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ListHeroLibraryResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ListHeroLibraryResponse(ListHeroLibraryResponse other) : this()
        {
            heroes_ = other.heroes_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ListHeroLibraryResponse Clone()
        {
            return new ListHeroLibraryResponse(this);
        }

        /// <summary>Field number for the "heroes" field.</summary>
        public const int HeroesFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Hero> _repeated_heroes_codec
            = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.Hero.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero> heroes_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Hero> Heroes
        {
            get { return heroes_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ListHeroLibraryResponse);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ListHeroLibraryResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!heroes_.Equals(other.heroes_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= heroes_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            heroes_.WriteTo(output, _repeated_heroes_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += heroes_.CalculateSize(_repeated_heroes_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ListHeroLibraryResponse other)
        {
            if (other == null)
            {
                return;
            }
            heroes_.Add(other.heroes_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            heroes_.AddEntriesFrom(input, _repeated_heroes_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GetCollectionRequest : pb::IMessage<GetCollectionRequest>
    {
        private static readonly pb::MessageParser<GetCollectionRequest> _parser = new pb::MessageParser<GetCollectionRequest>(() => new GetCollectionRequest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GetCollectionRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[43]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetCollectionRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetCollectionRequest(GetCollectionRequest other) : this()
        {
            userId_ = other.userId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetCollectionRequest Clone()
        {
            return new GetCollectionRequest(this);
        }

        /// <summary>Field number for the "user_id" field.</summary>
        public const int UserIdFieldNumber = 1;
        private string userId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserId
        {
            get { return userId_; }
            set
            {
                userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GetCollectionRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GetCollectionRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (UserId != other.UserId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (UserId.Length != 0) hash ^= UserId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (UserId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(UserId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (UserId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GetCollectionRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.UserId.Length != 0)
            {
                UserId = other.UserId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            UserId = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GetCollectionResponse : pb::IMessage<GetCollectionResponse>
    {
        private static readonly pb::MessageParser<GetCollectionResponse> _parser = new pb::MessageParser<GetCollectionResponse>(() => new GetCollectionResponse());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GetCollectionResponse> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[44]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetCollectionResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetCollectionResponse(GetCollectionResponse other) : this()
        {
            cards_ = other.cards_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetCollectionResponse Clone()
        {
            return new GetCollectionResponse(this);
        }

        /// <summary>Field number for the "cards" field.</summary>
        public const int CardsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardCollection> _repeated_cards_codec
            = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.CardCollection.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollection> cards_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollection>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardCollection> Cards
        {
            get { return cards_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GetCollectionResponse);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GetCollectionResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!cards_.Equals(other.cards_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= cards_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            cards_.WriteTo(output, _repeated_cards_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += cards_.CalculateSize(_repeated_cards_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GetCollectionResponse other)
        {
            if (other == null)
            {
                return;
            }
            cards_.Add(other.cards_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            cards_.AddEntriesFrom(input, _repeated_cards_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class PlayerState : pb::IMessage<PlayerState>
    {
        private static readonly pb::MessageParser<PlayerState> _parser = new pb::MessageParser<PlayerState>(() => new PlayerState());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[45]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerState()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerState(PlayerState other) : this()
        {
            id_ = other.id_;
            currentAction_ = other.currentAction_;
            overlordInstance_ = other.overlordInstance_ != null ? other.overlordInstance_.Clone() : null;
            cardsInHand_ = other.cardsInHand_.Clone();
            cardsOnBoard_ = other.cardsOnBoard_.Clone();
            cardsInDeck_ = other.cardsInDeck_.Clone();
            deck_ = other.deck_ != null ? other.deck_.Clone() : null;
            hp_ = other.hp_;
            mana_ = other.mana_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerState Clone()
        {
            return new PlayerState(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id
        {
            get { return id_; }
            set
            {
                id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "currentAction" field.</summary>
        public const int CurrentActionFieldNumber = 2;
        private global::Loom.ZombieBattleground.Protobuf.PlayerActionType currentAction_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.PlayerActionType CurrentAction
        {
            get { return currentAction_; }
            set
            {
                currentAction_ = value;
            }
        }

        /// <summary>Field number for the "overlordInstance" field.</summary>
        public const int OverlordInstanceFieldNumber = 3;
        private global::Loom.ZombieBattleground.Protobuf.OverlordInstance overlordInstance_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.OverlordInstance OverlordInstance
        {
            get { return overlordInstance_; }
            set
            {
                overlordInstance_ = value;
            }
        }

        /// <summary>Field number for the "cardsInHand" field.</summary>
        public const int CardsInHandFieldNumber = 4;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardInstance> _repeated_cardsInHand_codec
            = pb::FieldCodec.ForMessage(34, global::Loom.ZombieBattleground.Protobuf.CardInstance.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance> cardsInHand_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance> CardsInHand
        {
            get { return cardsInHand_; }
        }

        /// <summary>Field number for the "cardsOnBoard" field.</summary>
        public const int CardsOnBoardFieldNumber = 5;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardInstance> _repeated_cardsOnBoard_codec
            = pb::FieldCodec.ForMessage(42, global::Loom.ZombieBattleground.Protobuf.CardInstance.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance> cardsOnBoard_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance> CardsOnBoard
        {
            get { return cardsOnBoard_; }
        }

        /// <summary>Field number for the "cardsInDeck" field.</summary>
        public const int CardsInDeckFieldNumber = 6;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardInstance> _repeated_cardsInDeck_codec
            = pb::FieldCodec.ForMessage(50, global::Loom.ZombieBattleground.Protobuf.CardInstance.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance> cardsInDeck_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance> CardsInDeck
        {
            get { return cardsInDeck_; }
        }

        /// <summary>Field number for the "deck" field.</summary>
        public const int DeckFieldNumber = 7;
        private global::Loom.ZombieBattleground.Protobuf.Deck deck_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.Deck Deck
        {
            get { return deck_; }
            set
            {
                deck_ = value;
            }
        }

        /// <summary>Field number for the "hp" field.</summary>
        public const int HpFieldNumber = 8;
        private int hp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Hp
        {
            get { return hp_; }
            set
            {
                hp_ = value;
            }
        }

        /// <summary>Field number for the "mana" field.</summary>
        public const int ManaFieldNumber = 9;
        private int mana_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Mana
        {
            get { return mana_; }
            set
            {
                mana_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PlayerState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerState other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Id != other.Id) return false;
            if (CurrentAction != other.CurrentAction) return false;
            if (!object.Equals(OverlordInstance, other.OverlordInstance)) return false;
            if (!cardsInHand_.Equals(other.cardsInHand_)) return false;
            if (!cardsOnBoard_.Equals(other.cardsOnBoard_)) return false;
            if (!cardsInDeck_.Equals(other.cardsInDeck_)) return false;
            if (!object.Equals(Deck, other.Deck)) return false;
            if (Hp != other.Hp) return false;
            if (Mana != other.Mana) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Id.Length != 0) hash ^= Id.GetHashCode();
            if (CurrentAction != 0) hash ^= CurrentAction.GetHashCode();
            if (overlordInstance_ != null) hash ^= OverlordInstance.GetHashCode();
            hash ^= cardsInHand_.GetHashCode();
            hash ^= cardsOnBoard_.GetHashCode();
            hash ^= cardsInDeck_.GetHashCode();
            if (deck_ != null) hash ^= Deck.GetHashCode();
            if (Hp != 0) hash ^= Hp.GetHashCode();
            if (Mana != 0) hash ^= Mana.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Id.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Id);
            }
            if (CurrentAction != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)CurrentAction);
            }
            if (overlordInstance_ != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(OverlordInstance);
            }
            cardsInHand_.WriteTo(output, _repeated_cardsInHand_codec);
            cardsOnBoard_.WriteTo(output, _repeated_cardsOnBoard_codec);
            cardsInDeck_.WriteTo(output, _repeated_cardsInDeck_codec);
            if (deck_ != null)
            {
                output.WriteRawTag(58);
                output.WriteMessage(Deck);
            }
            if (Hp != 0)
            {
                output.WriteRawTag(64);
                output.WriteInt32(Hp);
            }
            if (Mana != 0)
            {
                output.WriteRawTag(72);
                output.WriteInt32(Mana);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Id.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
            }
            if (CurrentAction != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)CurrentAction);
            }
            if (overlordInstance_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(OverlordInstance);
            }
            size += cardsInHand_.CalculateSize(_repeated_cardsInHand_codec);
            size += cardsOnBoard_.CalculateSize(_repeated_cardsOnBoard_codec);
            size += cardsInDeck_.CalculateSize(_repeated_cardsInDeck_codec);
            if (deck_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deck);
            }
            if (Hp != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
            }
            if (Mana != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mana);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerState other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Id.Length != 0)
            {
                Id = other.Id;
            }
            if (other.CurrentAction != 0)
            {
                CurrentAction = other.CurrentAction;
            }
            if (other.overlordInstance_ != null)
            {
                if (overlordInstance_ == null)
                {
                    overlordInstance_ = new global::Loom.ZombieBattleground.Protobuf.OverlordInstance();
                }
                OverlordInstance.MergeFrom(other.OverlordInstance);
            }
            cardsInHand_.Add(other.cardsInHand_);
            cardsOnBoard_.Add(other.cardsOnBoard_);
            cardsInDeck_.Add(other.cardsInDeck_);
            if (other.deck_ != null)
            {
                if (deck_ == null)
                {
                    deck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
                }
                Deck.MergeFrom(other.Deck);
            }
            if (other.Hp != 0)
            {
                Hp = other.Hp;
            }
            if (other.Mana != 0)
            {
                Mana = other.Mana;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            Id = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            currentAction_ = (global::Loom.ZombieBattleground.Protobuf.PlayerActionType)input.ReadEnum();
                            break;
                        }
                    case 26:
                        {
                            if (overlordInstance_ == null)
                            {
                                overlordInstance_ = new global::Loom.ZombieBattleground.Protobuf.OverlordInstance();
                            }
                            input.ReadMessage(overlordInstance_);
                            break;
                        }
                    case 34:
                        {
                            cardsInHand_.AddEntriesFrom(input, _repeated_cardsInHand_codec);
                            break;
                        }
                    case 42:
                        {
                            cardsOnBoard_.AddEntriesFrom(input, _repeated_cardsOnBoard_codec);
                            break;
                        }
                    case 50:
                        {
                            cardsInDeck_.AddEntriesFrom(input, _repeated_cardsInDeck_codec);
                            break;
                        }
                    case 58:
                        {
                            if (deck_ == null)
                            {
                                deck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
                            }
                            input.ReadMessage(deck_);
                            break;
                        }
                    case 64:
                        {
                            Hp = input.ReadInt32();
                            break;
                        }
                    case 72:
                        {
                            Mana = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Match : pb::IMessage<Match>
    {
        private static readonly pb::MessageParser<Match> _parser = new pb::MessageParser<Match>(() => new Match());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Match> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[46]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Match()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Match(Match other) : this()
        {
            id_ = other.id_;
            topics_ = other.topics_.Clone();
            playerStates_ = other.playerStates_.Clone();
            status_ = other.status_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Match Clone()
        {
            return new Match(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private long id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Id
        {
            get { return id_; }
            set
            {
                id_ = value;
            }
        }

        /// <summary>Field number for the "topics" field.</summary>
        public const int TopicsFieldNumber = 2;
        private static readonly pb::FieldCodec<string> _repeated_topics_codec
            = pb::FieldCodec.ForString(18);
        private readonly pbc::RepeatedField<string> topics_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Topics
        {
            get { return topics_; }
        }

        /// <summary>Field number for the "playerStates" field.</summary>
        public const int PlayerStatesFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.PlayerState> _repeated_playerStates_codec
            = pb::FieldCodec.ForMessage(26, global::Loom.ZombieBattleground.Protobuf.PlayerState.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerState> playerStates_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerState>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerState> PlayerStates
        {
            get { return playerStates_; }
        }

        /// <summary>Field number for the "status" field.</summary>
        public const int StatusFieldNumber = 4;
        private global::Loom.ZombieBattleground.Protobuf.Match.Types.Status status_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.Match.Types.Status Status
        {
            get { return status_; }
            set
            {
                status_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Match);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Match other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Id != other.Id) return false;
            if (!topics_.Equals(other.topics_)) return false;
            if (!playerStates_.Equals(other.playerStates_)) return false;
            if (Status != other.Status) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Id != 0L) hash ^= Id.GetHashCode();
            hash ^= topics_.GetHashCode();
            hash ^= playerStates_.GetHashCode();
            if (Status != 0) hash ^= Status.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Id != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(Id);
            }
            topics_.WriteTo(output, _repeated_topics_codec);
            playerStates_.WriteTo(output, _repeated_playerStates_codec);
            if (Status != 0)
            {
                output.WriteRawTag(32);
                output.WriteEnum((int)Status);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Id != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
            }
            size += topics_.CalculateSize(_repeated_topics_codec);
            size += playerStates_.CalculateSize(_repeated_playerStates_codec);
            if (Status != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Status);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Match other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Id != 0L)
            {
                Id = other.Id;
            }
            topics_.Add(other.topics_);
            playerStates_.Add(other.playerStates_);
            if (other.Status != 0)
            {
                Status = other.Status;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Id = input.ReadInt64();
                            break;
                        }
                    case 18:
                        {
                            topics_.AddEntriesFrom(input, _repeated_topics_codec);
                            break;
                        }
                    case 26:
                        {
                            playerStates_.AddEntriesFrom(input, _repeated_playerStates_codec);
                            break;
                        }
                    case 32:
                        {
                            status_ = (global::Loom.ZombieBattleground.Protobuf.Match.Types.Status)input.ReadEnum();
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Match message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public enum Status
            {
                [pbr::OriginalName("Created")] Created = 0,
                [pbr::OriginalName("Matching")] Matching = 1,
                [pbr::OriginalName("Started")] Started = 2,
                [pbr::OriginalName("Playing")] Playing = 3,
                [pbr::OriginalName("PlayerLeft")] PlayerLeft = 4,
                [pbr::OriginalName("Ended")] Ended = 5,
            }

        }
        #endregion

    }

    public sealed partial class MatchMakingInfoList : pb::IMessage<MatchMakingInfoList>
    {
        private static readonly pb::MessageParser<MatchMakingInfoList> _parser = new pb::MessageParser<MatchMakingInfoList>(() => new MatchMakingInfoList());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MatchMakingInfoList> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[47]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchMakingInfoList()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchMakingInfoList(MatchMakingInfoList other) : this()
        {
            infos_ = other.infos_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchMakingInfoList Clone()
        {
            return new MatchMakingInfoList(this);
        }

        /// <summary>Field number for the "infos" field.</summary>
        public const int InfosFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.MatchMakingInfo> _repeated_infos_codec
            = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.MatchMakingInfo.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.MatchMakingInfo> infos_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.MatchMakingInfo>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.MatchMakingInfo> Infos
        {
            get { return infos_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as MatchMakingInfoList);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MatchMakingInfoList other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!infos_.Equals(other.infos_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= infos_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            infos_.WriteTo(output, _repeated_infos_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += infos_.CalculateSize(_repeated_infos_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MatchMakingInfoList other)
        {
            if (other == null)
            {
                return;
            }
            infos_.Add(other.infos_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            infos_.AddEntriesFrom(input, _repeated_infos_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class MatchMakingInfo : pb::IMessage<MatchMakingInfo>
    {
        private static readonly pb::MessageParser<MatchMakingInfo> _parser = new pb::MessageParser<MatchMakingInfo>(() => new MatchMakingInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MatchMakingInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[48]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchMakingInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchMakingInfo(MatchMakingInfo other) : this()
        {
            userId_ = other.userId_;
            deck_ = other.deck_ != null ? other.deck_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchMakingInfo Clone()
        {
            return new MatchMakingInfo(this);
        }

        /// <summary>Field number for the "userId" field.</summary>
        public const int UserIdFieldNumber = 1;
        private string userId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserId
        {
            get { return userId_; }
            set
            {
                userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "deck" field.</summary>
        public const int DeckFieldNumber = 2;
        private global::Loom.ZombieBattleground.Protobuf.Deck deck_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.Deck Deck
        {
            get { return deck_; }
            set
            {
                deck_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as MatchMakingInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MatchMakingInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (UserId != other.UserId) return false;
            if (!object.Equals(Deck, other.Deck)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (UserId.Length != 0) hash ^= UserId.GetHashCode();
            if (deck_ != null) hash ^= Deck.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (UserId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(UserId);
            }
            if (deck_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Deck);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (UserId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
            }
            if (deck_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deck);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MatchMakingInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.UserId.Length != 0)
            {
                UserId = other.UserId;
            }
            if (other.deck_ != null)
            {
                if (deck_ == null)
                {
                    deck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
                }
                Deck.MergeFrom(other.Deck);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            UserId = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            if (deck_ == null)
                            {
                                deck_ = new global::Loom.ZombieBattleground.Protobuf.Deck();
                            }
                            input.ReadMessage(deck_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class PlayerAction : pb::IMessage<PlayerAction>
    {
        private static readonly pb::MessageParser<PlayerAction> _parser = new pb::MessageParser<PlayerAction>(() => new PlayerAction());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerAction> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[49]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerAction()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerAction(PlayerAction other) : this()
        {
            actionType_ = other.actionType_;
            playerId_ = other.playerId_;
            switch (other.ActionCase)
            {
                case ActionOneofCase.CardAttack:
                    CardAttack = other.CardAttack.Clone();
                    break;
                case ActionOneofCase.DrawCard:
                    DrawCard = other.DrawCard.Clone();
                    break;
                case ActionOneofCase.EndTurn:
                    EndTurn = other.EndTurn.Clone();
                    break;
                case ActionOneofCase.Mulligan:
                    Mulligan = other.Mulligan.Clone();
                    break;
                case ActionOneofCase.CardPlay:
                    CardPlay = other.CardPlay.Clone();
                    break;
                case ActionOneofCase.CardAbilityUsed:
                    CardAbilityUsed = other.CardAbilityUsed.Clone();
                    break;
                case ActionOneofCase.OverlordSkillUsed:
                    OverlordSkillUsed = other.OverlordSkillUsed.Clone();
                    break;
                case ActionOneofCase.CoinToss:
                    CoinToss = other.CoinToss.Clone();
                    break;
                case ActionOneofCase.InitHands:
                    InitHands = other.InitHands.Clone();
                    break;
                case ActionOneofCase.LeaveMatch:
                    LeaveMatch = other.LeaveMatch.Clone();
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerAction Clone()
        {
            return new PlayerAction(this);
        }

        /// <summary>Field number for the "actionType" field.</summary>
        public const int ActionTypeFieldNumber = 1;
        private global::Loom.ZombieBattleground.Protobuf.PlayerActionType actionType_ = 0;
        /// <summary>
        /// not sure we really need this
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.PlayerActionType ActionType
        {
            get { return actionType_; }
            set
            {
                actionType_ = value;
            }
        }

        /// <summary>Field number for the "playerId" field.</summary>
        public const int PlayerIdFieldNumber = 2;
        private string playerId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PlayerId
        {
            get { return playerId_; }
            set
            {
                playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "cardAttack" field.</summary>
        public const int CardAttackFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAttack CardAttack
        {
            get { return actionCase_ == ActionOneofCase.CardAttack ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAttack)action_ : null; }
            set
            {
                action_ = value;
                actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.CardAttack;
            }
        }

        /// <summary>Field number for the "drawCard" field.</summary>
        public const int DrawCardFieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.PlayerActionDrawCard DrawCard
        {
            get { return actionCase_ == ActionOneofCase.DrawCard ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionDrawCard)action_ : null; }
            set
            {
                action_ = value;
                actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.DrawCard;
            }
        }

        /// <summary>Field number for the "endTurn" field.</summary>
        public const int EndTurnFieldNumber = 5;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.PlayerActionEndTurn EndTurn
        {
            get { return actionCase_ == ActionOneofCase.EndTurn ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionEndTurn)action_ : null; }
            set
            {
                action_ = value;
                actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.EndTurn;
            }
        }

        /// <summary>Field number for the "mulligan" field.</summary>
        public const int MulliganFieldNumber = 6;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.PlayerActionMulligan Mulligan
        {
            get { return actionCase_ == ActionOneofCase.Mulligan ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionMulligan)action_ : null; }
            set
            {
                action_ = value;
                actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.Mulligan;
            }
        }

        /// <summary>Field number for the "cardPlay" field.</summary>
        public const int CardPlayFieldNumber = 7;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.PlayerActionCardPlay CardPlay
        {
            get { return actionCase_ == ActionOneofCase.CardPlay ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionCardPlay)action_ : null; }
            set
            {
                action_ = value;
                actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.CardPlay;
            }
        }

        /// <summary>Field number for the "cardAbilityUsed" field.</summary>
        public const int CardAbilityUsedFieldNumber = 8;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAbilityUsed CardAbilityUsed
        {
            get { return actionCase_ == ActionOneofCase.CardAbilityUsed ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAbilityUsed)action_ : null; }
            set
            {
                action_ = value;
                actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.CardAbilityUsed;
            }
        }

        /// <summary>Field number for the "overlordSkillUsed" field.</summary>
        public const int OverlordSkillUsedFieldNumber = 9;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.PlayerActionOverlordSkillUsed OverlordSkillUsed
        {
            get { return actionCase_ == ActionOneofCase.OverlordSkillUsed ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionOverlordSkillUsed)action_ : null; }
            set
            {
                action_ = value;
                actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.OverlordSkillUsed;
            }
        }

        /// <summary>Field number for the "coinToss" field.</summary>
        public const int CoinTossFieldNumber = 10;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.PlayerActionCoinToss CoinToss
        {
            get { return actionCase_ == ActionOneofCase.CoinToss ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionCoinToss)action_ : null; }
            set
            {
                action_ = value;
                actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.CoinToss;
            }
        }

        /// <summary>Field number for the "initHands" field.</summary>
        public const int InitHandsFieldNumber = 11;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.PlayerActionInitHands InitHands
        {
            get { return actionCase_ == ActionOneofCase.InitHands ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionInitHands)action_ : null; }
            set
            {
                action_ = value;
                actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.InitHands;
            }
        }

        /// <summary>Field number for the "leaveMatch" field.</summary>
        public const int LeaveMatchFieldNumber = 12;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.PlayerActionLeaveMatch LeaveMatch
        {
            get { return actionCase_ == ActionOneofCase.LeaveMatch ? (global::Loom.ZombieBattleground.Protobuf.PlayerActionLeaveMatch)action_ : null; }
            set
            {
                action_ = value;
                actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.LeaveMatch;
            }
        }

        private object action_;
        /// <summary>Enum of possible cases for the "action" oneof.</summary>
        public enum ActionOneofCase
        {
            None = 0,
            CardAttack = 3,
            DrawCard = 4,
            EndTurn = 5,
            Mulligan = 6,
            CardPlay = 7,
            CardAbilityUsed = 8,
            OverlordSkillUsed = 9,
            CoinToss = 10,
            InitHands = 11,
            LeaveMatch = 12,
        }
        private ActionOneofCase actionCase_ = ActionOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActionOneofCase ActionCase
        {
            get { return actionCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAction()
        {
            actionCase_ = ActionOneofCase.None;
            action_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PlayerAction);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerAction other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ActionType != other.ActionType) return false;
            if (PlayerId != other.PlayerId) return false;
            if (!object.Equals(CardAttack, other.CardAttack)) return false;
            if (!object.Equals(DrawCard, other.DrawCard)) return false;
            if (!object.Equals(EndTurn, other.EndTurn)) return false;
            if (!object.Equals(Mulligan, other.Mulligan)) return false;
            if (!object.Equals(CardPlay, other.CardPlay)) return false;
            if (!object.Equals(CardAbilityUsed, other.CardAbilityUsed)) return false;
            if (!object.Equals(OverlordSkillUsed, other.OverlordSkillUsed)) return false;
            if (!object.Equals(CoinToss, other.CoinToss)) return false;
            if (!object.Equals(InitHands, other.InitHands)) return false;
            if (!object.Equals(LeaveMatch, other.LeaveMatch)) return false;
            if (ActionCase != other.ActionCase) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ActionType != 0) hash ^= ActionType.GetHashCode();
            if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
            if (actionCase_ == ActionOneofCase.CardAttack) hash ^= CardAttack.GetHashCode();
            if (actionCase_ == ActionOneofCase.DrawCard) hash ^= DrawCard.GetHashCode();
            if (actionCase_ == ActionOneofCase.EndTurn) hash ^= EndTurn.GetHashCode();
            if (actionCase_ == ActionOneofCase.Mulligan) hash ^= Mulligan.GetHashCode();
            if (actionCase_ == ActionOneofCase.CardPlay) hash ^= CardPlay.GetHashCode();
            if (actionCase_ == ActionOneofCase.CardAbilityUsed) hash ^= CardAbilityUsed.GetHashCode();
            if (actionCase_ == ActionOneofCase.OverlordSkillUsed) hash ^= OverlordSkillUsed.GetHashCode();
            if (actionCase_ == ActionOneofCase.CoinToss) hash ^= CoinToss.GetHashCode();
            if (actionCase_ == ActionOneofCase.InitHands) hash ^= InitHands.GetHashCode();
            if (actionCase_ == ActionOneofCase.LeaveMatch) hash ^= LeaveMatch.GetHashCode();
            hash ^= (int)actionCase_;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ActionType != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)ActionType);
            }
            if (PlayerId.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(PlayerId);
            }
            if (actionCase_ == ActionOneofCase.CardAttack)
            {
                output.WriteRawTag(26);
                output.WriteMessage(CardAttack);
            }
            if (actionCase_ == ActionOneofCase.DrawCard)
            {
                output.WriteRawTag(34);
                output.WriteMessage(DrawCard);
            }
            if (actionCase_ == ActionOneofCase.EndTurn)
            {
                output.WriteRawTag(42);
                output.WriteMessage(EndTurn);
            }
            if (actionCase_ == ActionOneofCase.Mulligan)
            {
                output.WriteRawTag(50);
                output.WriteMessage(Mulligan);
            }
            if (actionCase_ == ActionOneofCase.CardPlay)
            {
                output.WriteRawTag(58);
                output.WriteMessage(CardPlay);
            }
            if (actionCase_ == ActionOneofCase.CardAbilityUsed)
            {
                output.WriteRawTag(66);
                output.WriteMessage(CardAbilityUsed);
            }
            if (actionCase_ == ActionOneofCase.OverlordSkillUsed)
            {
                output.WriteRawTag(74);
                output.WriteMessage(OverlordSkillUsed);
            }
            if (actionCase_ == ActionOneofCase.CoinToss)
            {
                output.WriteRawTag(82);
                output.WriteMessage(CoinToss);
            }
            if (actionCase_ == ActionOneofCase.InitHands)
            {
                output.WriteRawTag(90);
                output.WriteMessage(InitHands);
            }
            if (actionCase_ == ActionOneofCase.LeaveMatch)
            {
                output.WriteRawTag(98);
                output.WriteMessage(LeaveMatch);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ActionType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ActionType);
            }
            if (PlayerId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
            }
            if (actionCase_ == ActionOneofCase.CardAttack)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardAttack);
            }
            if (actionCase_ == ActionOneofCase.DrawCard)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(DrawCard);
            }
            if (actionCase_ == ActionOneofCase.EndTurn)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTurn);
            }
            if (actionCase_ == ActionOneofCase.Mulligan)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mulligan);
            }
            if (actionCase_ == ActionOneofCase.CardPlay)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardPlay);
            }
            if (actionCase_ == ActionOneofCase.CardAbilityUsed)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardAbilityUsed);
            }
            if (actionCase_ == ActionOneofCase.OverlordSkillUsed)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(OverlordSkillUsed);
            }
            if (actionCase_ == ActionOneofCase.CoinToss)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(CoinToss);
            }
            if (actionCase_ == ActionOneofCase.InitHands)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(InitHands);
            }
            if (actionCase_ == ActionOneofCase.LeaveMatch)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeaveMatch);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerAction other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ActionType != 0)
            {
                ActionType = other.ActionType;
            }
            if (other.PlayerId.Length != 0)
            {
                PlayerId = other.PlayerId;
            }
            switch (other.ActionCase)
            {
                case ActionOneofCase.CardAttack:
                    if (CardAttack == null)
                    {
                        CardAttack = new global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAttack();
                    }
                    CardAttack.MergeFrom(other.CardAttack);
                    break;
                case ActionOneofCase.DrawCard:
                    if (DrawCard == null)
                    {
                        DrawCard = new global::Loom.ZombieBattleground.Protobuf.PlayerActionDrawCard();
                    }
                    DrawCard.MergeFrom(other.DrawCard);
                    break;
                case ActionOneofCase.EndTurn:
                    if (EndTurn == null)
                    {
                        EndTurn = new global::Loom.ZombieBattleground.Protobuf.PlayerActionEndTurn();
                    }
                    EndTurn.MergeFrom(other.EndTurn);
                    break;
                case ActionOneofCase.Mulligan:
                    if (Mulligan == null)
                    {
                        Mulligan = new global::Loom.ZombieBattleground.Protobuf.PlayerActionMulligan();
                    }
                    Mulligan.MergeFrom(other.Mulligan);
                    break;
                case ActionOneofCase.CardPlay:
                    if (CardPlay == null)
                    {
                        CardPlay = new global::Loom.ZombieBattleground.Protobuf.PlayerActionCardPlay();
                    }
                    CardPlay.MergeFrom(other.CardPlay);
                    break;
                case ActionOneofCase.CardAbilityUsed:
                    if (CardAbilityUsed == null)
                    {
                        CardAbilityUsed = new global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAbilityUsed();
                    }
                    CardAbilityUsed.MergeFrom(other.CardAbilityUsed);
                    break;
                case ActionOneofCase.OverlordSkillUsed:
                    if (OverlordSkillUsed == null)
                    {
                        OverlordSkillUsed = new global::Loom.ZombieBattleground.Protobuf.PlayerActionOverlordSkillUsed();
                    }
                    OverlordSkillUsed.MergeFrom(other.OverlordSkillUsed);
                    break;
                case ActionOneofCase.CoinToss:
                    if (CoinToss == null)
                    {
                        CoinToss = new global::Loom.ZombieBattleground.Protobuf.PlayerActionCoinToss();
                    }
                    CoinToss.MergeFrom(other.CoinToss);
                    break;
                case ActionOneofCase.InitHands:
                    if (InitHands == null)
                    {
                        InitHands = new global::Loom.ZombieBattleground.Protobuf.PlayerActionInitHands();
                    }
                    InitHands.MergeFrom(other.InitHands);
                    break;
                case ActionOneofCase.LeaveMatch:
                    if (LeaveMatch == null)
                    {
                        LeaveMatch = new global::Loom.ZombieBattleground.Protobuf.PlayerActionLeaveMatch();
                    }
                    LeaveMatch.MergeFrom(other.LeaveMatch);
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            actionType_ = (global::Loom.ZombieBattleground.Protobuf.PlayerActionType)input.ReadEnum();
                            break;
                        }
                    case 18:
                        {
                            PlayerId = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAttack subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAttack();
                            if (actionCase_ == ActionOneofCase.CardAttack)
                            {
                                subBuilder.MergeFrom(CardAttack);
                            }
                            input.ReadMessage(subBuilder);
                            CardAttack = subBuilder;
                            break;
                        }
                    case 34:
                        {
                            global::Loom.ZombieBattleground.Protobuf.PlayerActionDrawCard subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionDrawCard();
                            if (actionCase_ == ActionOneofCase.DrawCard)
                            {
                                subBuilder.MergeFrom(DrawCard);
                            }
                            input.ReadMessage(subBuilder);
                            DrawCard = subBuilder;
                            break;
                        }
                    case 42:
                        {
                            global::Loom.ZombieBattleground.Protobuf.PlayerActionEndTurn subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionEndTurn();
                            if (actionCase_ == ActionOneofCase.EndTurn)
                            {
                                subBuilder.MergeFrom(EndTurn);
                            }
                            input.ReadMessage(subBuilder);
                            EndTurn = subBuilder;
                            break;
                        }
                    case 50:
                        {
                            global::Loom.ZombieBattleground.Protobuf.PlayerActionMulligan subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionMulligan();
                            if (actionCase_ == ActionOneofCase.Mulligan)
                            {
                                subBuilder.MergeFrom(Mulligan);
                            }
                            input.ReadMessage(subBuilder);
                            Mulligan = subBuilder;
                            break;
                        }
                    case 58:
                        {
                            global::Loom.ZombieBattleground.Protobuf.PlayerActionCardPlay subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionCardPlay();
                            if (actionCase_ == ActionOneofCase.CardPlay)
                            {
                                subBuilder.MergeFrom(CardPlay);
                            }
                            input.ReadMessage(subBuilder);
                            CardPlay = subBuilder;
                            break;
                        }
                    case 66:
                        {
                            global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAbilityUsed subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionCardAbilityUsed();
                            if (actionCase_ == ActionOneofCase.CardAbilityUsed)
                            {
                                subBuilder.MergeFrom(CardAbilityUsed);
                            }
                            input.ReadMessage(subBuilder);
                            CardAbilityUsed = subBuilder;
                            break;
                        }
                    case 74:
                        {
                            global::Loom.ZombieBattleground.Protobuf.PlayerActionOverlordSkillUsed subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionOverlordSkillUsed();
                            if (actionCase_ == ActionOneofCase.OverlordSkillUsed)
                            {
                                subBuilder.MergeFrom(OverlordSkillUsed);
                            }
                            input.ReadMessage(subBuilder);
                            OverlordSkillUsed = subBuilder;
                            break;
                        }
                    case 82:
                        {
                            global::Loom.ZombieBattleground.Protobuf.PlayerActionCoinToss subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionCoinToss();
                            if (actionCase_ == ActionOneofCase.CoinToss)
                            {
                                subBuilder.MergeFrom(CoinToss);
                            }
                            input.ReadMessage(subBuilder);
                            CoinToss = subBuilder;
                            break;
                        }
                    case 90:
                        {
                            global::Loom.ZombieBattleground.Protobuf.PlayerActionInitHands subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionInitHands();
                            if (actionCase_ == ActionOneofCase.InitHands)
                            {
                                subBuilder.MergeFrom(InitHands);
                            }
                            input.ReadMessage(subBuilder);
                            InitHands = subBuilder;
                            break;
                        }
                    case 98:
                        {
                            global::Loom.ZombieBattleground.Protobuf.PlayerActionLeaveMatch subBuilder = new global::Loom.ZombieBattleground.Protobuf.PlayerActionLeaveMatch();
                            if (actionCase_ == ActionOneofCase.LeaveMatch)
                            {
                                subBuilder.MergeFrom(LeaveMatch);
                            }
                            input.ReadMessage(subBuilder);
                            LeaveMatch = subBuilder;
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class PlayerActionEvent : pb::IMessage<PlayerActionEvent>
    {
        private static readonly pb::MessageParser<PlayerActionEvent> _parser = new pb::MessageParser<PlayerActionEvent>(() => new PlayerActionEvent());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerActionEvent> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[50]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionEvent()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionEvent(PlayerActionEvent other) : this()
        {
            playerActionType_ = other.playerActionType_;
            userId_ = other.userId_;
            message_ = other.message_;
            match_ = other.match_ != null ? other.match_.Clone() : null;
            playerAction_ = other.playerAction_ != null ? other.playerAction_.Clone() : null;
            gameState_ = other.gameState_ != null ? other.gameState_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionEvent Clone()
        {
            return new PlayerActionEvent(this);
        }

        /// <summary>Field number for the "playerActionType" field.</summary>
        public const int PlayerActionTypeFieldNumber = 1;
        private global::Loom.ZombieBattleground.Protobuf.PlayerActionType playerActionType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.PlayerActionType PlayerActionType
        {
            get { return playerActionType_; }
            set
            {
                playerActionType_ = value;
            }
        }

        /// <summary>Field number for the "userId" field.</summary>
        public const int UserIdFieldNumber = 2;
        private string userId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserId
        {
            get { return userId_; }
            set
            {
                userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "message" field.</summary>
        public const int MessageFieldNumber = 3;
        private string message_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Message
        {
            get { return message_; }
            set
            {
                message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "match" field.</summary>
        public const int MatchFieldNumber = 4;
        private global::Loom.ZombieBattleground.Protobuf.Match match_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.Match Match
        {
            get { return match_; }
            set
            {
                match_ = value;
            }
        }

        /// <summary>Field number for the "playerAction" field.</summary>
        public const int PlayerActionFieldNumber = 5;
        private global::Loom.ZombieBattleground.Protobuf.PlayerAction playerAction_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.PlayerAction PlayerAction
        {
            get { return playerAction_; }
            set
            {
                playerAction_ = value;
            }
        }

        /// <summary>Field number for the "gameState" field.</summary>
        public const int GameStateFieldNumber = 6;
        private global::Loom.ZombieBattleground.Protobuf.GameState gameState_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.GameState GameState
        {
            get { return gameState_; }
            set
            {
                gameState_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PlayerActionEvent);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerActionEvent other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (PlayerActionType != other.PlayerActionType) return false;
            if (UserId != other.UserId) return false;
            if (Message != other.Message) return false;
            if (!object.Equals(Match, other.Match)) return false;
            if (!object.Equals(PlayerAction, other.PlayerAction)) return false;
            if (!object.Equals(GameState, other.GameState)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (PlayerActionType != 0) hash ^= PlayerActionType.GetHashCode();
            if (UserId.Length != 0) hash ^= UserId.GetHashCode();
            if (Message.Length != 0) hash ^= Message.GetHashCode();
            if (match_ != null) hash ^= Match.GetHashCode();
            if (playerAction_ != null) hash ^= PlayerAction.GetHashCode();
            if (gameState_ != null) hash ^= GameState.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (PlayerActionType != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)PlayerActionType);
            }
            if (UserId.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(UserId);
            }
            if (Message.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(Message);
            }
            if (match_ != null)
            {
                output.WriteRawTag(34);
                output.WriteMessage(Match);
            }
            if (playerAction_ != null)
            {
                output.WriteRawTag(42);
                output.WriteMessage(PlayerAction);
            }
            if (gameState_ != null)
            {
                output.WriteRawTag(50);
                output.WriteMessage(GameState);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (PlayerActionType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)PlayerActionType);
            }
            if (UserId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
            }
            if (Message.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
            }
            if (match_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Match);
            }
            if (playerAction_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerAction);
            }
            if (gameState_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameState);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerActionEvent other)
        {
            if (other == null)
            {
                return;
            }
            if (other.PlayerActionType != 0)
            {
                PlayerActionType = other.PlayerActionType;
            }
            if (other.UserId.Length != 0)
            {
                UserId = other.UserId;
            }
            if (other.Message.Length != 0)
            {
                Message = other.Message;
            }
            if (other.match_ != null)
            {
                if (match_ == null)
                {
                    match_ = new global::Loom.ZombieBattleground.Protobuf.Match();
                }
                Match.MergeFrom(other.Match);
            }
            if (other.playerAction_ != null)
            {
                if (playerAction_ == null)
                {
                    playerAction_ = new global::Loom.ZombieBattleground.Protobuf.PlayerAction();
                }
                PlayerAction.MergeFrom(other.PlayerAction);
            }
            if (other.gameState_ != null)
            {
                if (gameState_ == null)
                {
                    gameState_ = new global::Loom.ZombieBattleground.Protobuf.GameState();
                }
                GameState.MergeFrom(other.GameState);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            playerActionType_ = (global::Loom.ZombieBattleground.Protobuf.PlayerActionType)input.ReadEnum();
                            break;
                        }
                    case 18:
                        {
                            UserId = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            Message = input.ReadString();
                            break;
                        }
                    case 34:
                        {
                            if (match_ == null)
                            {
                                match_ = new global::Loom.ZombieBattleground.Protobuf.Match();
                            }
                            input.ReadMessage(match_);
                            break;
                        }
                    case 42:
                        {
                            if (playerAction_ == null)
                            {
                                playerAction_ = new global::Loom.ZombieBattleground.Protobuf.PlayerAction();
                            }
                            input.ReadMessage(playerAction_);
                            break;
                        }
                    case 50:
                        {
                            if (gameState_ == null)
                            {
                                gameState_ = new global::Loom.ZombieBattleground.Protobuf.GameState();
                            }
                            input.ReadMessage(gameState_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GameReplay : pb::IMessage<GameReplay>
    {
        private static readonly pb::MessageParser<GameReplay> _parser = new pb::MessageParser<GameReplay>(() => new GameReplay());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GameReplay> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[51]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameReplay()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameReplay(GameReplay other) : this()
        {
            events_ = other.events_.Clone();
            replayVersion_ = other.replayVersion_;
            randomSeed_ = other.randomSeed_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameReplay Clone()
        {
            return new GameReplay(this);
        }

        /// <summary>Field number for the "events" field.</summary>
        public const int EventsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.PlayerActionEvent> _repeated_events_codec
            = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.PlayerActionEvent.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerActionEvent> events_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerActionEvent>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerActionEvent> Events
        {
            get { return events_; }
        }

        /// <summary>Field number for the "replayVersion" field.</summary>
        public const int ReplayVersionFieldNumber = 3;
        private string replayVersion_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ReplayVersion
        {
            get { return replayVersion_; }
            set
            {
                replayVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "randomSeed" field.</summary>
        public const int RandomSeedFieldNumber = 4;
        private int randomSeed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int RandomSeed
        {
            get { return randomSeed_; }
            set
            {
                randomSeed_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GameReplay);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GameReplay other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!events_.Equals(other.events_)) return false;
            if (ReplayVersion != other.ReplayVersion) return false;
            if (RandomSeed != other.RandomSeed) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= events_.GetHashCode();
            if (ReplayVersion.Length != 0) hash ^= ReplayVersion.GetHashCode();
            if (RandomSeed != 0) hash ^= RandomSeed.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            events_.WriteTo(output, _repeated_events_codec);
            if (ReplayVersion.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(ReplayVersion);
            }
            if (RandomSeed != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(RandomSeed);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += events_.CalculateSize(_repeated_events_codec);
            if (ReplayVersion.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ReplayVersion);
            }
            if (RandomSeed != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(RandomSeed);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GameReplay other)
        {
            if (other == null)
            {
                return;
            }
            events_.Add(other.events_);
            if (other.ReplayVersion.Length != 0)
            {
                ReplayVersion = other.ReplayVersion;
            }
            if (other.RandomSeed != 0)
            {
                RandomSeed = other.RandomSeed;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            events_.AddEntriesFrom(input, _repeated_events_codec);
                            break;
                        }
                    case 26:
                        {
                            ReplayVersion = input.ReadString();
                            break;
                        }
                    case 32:
                        {
                            RandomSeed = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class PlayersInMatchmakingList : pb::IMessage<PlayersInMatchmakingList>
    {
        private static readonly pb::MessageParser<PlayersInMatchmakingList> _parser = new pb::MessageParser<PlayersInMatchmakingList>(() => new PlayersInMatchmakingList());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayersInMatchmakingList> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[52]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayersInMatchmakingList()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayersInMatchmakingList(PlayersInMatchmakingList other) : this()
        {
            userIDs_ = other.userIDs_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayersInMatchmakingList Clone()
        {
            return new PlayersInMatchmakingList(this);
        }

        /// <summary>Field number for the "userIDs" field.</summary>
        public const int UserIDsFieldNumber = 1;
        private static readonly pb::FieldCodec<string> _repeated_userIDs_codec
            = pb::FieldCodec.ForString(10);
        private readonly pbc::RepeatedField<string> userIDs_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> UserIDs
        {
            get { return userIDs_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PlayersInMatchmakingList);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayersInMatchmakingList other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!userIDs_.Equals(other.userIDs_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= userIDs_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            userIDs_.WriteTo(output, _repeated_userIDs_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += userIDs_.CalculateSize(_repeated_userIDs_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayersInMatchmakingList other)
        {
            if (other == null)
            {
                return;
            }
            userIDs_.Add(other.userIDs_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            userIDs_.AddEntriesFrom(input, _repeated_userIDs_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class PendingMatchList : pb::IMessage<PendingMatchList>
    {
        private static readonly pb::MessageParser<PendingMatchList> _parser = new pb::MessageParser<PendingMatchList>(() => new PendingMatchList());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PendingMatchList> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[53]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PendingMatchList()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PendingMatchList(PendingMatchList other) : this()
        {
            matches_ = other.matches_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PendingMatchList Clone()
        {
            return new PendingMatchList(this);
        }

        /// <summary>Field number for the "matches" field.</summary>
        public const int MatchesFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Match> _repeated_matches_codec
            = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.Match.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Match> matches_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Match>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Match> Matches
        {
            get { return matches_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PendingMatchList);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PendingMatchList other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!matches_.Equals(other.matches_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= matches_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            matches_.WriteTo(output, _repeated_matches_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += matches_.CalculateSize(_repeated_matches_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PendingMatchList other)
        {
            if (other == null)
            {
                return;
            }
            matches_.Add(other.matches_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            matches_.AddEntriesFrom(input, _repeated_matches_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class MatchList : pb::IMessage<MatchList>
    {
        private static readonly pb::MessageParser<MatchList> _parser = new pb::MessageParser<MatchList>(() => new MatchList());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MatchList> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[54]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchList()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchList(MatchList other) : this()
        {
            matches_ = other.matches_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchList Clone()
        {
            return new MatchList(this);
        }

        /// <summary>Field number for the "matches" field.</summary>
        public const int MatchesFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Match> _repeated_matches_codec
            = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.Match.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Match> matches_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Match>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Match> Matches
        {
            get { return matches_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as MatchList);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MatchList other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!matches_.Equals(other.matches_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= matches_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            matches_.WriteTo(output, _repeated_matches_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += matches_.CalculateSize(_repeated_matches_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MatchList other)
        {
            if (other == null)
            {
                return;
            }
            matches_.Add(other.matches_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            matches_.AddEntriesFrom(input, _repeated_matches_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class MatchCount : pb::IMessage<MatchCount>
    {
        private static readonly pb::MessageParser<MatchCount> _parser = new pb::MessageParser<MatchCount>(() => new MatchCount());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MatchCount> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[55]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchCount()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchCount(MatchCount other) : this()
        {
            currentId_ = other.currentId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchCount Clone()
        {
            return new MatchCount(this);
        }

        /// <summary>Field number for the "currentId" field.</summary>
        public const int CurrentIdFieldNumber = 1;
        private long currentId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long CurrentId
        {
            get { return currentId_; }
            set
            {
                currentId_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as MatchCount);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MatchCount other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (CurrentId != other.CurrentId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (CurrentId != 0L) hash ^= CurrentId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (CurrentId != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(CurrentId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (CurrentId != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrentId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MatchCount other)
        {
            if (other == null)
            {
                return;
            }
            if (other.CurrentId != 0L)
            {
                CurrentId = other.CurrentId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            CurrentId = input.ReadInt64();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class FindMatchRequest : pb::IMessage<FindMatchRequest>
    {
        private static readonly pb::MessageParser<FindMatchRequest> _parser = new pb::MessageParser<FindMatchRequest>(() => new FindMatchRequest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FindMatchRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[56]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FindMatchRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FindMatchRequest(FindMatchRequest other) : this()
        {
            userId_ = other.userId_;
            deckId_ = other.deckId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FindMatchRequest Clone()
        {
            return new FindMatchRequest(this);
        }

        /// <summary>Field number for the "userId" field.</summary>
        public const int UserIdFieldNumber = 1;
        private string userId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserId
        {
            get { return userId_; }
            set
            {
                userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "deckId" field.</summary>
        public const int DeckIdFieldNumber = 2;
        private long deckId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long DeckId
        {
            get { return deckId_; }
            set
            {
                deckId_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as FindMatchRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FindMatchRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (UserId != other.UserId) return false;
            if (DeckId != other.DeckId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (UserId.Length != 0) hash ^= UserId.GetHashCode();
            if (DeckId != 0L) hash ^= DeckId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (UserId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(UserId);
            }
            if (DeckId != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(DeckId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (UserId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
            }
            if (DeckId != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(DeckId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FindMatchRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.UserId.Length != 0)
            {
                UserId = other.UserId;
            }
            if (other.DeckId != 0L)
            {
                DeckId = other.DeckId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            UserId = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            DeckId = input.ReadInt64();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class FindMatchResponse : pb::IMessage<FindMatchResponse>
    {
        private static readonly pb::MessageParser<FindMatchResponse> _parser = new pb::MessageParser<FindMatchResponse>(() => new FindMatchResponse());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FindMatchResponse> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[57]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FindMatchResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FindMatchResponse(FindMatchResponse other) : this()
        {
            match_ = other.match_ != null ? other.match_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FindMatchResponse Clone()
        {
            return new FindMatchResponse(this);
        }

        /// <summary>Field number for the "match" field.</summary>
        public const int MatchFieldNumber = 1;
        private global::Loom.ZombieBattleground.Protobuf.Match match_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.Match Match
        {
            get { return match_; }
            set
            {
                match_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as FindMatchResponse);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FindMatchResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Match, other.Match)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (match_ != null) hash ^= Match.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (match_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Match);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (match_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Match);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FindMatchResponse other)
        {
            if (other == null)
            {
                return;
            }
            if (other.match_ != null)
            {
                if (match_ == null)
                {
                    match_ = new global::Loom.ZombieBattleground.Protobuf.Match();
                }
                Match.MergeFrom(other.Match);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (match_ == null)
                            {
                                match_ = new global::Loom.ZombieBattleground.Protobuf.Match();
                            }
                            input.ReadMessage(match_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GetMatchRequest : pb::IMessage<GetMatchRequest>
    {
        private static readonly pb::MessageParser<GetMatchRequest> _parser = new pb::MessageParser<GetMatchRequest>(() => new GetMatchRequest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GetMatchRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[58]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetMatchRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetMatchRequest(GetMatchRequest other) : this()
        {
            matchId_ = other.matchId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetMatchRequest Clone()
        {
            return new GetMatchRequest(this);
        }

        /// <summary>Field number for the "matchId" field.</summary>
        public const int MatchIdFieldNumber = 1;
        private long matchId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long MatchId
        {
            get { return matchId_; }
            set
            {
                matchId_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GetMatchRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GetMatchRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (MatchId != other.MatchId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (MatchId != 0L) hash ^= MatchId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (MatchId != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(MatchId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (MatchId != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GetMatchRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.MatchId != 0L)
            {
                MatchId = other.MatchId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            MatchId = input.ReadInt64();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GetMatchResponse : pb::IMessage<GetMatchResponse>
    {
        private static readonly pb::MessageParser<GetMatchResponse> _parser = new pb::MessageParser<GetMatchResponse>(() => new GetMatchResponse());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GetMatchResponse> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[59]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetMatchResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetMatchResponse(GetMatchResponse other) : this()
        {
            match_ = other.match_ != null ? other.match_.Clone() : null;
            gameState_ = other.gameState_ != null ? other.gameState_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetMatchResponse Clone()
        {
            return new GetMatchResponse(this);
        }

        /// <summary>Field number for the "match" field.</summary>
        public const int MatchFieldNumber = 1;
        private global::Loom.ZombieBattleground.Protobuf.Match match_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.Match Match
        {
            get { return match_; }
            set
            {
                match_ = value;
            }
        }

        /// <summary>Field number for the "gameState" field.</summary>
        public const int GameStateFieldNumber = 2;
        private global::Loom.ZombieBattleground.Protobuf.GameState gameState_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.GameState GameState
        {
            get { return gameState_; }
            set
            {
                gameState_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GetMatchResponse);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GetMatchResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Match, other.Match)) return false;
            if (!object.Equals(GameState, other.GameState)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (match_ != null) hash ^= Match.GetHashCode();
            if (gameState_ != null) hash ^= GameState.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (match_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Match);
            }
            if (gameState_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(GameState);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (match_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Match);
            }
            if (gameState_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameState);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GetMatchResponse other)
        {
            if (other == null)
            {
                return;
            }
            if (other.match_ != null)
            {
                if (match_ == null)
                {
                    match_ = new global::Loom.ZombieBattleground.Protobuf.Match();
                }
                Match.MergeFrom(other.Match);
            }
            if (other.gameState_ != null)
            {
                if (gameState_ == null)
                {
                    gameState_ = new global::Loom.ZombieBattleground.Protobuf.GameState();
                }
                GameState.MergeFrom(other.GameState);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (match_ == null)
                            {
                                match_ = new global::Loom.ZombieBattleground.Protobuf.Match();
                            }
                            input.ReadMessage(match_);
                            break;
                        }
                    case 18:
                        {
                            if (gameState_ == null)
                            {
                                gameState_ = new global::Loom.ZombieBattleground.Protobuf.GameState();
                            }
                            input.ReadMessage(gameState_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GetGameStateRequest : pb::IMessage<GetGameStateRequest>
    {
        private static readonly pb::MessageParser<GetGameStateRequest> _parser = new pb::MessageParser<GetGameStateRequest>(() => new GetGameStateRequest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GetGameStateRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[60]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetGameStateRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetGameStateRequest(GetGameStateRequest other) : this()
        {
            matchId_ = other.matchId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetGameStateRequest Clone()
        {
            return new GetGameStateRequest(this);
        }

        /// <summary>Field number for the "matchId" field.</summary>
        public const int MatchIdFieldNumber = 1;
        private long matchId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long MatchId
        {
            get { return matchId_; }
            set
            {
                matchId_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GetGameStateRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GetGameStateRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (MatchId != other.MatchId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (MatchId != 0L) hash ^= MatchId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (MatchId != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(MatchId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (MatchId != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GetGameStateRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.MatchId != 0L)
            {
                MatchId = other.MatchId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            MatchId = input.ReadInt64();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GetGameStateResponse : pb::IMessage<GetGameStateResponse>
    {
        private static readonly pb::MessageParser<GetGameStateResponse> _parser = new pb::MessageParser<GetGameStateResponse>(() => new GetGameStateResponse());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GetGameStateResponse> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[61]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetGameStateResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetGameStateResponse(GetGameStateResponse other) : this()
        {
            gameState_ = other.gameState_ != null ? other.gameState_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetGameStateResponse Clone()
        {
            return new GetGameStateResponse(this);
        }

        /// <summary>Field number for the "gameState" field.</summary>
        public const int GameStateFieldNumber = 1;
        private global::Loom.ZombieBattleground.Protobuf.GameState gameState_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.GameState GameState
        {
            get { return gameState_; }
            set
            {
                gameState_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GetGameStateResponse);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GetGameStateResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(GameState, other.GameState)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (gameState_ != null) hash ^= GameState.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (gameState_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(GameState);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (gameState_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameState);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GetGameStateResponse other)
        {
            if (other == null)
            {
                return;
            }
            if (other.gameState_ != null)
            {
                if (gameState_ == null)
                {
                    gameState_ = new global::Loom.ZombieBattleground.Protobuf.GameState();
                }
                GameState.MergeFrom(other.GameState);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (gameState_ == null)
                            {
                                gameState_ = new global::Loom.ZombieBattleground.Protobuf.GameState();
                            }
                            input.ReadMessage(gameState_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class PlayerActionRequest : pb::IMessage<PlayerActionRequest>
    {
        private static readonly pb::MessageParser<PlayerActionRequest> _parser = new pb::MessageParser<PlayerActionRequest>(() => new PlayerActionRequest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerActionRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[62]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionRequest(PlayerActionRequest other) : this()
        {
            matchId_ = other.matchId_;
            playerAction_ = other.playerAction_ != null ? other.playerAction_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionRequest Clone()
        {
            return new PlayerActionRequest(this);
        }

        /// <summary>Field number for the "matchId" field.</summary>
        public const int MatchIdFieldNumber = 1;
        private long matchId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long MatchId
        {
            get { return matchId_; }
            set
            {
                matchId_ = value;
            }
        }

        /// <summary>Field number for the "playerAction" field.</summary>
        public const int PlayerActionFieldNumber = 2;
        private global::Loom.ZombieBattleground.Protobuf.PlayerAction playerAction_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.PlayerAction PlayerAction
        {
            get { return playerAction_; }
            set
            {
                playerAction_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PlayerActionRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerActionRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (MatchId != other.MatchId) return false;
            if (!object.Equals(PlayerAction, other.PlayerAction)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (MatchId != 0L) hash ^= MatchId.GetHashCode();
            if (playerAction_ != null) hash ^= PlayerAction.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (MatchId != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(MatchId);
            }
            if (playerAction_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(PlayerAction);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (MatchId != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchId);
            }
            if (playerAction_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerAction);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerActionRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.MatchId != 0L)
            {
                MatchId = other.MatchId;
            }
            if (other.playerAction_ != null)
            {
                if (playerAction_ == null)
                {
                    playerAction_ = new global::Loom.ZombieBattleground.Protobuf.PlayerAction();
                }
                PlayerAction.MergeFrom(other.PlayerAction);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            MatchId = input.ReadInt64();
                            break;
                        }
                    case 18:
                        {
                            if (playerAction_ == null)
                            {
                                playerAction_ = new global::Loom.ZombieBattleground.Protobuf.PlayerAction();
                            }
                            input.ReadMessage(playerAction_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class PlayerActionResponse : pb::IMessage<PlayerActionResponse>
    {
        private static readonly pb::MessageParser<PlayerActionResponse> _parser = new pb::MessageParser<PlayerActionResponse>(() => new PlayerActionResponse());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerActionResponse> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[63]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionResponse(PlayerActionResponse other) : this()
        {
            gameState_ = other.gameState_ != null ? other.gameState_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionResponse Clone()
        {
            return new PlayerActionResponse(this);
        }

        /// <summary>Field number for the "gameState" field.</summary>
        public const int GameStateFieldNumber = 1;
        private global::Loom.ZombieBattleground.Protobuf.GameState gameState_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.GameState GameState
        {
            get { return gameState_; }
            set
            {
                gameState_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PlayerActionResponse);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerActionResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(GameState, other.GameState)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (gameState_ != null) hash ^= GameState.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (gameState_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(GameState);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (gameState_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameState);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerActionResponse other)
        {
            if (other == null)
            {
                return;
            }
            if (other.gameState_ != null)
            {
                if (gameState_ == null)
                {
                    gameState_ = new global::Loom.ZombieBattleground.Protobuf.GameState();
                }
                GameState.MergeFrom(other.GameState);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (gameState_ == null)
                            {
                                gameState_ = new global::Loom.ZombieBattleground.Protobuf.GameState();
                            }
                            input.ReadMessage(gameState_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class EndMatchRequest : pb::IMessage<EndMatchRequest>
    {
        private static readonly pb::MessageParser<EndMatchRequest> _parser = new pb::MessageParser<EndMatchRequest>(() => new EndMatchRequest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EndMatchRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[64]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EndMatchRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EndMatchRequest(EndMatchRequest other) : this()
        {
            matchId_ = other.matchId_;
            userId_ = other.userId_;
            winnerId_ = other.winnerId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EndMatchRequest Clone()
        {
            return new EndMatchRequest(this);
        }

        /// <summary>Field number for the "matchId" field.</summary>
        public const int MatchIdFieldNumber = 1;
        private long matchId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long MatchId
        {
            get { return matchId_; }
            set
            {
                matchId_ = value;
            }
        }

        /// <summary>Field number for the "userId" field.</summary>
        public const int UserIdFieldNumber = 2;
        private string userId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserId
        {
            get { return userId_; }
            set
            {
                userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "winnerId" field.</summary>
        public const int WinnerIdFieldNumber = 3;
        private string winnerId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string WinnerId
        {
            get { return winnerId_; }
            set
            {
                winnerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as EndMatchRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EndMatchRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (MatchId != other.MatchId) return false;
            if (UserId != other.UserId) return false;
            if (WinnerId != other.WinnerId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (MatchId != 0L) hash ^= MatchId.GetHashCode();
            if (UserId.Length != 0) hash ^= UserId.GetHashCode();
            if (WinnerId.Length != 0) hash ^= WinnerId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (MatchId != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(MatchId);
            }
            if (UserId.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(UserId);
            }
            if (WinnerId.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(WinnerId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (MatchId != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchId);
            }
            if (UserId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
            }
            if (WinnerId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(WinnerId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EndMatchRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.MatchId != 0L)
            {
                MatchId = other.MatchId;
            }
            if (other.UserId.Length != 0)
            {
                UserId = other.UserId;
            }
            if (other.WinnerId.Length != 0)
            {
                WinnerId = other.WinnerId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            MatchId = input.ReadInt64();
                            break;
                        }
                    case 18:
                        {
                            UserId = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            WinnerId = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class EndMatchResponse : pb::IMessage<EndMatchResponse>
    {
        private static readonly pb::MessageParser<EndMatchResponse> _parser = new pb::MessageParser<EndMatchResponse>(() => new EndMatchResponse());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EndMatchResponse> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[65]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EndMatchResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EndMatchResponse(EndMatchResponse other) : this()
        {
            gameState_ = other.gameState_ != null ? other.gameState_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EndMatchResponse Clone()
        {
            return new EndMatchResponse(this);
        }

        /// <summary>Field number for the "gameState" field.</summary>
        public const int GameStateFieldNumber = 1;
        private global::Loom.ZombieBattleground.Protobuf.GameState gameState_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.GameState GameState
        {
            get { return gameState_; }
            set
            {
                gameState_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as EndMatchResponse);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EndMatchResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(GameState, other.GameState)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (gameState_ != null) hash ^= GameState.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (gameState_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(GameState);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (gameState_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameState);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EndMatchResponse other)
        {
            if (other == null)
            {
                return;
            }
            if (other.gameState_ != null)
            {
                if (gameState_ == null)
                {
                    gameState_ = new global::Loom.ZombieBattleground.Protobuf.GameState();
                }
                GameState.MergeFrom(other.GameState);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (gameState_ == null)
                            {
                                gameState_ = new global::Loom.ZombieBattleground.Protobuf.GameState();
                            }
                            input.ReadMessage(gameState_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GameMode : pb::IMessage<GameMode>
    {
        private static readonly pb::MessageParser<GameMode> _parser = new pb::MessageParser<GameMode>(() => new GameMode());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GameMode> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[66]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameMode()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameMode(GameMode other) : this()
        {
            iD_ = other.iD_;
            name_ = other.name_;
            description_ = other.description_;
            version_ = other.version_;
            gameModeType_ = other.gameModeType_;
            bytes_ = other.bytes_;
            owner_ = other.owner_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameMode Clone()
        {
            return new GameMode(this);
        }

        /// <summary>Field number for the "ID" field.</summary>
        public const int IDFieldNumber = 1;
        private string iD_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ID
        {
            get { return iD_; }
            set
            {
                iD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name
        {
            get { return name_; }
            set
            {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "description" field.</summary>
        public const int DescriptionFieldNumber = 3;
        private string description_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Description
        {
            get { return description_; }
            set
            {
                description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 4;
        private string version_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Version
        {
            get { return version_; }
            set
            {
                version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "game_mode_type" field.</summary>
        public const int GameModeTypeFieldNumber = 5;
        private global::Loom.ZombieBattleground.Protobuf.GameModeType gameModeType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.GameModeType GameModeType
        {
            get { return gameModeType_; }
            set
            {
                gameModeType_ = value;
            }
        }

        /// <summary>Field number for the "bytes" field.</summary>
        public const int BytesFieldNumber = 6;
        private pb::ByteString bytes_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Bytes
        {
            get { return bytes_; }
            set
            {
                bytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "Owner" field.</summary>
        public const int OwnerFieldNumber = 7;
        private pb::ByteString owner_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Owner
        {
            get { return owner_; }
            set
            {
                owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GameMode);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GameMode other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ID != other.ID) return false;
            if (Name != other.Name) return false;
            if (Description != other.Description) return false;
            if (Version != other.Version) return false;
            if (GameModeType != other.GameModeType) return false;
            if (Bytes != other.Bytes) return false;
            if (Owner != other.Owner) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ID.Length != 0) hash ^= ID.GetHashCode();
            if (Name.Length != 0) hash ^= Name.GetHashCode();
            if (Description.Length != 0) hash ^= Description.GetHashCode();
            if (Version.Length != 0) hash ^= Version.GetHashCode();
            if (GameModeType != 0) hash ^= GameModeType.GetHashCode();
            if (Bytes.Length != 0) hash ^= Bytes.GetHashCode();
            if (Owner.Length != 0) hash ^= Owner.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ID.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(ID);
            }
            if (Name.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Name);
            }
            if (Description.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(Description);
            }
            if (Version.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(Version);
            }
            if (GameModeType != 0)
            {
                output.WriteRawTag(40);
                output.WriteEnum((int)GameModeType);
            }
            if (Bytes.Length != 0)
            {
                output.WriteRawTag(50);
                output.WriteBytes(Bytes);
            }
            if (Owner.Length != 0)
            {
                output.WriteRawTag(58);
                output.WriteBytes(Owner);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ID.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ID);
            }
            if (Name.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
            }
            if (Description.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
            }
            if (Version.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
            }
            if (GameModeType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)GameModeType);
            }
            if (Bytes.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Bytes);
            }
            if (Owner.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Owner);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GameMode other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ID.Length != 0)
            {
                ID = other.ID;
            }
            if (other.Name.Length != 0)
            {
                Name = other.Name;
            }
            if (other.Description.Length != 0)
            {
                Description = other.Description;
            }
            if (other.Version.Length != 0)
            {
                Version = other.Version;
            }
            if (other.GameModeType != 0)
            {
                GameModeType = other.GameModeType;
            }
            if (other.Bytes.Length != 0)
            {
                Bytes = other.Bytes;
            }
            if (other.Owner.Length != 0)
            {
                Owner = other.Owner;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            ID = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            Name = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            Description = input.ReadString();
                            break;
                        }
                    case 34:
                        {
                            Version = input.ReadString();
                            break;
                        }
                    case 40:
                        {
                            gameModeType_ = (global::Loom.ZombieBattleground.Protobuf.GameModeType)input.ReadEnum();
                            break;
                        }
                    case 50:
                        {
                            Bytes = input.ReadBytes();
                            break;
                        }
                    case 58:
                        {
                            Owner = input.ReadBytes();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GameModeList : pb::IMessage<GameModeList>
    {
        private static readonly pb::MessageParser<GameModeList> _parser = new pb::MessageParser<GameModeList>(() => new GameModeList());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GameModeList> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[67]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameModeList()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameModeList(GameModeList other) : this()
        {
            gameModes_ = other.gameModes_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameModeList Clone()
        {
            return new GameModeList(this);
        }

        /// <summary>Field number for the "game_modes" field.</summary>
        public const int GameModesFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.GameMode> _repeated_gameModes_codec
            = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.GameMode.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.GameMode> gameModes_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.GameMode>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.GameMode> GameModes
        {
            get { return gameModes_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GameModeList);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GameModeList other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!gameModes_.Equals(other.gameModes_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= gameModes_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            gameModes_.WriteTo(output, _repeated_gameModes_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += gameModes_.CalculateSize(_repeated_gameModes_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GameModeList other)
        {
            if (other == null)
            {
                return;
            }
            gameModes_.Add(other.gameModes_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            gameModes_.AddEntriesFrom(input, _repeated_gameModes_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GameModeRequest : pb::IMessage<GameModeRequest>
    {
        private static readonly pb::MessageParser<GameModeRequest> _parser = new pb::MessageParser<GameModeRequest>(() => new GameModeRequest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GameModeRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[68]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameModeRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameModeRequest(GameModeRequest other) : this()
        {
            name_ = other.name_;
            description_ = other.description_;
            version_ = other.version_;
            bytes_ = other.bytes_;
            gameModeType_ = other.gameModeType_;
            oracle_ = other.oracle_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameModeRequest Clone()
        {
            return new GameModeRequest(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name
        {
            get { return name_; }
            set
            {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "description" field.</summary>
        public const int DescriptionFieldNumber = 2;
        private string description_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Description
        {
            get { return description_; }
            set
            {
                description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 3;
        private string version_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Version
        {
            get { return version_; }
            set
            {
                version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "bytes" field.</summary>
        public const int BytesFieldNumber = 4;
        private string bytes_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Bytes
        {
            get { return bytes_; }
            set
            {
                bytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "game_mode_type" field.</summary>
        public const int GameModeTypeFieldNumber = 5;
        private global::Loom.ZombieBattleground.Protobuf.GameModeType gameModeType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.GameModeType GameModeType
        {
            get { return gameModeType_; }
            set
            {
                gameModeType_ = value;
            }
        }

        /// <summary>Field number for the "oracle" field.</summary>
        public const int OracleFieldNumber = 6;
        private string oracle_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Oracle
        {
            get { return oracle_; }
            set
            {
                oracle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GameModeRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GameModeRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Name != other.Name) return false;
            if (Description != other.Description) return false;
            if (Version != other.Version) return false;
            if (Bytes != other.Bytes) return false;
            if (GameModeType != other.GameModeType) return false;
            if (Oracle != other.Oracle) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Name.Length != 0) hash ^= Name.GetHashCode();
            if (Description.Length != 0) hash ^= Description.GetHashCode();
            if (Version.Length != 0) hash ^= Version.GetHashCode();
            if (Bytes.Length != 0) hash ^= Bytes.GetHashCode();
            if (GameModeType != 0) hash ^= GameModeType.GetHashCode();
            if (Oracle.Length != 0) hash ^= Oracle.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Name.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Name);
            }
            if (Description.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Description);
            }
            if (Version.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(Version);
            }
            if (Bytes.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(Bytes);
            }
            if (GameModeType != 0)
            {
                output.WriteRawTag(40);
                output.WriteEnum((int)GameModeType);
            }
            if (Oracle.Length != 0)
            {
                output.WriteRawTag(50);
                output.WriteString(Oracle);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Name.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
            }
            if (Description.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
            }
            if (Version.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
            }
            if (Bytes.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Bytes);
            }
            if (GameModeType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)GameModeType);
            }
            if (Oracle.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Oracle);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GameModeRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Name.Length != 0)
            {
                Name = other.Name;
            }
            if (other.Description.Length != 0)
            {
                Description = other.Description;
            }
            if (other.Version.Length != 0)
            {
                Version = other.Version;
            }
            if (other.Bytes.Length != 0)
            {
                Bytes = other.Bytes;
            }
            if (other.GameModeType != 0)
            {
                GameModeType = other.GameModeType;
            }
            if (other.Oracle.Length != 0)
            {
                Oracle = other.Oracle;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            Name = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            Description = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            Version = input.ReadString();
                            break;
                        }
                    case 34:
                        {
                            Bytes = input.ReadString();
                            break;
                        }
                    case 40:
                        {
                            gameModeType_ = (global::Loom.ZombieBattleground.Protobuf.GameModeType)input.ReadEnum();
                            break;
                        }
                    case 50:
                        {
                            Oracle = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class UpdateGameModeRequest : pb::IMessage<UpdateGameModeRequest>
    {
        private static readonly pb::MessageParser<UpdateGameModeRequest> _parser = new pb::MessageParser<UpdateGameModeRequest>(() => new UpdateGameModeRequest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UpdateGameModeRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[69]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateGameModeRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateGameModeRequest(UpdateGameModeRequest other) : this()
        {
            iD_ = other.iD_;
            name_ = other.name_;
            description_ = other.description_;
            version_ = other.version_;
            bytes_ = other.bytes_;
            gameModeType_ = other.gameModeType_;
            oracle_ = other.oracle_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UpdateGameModeRequest Clone()
        {
            return new UpdateGameModeRequest(this);
        }

        /// <summary>Field number for the "ID" field.</summary>
        public const int IDFieldNumber = 1;
        private string iD_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ID
        {
            get { return iD_; }
            set
            {
                iD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name
        {
            get { return name_; }
            set
            {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "description" field.</summary>
        public const int DescriptionFieldNumber = 3;
        private string description_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Description
        {
            get { return description_; }
            set
            {
                description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 4;
        private string version_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Version
        {
            get { return version_; }
            set
            {
                version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "bytes" field.</summary>
        public const int BytesFieldNumber = 5;
        private string bytes_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Bytes
        {
            get { return bytes_; }
            set
            {
                bytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "game_mode_type" field.</summary>
        public const int GameModeTypeFieldNumber = 6;
        private global::Loom.ZombieBattleground.Protobuf.GameModeType gameModeType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.GameModeType GameModeType
        {
            get { return gameModeType_; }
            set
            {
                gameModeType_ = value;
            }
        }

        /// <summary>Field number for the "oracle" field.</summary>
        public const int OracleFieldNumber = 7;
        private string oracle_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Oracle
        {
            get { return oracle_; }
            set
            {
                oracle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as UpdateGameModeRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UpdateGameModeRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ID != other.ID) return false;
            if (Name != other.Name) return false;
            if (Description != other.Description) return false;
            if (Version != other.Version) return false;
            if (Bytes != other.Bytes) return false;
            if (GameModeType != other.GameModeType) return false;
            if (Oracle != other.Oracle) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ID.Length != 0) hash ^= ID.GetHashCode();
            if (Name.Length != 0) hash ^= Name.GetHashCode();
            if (Description.Length != 0) hash ^= Description.GetHashCode();
            if (Version.Length != 0) hash ^= Version.GetHashCode();
            if (Bytes.Length != 0) hash ^= Bytes.GetHashCode();
            if (GameModeType != 0) hash ^= GameModeType.GetHashCode();
            if (Oracle.Length != 0) hash ^= Oracle.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ID.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(ID);
            }
            if (Name.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Name);
            }
            if (Description.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(Description);
            }
            if (Version.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(Version);
            }
            if (Bytes.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteString(Bytes);
            }
            if (GameModeType != 0)
            {
                output.WriteRawTag(48);
                output.WriteEnum((int)GameModeType);
            }
            if (Oracle.Length != 0)
            {
                output.WriteRawTag(58);
                output.WriteString(Oracle);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ID.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ID);
            }
            if (Name.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
            }
            if (Description.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
            }
            if (Version.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
            }
            if (Bytes.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Bytes);
            }
            if (GameModeType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)GameModeType);
            }
            if (Oracle.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Oracle);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UpdateGameModeRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ID.Length != 0)
            {
                ID = other.ID;
            }
            if (other.Name.Length != 0)
            {
                Name = other.Name;
            }
            if (other.Description.Length != 0)
            {
                Description = other.Description;
            }
            if (other.Version.Length != 0)
            {
                Version = other.Version;
            }
            if (other.Bytes.Length != 0)
            {
                Bytes = other.Bytes;
            }
            if (other.GameModeType != 0)
            {
                GameModeType = other.GameModeType;
            }
            if (other.Oracle.Length != 0)
            {
                Oracle = other.Oracle;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            ID = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            Name = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            Description = input.ReadString();
                            break;
                        }
                    case 34:
                        {
                            Version = input.ReadString();
                            break;
                        }
                    case 42:
                        {
                            Bytes = input.ReadString();
                            break;
                        }
                    case 48:
                        {
                            gameModeType_ = (global::Loom.ZombieBattleground.Protobuf.GameModeType)input.ReadEnum();
                            break;
                        }
                    case 58:
                        {
                            Oracle = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class DeleteGameModeRequest : pb::IMessage<DeleteGameModeRequest>
    {
        private static readonly pb::MessageParser<DeleteGameModeRequest> _parser = new pb::MessageParser<DeleteGameModeRequest>(() => new DeleteGameModeRequest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DeleteGameModeRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[70]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeleteGameModeRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeleteGameModeRequest(DeleteGameModeRequest other) : this()
        {
            iD_ = other.iD_;
            oracle_ = other.oracle_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeleteGameModeRequest Clone()
        {
            return new DeleteGameModeRequest(this);
        }

        /// <summary>Field number for the "ID" field.</summary>
        public const int IDFieldNumber = 1;
        private string iD_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ID
        {
            get { return iD_; }
            set
            {
                iD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "oracle" field.</summary>
        public const int OracleFieldNumber = 2;
        private string oracle_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Oracle
        {
            get { return oracle_; }
            set
            {
                oracle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as DeleteGameModeRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DeleteGameModeRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ID != other.ID) return false;
            if (Oracle != other.Oracle) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ID.Length != 0) hash ^= ID.GetHashCode();
            if (Oracle.Length != 0) hash ^= Oracle.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ID.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(ID);
            }
            if (Oracle.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Oracle);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ID.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ID);
            }
            if (Oracle.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Oracle);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DeleteGameModeRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ID.Length != 0)
            {
                ID = other.ID;
            }
            if (other.Oracle.Length != 0)
            {
                Oracle = other.Oracle;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            ID = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            Oracle = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GetGameModeRequest : pb::IMessage<GetGameModeRequest>
    {
        private static readonly pb::MessageParser<GetGameModeRequest> _parser = new pb::MessageParser<GetGameModeRequest>(() => new GetGameModeRequest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GetGameModeRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[71]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetGameModeRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetGameModeRequest(GetGameModeRequest other) : this()
        {
            iD_ = other.iD_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetGameModeRequest Clone()
        {
            return new GetGameModeRequest(this);
        }

        /// <summary>Field number for the "ID" field.</summary>
        public const int IDFieldNumber = 1;
        private string iD_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ID
        {
            get { return iD_; }
            set
            {
                iD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GetGameModeRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GetGameModeRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ID != other.ID) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ID.Length != 0) hash ^= ID.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ID.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(ID);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ID.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ID);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GetGameModeRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ID.Length != 0)
            {
                ID = other.ID;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            ID = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ListGameModesRequest : pb::IMessage<ListGameModesRequest>
    {
        private static readonly pb::MessageParser<ListGameModesRequest> _parser = new pb::MessageParser<ListGameModesRequest>(() => new ListGameModesRequest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ListGameModesRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[72]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ListGameModesRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ListGameModesRequest(ListGameModesRequest other) : this()
        {
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ListGameModesRequest Clone()
        {
            return new ListGameModesRequest(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ListGameModesRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ListGameModesRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ListGameModesRequest other)
        {
            if (other == null)
            {
                return;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                }
            }
        }

    }

    public sealed partial class GlobalState : pb::IMessage<GlobalState>
    {
        private static readonly pb::MessageParser<GlobalState> _parser = new pb::MessageParser<GlobalState>(() => new GlobalState());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GlobalState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[73]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GlobalState()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GlobalState(GlobalState other) : this()
        {
            currentGameId_ = other.currentGameId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GlobalState Clone()
        {
            return new GlobalState(this);
        }

        /// <summary>Field number for the "current_game_id" field.</summary>
        public const int CurrentGameIdFieldNumber = 1;
        private long currentGameId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long CurrentGameId
        {
            get { return currentGameId_; }
            set
            {
                currentGameId_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GlobalState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GlobalState other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (CurrentGameId != other.CurrentGameId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (CurrentGameId != 0L) hash ^= CurrentGameId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (CurrentGameId != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(CurrentGameId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (CurrentGameId != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrentGameId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GlobalState other)
        {
            if (other == null)
            {
                return;
            }
            if (other.CurrentGameId != 0L)
            {
                CurrentGameId = other.CurrentGameId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            CurrentGameId = input.ReadInt64();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class GameState : pb::IMessage<GameState>
    {
        private static readonly pb::MessageParser<GameState> _parser = new pb::MessageParser<GameState>(() => new GameState());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GameState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[74]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameState()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameState(GameState other) : this()
        {
            id_ = other.id_;
            isEnded_ = other.isEnded_;
            currentPlayerIndex_ = other.currentPlayerIndex_;
            playerStates_ = other.playerStates_.Clone();
            currentActionIndex_ = other.currentActionIndex_;
            playerActions_ = other.playerActions_.Clone();
            randomseed_ = other.randomseed_;
            winner_ = other.winner_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameState Clone()
        {
            return new GameState(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private long id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Id
        {
            get { return id_; }
            set
            {
                id_ = value;
            }
        }

        /// <summary>Field number for the "isEnded" field.</summary>
        public const int IsEndedFieldNumber = 2;
        private bool isEnded_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsEnded
        {
            get { return isEnded_; }
            set
            {
                isEnded_ = value;
            }
        }

        /// <summary>Field number for the "currentPlayerIndex" field.</summary>
        public const int CurrentPlayerIndexFieldNumber = 3;
        private int currentPlayerIndex_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CurrentPlayerIndex
        {
            get { return currentPlayerIndex_; }
            set
            {
                currentPlayerIndex_ = value;
            }
        }

        /// <summary>Field number for the "playerStates" field.</summary>
        public const int PlayerStatesFieldNumber = 4;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.PlayerState> _repeated_playerStates_codec
            = pb::FieldCodec.ForMessage(34, global::Loom.ZombieBattleground.Protobuf.PlayerState.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerState> playerStates_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerState>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerState> PlayerStates
        {
            get { return playerStates_; }
        }

        /// <summary>Field number for the "currentActionIndex" field.</summary>
        public const int CurrentActionIndexFieldNumber = 5;
        private long currentActionIndex_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long CurrentActionIndex
        {
            get { return currentActionIndex_; }
            set
            {
                currentActionIndex_ = value;
            }
        }

        /// <summary>Field number for the "playerActions" field.</summary>
        public const int PlayerActionsFieldNumber = 6;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.PlayerAction> _repeated_playerActions_codec
            = pb::FieldCodec.ForMessage(50, global::Loom.ZombieBattleground.Protobuf.PlayerAction.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerAction> playerActions_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerAction>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerAction> PlayerActions
        {
            get { return playerActions_; }
        }

        /// <summary>Field number for the "randomseed" field.</summary>
        public const int RandomseedFieldNumber = 7;
        private long randomseed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Randomseed
        {
            get { return randomseed_; }
            set
            {
                randomseed_ = value;
            }
        }

        /// <summary>Field number for the "winner" field.</summary>
        public const int WinnerFieldNumber = 8;
        private string winner_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Winner
        {
            get { return winner_; }
            set
            {
                winner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as GameState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GameState other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Id != other.Id) return false;
            if (IsEnded != other.IsEnded) return false;
            if (CurrentPlayerIndex != other.CurrentPlayerIndex) return false;
            if (!playerStates_.Equals(other.playerStates_)) return false;
            if (CurrentActionIndex != other.CurrentActionIndex) return false;
            if (!playerActions_.Equals(other.playerActions_)) return false;
            if (Randomseed != other.Randomseed) return false;
            if (Winner != other.Winner) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Id != 0L) hash ^= Id.GetHashCode();
            if (IsEnded != false) hash ^= IsEnded.GetHashCode();
            if (CurrentPlayerIndex != 0) hash ^= CurrentPlayerIndex.GetHashCode();
            hash ^= playerStates_.GetHashCode();
            if (CurrentActionIndex != 0L) hash ^= CurrentActionIndex.GetHashCode();
            hash ^= playerActions_.GetHashCode();
            if (Randomseed != 0L) hash ^= Randomseed.GetHashCode();
            if (Winner.Length != 0) hash ^= Winner.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Id != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(Id);
            }
            if (IsEnded != false)
            {
                output.WriteRawTag(16);
                output.WriteBool(IsEnded);
            }
            if (CurrentPlayerIndex != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(CurrentPlayerIndex);
            }
            playerStates_.WriteTo(output, _repeated_playerStates_codec);
            if (CurrentActionIndex != 0L)
            {
                output.WriteRawTag(40);
                output.WriteInt64(CurrentActionIndex);
            }
            playerActions_.WriteTo(output, _repeated_playerActions_codec);
            if (Randomseed != 0L)
            {
                output.WriteRawTag(56);
                output.WriteInt64(Randomseed);
            }
            if (Winner.Length != 0)
            {
                output.WriteRawTag(66);
                output.WriteString(Winner);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Id != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
            }
            if (IsEnded != false)
            {
                size += 1 + 1;
            }
            if (CurrentPlayerIndex != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentPlayerIndex);
            }
            size += playerStates_.CalculateSize(_repeated_playerStates_codec);
            if (CurrentActionIndex != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrentActionIndex);
            }
            size += playerActions_.CalculateSize(_repeated_playerActions_codec);
            if (Randomseed != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Randomseed);
            }
            if (Winner.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Winner);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GameState other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Id != 0L)
            {
                Id = other.Id;
            }
            if (other.IsEnded != false)
            {
                IsEnded = other.IsEnded;
            }
            if (other.CurrentPlayerIndex != 0)
            {
                CurrentPlayerIndex = other.CurrentPlayerIndex;
            }
            playerStates_.Add(other.playerStates_);
            if (other.CurrentActionIndex != 0L)
            {
                CurrentActionIndex = other.CurrentActionIndex;
            }
            playerActions_.Add(other.playerActions_);
            if (other.Randomseed != 0L)
            {
                Randomseed = other.Randomseed;
            }
            if (other.Winner.Length != 0)
            {
                Winner = other.Winner;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Id = input.ReadInt64();
                            break;
                        }
                    case 16:
                        {
                            IsEnded = input.ReadBool();
                            break;
                        }
                    case 24:
                        {
                            CurrentPlayerIndex = input.ReadInt32();
                            break;
                        }
                    case 34:
                        {
                            playerStates_.AddEntriesFrom(input, _repeated_playerStates_codec);
                            break;
                        }
                    case 40:
                        {
                            CurrentActionIndex = input.ReadInt64();
                            break;
                        }
                    case 50:
                        {
                            playerActions_.AddEntriesFrom(input, _repeated_playerActions_codec);
                            break;
                        }
                    case 56:
                        {
                            Randomseed = input.ReadInt64();
                            break;
                        }
                    case 66:
                        {
                            Winner = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class AbilityInstance : pb::IMessage<AbilityInstance>
    {
        private static readonly pb::MessageParser<AbilityInstance> _parser = new pb::MessageParser<AbilityInstance>(() => new AbilityInstance());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AbilityInstance> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[75]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AbilityInstance()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AbilityInstance(AbilityInstance other) : this()
        {
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AbilityInstance Clone()
        {
            return new AbilityInstance(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AbilityInstance);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AbilityInstance other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AbilityInstance other)
        {
            if (other == null)
            {
                return;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                }
            }
        }

    }

    public sealed partial class CardAbility : pb::IMessage<CardAbility>
    {
        private static readonly pb::MessageParser<CardAbility> _parser = new pb::MessageParser<CardAbility>(() => new CardAbility());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CardAbility> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[76]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAbility()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAbility(CardAbility other) : this()
        {
            abilityType_ = other.abilityType_;
            abilityActivityType_ = other.abilityActivityType_;
            cardAbilityTrigger_ = other.cardAbilityTrigger_;
            allowedTargets_ = other.allowedTargets_.Clone();
            abilityStatType_ = other.abilityStatType_;
            abilitySetType_ = other.abilitySetType_;
            cardAbilityEffect_ = other.cardAbilityEffect_;
            attackRestriction_ = other.attackRestriction_;
            targetCardType_ = other.targetCardType_;
            targetUnitSpecialStatusType_ = other.targetUnitSpecialStatusType_;
            targetUnitType_ = other.targetUnitType_;
            value_ = other.value_;
            damage_ = other.damage_;
            health_ = other.health_;
            attackInfo_ = other.attackInfo_;
            name_ = other.name_;
            turns_ = other.turns_;
            count_ = other.count_;
            delay_ = other.delay_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardAbility Clone()
        {
            return new CardAbility(this);
        }

        /// <summary>Field number for the "abilityType" field.</summary>
        public const int AbilityTypeFieldNumber = 1;
        private global::Loom.ZombieBattleground.Protobuf.CardAbilityType abilityType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.CardAbilityType AbilityType
        {
            get { return abilityType_; }
            set
            {
                abilityType_ = value;
            }
        }

        /// <summary>Field number for the "abilityActivityType" field.</summary>
        public const int AbilityActivityTypeFieldNumber = 2;
        private global::Loom.ZombieBattleground.Protobuf.CardAbilityActivityType abilityActivityType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.CardAbilityActivityType AbilityActivityType
        {
            get { return abilityActivityType_; }
            set
            {
                abilityActivityType_ = value;
            }
        }

        /// <summary>Field number for the "cardAbilityTrigger" field.</summary>
        public const int CardAbilityTriggerFieldNumber = 3;
        private global::Loom.ZombieBattleground.Protobuf.CardAbilityTrigger cardAbilityTrigger_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.CardAbilityTrigger CardAbilityTrigger
        {
            get { return cardAbilityTrigger_; }
            set
            {
                cardAbilityTrigger_ = value;
            }
        }

        /// <summary>Field number for the "allowedTargets" field.</summary>
        public const int AllowedTargetsFieldNumber = 4;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.AllowedTarget> _repeated_allowedTargets_codec
            = pb::FieldCodec.ForEnum(34, x => (int)x, x => (global::Loom.ZombieBattleground.Protobuf.AllowedTarget)x);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AllowedTarget> allowedTargets_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AllowedTarget>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AllowedTarget> AllowedTargets
        {
            get { return allowedTargets_; }
        }

        /// <summary>Field number for the "abilityStatType" field.</summary>
        public const int AbilityStatTypeFieldNumber = 5;
        private global::Loom.ZombieBattleground.Protobuf.StatType abilityStatType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.StatType AbilityStatType
        {
            get { return abilityStatType_; }
            set
            {
                abilityStatType_ = value;
            }
        }

        /// <summary>Field number for the "abilitySetType" field.</summary>
        public const int AbilitySetTypeFieldNumber = 6;
        private global::Loom.ZombieBattleground.Protobuf.ElementKind abilitySetType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.ElementKind AbilitySetType
        {
            get { return abilitySetType_; }
            set
            {
                abilitySetType_ = value;
            }
        }

        /// <summary>Field number for the "cardAbilityEffect" field.</summary>
        public const int CardAbilityEffectFieldNumber = 7;
        private global::Loom.ZombieBattleground.Protobuf.CardAbilityEffect cardAbilityEffect_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.CardAbilityEffect CardAbilityEffect
        {
            get { return cardAbilityEffect_; }
            set
            {
                cardAbilityEffect_ = value;
            }
        }

        /// <summary>Field number for the "attackRestriction" field.</summary>
        public const int AttackRestrictionFieldNumber = 8;
        private global::Loom.ZombieBattleground.Protobuf.AttackRestriction attackRestriction_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.AttackRestriction AttackRestriction
        {
            get { return attackRestriction_; }
            set
            {
                attackRestriction_ = value;
            }
        }

        /// <summary>Field number for the "targetCardType" field.</summary>
        public const int TargetCardTypeFieldNumber = 9;
        private global::Loom.ZombieBattleground.Protobuf.CardKind targetCardType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.CardKind TargetCardType
        {
            get { return targetCardType_; }
            set
            {
                targetCardType_ = value;
            }
        }

        /// <summary>Field number for the "targetUnitSpecialStatusType" field.</summary>
        public const int TargetUnitSpecialStatusTypeFieldNumber = 10;
        private global::Loom.ZombieBattleground.Protobuf.UnitSpecialStatus targetUnitSpecialStatusType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.UnitSpecialStatus TargetUnitSpecialStatusType
        {
            get { return targetUnitSpecialStatusType_; }
            set
            {
                targetUnitSpecialStatusType_ = value;
            }
        }

        /// <summary>Field number for the "targetUnitType" field.</summary>
        public const int TargetUnitTypeFieldNumber = 11;
        private global::Loom.ZombieBattleground.Protobuf.CardKind targetUnitType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.CardKind TargetUnitType
        {
            get { return targetUnitType_; }
            set
            {
                targetUnitType_ = value;
            }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 12;
        private int value_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Value
        {
            get { return value_; }
            set
            {
                value_ = value;
            }
        }

        /// <summary>Field number for the "damage" field.</summary>
        public const int DamageFieldNumber = 13;
        private int damage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Damage
        {
            get { return damage_; }
            set
            {
                damage_ = value;
            }
        }

        /// <summary>Field number for the "health" field.</summary>
        public const int HealthFieldNumber = 14;
        private int health_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Health
        {
            get { return health_; }
            set
            {
                health_ = value;
            }
        }

        /// <summary>Field number for the "attackInfo" field.</summary>
        public const int AttackInfoFieldNumber = 15;
        private string attackInfo_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AttackInfo
        {
            get { return attackInfo_; }
            set
            {
                attackInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 16;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name
        {
            get { return name_; }
            set
            {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "turns" field.</summary>
        public const int TurnsFieldNumber = 17;
        private int turns_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Turns
        {
            get { return turns_; }
            set
            {
                turns_ = value;
            }
        }

        /// <summary>Field number for the "count" field.</summary>
        public const int CountFieldNumber = 18;
        private int count_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Count
        {
            get { return count_; }
            set
            {
                count_ = value;
            }
        }

        /// <summary>Field number for the "delay" field.</summary>
        public const int DelayFieldNumber = 19;
        private int delay_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Delay
        {
            get { return delay_; }
            set
            {
                delay_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CardAbility);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CardAbility other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (AbilityType != other.AbilityType) return false;
            if (AbilityActivityType != other.AbilityActivityType) return false;
            if (CardAbilityTrigger != other.CardAbilityTrigger) return false;
            if (!allowedTargets_.Equals(other.allowedTargets_)) return false;
            if (AbilityStatType != other.AbilityStatType) return false;
            if (AbilitySetType != other.AbilitySetType) return false;
            if (CardAbilityEffect != other.CardAbilityEffect) return false;
            if (AttackRestriction != other.AttackRestriction) return false;
            if (TargetCardType != other.TargetCardType) return false;
            if (TargetUnitSpecialStatusType != other.TargetUnitSpecialStatusType) return false;
            if (TargetUnitType != other.TargetUnitType) return false;
            if (Value != other.Value) return false;
            if (Damage != other.Damage) return false;
            if (Health != other.Health) return false;
            if (AttackInfo != other.AttackInfo) return false;
            if (Name != other.Name) return false;
            if (Turns != other.Turns) return false;
            if (Count != other.Count) return false;
            if (Delay != other.Delay) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (AbilityType != 0) hash ^= AbilityType.GetHashCode();
            if (AbilityActivityType != 0) hash ^= AbilityActivityType.GetHashCode();
            if (CardAbilityTrigger != 0) hash ^= CardAbilityTrigger.GetHashCode();
            hash ^= allowedTargets_.GetHashCode();
            if (AbilityStatType != 0) hash ^= AbilityStatType.GetHashCode();
            if (AbilitySetType != 0) hash ^= AbilitySetType.GetHashCode();
            if (CardAbilityEffect != 0) hash ^= CardAbilityEffect.GetHashCode();
            if (AttackRestriction != 0) hash ^= AttackRestriction.GetHashCode();
            if (TargetCardType != 0) hash ^= TargetCardType.GetHashCode();
            if (TargetUnitSpecialStatusType != 0) hash ^= TargetUnitSpecialStatusType.GetHashCode();
            if (TargetUnitType != 0) hash ^= TargetUnitType.GetHashCode();
            if (Value != 0) hash ^= Value.GetHashCode();
            if (Damage != 0) hash ^= Damage.GetHashCode();
            if (Health != 0) hash ^= Health.GetHashCode();
            if (AttackInfo.Length != 0) hash ^= AttackInfo.GetHashCode();
            if (Name.Length != 0) hash ^= Name.GetHashCode();
            if (Turns != 0) hash ^= Turns.GetHashCode();
            if (Count != 0) hash ^= Count.GetHashCode();
            if (Delay != 0) hash ^= Delay.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (AbilityType != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)AbilityType);
            }
            if (AbilityActivityType != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)AbilityActivityType);
            }
            if (CardAbilityTrigger != 0)
            {
                output.WriteRawTag(24);
                output.WriteEnum((int)CardAbilityTrigger);
            }
            allowedTargets_.WriteTo(output, _repeated_allowedTargets_codec);
            if (AbilityStatType != 0)
            {
                output.WriteRawTag(40);
                output.WriteEnum((int)AbilityStatType);
            }
            if (AbilitySetType != 0)
            {
                output.WriteRawTag(48);
                output.WriteEnum((int)AbilitySetType);
            }
            if (CardAbilityEffect != 0)
            {
                output.WriteRawTag(56);
                output.WriteEnum((int)CardAbilityEffect);
            }
            if (AttackRestriction != 0)
            {
                output.WriteRawTag(64);
                output.WriteEnum((int)AttackRestriction);
            }
            if (TargetCardType != 0)
            {
                output.WriteRawTag(72);
                output.WriteEnum((int)TargetCardType);
            }
            if (TargetUnitSpecialStatusType != 0)
            {
                output.WriteRawTag(80);
                output.WriteEnum((int)TargetUnitSpecialStatusType);
            }
            if (TargetUnitType != 0)
            {
                output.WriteRawTag(88);
                output.WriteEnum((int)TargetUnitType);
            }
            if (Value != 0)
            {
                output.WriteRawTag(96);
                output.WriteInt32(Value);
            }
            if (Damage != 0)
            {
                output.WriteRawTag(104);
                output.WriteInt32(Damage);
            }
            if (Health != 0)
            {
                output.WriteRawTag(112);
                output.WriteInt32(Health);
            }
            if (AttackInfo.Length != 0)
            {
                output.WriteRawTag(122);
                output.WriteString(AttackInfo);
            }
            if (Name.Length != 0)
            {
                output.WriteRawTag(130, 1);
                output.WriteString(Name);
            }
            if (Turns != 0)
            {
                output.WriteRawTag(136, 1);
                output.WriteInt32(Turns);
            }
            if (Count != 0)
            {
                output.WriteRawTag(144, 1);
                output.WriteInt32(Count);
            }
            if (Delay != 0)
            {
                output.WriteRawTag(152, 1);
                output.WriteInt32(Delay);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (AbilityType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)AbilityType);
            }
            if (AbilityActivityType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)AbilityActivityType);
            }
            if (CardAbilityTrigger != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)CardAbilityTrigger);
            }
            size += allowedTargets_.CalculateSize(_repeated_allowedTargets_codec);
            if (AbilityStatType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)AbilityStatType);
            }
            if (AbilitySetType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)AbilitySetType);
            }
            if (CardAbilityEffect != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)CardAbilityEffect);
            }
            if (AttackRestriction != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)AttackRestriction);
            }
            if (TargetCardType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)TargetCardType);
            }
            if (TargetUnitSpecialStatusType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)TargetUnitSpecialStatusType);
            }
            if (TargetUnitType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)TargetUnitType);
            }
            if (Value != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
            }
            if (Damage != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
            }
            if (Health != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Health);
            }
            if (AttackInfo.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(AttackInfo);
            }
            if (Name.Length != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
            }
            if (Turns != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeInt32Size(Turns);
            }
            if (Count != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeInt32Size(Count);
            }
            if (Delay != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeInt32Size(Delay);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CardAbility other)
        {
            if (other == null)
            {
                return;
            }
            if (other.AbilityType != 0)
            {
                AbilityType = other.AbilityType;
            }
            if (other.AbilityActivityType != 0)
            {
                AbilityActivityType = other.AbilityActivityType;
            }
            if (other.CardAbilityTrigger != 0)
            {
                CardAbilityTrigger = other.CardAbilityTrigger;
            }
            allowedTargets_.Add(other.allowedTargets_);
            if (other.AbilityStatType != 0)
            {
                AbilityStatType = other.AbilityStatType;
            }
            if (other.AbilitySetType != 0)
            {
                AbilitySetType = other.AbilitySetType;
            }
            if (other.CardAbilityEffect != 0)
            {
                CardAbilityEffect = other.CardAbilityEffect;
            }
            if (other.AttackRestriction != 0)
            {
                AttackRestriction = other.AttackRestriction;
            }
            if (other.TargetCardType != 0)
            {
                TargetCardType = other.TargetCardType;
            }
            if (other.TargetUnitSpecialStatusType != 0)
            {
                TargetUnitSpecialStatusType = other.TargetUnitSpecialStatusType;
            }
            if (other.TargetUnitType != 0)
            {
                TargetUnitType = other.TargetUnitType;
            }
            if (other.Value != 0)
            {
                Value = other.Value;
            }
            if (other.Damage != 0)
            {
                Damage = other.Damage;
            }
            if (other.Health != 0)
            {
                Health = other.Health;
            }
            if (other.AttackInfo.Length != 0)
            {
                AttackInfo = other.AttackInfo;
            }
            if (other.Name.Length != 0)
            {
                Name = other.Name;
            }
            if (other.Turns != 0)
            {
                Turns = other.Turns;
            }
            if (other.Count != 0)
            {
                Count = other.Count;
            }
            if (other.Delay != 0)
            {
                Delay = other.Delay;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            abilityType_ = (global::Loom.ZombieBattleground.Protobuf.CardAbilityType)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            abilityActivityType_ = (global::Loom.ZombieBattleground.Protobuf.CardAbilityActivityType)input.ReadEnum();
                            break;
                        }
                    case 24:
                        {
                            cardAbilityTrigger_ = (global::Loom.ZombieBattleground.Protobuf.CardAbilityTrigger)input.ReadEnum();
                            break;
                        }
                    case 34:
                    case 32:
                        {
                            allowedTargets_.AddEntriesFrom(input, _repeated_allowedTargets_codec);
                            break;
                        }
                    case 40:
                        {
                            abilityStatType_ = (global::Loom.ZombieBattleground.Protobuf.StatType)input.ReadEnum();
                            break;
                        }
                    case 48:
                        {
                            abilitySetType_ = (global::Loom.ZombieBattleground.Protobuf.ElementKind)input.ReadEnum();
                            break;
                        }
                    case 56:
                        {
                            cardAbilityEffect_ = (global::Loom.ZombieBattleground.Protobuf.CardAbilityEffect)input.ReadEnum();
                            break;
                        }
                    case 64:
                        {
                            attackRestriction_ = (global::Loom.ZombieBattleground.Protobuf.AttackRestriction)input.ReadEnum();
                            break;
                        }
                    case 72:
                        {
                            targetCardType_ = (global::Loom.ZombieBattleground.Protobuf.CardKind)input.ReadEnum();
                            break;
                        }
                    case 80:
                        {
                            targetUnitSpecialStatusType_ = (global::Loom.ZombieBattleground.Protobuf.UnitSpecialStatus)input.ReadEnum();
                            break;
                        }
                    case 88:
                        {
                            targetUnitType_ = (global::Loom.ZombieBattleground.Protobuf.CardKind)input.ReadEnum();
                            break;
                        }
                    case 96:
                        {
                            Value = input.ReadInt32();
                            break;
                        }
                    case 104:
                        {
                            Damage = input.ReadInt32();
                            break;
                        }
                    case 112:
                        {
                            Health = input.ReadInt32();
                            break;
                        }
                    case 122:
                        {
                            AttackInfo = input.ReadString();
                            break;
                        }
                    case 130:
                        {
                            Name = input.ReadString();
                            break;
                        }
                    case 136:
                        {
                            Turns = input.ReadInt32();
                            break;
                        }
                    case 144:
                        {
                            Count = input.ReadInt32();
                            break;
                        }
                    case 152:
                        {
                            Delay = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class CardInstance : pb::IMessage<CardInstance>
    {
        private static readonly pb::MessageParser<CardInstance> _parser = new pb::MessageParser<CardInstance>(() => new CardInstance());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CardInstance> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[77]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardInstance()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardInstance(CardInstance other) : this()
        {
            instanceId_ = other.instanceId_;
            prototype_ = other.prototype_ != null ? other.prototype_.Clone() : null;
            defence_ = other.defence_;
            attack_ = other.attack_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardInstance Clone()
        {
            return new CardInstance(this);
        }

        /// <summary>Field number for the "instanceId" field.</summary>
        public const int InstanceIdFieldNumber = 1;
        private int instanceId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int InstanceId
        {
            get { return instanceId_; }
            set
            {
                instanceId_ = value;
            }
        }

        /// <summary>Field number for the "prototype" field.</summary>
        public const int PrototypeFieldNumber = 2;
        private global::Loom.ZombieBattleground.Protobuf.CardPrototype prototype_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.CardPrototype Prototype
        {
            get { return prototype_; }
            set
            {
                prototype_ = value;
            }
        }

        /// <summary>Field number for the "defence" field.</summary>
        public const int DefenceFieldNumber = 3;
        private int defence_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Defence
        {
            get { return defence_; }
            set
            {
                defence_ = value;
            }
        }

        /// <summary>Field number for the "attack" field.</summary>
        public const int AttackFieldNumber = 4;
        private int attack_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Attack
        {
            get { return attack_; }
            set
            {
                attack_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CardInstance);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CardInstance other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (InstanceId != other.InstanceId) return false;
            if (!object.Equals(Prototype, other.Prototype)) return false;
            if (Defence != other.Defence) return false;
            if (Attack != other.Attack) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (InstanceId != 0) hash ^= InstanceId.GetHashCode();
            if (prototype_ != null) hash ^= Prototype.GetHashCode();
            if (Defence != 0) hash ^= Defence.GetHashCode();
            if (Attack != 0) hash ^= Attack.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (InstanceId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(InstanceId);
            }
            if (prototype_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Prototype);
            }
            if (Defence != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(Defence);
            }
            if (Attack != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(Attack);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (InstanceId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(InstanceId);
            }
            if (prototype_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prototype);
            }
            if (Defence != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Defence);
            }
            if (Attack != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Attack);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CardInstance other)
        {
            if (other == null)
            {
                return;
            }
            if (other.InstanceId != 0)
            {
                InstanceId = other.InstanceId;
            }
            if (other.prototype_ != null)
            {
                if (prototype_ == null)
                {
                    prototype_ = new global::Loom.ZombieBattleground.Protobuf.CardPrototype();
                }
                Prototype.MergeFrom(other.Prototype);
            }
            if (other.Defence != 0)
            {
                Defence = other.Defence;
            }
            if (other.Attack != 0)
            {
                Attack = other.Attack;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            InstanceId = input.ReadInt32();
                            break;
                        }
                    case 18:
                        {
                            if (prototype_ == null)
                            {
                                prototype_ = new global::Loom.ZombieBattleground.Protobuf.CardPrototype();
                            }
                            input.ReadMessage(prototype_);
                            break;
                        }
                    case 24:
                        {
                            Defence = input.ReadInt32();
                            break;
                        }
                    case 32:
                        {
                            Attack = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class CardPrototype : pb::IMessage<CardPrototype>
    {
        private static readonly pb::MessageParser<CardPrototype> _parser = new pb::MessageParser<CardPrototype>(() => new CardPrototype());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CardPrototype> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[78]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardPrototype()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardPrototype(CardPrototype other) : this()
        {
            dataId_ = other.dataId_;
            cardSetType_ = other.cardSetType_;
            name_ = other.name_;
            gooCost_ = other.gooCost_;
            description_ = other.description_;
            flavorText_ = other.flavorText_;
            picture_ = other.picture_;
            frame_ = other.frame_;
            initialDamage_ = other.initialDamage_;
            initialDefence_ = other.initialDefence_;
            rank_ = other.rank_;
            type_ = other.type_;
            abilities_ = other.abilities_.Clone();
            cardViewInfo_ = other.cardViewInfo_ != null ? other.cardViewInfo_.Clone() : null;
            creatureRank_ = other.creatureRank_;
            creatureType_ = other.creatureType_;
            cardKind_ = other.cardKind_;
            kind_ = other.kind_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardPrototype Clone()
        {
            return new CardPrototype(this);
        }

        /// <summary>Field number for the "dataId" field.</summary>
        public const int DataIdFieldNumber = 1;
        private int dataId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int DataId
        {
            get { return dataId_; }
            set
            {
                dataId_ = value;
            }
        }

        /// <summary>Field number for the "cardSetType" field.</summary>
        public const int CardSetTypeFieldNumber = 2;
        private global::Loom.ZombieBattleground.Protobuf.ElementKind cardSetType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.ElementKind CardSetType
        {
            get { return cardSetType_; }
            set
            {
                cardSetType_ = value;
            }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 3;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name
        {
            get { return name_; }
            set
            {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "gooCost" field.</summary>
        public const int GooCostFieldNumber = 4;
        private int gooCost_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int GooCost
        {
            get { return gooCost_; }
            set
            {
                gooCost_ = value;
            }
        }

        /// <summary>Field number for the "description" field.</summary>
        public const int DescriptionFieldNumber = 5;
        private string description_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Description
        {
            get { return description_; }
            set
            {
                description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "flavorText" field.</summary>
        public const int FlavorTextFieldNumber = 6;
        private string flavorText_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FlavorText
        {
            get { return flavorText_; }
            set
            {
                flavorText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "picture" field.</summary>
        public const int PictureFieldNumber = 7;
        private string picture_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Picture
        {
            get { return picture_; }
            set
            {
                picture_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "frame" field.</summary>
        public const int FrameFieldNumber = 8;
        private string frame_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Frame
        {
            get { return frame_; }
            set
            {
                frame_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "initialDamage" field.</summary>
        public const int InitialDamageFieldNumber = 9;
        private int initialDamage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int InitialDamage
        {
            get { return initialDamage_; }
            set
            {
                initialDamage_ = value;
            }
        }

        /// <summary>Field number for the "initialDefence" field.</summary>
        public const int InitialDefenceFieldNumber = 10;
        private int initialDefence_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int InitialDefence
        {
            get { return initialDefence_; }
            set
            {
                initialDefence_ = value;
            }
        }

        /// <summary>Field number for the "rank" field.</summary>
        public const int RankFieldNumber = 11;
        private string rank_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Rank
        {
            get { return rank_; }
            set
            {
                rank_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 12;
        private string type_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Type
        {
            get { return type_; }
            set
            {
                type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "abilities" field.</summary>
        public const int AbilitiesFieldNumber = 13;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardAbility> _repeated_abilities_codec
            = pb::FieldCodec.ForMessage(106, global::Loom.ZombieBattleground.Protobuf.CardAbility.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardAbility> abilities_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardAbility>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardAbility> Abilities
        {
            get { return abilities_; }
        }

        /// <summary>Field number for the "cardViewInfo" field.</summary>
        public const int CardViewInfoFieldNumber = 14;
        private global::Loom.ZombieBattleground.Protobuf.CardViewInfo cardViewInfo_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.CardViewInfo CardViewInfo
        {
            get { return cardViewInfo_; }
            set
            {
                cardViewInfo_ = value;
            }
        }

        /// <summary>Field number for the "creatureRank" field.</summary>
        public const int CreatureRankFieldNumber = 15;
        private global::Loom.ZombieBattleground.Protobuf.CreatureRank creatureRank_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.CreatureRank CreatureRank
        {
            get { return creatureRank_; }
            set
            {
                creatureRank_ = value;
            }
        }

        /// <summary>Field number for the "creatureType" field.</summary>
        public const int CreatureTypeFieldNumber = 16;
        private global::Loom.ZombieBattleground.Protobuf.CreatureType creatureType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.CreatureType CreatureType
        {
            get { return creatureType_; }
            set
            {
                creatureType_ = value;
            }
        }

        /// <summary>Field number for the "cardKind" field.</summary>
        public const int CardKindFieldNumber = 17;
        private global::Loom.ZombieBattleground.Protobuf.CardKind cardKind_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.CardKind CardKind
        {
            get { return cardKind_; }
            set
            {
                cardKind_ = value;
            }
        }

        /// <summary>Field number for the "kind" field.</summary>
        public const int KindFieldNumber = 18;
        private string kind_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Kind
        {
            get { return kind_; }
            set
            {
                kind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CardPrototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CardPrototype other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (DataId != other.DataId) return false;
            if (CardSetType != other.CardSetType) return false;
            if (Name != other.Name) return false;
            if (GooCost != other.GooCost) return false;
            if (Description != other.Description) return false;
            if (FlavorText != other.FlavorText) return false;
            if (Picture != other.Picture) return false;
            if (Frame != other.Frame) return false;
            if (InitialDamage != other.InitialDamage) return false;
            if (InitialDefence != other.InitialDefence) return false;
            if (Rank != other.Rank) return false;
            if (Type != other.Type) return false;
            if (!abilities_.Equals(other.abilities_)) return false;
            if (!object.Equals(CardViewInfo, other.CardViewInfo)) return false;
            if (CreatureRank != other.CreatureRank) return false;
            if (CreatureType != other.CreatureType) return false;
            if (CardKind != other.CardKind) return false;
            if (Kind != other.Kind) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (DataId != 0) hash ^= DataId.GetHashCode();
            if (CardSetType != 0) hash ^= CardSetType.GetHashCode();
            if (Name.Length != 0) hash ^= Name.GetHashCode();
            if (GooCost != 0) hash ^= GooCost.GetHashCode();
            if (Description.Length != 0) hash ^= Description.GetHashCode();
            if (FlavorText.Length != 0) hash ^= FlavorText.GetHashCode();
            if (Picture.Length != 0) hash ^= Picture.GetHashCode();
            if (Frame.Length != 0) hash ^= Frame.GetHashCode();
            if (InitialDamage != 0) hash ^= InitialDamage.GetHashCode();
            if (InitialDefence != 0) hash ^= InitialDefence.GetHashCode();
            if (Rank.Length != 0) hash ^= Rank.GetHashCode();
            if (Type.Length != 0) hash ^= Type.GetHashCode();
            hash ^= abilities_.GetHashCode();
            if (cardViewInfo_ != null) hash ^= CardViewInfo.GetHashCode();
            if (CreatureRank != 0) hash ^= CreatureRank.GetHashCode();
            if (CreatureType != 0) hash ^= CreatureType.GetHashCode();
            if (CardKind != 0) hash ^= CardKind.GetHashCode();
            if (Kind.Length != 0) hash ^= Kind.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (DataId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(DataId);
            }
            if (CardSetType != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)CardSetType);
            }
            if (Name.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(Name);
            }
            if (GooCost != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(GooCost);
            }
            if (Description.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteString(Description);
            }
            if (FlavorText.Length != 0)
            {
                output.WriteRawTag(50);
                output.WriteString(FlavorText);
            }
            if (Picture.Length != 0)
            {
                output.WriteRawTag(58);
                output.WriteString(Picture);
            }
            if (Frame.Length != 0)
            {
                output.WriteRawTag(66);
                output.WriteString(Frame);
            }
            if (InitialDamage != 0)
            {
                output.WriteRawTag(72);
                output.WriteInt32(InitialDamage);
            }
            if (InitialDefence != 0)
            {
                output.WriteRawTag(80);
                output.WriteInt32(InitialDefence);
            }
            if (Rank.Length != 0)
            {
                output.WriteRawTag(90);
                output.WriteString(Rank);
            }
            if (Type.Length != 0)
            {
                output.WriteRawTag(98);
                output.WriteString(Type);
            }
            abilities_.WriteTo(output, _repeated_abilities_codec);
            if (cardViewInfo_ != null)
            {
                output.WriteRawTag(114);
                output.WriteMessage(CardViewInfo);
            }
            if (CreatureRank != 0)
            {
                output.WriteRawTag(120);
                output.WriteEnum((int)CreatureRank);
            }
            if (CreatureType != 0)
            {
                output.WriteRawTag(128, 1);
                output.WriteEnum((int)CreatureType);
            }
            if (CardKind != 0)
            {
                output.WriteRawTag(136, 1);
                output.WriteEnum((int)CardKind);
            }
            if (Kind.Length != 0)
            {
                output.WriteRawTag(146, 1);
                output.WriteString(Kind);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (DataId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataId);
            }
            if (CardSetType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)CardSetType);
            }
            if (Name.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
            }
            if (GooCost != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(GooCost);
            }
            if (Description.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
            }
            if (FlavorText.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(FlavorText);
            }
            if (Picture.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Picture);
            }
            if (Frame.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Frame);
            }
            if (InitialDamage != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(InitialDamage);
            }
            if (InitialDefence != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(InitialDefence);
            }
            if (Rank.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Rank);
            }
            if (Type.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
            }
            size += abilities_.CalculateSize(_repeated_abilities_codec);
            if (cardViewInfo_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardViewInfo);
            }
            if (CreatureRank != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)CreatureRank);
            }
            if (CreatureType != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeEnumSize((int)CreatureType);
            }
            if (CardKind != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeEnumSize((int)CardKind);
            }
            if (Kind.Length != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeStringSize(Kind);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CardPrototype other)
        {
            if (other == null)
            {
                return;
            }
            if (other.DataId != 0)
            {
                DataId = other.DataId;
            }
            if (other.CardSetType != 0)
            {
                CardSetType = other.CardSetType;
            }
            if (other.Name.Length != 0)
            {
                Name = other.Name;
            }
            if (other.GooCost != 0)
            {
                GooCost = other.GooCost;
            }
            if (other.Description.Length != 0)
            {
                Description = other.Description;
            }
            if (other.FlavorText.Length != 0)
            {
                FlavorText = other.FlavorText;
            }
            if (other.Picture.Length != 0)
            {
                Picture = other.Picture;
            }
            if (other.Frame.Length != 0)
            {
                Frame = other.Frame;
            }
            if (other.InitialDamage != 0)
            {
                InitialDamage = other.InitialDamage;
            }
            if (other.InitialDefence != 0)
            {
                InitialDefence = other.InitialDefence;
            }
            if (other.Rank.Length != 0)
            {
                Rank = other.Rank;
            }
            if (other.Type.Length != 0)
            {
                Type = other.Type;
            }
            abilities_.Add(other.abilities_);
            if (other.cardViewInfo_ != null)
            {
                if (cardViewInfo_ == null)
                {
                    cardViewInfo_ = new global::Loom.ZombieBattleground.Protobuf.CardViewInfo();
                }
                CardViewInfo.MergeFrom(other.CardViewInfo);
            }
            if (other.CreatureRank != 0)
            {
                CreatureRank = other.CreatureRank;
            }
            if (other.CreatureType != 0)
            {
                CreatureType = other.CreatureType;
            }
            if (other.CardKind != 0)
            {
                CardKind = other.CardKind;
            }
            if (other.Kind.Length != 0)
            {
                Kind = other.Kind;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            DataId = input.ReadInt32();
                            break;
                        }
                    case 16:
                        {
                            cardSetType_ = (global::Loom.ZombieBattleground.Protobuf.ElementKind)input.ReadEnum();
                            break;
                        }
                    case 26:
                        {
                            Name = input.ReadString();
                            break;
                        }
                    case 32:
                        {
                            GooCost = input.ReadInt32();
                            break;
                        }
                    case 42:
                        {
                            Description = input.ReadString();
                            break;
                        }
                    case 50:
                        {
                            FlavorText = input.ReadString();
                            break;
                        }
                    case 58:
                        {
                            Picture = input.ReadString();
                            break;
                        }
                    case 66:
                        {
                            Frame = input.ReadString();
                            break;
                        }
                    case 72:
                        {
                            InitialDamage = input.ReadInt32();
                            break;
                        }
                    case 80:
                        {
                            InitialDefence = input.ReadInt32();
                            break;
                        }
                    case 90:
                        {
                            Rank = input.ReadString();
                            break;
                        }
                    case 98:
                        {
                            Type = input.ReadString();
                            break;
                        }
                    case 106:
                        {
                            abilities_.AddEntriesFrom(input, _repeated_abilities_codec);
                            break;
                        }
                    case 114:
                        {
                            if (cardViewInfo_ == null)
                            {
                                cardViewInfo_ = new global::Loom.ZombieBattleground.Protobuf.CardViewInfo();
                            }
                            input.ReadMessage(cardViewInfo_);
                            break;
                        }
                    case 120:
                        {
                            creatureRank_ = (global::Loom.ZombieBattleground.Protobuf.CreatureRank)input.ReadEnum();
                            break;
                        }
                    case 128:
                        {
                            creatureType_ = (global::Loom.ZombieBattleground.Protobuf.CreatureType)input.ReadEnum();
                            break;
                        }
                    case 136:
                        {
                            cardKind_ = (global::Loom.ZombieBattleground.Protobuf.CardKind)input.ReadEnum();
                            break;
                        }
                    case 146:
                        {
                            Kind = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class DataIdOwner : pb::IMessage<DataIdOwner>
    {
        private static readonly pb::MessageParser<DataIdOwner> _parser = new pb::MessageParser<DataIdOwner>(() => new DataIdOwner());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DataIdOwner> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[79]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DataIdOwner()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DataIdOwner(DataIdOwner other) : this()
        {
            dataId_ = other.dataId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DataIdOwner Clone()
        {
            return new DataIdOwner(this);
        }

        /// <summary>Field number for the "dataId" field.</summary>
        public const int DataIdFieldNumber = 1;
        private int dataId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int DataId
        {
            get { return dataId_; }
            set
            {
                dataId_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as DataIdOwner);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DataIdOwner other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (DataId != other.DataId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (DataId != 0) hash ^= DataId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (DataId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(DataId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (DataId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DataIdOwner other)
        {
            if (other == null)
            {
                return;
            }
            if (other.DataId != 0)
            {
                DataId = other.DataId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            DataId = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    /// <summary>
    /// (interface IDeck)
    /// </summary>
    public sealed partial class CardDeck : pb::IMessage<CardDeck>
    {
        private static readonly pb::MessageParser<CardDeck> _parser = new pb::MessageParser<CardDeck>(() => new CardDeck());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CardDeck> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[80]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardDeck()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardDeck(CardDeck other) : this()
        {
            cards_ = other.cards_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CardDeck Clone()
        {
            return new CardDeck(this);
        }

        /// <summary>Field number for the "cards" field.</summary>
        public const int CardsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardPrototype> _repeated_cards_codec
            = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.CardPrototype.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardPrototype> cards_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardPrototype>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardPrototype> Cards
        {
            get { return cards_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CardDeck);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CardDeck other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!cards_.Equals(other.cards_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= cards_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            cards_.WriteTo(output, _repeated_cards_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += cards_.CalculateSize(_repeated_cards_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CardDeck other)
        {
            if (other == null)
            {
                return;
            }
            cards_.Add(other.cards_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            cards_.AddEntriesFrom(input, _repeated_cards_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class InstanceIdOwner : pb::IMessage<InstanceIdOwner>
    {
        private static readonly pb::MessageParser<InstanceIdOwner> _parser = new pb::MessageParser<InstanceIdOwner>(() => new InstanceIdOwner());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<InstanceIdOwner> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[81]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InstanceIdOwner()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InstanceIdOwner(InstanceIdOwner other) : this()
        {
            instanceId_ = other.instanceId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InstanceIdOwner Clone()
        {
            return new InstanceIdOwner(this);
        }

        /// <summary>Field number for the "instanceId" field.</summary>
        public const int InstanceIdFieldNumber = 1;
        private int instanceId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int InstanceId
        {
            get { return instanceId_; }
            set
            {
                instanceId_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as InstanceIdOwner);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(InstanceIdOwner other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (InstanceId != other.InstanceId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (InstanceId != 0) hash ^= InstanceId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (InstanceId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(InstanceId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (InstanceId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(InstanceId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(InstanceIdOwner other)
        {
            if (other == null)
            {
                return;
            }
            if (other.InstanceId != 0)
            {
                InstanceId = other.InstanceId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            InstanceId = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class OverlordInstance : pb::IMessage<OverlordInstance>
    {
        private static readonly pb::MessageParser<OverlordInstance> _parser = new pb::MessageParser<OverlordInstance>(() => new OverlordInstance());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OverlordInstance> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[82]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OverlordInstance()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OverlordInstance(OverlordInstance other) : this()
        {
            instanceId_ = other.instanceId_;
            prototype_ = other.prototype_ != null ? other.prototype_.Clone() : null;
            firstSkill_ = other.firstSkill_ != null ? other.firstSkill_.Clone() : null;
            secondSkill_ = other.secondSkill_ != null ? other.secondSkill_.Clone() : null;
            defence_ = other.defence_;
            goo_ = other.goo_;
            maxGoo_ = other.maxGoo_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OverlordInstance Clone()
        {
            return new OverlordInstance(this);
        }

        /// <summary>Field number for the "instanceId" field.</summary>
        public const int InstanceIdFieldNumber = 1;
        private int instanceId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int InstanceId
        {
            get { return instanceId_; }
            set
            {
                instanceId_ = value;
            }
        }

        /// <summary>Field number for the "prototype" field.</summary>
        public const int PrototypeFieldNumber = 2;
        private global::Loom.ZombieBattleground.Protobuf.OverlordPrototype prototype_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.OverlordPrototype Prototype
        {
            get { return prototype_; }
            set
            {
                prototype_ = value;
            }
        }

        /// <summary>Field number for the "firstSkill" field.</summary>
        public const int FirstSkillFieldNumber = 3;
        private global::Loom.ZombieBattleground.Protobuf.OverlordSkillInstance firstSkill_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.OverlordSkillInstance FirstSkill
        {
            get { return firstSkill_; }
            set
            {
                firstSkill_ = value;
            }
        }

        /// <summary>Field number for the "secondSkill" field.</summary>
        public const int SecondSkillFieldNumber = 4;
        private global::Loom.ZombieBattleground.Protobuf.OverlordSkillInstance secondSkill_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.OverlordSkillInstance SecondSkill
        {
            get { return secondSkill_; }
            set
            {
                secondSkill_ = value;
            }
        }

        /// <summary>Field number for the "defence" field.</summary>
        public const int DefenceFieldNumber = 5;
        private int defence_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Defence
        {
            get { return defence_; }
            set
            {
                defence_ = value;
            }
        }

        /// <summary>Field number for the "goo" field.</summary>
        public const int GooFieldNumber = 6;
        private int goo_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Goo
        {
            get { return goo_; }
            set
            {
                goo_ = value;
            }
        }

        /// <summary>Field number for the "maxGoo" field.</summary>
        public const int MaxGooFieldNumber = 7;
        private int maxGoo_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MaxGoo
        {
            get { return maxGoo_; }
            set
            {
                maxGoo_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as OverlordInstance);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OverlordInstance other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (InstanceId != other.InstanceId) return false;
            if (!object.Equals(Prototype, other.Prototype)) return false;
            if (!object.Equals(FirstSkill, other.FirstSkill)) return false;
            if (!object.Equals(SecondSkill, other.SecondSkill)) return false;
            if (Defence != other.Defence) return false;
            if (Goo != other.Goo) return false;
            if (MaxGoo != other.MaxGoo) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (InstanceId != 0) hash ^= InstanceId.GetHashCode();
            if (prototype_ != null) hash ^= Prototype.GetHashCode();
            if (firstSkill_ != null) hash ^= FirstSkill.GetHashCode();
            if (secondSkill_ != null) hash ^= SecondSkill.GetHashCode();
            if (Defence != 0) hash ^= Defence.GetHashCode();
            if (Goo != 0) hash ^= Goo.GetHashCode();
            if (MaxGoo != 0) hash ^= MaxGoo.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (InstanceId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(InstanceId);
            }
            if (prototype_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Prototype);
            }
            if (firstSkill_ != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(FirstSkill);
            }
            if (secondSkill_ != null)
            {
                output.WriteRawTag(34);
                output.WriteMessage(SecondSkill);
            }
            if (Defence != 0)
            {
                output.WriteRawTag(40);
                output.WriteInt32(Defence);
            }
            if (Goo != 0)
            {
                output.WriteRawTag(48);
                output.WriteInt32(Goo);
            }
            if (MaxGoo != 0)
            {
                output.WriteRawTag(56);
                output.WriteInt32(MaxGoo);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (InstanceId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(InstanceId);
            }
            if (prototype_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prototype);
            }
            if (firstSkill_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(FirstSkill);
            }
            if (secondSkill_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(SecondSkill);
            }
            if (Defence != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Defence);
            }
            if (Goo != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Goo);
            }
            if (MaxGoo != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxGoo);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OverlordInstance other)
        {
            if (other == null)
            {
                return;
            }
            if (other.InstanceId != 0)
            {
                InstanceId = other.InstanceId;
            }
            if (other.prototype_ != null)
            {
                if (prototype_ == null)
                {
                    prototype_ = new global::Loom.ZombieBattleground.Protobuf.OverlordPrototype();
                }
                Prototype.MergeFrom(other.Prototype);
            }
            if (other.firstSkill_ != null)
            {
                if (firstSkill_ == null)
                {
                    firstSkill_ = new global::Loom.ZombieBattleground.Protobuf.OverlordSkillInstance();
                }
                FirstSkill.MergeFrom(other.FirstSkill);
            }
            if (other.secondSkill_ != null)
            {
                if (secondSkill_ == null)
                {
                    secondSkill_ = new global::Loom.ZombieBattleground.Protobuf.OverlordSkillInstance();
                }
                SecondSkill.MergeFrom(other.SecondSkill);
            }
            if (other.Defence != 0)
            {
                Defence = other.Defence;
            }
            if (other.Goo != 0)
            {
                Goo = other.Goo;
            }
            if (other.MaxGoo != 0)
            {
                MaxGoo = other.MaxGoo;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            InstanceId = input.ReadInt32();
                            break;
                        }
                    case 18:
                        {
                            if (prototype_ == null)
                            {
                                prototype_ = new global::Loom.ZombieBattleground.Protobuf.OverlordPrototype();
                            }
                            input.ReadMessage(prototype_);
                            break;
                        }
                    case 26:
                        {
                            if (firstSkill_ == null)
                            {
                                firstSkill_ = new global::Loom.ZombieBattleground.Protobuf.OverlordSkillInstance();
                            }
                            input.ReadMessage(firstSkill_);
                            break;
                        }
                    case 34:
                        {
                            if (secondSkill_ == null)
                            {
                                secondSkill_ = new global::Loom.ZombieBattleground.Protobuf.OverlordSkillInstance();
                            }
                            input.ReadMessage(secondSkill_);
                            break;
                        }
                    case 40:
                        {
                            Defence = input.ReadInt32();
                            break;
                        }
                    case 48:
                        {
                            Goo = input.ReadInt32();
                            break;
                        }
                    case 56:
                        {
                            MaxGoo = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class OverlordPrototype : pb::IMessage<OverlordPrototype>
    {
        private static readonly pb::MessageParser<OverlordPrototype> _parser = new pb::MessageParser<OverlordPrototype>(() => new OverlordPrototype());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OverlordPrototype> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[83]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OverlordPrototype()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OverlordPrototype(OverlordPrototype other) : this()
        {
            heroId_ = other.heroId_;
            icon_ = other.icon_;
            name_ = other.name_;
            shortDescription_ = other.shortDescription_;
            longDescription_ = other.longDescription_;
            experience_ = other.experience_;
            level_ = other.level_;
            element_ = other.element_;
            skills_ = other.skills_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OverlordPrototype Clone()
        {
            return new OverlordPrototype(this);
        }

        /// <summary>Field number for the "heroId" field.</summary>
        public const int HeroIdFieldNumber = 1;
        private int heroId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int HeroId
        {
            get { return heroId_; }
            set
            {
                heroId_ = value;
            }
        }

        /// <summary>Field number for the "icon" field.</summary>
        public const int IconFieldNumber = 2;
        private string icon_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Icon
        {
            get { return icon_; }
            set
            {
                icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 3;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name
        {
            get { return name_; }
            set
            {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "shortDescription" field.</summary>
        public const int ShortDescriptionFieldNumber = 4;
        private string shortDescription_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ShortDescription
        {
            get { return shortDescription_; }
            set
            {
                shortDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "longDescription" field.</summary>
        public const int LongDescriptionFieldNumber = 5;
        private string longDescription_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LongDescription
        {
            get { return longDescription_; }
            set
            {
                longDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "experience" field.</summary>
        public const int ExperienceFieldNumber = 6;
        private int experience_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Experience
        {
            get { return experience_; }
            set
            {
                experience_ = value;
            }
        }

        /// <summary>Field number for the "level" field.</summary>
        public const int LevelFieldNumber = 7;
        private int level_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Level
        {
            get { return level_; }
            set
            {
                level_ = value;
            }
        }

        /// <summary>Field number for the "element" field.</summary>
        public const int ElementFieldNumber = 8;
        private global::Loom.ZombieBattleground.Protobuf.ElementKind element_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.ElementKind Element
        {
            get { return element_; }
            set
            {
                element_ = value;
            }
        }

        /// <summary>Field number for the "skills" field.</summary>
        public const int SkillsFieldNumber = 9;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.OverlordSkillPrototype> _repeated_skills_codec
            = pb::FieldCodec.ForMessage(74, global::Loom.ZombieBattleground.Protobuf.OverlordSkillPrototype.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.OverlordSkillPrototype> skills_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.OverlordSkillPrototype>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.OverlordSkillPrototype> Skills
        {
            get { return skills_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as OverlordPrototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OverlordPrototype other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (HeroId != other.HeroId) return false;
            if (Icon != other.Icon) return false;
            if (Name != other.Name) return false;
            if (ShortDescription != other.ShortDescription) return false;
            if (LongDescription != other.LongDescription) return false;
            if (Experience != other.Experience) return false;
            if (Level != other.Level) return false;
            if (Element != other.Element) return false;
            if (!skills_.Equals(other.skills_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HeroId != 0) hash ^= HeroId.GetHashCode();
            if (Icon.Length != 0) hash ^= Icon.GetHashCode();
            if (Name.Length != 0) hash ^= Name.GetHashCode();
            if (ShortDescription.Length != 0) hash ^= ShortDescription.GetHashCode();
            if (LongDescription.Length != 0) hash ^= LongDescription.GetHashCode();
            if (Experience != 0) hash ^= Experience.GetHashCode();
            if (Level != 0) hash ^= Level.GetHashCode();
            if (Element != 0) hash ^= Element.GetHashCode();
            hash ^= skills_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HeroId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(HeroId);
            }
            if (Icon.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Icon);
            }
            if (Name.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(Name);
            }
            if (ShortDescription.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(ShortDescription);
            }
            if (LongDescription.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteString(LongDescription);
            }
            if (Experience != 0)
            {
                output.WriteRawTag(48);
                output.WriteInt32(Experience);
            }
            if (Level != 0)
            {
                output.WriteRawTag(56);
                output.WriteInt32(Level);
            }
            if (Element != 0)
            {
                output.WriteRawTag(64);
                output.WriteEnum((int)Element);
            }
            skills_.WriteTo(output, _repeated_skills_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HeroId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
            }
            if (Icon.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
            }
            if (Name.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
            }
            if (ShortDescription.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ShortDescription);
            }
            if (LongDescription.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(LongDescription);
            }
            if (Experience != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Experience);
            }
            if (Level != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
            }
            if (Element != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Element);
            }
            size += skills_.CalculateSize(_repeated_skills_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OverlordPrototype other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HeroId != 0)
            {
                HeroId = other.HeroId;
            }
            if (other.Icon.Length != 0)
            {
                Icon = other.Icon;
            }
            if (other.Name.Length != 0)
            {
                Name = other.Name;
            }
            if (other.ShortDescription.Length != 0)
            {
                ShortDescription = other.ShortDescription;
            }
            if (other.LongDescription.Length != 0)
            {
                LongDescription = other.LongDescription;
            }
            if (other.Experience != 0)
            {
                Experience = other.Experience;
            }
            if (other.Level != 0)
            {
                Level = other.Level;
            }
            if (other.Element != 0)
            {
                Element = other.Element;
            }
            skills_.Add(other.skills_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            HeroId = input.ReadInt32();
                            break;
                        }
                    case 18:
                        {
                            Icon = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            Name = input.ReadString();
                            break;
                        }
                    case 34:
                        {
                            ShortDescription = input.ReadString();
                            break;
                        }
                    case 42:
                        {
                            LongDescription = input.ReadString();
                            break;
                        }
                    case 48:
                        {
                            Experience = input.ReadInt32();
                            break;
                        }
                    case 56:
                        {
                            Level = input.ReadInt32();
                            break;
                        }
                    case 64:
                        {
                            element_ = (global::Loom.ZombieBattleground.Protobuf.ElementKind)input.ReadEnum();
                            break;
                        }
                    case 74:
                        {
                            skills_.AddEntriesFrom(input, _repeated_skills_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class OverlordSkillInstance : pb::IMessage<OverlordSkillInstance>
    {
        private static readonly pb::MessageParser<OverlordSkillInstance> _parser = new pb::MessageParser<OverlordSkillInstance>(() => new OverlordSkillInstance());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OverlordSkillInstance> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[84]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OverlordSkillInstance()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OverlordSkillInstance(OverlordSkillInstance other) : this()
        {
            prototype_ = other.prototype_ != null ? other.prototype_.Clone() : null;
            cooldown_ = other.cooldown_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OverlordSkillInstance Clone()
        {
            return new OverlordSkillInstance(this);
        }

        /// <summary>Field number for the "prototype" field.</summary>
        public const int PrototypeFieldNumber = 1;
        private global::Loom.ZombieBattleground.Protobuf.OverlordSkillPrototype prototype_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.OverlordSkillPrototype Prototype
        {
            get { return prototype_; }
            set
            {
                prototype_ = value;
            }
        }

        /// <summary>Field number for the "cooldown" field.</summary>
        public const int CooldownFieldNumber = 2;
        private int cooldown_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Cooldown
        {
            get { return cooldown_; }
            set
            {
                cooldown_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as OverlordSkillInstance);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OverlordSkillInstance other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Prototype, other.Prototype)) return false;
            if (Cooldown != other.Cooldown) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (prototype_ != null) hash ^= Prototype.GetHashCode();
            if (Cooldown != 0) hash ^= Cooldown.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (prototype_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Prototype);
            }
            if (Cooldown != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(Cooldown);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (prototype_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prototype);
            }
            if (Cooldown != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cooldown);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OverlordSkillInstance other)
        {
            if (other == null)
            {
                return;
            }
            if (other.prototype_ != null)
            {
                if (prototype_ == null)
                {
                    prototype_ = new global::Loom.ZombieBattleground.Protobuf.OverlordSkillPrototype();
                }
                Prototype.MergeFrom(other.Prototype);
            }
            if (other.Cooldown != 0)
            {
                Cooldown = other.Cooldown;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (prototype_ == null)
                            {
                                prototype_ = new global::Loom.ZombieBattleground.Protobuf.OverlordSkillPrototype();
                            }
                            input.ReadMessage(prototype_);
                            break;
                        }
                    case 16:
                        {
                            Cooldown = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class OverlordSkillPrototype : pb::IMessage<OverlordSkillPrototype>
    {
        private static readonly pb::MessageParser<OverlordSkillPrototype> _parser = new pb::MessageParser<OverlordSkillPrototype>(() => new OverlordSkillPrototype());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OverlordSkillPrototype> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[85]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OverlordSkillPrototype()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OverlordSkillPrototype(OverlordSkillPrototype other) : this()
        {
            title_ = other.title_;
            skill_ = other.skill_;
            iconPath_ = other.iconPath_;
            description_ = other.description_;
            cooldown_ = other.cooldown_;
            initialCooldown_ = other.initialCooldown_;
            parameter_ = other.parameter_;
            attack_ = other.attack_;
            overlordSkillKind_ = other.overlordSkillKind_;
            skillTargetTypes_ = other.skillTargetTypes_.Clone();
            elementTargetTypes_ = other.elementTargetTypes_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OverlordSkillPrototype Clone()
        {
            return new OverlordSkillPrototype(this);
        }

        /// <summary>Field number for the "title" field.</summary>
        public const int TitleFieldNumber = 1;
        private string title_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Title
        {
            get { return title_; }
            set
            {
                title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "skill" field.</summary>
        public const int SkillFieldNumber = 2;
        private string skill_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Skill
        {
            get { return skill_; }
            set
            {
                skill_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "iconPath" field.</summary>
        public const int IconPathFieldNumber = 3;
        private string iconPath_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string IconPath
        {
            get { return iconPath_; }
            set
            {
                iconPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "description" field.</summary>
        public const int DescriptionFieldNumber = 4;
        private string description_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Description
        {
            get { return description_; }
            set
            {
                description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "cooldown" field.</summary>
        public const int CooldownFieldNumber = 5;
        private int cooldown_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Cooldown
        {
            get { return cooldown_; }
            set
            {
                cooldown_ = value;
            }
        }

        /// <summary>Field number for the "initialCooldown" field.</summary>
        public const int InitialCooldownFieldNumber = 6;
        private int initialCooldown_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int InitialCooldown
        {
            get { return initialCooldown_; }
            set
            {
                initialCooldown_ = value;
            }
        }

        /// <summary>Field number for the "parameter" field.</summary>
        public const int ParameterFieldNumber = 7;
        private int parameter_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Parameter
        {
            get { return parameter_; }
            set
            {
                parameter_ = value;
            }
        }

        /// <summary>Field number for the "attack" field.</summary>
        public const int AttackFieldNumber = 8;
        private int attack_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Attack
        {
            get { return attack_; }
            set
            {
                attack_ = value;
            }
        }

        /// <summary>Field number for the "overlordSkillKind" field.</summary>
        public const int OverlordSkillKindFieldNumber = 9;
        private global::Loom.ZombieBattleground.Protobuf.OverlordSkillKind overlordSkillKind_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.OverlordSkillKind OverlordSkillKind
        {
            get { return overlordSkillKind_; }
            set
            {
                overlordSkillKind_ = value;
            }
        }

        /// <summary>Field number for the "skillTargetTypes" field.</summary>
        public const int SkillTargetTypesFieldNumber = 10;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.AllowedTarget> _repeated_skillTargetTypes_codec
            = pb::FieldCodec.ForEnum(82, x => (int)x, x => (global::Loom.ZombieBattleground.Protobuf.AllowedTarget)x);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AllowedTarget> skillTargetTypes_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AllowedTarget>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.AllowedTarget> SkillTargetTypes
        {
            get { return skillTargetTypes_; }
        }

        /// <summary>Field number for the "elementTargetTypes" field.</summary>
        public const int ElementTargetTypesFieldNumber = 11;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.ElementKind> _repeated_elementTargetTypes_codec
            = pb::FieldCodec.ForEnum(90, x => (int)x, x => (global::Loom.ZombieBattleground.Protobuf.ElementKind)x);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.ElementKind> elementTargetTypes_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.ElementKind>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.ElementKind> ElementTargetTypes
        {
            get { return elementTargetTypes_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as OverlordSkillPrototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OverlordSkillPrototype other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Title != other.Title) return false;
            if (Skill != other.Skill) return false;
            if (IconPath != other.IconPath) return false;
            if (Description != other.Description) return false;
            if (Cooldown != other.Cooldown) return false;
            if (InitialCooldown != other.InitialCooldown) return false;
            if (Parameter != other.Parameter) return false;
            if (Attack != other.Attack) return false;
            if (OverlordSkillKind != other.OverlordSkillKind) return false;
            if (!skillTargetTypes_.Equals(other.skillTargetTypes_)) return false;
            if (!elementTargetTypes_.Equals(other.elementTargetTypes_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Title.Length != 0) hash ^= Title.GetHashCode();
            if (Skill.Length != 0) hash ^= Skill.GetHashCode();
            if (IconPath.Length != 0) hash ^= IconPath.GetHashCode();
            if (Description.Length != 0) hash ^= Description.GetHashCode();
            if (Cooldown != 0) hash ^= Cooldown.GetHashCode();
            if (InitialCooldown != 0) hash ^= InitialCooldown.GetHashCode();
            if (Parameter != 0) hash ^= Parameter.GetHashCode();
            if (Attack != 0) hash ^= Attack.GetHashCode();
            if (OverlordSkillKind != 0) hash ^= OverlordSkillKind.GetHashCode();
            hash ^= skillTargetTypes_.GetHashCode();
            hash ^= elementTargetTypes_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Title.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Title);
            }
            if (Skill.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Skill);
            }
            if (IconPath.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(IconPath);
            }
            if (Description.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(Description);
            }
            if (Cooldown != 0)
            {
                output.WriteRawTag(40);
                output.WriteInt32(Cooldown);
            }
            if (InitialCooldown != 0)
            {
                output.WriteRawTag(48);
                output.WriteInt32(InitialCooldown);
            }
            if (Parameter != 0)
            {
                output.WriteRawTag(56);
                output.WriteInt32(Parameter);
            }
            if (Attack != 0)
            {
                output.WriteRawTag(64);
                output.WriteInt32(Attack);
            }
            if (OverlordSkillKind != 0)
            {
                output.WriteRawTag(72);
                output.WriteEnum((int)OverlordSkillKind);
            }
            skillTargetTypes_.WriteTo(output, _repeated_skillTargetTypes_codec);
            elementTargetTypes_.WriteTo(output, _repeated_elementTargetTypes_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Title.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
            }
            if (Skill.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Skill);
            }
            if (IconPath.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(IconPath);
            }
            if (Description.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
            }
            if (Cooldown != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cooldown);
            }
            if (InitialCooldown != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(InitialCooldown);
            }
            if (Parameter != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Parameter);
            }
            if (Attack != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Attack);
            }
            if (OverlordSkillKind != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)OverlordSkillKind);
            }
            size += skillTargetTypes_.CalculateSize(_repeated_skillTargetTypes_codec);
            size += elementTargetTypes_.CalculateSize(_repeated_elementTargetTypes_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OverlordSkillPrototype other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Title.Length != 0)
            {
                Title = other.Title;
            }
            if (other.Skill.Length != 0)
            {
                Skill = other.Skill;
            }
            if (other.IconPath.Length != 0)
            {
                IconPath = other.IconPath;
            }
            if (other.Description.Length != 0)
            {
                Description = other.Description;
            }
            if (other.Cooldown != 0)
            {
                Cooldown = other.Cooldown;
            }
            if (other.InitialCooldown != 0)
            {
                InitialCooldown = other.InitialCooldown;
            }
            if (other.Parameter != 0)
            {
                Parameter = other.Parameter;
            }
            if (other.Attack != 0)
            {
                Attack = other.Attack;
            }
            if (other.OverlordSkillKind != 0)
            {
                OverlordSkillKind = other.OverlordSkillKind;
            }
            skillTargetTypes_.Add(other.skillTargetTypes_);
            elementTargetTypes_.Add(other.elementTargetTypes_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            Title = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            Skill = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            IconPath = input.ReadString();
                            break;
                        }
                    case 34:
                        {
                            Description = input.ReadString();
                            break;
                        }
                    case 40:
                        {
                            Cooldown = input.ReadInt32();
                            break;
                        }
                    case 48:
                        {
                            InitialCooldown = input.ReadInt32();
                            break;
                        }
                    case 56:
                        {
                            Parameter = input.ReadInt32();
                            break;
                        }
                    case 64:
                        {
                            Attack = input.ReadInt32();
                            break;
                        }
                    case 72:
                        {
                            overlordSkillKind_ = (global::Loom.ZombieBattleground.Protobuf.OverlordSkillKind)input.ReadEnum();
                            break;
                        }
                    case 82:
                    case 80:
                        {
                            skillTargetTypes_.AddEntriesFrom(input, _repeated_skillTargetTypes_codec);
                            break;
                        }
                    case 90:
                    case 88:
                        {
                            elementTargetTypes_.AddEntriesFrom(input, _repeated_elementTargetTypes_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class PlayerActionCoinToss : pb::IMessage<PlayerActionCoinToss>
    {
        private static readonly pb::MessageParser<PlayerActionCoinToss> _parser = new pb::MessageParser<PlayerActionCoinToss>(() => new PlayerActionCoinToss());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerActionCoinToss> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[86]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionCoinToss()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionCoinToss(PlayerActionCoinToss other) : this()
        {
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionCoinToss Clone()
        {
            return new PlayerActionCoinToss(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PlayerActionCoinToss);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerActionCoinToss other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerActionCoinToss other)
        {
            if (other == null)
            {
                return;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                }
            }
        }

    }

    public sealed partial class PlayerActionInitHands : pb::IMessage<PlayerActionInitHands>
    {
        private static readonly pb::MessageParser<PlayerActionInitHands> _parser = new pb::MessageParser<PlayerActionInitHands>(() => new PlayerActionInitHands());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerActionInitHands> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[87]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionInitHands()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionInitHands(PlayerActionInitHands other) : this()
        {
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionInitHands Clone()
        {
            return new PlayerActionInitHands(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PlayerActionInitHands);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerActionInitHands other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerActionInitHands other)
        {
            if (other == null)
            {
                return;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                }
            }
        }

    }

    public sealed partial class PlayerActionLeaveMatch : pb::IMessage<PlayerActionLeaveMatch>
    {
        private static readonly pb::MessageParser<PlayerActionLeaveMatch> _parser = new pb::MessageParser<PlayerActionLeaveMatch>(() => new PlayerActionLeaveMatch());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerActionLeaveMatch> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[88]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionLeaveMatch()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionLeaveMatch(PlayerActionLeaveMatch other) : this()
        {
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionLeaveMatch Clone()
        {
            return new PlayerActionLeaveMatch(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PlayerActionLeaveMatch);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerActionLeaveMatch other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerActionLeaveMatch other)
        {
            if (other == null)
            {
                return;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                }
            }
        }

    }

    public sealed partial class PlayerActionCardPlay : pb::IMessage<PlayerActionCardPlay>
    {
        private static readonly pb::MessageParser<PlayerActionCardPlay> _parser = new pb::MessageParser<PlayerActionCardPlay>(() => new PlayerActionCardPlay());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerActionCardPlay> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[89]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionCardPlay()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionCardPlay(PlayerActionCardPlay other) : this()
        {
            card_ = other.card_ != null ? other.card_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionCardPlay Clone()
        {
            return new PlayerActionCardPlay(this);
        }

        /// <summary>Field number for the "card" field.</summary>
        public const int CardFieldNumber = 1;
        private global::Loom.ZombieBattleground.Protobuf.CardInstance card_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.CardInstance Card
        {
            get { return card_; }
            set
            {
                card_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PlayerActionCardPlay);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerActionCardPlay other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Card, other.Card)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (card_ != null) hash ^= Card.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (card_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Card);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (card_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerActionCardPlay other)
        {
            if (other == null)
            {
                return;
            }
            if (other.card_ != null)
            {
                if (card_ == null)
                {
                    card_ = new global::Loom.ZombieBattleground.Protobuf.CardInstance();
                }
                Card.MergeFrom(other.Card);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (card_ == null)
                            {
                                card_ = new global::Loom.ZombieBattleground.Protobuf.CardInstance();
                            }
                            input.ReadMessage(card_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class PlayerActionCardAttack : pb::IMessage<PlayerActionCardAttack>
    {
        private static readonly pb::MessageParser<PlayerActionCardAttack> _parser = new pb::MessageParser<PlayerActionCardAttack>(() => new PlayerActionCardAttack());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerActionCardAttack> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[90]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionCardAttack()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionCardAttack(PlayerActionCardAttack other) : this()
        {
            attacker_ = other.attacker_ != null ? other.attacker_.Clone() : null;
            affectObjectType_ = other.affectObjectType_;
            target_ = other.target_ != null ? other.target_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionCardAttack Clone()
        {
            return new PlayerActionCardAttack(this);
        }

        /// <summary>Field number for the "attacker" field.</summary>
        public const int AttackerFieldNumber = 1;
        private global::Loom.ZombieBattleground.Protobuf.CardInstance attacker_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.CardInstance Attacker
        {
            get { return attacker_; }
            set
            {
                attacker_ = value;
            }
        }

        /// <summary>Field number for the "affectObjectType" field.</summary>
        public const int AffectObjectTypeFieldNumber = 2;
        private global::Loom.ZombieBattleground.Protobuf.AffectObjectType affectObjectType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.AffectObjectType AffectObjectType
        {
            get { return affectObjectType_; }
            set
            {
                affectObjectType_ = value;
            }
        }

        /// <summary>Field number for the "target" field.</summary>
        public const int TargetFieldNumber = 3;
        private global::Loom.ZombieBattleground.Protobuf.Unit target_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.Unit Target
        {
            get { return target_; }
            set
            {
                target_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PlayerActionCardAttack);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerActionCardAttack other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Attacker, other.Attacker)) return false;
            if (AffectObjectType != other.AffectObjectType) return false;
            if (!object.Equals(Target, other.Target)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (attacker_ != null) hash ^= Attacker.GetHashCode();
            if (AffectObjectType != 0) hash ^= AffectObjectType.GetHashCode();
            if (target_ != null) hash ^= Target.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (attacker_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Attacker);
            }
            if (AffectObjectType != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)AffectObjectType);
            }
            if (target_ != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(Target);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (attacker_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attacker);
            }
            if (AffectObjectType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)AffectObjectType);
            }
            if (target_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerActionCardAttack other)
        {
            if (other == null)
            {
                return;
            }
            if (other.attacker_ != null)
            {
                if (attacker_ == null)
                {
                    attacker_ = new global::Loom.ZombieBattleground.Protobuf.CardInstance();
                }
                Attacker.MergeFrom(other.Attacker);
            }
            if (other.AffectObjectType != 0)
            {
                AffectObjectType = other.AffectObjectType;
            }
            if (other.target_ != null)
            {
                if (target_ == null)
                {
                    target_ = new global::Loom.ZombieBattleground.Protobuf.Unit();
                }
                Target.MergeFrom(other.Target);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (attacker_ == null)
                            {
                                attacker_ = new global::Loom.ZombieBattleground.Protobuf.CardInstance();
                            }
                            input.ReadMessage(attacker_);
                            break;
                        }
                    case 16:
                        {
                            affectObjectType_ = (global::Loom.ZombieBattleground.Protobuf.AffectObjectType)input.ReadEnum();
                            break;
                        }
                    case 26:
                        {
                            if (target_ == null)
                            {
                                target_ = new global::Loom.ZombieBattleground.Protobuf.Unit();
                            }
                            input.ReadMessage(target_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class PlayerActionCardAbilityUsed : pb::IMessage<PlayerActionCardAbilityUsed>
    {
        private static readonly pb::MessageParser<PlayerActionCardAbilityUsed> _parser = new pb::MessageParser<PlayerActionCardAbilityUsed>(() => new PlayerActionCardAbilityUsed());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerActionCardAbilityUsed> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[91]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionCardAbilityUsed()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionCardAbilityUsed(PlayerActionCardAbilityUsed other) : this()
        {
            card_ = other.card_ != null ? other.card_.Clone() : null;
            affectObjectType_ = other.affectObjectType_;
            cardKind_ = other.cardKind_;
            targets_ = other.targets_.Clone();
            abilityType_ = other.abilityType_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionCardAbilityUsed Clone()
        {
            return new PlayerActionCardAbilityUsed(this);
        }

        /// <summary>Field number for the "card" field.</summary>
        public const int CardFieldNumber = 1;
        private global::Loom.ZombieBattleground.Protobuf.CardInstance card_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.CardInstance Card
        {
            get { return card_; }
            set
            {
                card_ = value;
            }
        }

        /// <summary>Field number for the "affectObjectType" field.</summary>
        public const int AffectObjectTypeFieldNumber = 2;
        private global::Loom.ZombieBattleground.Protobuf.AffectObjectType affectObjectType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.AffectObjectType AffectObjectType
        {
            get { return affectObjectType_; }
            set
            {
                affectObjectType_ = value;
            }
        }

        /// <summary>Field number for the "cardKind" field.</summary>
        public const int CardKindFieldNumber = 3;
        private global::Loom.ZombieBattleground.Protobuf.CardKind cardKind_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.CardKind CardKind
        {
            get { return cardKind_; }
            set
            {
                cardKind_ = value;
            }
        }

        /// <summary>Field number for the "targets" field.</summary>
        public const int TargetsFieldNumber = 4;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.Unit> _repeated_targets_codec
            = pb::FieldCodec.ForMessage(34, global::Loom.ZombieBattleground.Protobuf.Unit.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Unit> targets_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Unit>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.Unit> Targets
        {
            get { return targets_; }
        }

        /// <summary>Field number for the "AbilityType" field.</summary>
        public const int AbilityTypeFieldNumber = 5;
        private string abilityType_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AbilityType
        {
            get { return abilityType_; }
            set
            {
                abilityType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PlayerActionCardAbilityUsed);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerActionCardAbilityUsed other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Card, other.Card)) return false;
            if (AffectObjectType != other.AffectObjectType) return false;
            if (CardKind != other.CardKind) return false;
            if (!targets_.Equals(other.targets_)) return false;
            if (AbilityType != other.AbilityType) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (card_ != null) hash ^= Card.GetHashCode();
            if (AffectObjectType != 0) hash ^= AffectObjectType.GetHashCode();
            if (CardKind != 0) hash ^= CardKind.GetHashCode();
            hash ^= targets_.GetHashCode();
            if (AbilityType.Length != 0) hash ^= AbilityType.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (card_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Card);
            }
            if (AffectObjectType != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)AffectObjectType);
            }
            if (CardKind != 0)
            {
                output.WriteRawTag(24);
                output.WriteEnum((int)CardKind);
            }
            targets_.WriteTo(output, _repeated_targets_codec);
            if (AbilityType.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteString(AbilityType);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (card_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
            }
            if (AffectObjectType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)AffectObjectType);
            }
            if (CardKind != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)CardKind);
            }
            size += targets_.CalculateSize(_repeated_targets_codec);
            if (AbilityType.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(AbilityType);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerActionCardAbilityUsed other)
        {
            if (other == null)
            {
                return;
            }
            if (other.card_ != null)
            {
                if (card_ == null)
                {
                    card_ = new global::Loom.ZombieBattleground.Protobuf.CardInstance();
                }
                Card.MergeFrom(other.Card);
            }
            if (other.AffectObjectType != 0)
            {
                AffectObjectType = other.AffectObjectType;
            }
            if (other.CardKind != 0)
            {
                CardKind = other.CardKind;
            }
            targets_.Add(other.targets_);
            if (other.AbilityType.Length != 0)
            {
                AbilityType = other.AbilityType;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (card_ == null)
                            {
                                card_ = new global::Loom.ZombieBattleground.Protobuf.CardInstance();
                            }
                            input.ReadMessage(card_);
                            break;
                        }
                    case 16:
                        {
                            affectObjectType_ = (global::Loom.ZombieBattleground.Protobuf.AffectObjectType)input.ReadEnum();
                            break;
                        }
                    case 24:
                        {
                            cardKind_ = (global::Loom.ZombieBattleground.Protobuf.CardKind)input.ReadEnum();
                            break;
                        }
                    case 34:
                        {
                            targets_.AddEntriesFrom(input, _repeated_targets_codec);
                            break;
                        }
                    case 42:
                        {
                            AbilityType = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class PlayerActionOverlordSkillUsed : pb::IMessage<PlayerActionOverlordSkillUsed>
    {
        private static readonly pb::MessageParser<PlayerActionOverlordSkillUsed> _parser = new pb::MessageParser<PlayerActionOverlordSkillUsed>(() => new PlayerActionOverlordSkillUsed());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerActionOverlordSkillUsed> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[92]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionOverlordSkillUsed()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionOverlordSkillUsed(PlayerActionOverlordSkillUsed other) : this()
        {
            skillId_ = other.skillId_;
            affectObjectType_ = other.affectObjectType_;
            target_ = other.target_ != null ? other.target_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionOverlordSkillUsed Clone()
        {
            return new PlayerActionOverlordSkillUsed(this);
        }

        /// <summary>Field number for the "SkillId" field.</summary>
        public const int SkillIdFieldNumber = 1;
        private long skillId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long SkillId
        {
            get { return skillId_; }
            set
            {
                skillId_ = value;
            }
        }

        /// <summary>Field number for the "affectObjectType" field.</summary>
        public const int AffectObjectTypeFieldNumber = 2;
        private global::Loom.ZombieBattleground.Protobuf.AffectObjectType affectObjectType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.AffectObjectType AffectObjectType
        {
            get { return affectObjectType_; }
            set
            {
                affectObjectType_ = value;
            }
        }

        /// <summary>Field number for the "target" field.</summary>
        public const int TargetFieldNumber = 3;
        private global::Loom.ZombieBattleground.Protobuf.Unit target_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.Unit Target
        {
            get { return target_; }
            set
            {
                target_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PlayerActionOverlordSkillUsed);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerActionOverlordSkillUsed other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (SkillId != other.SkillId) return false;
            if (AffectObjectType != other.AffectObjectType) return false;
            if (!object.Equals(Target, other.Target)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (SkillId != 0L) hash ^= SkillId.GetHashCode();
            if (AffectObjectType != 0) hash ^= AffectObjectType.GetHashCode();
            if (target_ != null) hash ^= Target.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (SkillId != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(SkillId);
            }
            if (AffectObjectType != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)AffectObjectType);
            }
            if (target_ != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(Target);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (SkillId != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(SkillId);
            }
            if (AffectObjectType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)AffectObjectType);
            }
            if (target_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerActionOverlordSkillUsed other)
        {
            if (other == null)
            {
                return;
            }
            if (other.SkillId != 0L)
            {
                SkillId = other.SkillId;
            }
            if (other.AffectObjectType != 0)
            {
                AffectObjectType = other.AffectObjectType;
            }
            if (other.target_ != null)
            {
                if (target_ == null)
                {
                    target_ = new global::Loom.ZombieBattleground.Protobuf.Unit();
                }
                Target.MergeFrom(other.Target);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            SkillId = input.ReadInt64();
                            break;
                        }
                    case 16:
                        {
                            affectObjectType_ = (global::Loom.ZombieBattleground.Protobuf.AffectObjectType)input.ReadEnum();
                            break;
                        }
                    case 26:
                        {
                            if (target_ == null)
                            {
                                target_ = new global::Loom.ZombieBattleground.Protobuf.Unit();
                            }
                            input.ReadMessage(target_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class PlayerActionDrawCard : pb::IMessage<PlayerActionDrawCard>
    {
        private static readonly pb::MessageParser<PlayerActionDrawCard> _parser = new pb::MessageParser<PlayerActionDrawCard>(() => new PlayerActionDrawCard());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerActionDrawCard> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[93]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionDrawCard()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionDrawCard(PlayerActionDrawCard other) : this()
        {
            cardInstance_ = other.cardInstance_ != null ? other.cardInstance_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionDrawCard Clone()
        {
            return new PlayerActionDrawCard(this);
        }

        /// <summary>Field number for the "cardInstance" field.</summary>
        public const int CardInstanceFieldNumber = 2;
        private global::Loom.ZombieBattleground.Protobuf.CardInstance cardInstance_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.CardInstance CardInstance
        {
            get { return cardInstance_; }
            set
            {
                cardInstance_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PlayerActionDrawCard);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerActionDrawCard other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(CardInstance, other.CardInstance)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (cardInstance_ != null) hash ^= CardInstance.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (cardInstance_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(CardInstance);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (cardInstance_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardInstance);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerActionDrawCard other)
        {
            if (other == null)
            {
                return;
            }
            if (other.cardInstance_ != null)
            {
                if (cardInstance_ == null)
                {
                    cardInstance_ = new global::Loom.ZombieBattleground.Protobuf.CardInstance();
                }
                CardInstance.MergeFrom(other.CardInstance);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 18:
                        {
                            if (cardInstance_ == null)
                            {
                                cardInstance_ = new global::Loom.ZombieBattleground.Protobuf.CardInstance();
                            }
                            input.ReadMessage(cardInstance_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class PlayerActionEndTurn : pb::IMessage<PlayerActionEndTurn>
    {
        private static readonly pb::MessageParser<PlayerActionEndTurn> _parser = new pb::MessageParser<PlayerActionEndTurn>(() => new PlayerActionEndTurn());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerActionEndTurn> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[94]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionEndTurn()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionEndTurn(PlayerActionEndTurn other) : this()
        {
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionEndTurn Clone()
        {
            return new PlayerActionEndTurn(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PlayerActionEndTurn);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerActionEndTurn other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerActionEndTurn other)
        {
            if (other == null)
            {
                return;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                }
            }
        }

    }

    public sealed partial class PlayerActionMulligan : pb::IMessage<PlayerActionMulligan>
    {
        private static readonly pb::MessageParser<PlayerActionMulligan> _parser = new pb::MessageParser<PlayerActionMulligan>(() => new PlayerActionMulligan());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerActionMulligan> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[95]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionMulligan()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionMulligan(PlayerActionMulligan other) : this()
        {
            mulliganedCards_ = other.mulliganedCards_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionMulligan Clone()
        {
            return new PlayerActionMulligan(this);
        }

        /// <summary>Field number for the "mulliganedCards" field.</summary>
        public const int MulliganedCardsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.CardInstance> _repeated_mulliganedCards_codec
            = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.CardInstance.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance> mulliganedCards_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.CardInstance> MulliganedCards
        {
            get { return mulliganedCards_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PlayerActionMulligan);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerActionMulligan other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!mulliganedCards_.Equals(other.mulliganedCards_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= mulliganedCards_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            mulliganedCards_.WriteTo(output, _repeated_mulliganedCards_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += mulliganedCards_.CalculateSize(_repeated_mulliganedCards_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerActionMulligan other)
        {
            if (other == null)
            {
                return;
            }
            mulliganedCards_.Add(other.mulliganedCards_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            mulliganedCards_.AddEntriesFrom(input, _repeated_mulliganedCards_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class PlayerActionOutcome : pb::IMessage<PlayerActionOutcome>
    {
        private static readonly pb::MessageParser<PlayerActionOutcome> _parser = new pb::MessageParser<PlayerActionOutcome>(() => new PlayerActionOutcome());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerActionOutcome> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[96]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionOutcome()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionOutcome(PlayerActionOutcome other) : this()
        {
            playerId_ = other.playerId_;
            gameState_ = other.gameState_ != null ? other.gameState_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerActionOutcome Clone()
        {
            return new PlayerActionOutcome(this);
        }

        /// <summary>Field number for the "playerId" field.</summary>
        public const int PlayerIdFieldNumber = 1;
        private string playerId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PlayerId
        {
            get { return playerId_; }
            set
            {
                playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "gameState" field.</summary>
        public const int GameStateFieldNumber = 2;
        private global::Loom.ZombieBattleground.Protobuf.GameState gameState_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Loom.ZombieBattleground.Protobuf.GameState GameState
        {
            get { return gameState_; }
            set
            {
                gameState_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PlayerActionOutcome);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerActionOutcome other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (PlayerId != other.PlayerId) return false;
            if (!object.Equals(GameState, other.GameState)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
            if (gameState_ != null) hash ^= GameState.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (PlayerId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(PlayerId);
            }
            if (gameState_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(GameState);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (PlayerId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
            }
            if (gameState_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameState);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerActionOutcome other)
        {
            if (other == null)
            {
                return;
            }
            if (other.PlayerId.Length != 0)
            {
                PlayerId = other.PlayerId;
            }
            if (other.gameState_ != null)
            {
                if (gameState_ == null)
                {
                    gameState_ = new global::Loom.ZombieBattleground.Protobuf.GameState();
                }
                GameState.MergeFrom(other.GameState);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            PlayerId = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            if (gameState_ == null)
                            {
                                gameState_ = new global::Loom.ZombieBattleground.Protobuf.GameState();
                            }
                            input.ReadMessage(gameState_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class StartGameAction : pb::IMessage<StartGameAction>
    {
        private static readonly pb::MessageParser<StartGameAction> _parser = new pb::MessageParser<StartGameAction>(() => new StartGameAction());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StartGameAction> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[97]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StartGameAction()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StartGameAction(StartGameAction other) : this()
        {
            playerStates_ = other.playerStates_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StartGameAction Clone()
        {
            return new StartGameAction(this);
        }

        /// <summary>Field number for the "playerStates" field.</summary>
        public const int PlayerStatesFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Loom.ZombieBattleground.Protobuf.PlayerState> _repeated_playerStates_codec
            = pb::FieldCodec.ForMessage(10, global::Loom.ZombieBattleground.Protobuf.PlayerState.Parser);
        private readonly pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerState> playerStates_ = new pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerState>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Loom.ZombieBattleground.Protobuf.PlayerState> PlayerStates
        {
            get { return playerStates_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as StartGameAction);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StartGameAction other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!playerStates_.Equals(other.playerStates_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= playerStates_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            playerStates_.WriteTo(output, _repeated_playerStates_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += playerStates_.CalculateSize(_repeated_playerStates_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StartGameAction other)
        {
            if (other == null)
            {
                return;
            }
            playerStates_.Add(other.playerStates_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            playerStates_.AddEntriesFrom(input, _repeated_playerStates_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Unit : pb::IMessage<Unit>
    {
        private static readonly pb::MessageParser<Unit> _parser = new pb::MessageParser<Unit>(() => new Unit());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Unit> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Loom.ZombieBattleground.Protobuf.ZbReflection.Descriptor.MessageTypes[98]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Unit()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Unit(Unit other) : this()
        {
            instanceId_ = other.instanceId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Unit Clone()
        {
            return new Unit(this);
        }

        /// <summary>Field number for the "instanceId" field.</summary>
        public const int InstanceIdFieldNumber = 1;
        private int instanceId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int InstanceId
        {
            get { return instanceId_; }
            set
            {
                instanceId_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Unit);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Unit other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (InstanceId != other.InstanceId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (InstanceId != 0) hash ^= InstanceId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (InstanceId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(InstanceId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (InstanceId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(InstanceId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Unit other)
        {
            if (other == null)
            {
                return;
            }
            if (other.InstanceId != 0)
            {
                InstanceId = other.InstanceId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            InstanceId = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    #endregion

}

#endregion Designer generated code
